cscope 15 $HOME/arm/guide               0001354696
	@/home/jkr555/arm/guide/ch05_C/ch05test.c

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~<°rög.h
>

51 
	~"ch05ã°.h
"

53 
	$maö
()

55 
îr‹s
=0;

57 
	`¥ötf
("TestingÉxamples for Chapter 5\n");

58 
	`TEST_CHECKSUM
(
checksum_v1
, 64, 4);

59 
	`TEST_CHECKSUM
(
checksum_v2
, 64, 4);

60 
	`TEST_CHECKSUM
(
checksum_v3
, 64, 2);

61 
	`TEST_CHECKSUM
(
checksum_v4
, 64, 2);

62 
	`TEST_CHECKSUM
(
checksum_v5
, 64, 4);

63 
	`TEST_CHECKSUM
(
checksum_v6
, 64, 4);

64 
	`TEST_CHECKSUM
(
checksum_v7
, 63, 4);

65 
	`TEST_CHECKSUM
(
checksum_v8
, 63, 4);

66 
	`TEST_CHECKSUM
(
checksum_v9
, 64, 4);

67 
	`TEST_CHECKSUM
(
checksum_v10
, 0, 4);

68 
	`TEST_CHECKSUM
(
checksum_v10
, 1, 4);

69 
	`TEST_CHECKSUM
(
checksum_v10
, 2, 4);

70 
	`TEST_CHECKSUM
(
checksum_v10
, 3, 4);

71 
	`TEST_CHECKSUM
(
checksum_v10
,64, 4);

72 
	`TEST_CHECKSUM
(
checksum_v10
,65, 4);

73 
	`TEST_QUEUE
(
queue_byãs_v1
, 1);

74 
	`TEST_QUEUE
(
queue_byãs_v2
, 2);

75 
	`TEST_TOHEX
(
uöt_to_hex
);

76 
	`TEST_GETXY
(
gëxy_v1
);

77 
	`TEST_GETXY
(
gëxy_v2
);

78 
	`TEST_SCALE
(
sˇÀ
);

79 
	`TEST_READINT
(
ªadöt_lôée
,0);

80 
	`TEST_READINT
(
ªadöt_big
,1);

81 
	`TEST_READSAMP
(
ªad_ßm∂es
);

82 
	`TEST_SATCOR
(
ßt_c‹ªœã_v1
);

83 
	`TEST_SATCOR
(
ßt_c‹ªœã_v2
);

84 #ifde‡
__TARGET_FEATURE_DSPMUL


85 
	`TEST_SATCOR
(
ßt_c‹ªœã_v3
);

87 
	`TEST_TOLOWER
(
°r_tﬁowî
);

88 
	`TEST_DIV
(
udiv_by_c⁄°
,0);

89 
	`TEST_DIV
(
sdiv_by_c⁄°
,1);

90 #ifde‡
__ARMCC_VERSION


92 #ifde‡
__BIG_ENDIAN


93 
	`TEST_READINT
(
ªadöt
,1);

95 
	`TEST_READINT
(
ªadöt
,0);

97 
	`TEST_CHECKSUM
(
checksum_v1_s
, 64, 4);

98 
	`TEST_CHECKSUM
(
checksum_v2_s
, 64, 4);

99 
	`TEST_CHECKSUM
(
checksum_v3_s
, 64, 2);

100 
	`TEST_CHECKSUM
(
checksum_v4_s
, 64, 2);

101 
	`TEST_CHECKSUM
(
checksum_v5_s
, 64, 4);

102 
	`TEST_CHECKSUM
(
checksum_v6_s
, 64, 4);

103 
	`TEST_CHECKSUM
(
checksum_v7_s
, 63, 4);

104 
	`TEST_CHECKSUM
(
checksum_v8_s
, 63, 4);

105 
	`TEST_CHECKSUM
(
checksum_v9_s
, 64, 4);

106 
	`TEST_CHECKSUM
(
checksum_v10_s
, 0, 4);

107 
	`TEST_CHECKSUM
(
checksum_v10_s
, 1, 4);

108 
	`TEST_CHECKSUM
(
checksum_v10_s
, 2, 4);

109 
	`TEST_CHECKSUM
(
checksum_v10_s
, 3, 4);

110 
	`TEST_CHECKSUM
(
checksum_v10_s
,64, 4);

111 
	`TEST_CHECKSUM
(
checksum_v10_s
,65, 4);

112 
	`TEST_QUEUE
(
queue_byãs_v1_s
, 3);

113 
	`TEST_QUEUE
(
queue_byãs_v2_s
, 4);

114 
	`TEST_TOHEX
(
uöt_to_hex_s
);

115 
	`TEST_GETXY
(
gëxy_v1_s
);

116 
	`TEST_GETXY
(
gëxy_v2_s
);

117 
	`TEST_SCALE
(
sˇÀ_s
);

118 
	`TEST_SATCOR
(
ßt_c‹ªœã_v1_s
);

119 
	`TEST_SATCOR
(
ßt_c‹ªœã_v2_s
);

120 
	`TEST_SATCOR
(
ßt_c‹ªœã_v3_s
);

121 
	`TEST_TOLOWER
(
°r_tﬁowî_s
);

124 i‡(
îr‹s
)

126 
	`¥ötf
("Te° föished wôh %dÉº‹s.\n", 
îr‹s
);

131 
	`¥ötf
("TestÖassed.\n");

134 
	}
}

137 
	$add_v3
(
a
, 
b
)

139  ()(
a
+
b
);

140 
	}
}

142 
	$˛ù1
(
x
Ë{  x; 
	}
}

143 
	$do°ageA
(Ë{
	}
}

144 
	$do°ageB
(Ë{
	}
}

145 
	$do°ageC
(Ë{
	}
}

146 *
	$gë_√xt_∑ckë
(*
N
)

148 
d©a
[2]={3,5};

149 *
N
=2;

150  
d©a
;

151 
	}
}

154 
	$ã°_checksum
(

155 *
«me
,

156 
‚_checksum
 *
‚
,

157 
N
,

158 
size


161 
sum
, 
ex≥˘ed
, 
i
, 
îr‹s
=0;

162 *
d©a
;

164 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

166 
d©a
 = (*)
	`mÆloc
(
N
*
size
+1);

167 i‡(!
d©a
)

172 
i
=0; i<
N
; i++)

174 
size
)

176 2: ((*)
d©a
)[
i
]=()(i+1); ;

177 4: ((*)
d©a
)[
i
]=i+1; ;

181 
sum
 = (*
‚
)(
d©a
, 
N
);

182 
ex≥˘ed
 = 
N
*(N+1)/2;

184 i‡(
sum
!=
ex≥˘ed
)

186 
îr‹s
++;

187 
	`¥ötf
("Mism©ch: %08x %08x\n", 
ex≥˘ed
, 
sum
);

190  
îr‹s
;

191 
	}
}

193 
	#Q_size
 5

	)

195 
	$ã°_queue
(

196 *
«me
,

197 
vîsi⁄


200 
îr‹s
=0;

201 
Q_°¨t
[
Q_size
+1];

202 *
Q_íd
 = 
Q_°¨t
+
Q_size
;

203 *
Q_±r
 = 
Q_°¨t
;

204 *
d©a
[2] = { "ABCDEF", "GHI" };

205 *
ªsu…
 = "FGHIE";

206 
Queue
 
Q
;

207 
i
;

209 
Q
.
Q_°¨t
 = Q_start;

210 
Q
.
Q_íd
 = Q_end;

211 
Q
.
Q_±r
 = Q_ptr;

212 *
Q_íd
 = 0;

214 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

216 
i
=0; i<2; i++)

218 
Àn
 = 
	`°æí
(
d©a
[
i
]);

220 
vîsi⁄
)

223 
Q_±r
 = 
	`queue_byãs_v1
(
Q_°¨t
, 
Q_íd
, Q_±r, 
d©a
[
i
], 
Àn
);

227 
	`queue_byãs_v2
(&
Q
, 
d©a
[
i
], 
Àn
);

230 #ifde‡
__ARMCC_VERSION


232 
Q_±r
 = 
	`queue_byãs_v1_s
(
Q_°¨t
, 
Q_íd
, Q_±r, 
d©a
[
i
], 
Àn
);

236 
	`queue_byãs_v2_s
(&
Q
, 
d©a
[
i
], 
Àn
);

240 
	`¥ötf
("Illegal queue function\n");

241 
	`exô
(1);

246 i‡(
	`°∫cmp
(
Q_°¨t
, 
ªsu…
, 
Q_size
))

248 
îr‹s
++;

249 
	`¥ötf
("Mism©ch: %†%s\n", 
ªsu…
, 
Q_°¨t
);

252  
îr‹s
;

253 
	}
}

255 
	$ã°_tohex
(

256 *
«me
,

257 
‚_tohex
 *
‚


260 
i
, 
îr‹s
=0;

261 °ru˘ { 
i
; *
s
; } 
ã°s
[4] = {

267 
°r
[9];

269 
°r
[8]=0;

270 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

272 
i
=0; i<4; i++)

274 (*
‚
)(
°r
, 
ã°s
[
i
].i);

275 i‡(
	`°rcmp
(
°r
, 
ã°s
[
i
].
s
))

277 
îr‹s
++;

278 
	`¥ötf
("Mism©ch: %†%s\n", 
ã°s
[
i
].
s
, 
°r
);

282  
îr‹s
;

283 
	}
}

285 
	$ã°_gëxy
(

286 *
«me
,

287 
‚_gëxy
 *
‚


290 
x
,
y
,
îr‹s
=0;

291 
b∂
=51;

293 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

294 
x
=0; x<5; x++)

296 
y
=0; y<5; y++)

298 
poöt
 
p
 = (*
‚
)(
x
 + 
y
*
b∂
, bpl);

300 i‡(
p
.
x
!=x ||Ö.
y
!=y)

302 
îr‹s
++;

303 
	`¥ötf
("Mism©ch: x %d %d y %x %d\n", 
x
, 
p
.x, 
y
,Ö.y);

308  
îr‹s
;

309 
	}
}

311 
	#SCALE_SIZE
 5

	)

313 
	$ã°_sˇÀ
(

314 *
«me
,

315 
‚_sˇÀ
 *
‚


318 
i
,
s
,
îr‹s
=0;

319 
§c
[
SCALE_SIZE
];

320 
de°
[
SCALE_SIZE
];

322 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

323 
s
=1; s<10; s++)

325 
i
=0; i<
SCALE_SIZE
; i++)

327 
§c
[
i
] = 
	`ønd
();

330 (*
‚
)(
de°
, 
§c
, 
s
, 
SCALE_SIZE
);

332 
i
=0; i<
SCALE_SIZE
; i++)

334 
r
=
§c
[
i
]/
s
;

336 i‡(
r
!=
de°
[
i
])

338 
îr‹s
++;

339 
	`¥ötf
("Mism©ch s=%d [%d]: %d %d\n", 
s
, 
i
, 
r
, 
de°
[i]);

344  
îr‹s
;

345 
	}
}

347 
	$ã°_tﬁowî
(

348 *
«me
,

349 
‚_tﬁowî
 *
‚


352 *
ö
 = "aBc!Z[";

353 *
ªf
 = "abc!z[";

354 
out
[10];

355 
îr‹s
=0;

357 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

359 (*
‚
)(
out
, 
ö
);

361 i‡(
	`°rcmp
(
ªf
, 
out
))

363 
îr‹s
++;

364 
	`¥ötf
("Mism©ch: %†%s\n", 
ªf
, 
out
);

367  
îr‹s
;

368 
	}
}

371 
	gtx_0
[]={ -1, 2, 3, 4 };

372 
	gty_0
[]={ 2, -3, 4, 7 };

374 
	gtx_1
[]={ -0x8000, -0x8000 };

375 
	gty_1
[]={ 0x3000, -0x8000 };

377 
	gtx_2
[]={ 0x7000, 0x6000 };

378 
	gty_2
[]={ 0x7000, 0x6000 };

380 
	gtx_3
[]={ -0x7000, 0x6000 };

381 
	gty_3
[]={ 0x7000, -0x6000 };

385 
	m™s
;

386 *
	mx
;

387 *
	my
;

388 
	mN
;

389 } 
	gßtc‹_ã°s
[] = {

390 { 32*2, 
tx_0
, 
ty_0
, 4 },

391 { 0x4FFFFFFF, 
tx_1
, 
ty_1
, 2 },

392 { 0x7FFFFFFF, 
tx_2
, 
ty_2
, 2 },

393 { 0x80000000, 
tx_3
, 
ty_3
, 2 }

396 
	$ã°_ßtc‹
(

397 *
«me
,

398 
‚_ßtc‹
 *
‚


401 
îr‹s
=0;

402 
i
;

404 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

406 
i
=0; i<4; i++)

408 
acc
, 
ªf
;

410 
acc
 = (*
‚
)(
ßtc‹_ã°s
[
i
].
x
, s©c‹_ã°s[i].
y
, s©c‹_ã°s[i].
N
);

411 
ªf
 = 
ßtc‹_ã°s
[
i
].
™s
;

413 i‡(
ªf
!=
acc
)

415 
îr‹s
++;

416 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
i
, 
ªf
, 
acc
);

420  
îr‹s
;

421 
	}
}

423 
	$ã°_ªadöt
(

424 *
«me
,

425 
‚_ªadöt
 *
‚
,

426 
big


429 
îr‹s
=0;

430 
ªf
, 
vÆ
;

431 
d©a
[]={0,1,2,3,4,5,6,7};

433 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

434 i‡(
big
)

436 
ªf
 = 0x03040506;

440 
ªf
 = 0x06050403;

442 
vÆ
 = (*
‚
)(
d©a
+3);

444 i‡(
ªf
!=
vÆ
)

446 
îr‹s
++;

447 
	`¥ötf
("Mism©ch: %08x %08x\n", 
ªf
, 
vÆ
);

450  
îr‹s
;

451 
	}
}

453 
	$ã°_ªadßmp
(

454 *
«me
,

455 
‚_ªadßmp
 *
‚


458 
îr‹s
=0;

463 
d©a
[]={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};

464 
ªf0
[]={ 0x0302, 0x0504, 0x0706 };

465 
ªf1
[]={ 0x0403, 0x0605, 0x0807 };

466 
out
[4];

467 
i
;

469 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

470 (*
‚
)(
out
, 
d©a
+2, 3);

471 
i
=0; i<3; i++)

473 i‡(
out
[
i
]!=
ªf0
[i])

475 
îr‹s
++;

476 
	`¥ötf
("Mism©ch0[%d]: %08x %08x\n", 
i
, 
ªf0
[i], 
out
[i]);

480 (*
‚
)(
out
, 
d©a
+3, 3);

481 
i
=0; i<3; i++)

483 i‡(
out
[
i
]!=
ªf1
[i])

485 
îr‹s
++;

486 
	`¥ötf
("Mism©ch1[%d]: %08x %08x\n", 
i
, 
ªf1
[i], 
out
[i]);

490  
îr‹s
;

491 
	}
}

497 
	$gí_s32
(
£ed
)

499 
n
;

501 
£ed
 = ~seed;

502 i‡(
£ed
<0)  seed;

503 i‡(
£ed
<8)  (seed+1);

504 
n
 = 
£ed
 + (seed>>1);

505 i‡(
n
<0)

507 
n
 = 0x7FFFFFFFul;

509 i‡(
n
>
£ed
) Ç;

511 
	}
}

513 
	$ã°_div
(

514 *
«me
,

515 
‚_div
 *
‚
,

516 
sign


519 
d
, 
îr‹s
=0;

521 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

523 
d
=
	`gí_s32
(0); d!=0; d=gen_s32(d))

525 
n
=0;

526 #i‡
VERBOSE


527 
	`¥ötf
("d=%08x\n", 
d
);

532 
qr
, 
q
;

534 i‡(
sign
)

536 
qr
 = 
n
/
d
;

540 
qr
 = ()(()
n
/()
d
);

542 
q
 = (*
‚
)(
n
,
d
);

544 i‡(
qr
!=
q
)

546 
îr‹s
++;

547 
	`¥ötf
("Mism©ch: %08x/%08x: %08x %08x\n", 
n
, 
d
, 
qr
, 
q
);

549 
n
=
	`gí_s32
(n);

550 } 
n
);

553  
îr‹s
;

554 
	}
}

	@/home/jkr555/arm/guide/ch05_C/ch05test.h

48 #i‚de‡
CH05TEST_H


49 
	#CH05TEST_H


	)

52 #ifde‡
__GNUC__


53 
	#__∑cked


	)

54 
	#__puª


	)

55 
	#__ölöe
 
ölöe


	)

59 
	#VERBOSE
 0

	)

62 sig√d 
	töt8
;

63 
	töt16
;

64 
	töt32
;

65 
	tuöt32
;

66 sig√d 
	tsöt32
;

67 
	töt64
;

68 
	tuöt64
;

69 sig√d 
	tsöt64
;

70 
	tªÆ
;

73 
	t‚_checksum
(*
	td©a
, 
	tN
);

74 
	t‚_tohex
(*
	tout
, 
	tö
);

75 
	t‚_sˇÀ
(

76 *
	tde°
,

77 *
	t§c
,

78 
	tsˇÀ
,

79 
	tÀngth
);

80 
	t‚_tﬁowî
(*
	tout
, *
	tö
);

81 
	t‚_ßtc‹
(*
	tx
, *
	ty
, 
	tN
);

82 
	t‚_ªadöt
(*
	td©a
);

83 
	t‚_ªadßmp
(*
	tout
, *
	tö
, 
	tN
);

84 
	t‚_div
(
	tn
, 
	td
);

87 
mem˛r
(*
d©a
, 
N
);

90 
ã°ch¨
(*
p
, 
a
);

91 
ã°sh‹t
(*
p
, 
a
);

92 
ã°l⁄g
(*
p
, 
a
);

93 
ã°l⁄gl⁄g
(*
p
, 
a
);

94 
checksum_v1
(*
d©a
);

95 
checksum_v1_s
(*
d©a
);

96 
checksum_v2
(*
d©a
);

97 
checksum_v2_s
(*
d©a
);

98 
checksum_v3
(*
d©a
);

99 
checksum_v3_s
(*
d©a
);

100 
checksum_v4
(*
d©a
);

101 
checksum_v4_s
(*
d©a
);

102 
add_v1
(
a
, 
b
);

103 
add_v2
(
a
, 
b
);

104 
add_v3
(
a
, 
b
);

105 
avîage_v1
(
a
, 
b
);

106 
avîage_v2
(
a
, 
b
);

109 
checksum_v5
(*
d©a
);

110 
checksum_v5_s
(*
d©a
);

111 
checksum_v6
(*
d©a
);

112 
checksum_v6_s
(*
d©a
);

113 
checksum_v7
(*
d©a
, 
N
);

114 
checksum_v7_s
(*
d©a
, 
N
);

115 
checksum_v8
(*
d©a
, 
N
);

116 
checksum_v8_s
(*
d©a
, 
N
);

117 
checksum_v9
(*
d©a
, 
N
);

118 
checksum_v9_s
(*
d©a
, 
N
);

119 
checksum_v10
(*
d©a
, 
N
);

120 
checksum_v10_s
(*
d©a
, 
N
);

125 *
queue_byãs_v1
(

126 *
Q_°¨t
,

127 *
Q_íd
,

128 *
Q_±r
,

129 *
d©a
,

130 
N
);

131 *
queue_byãs_v1_s
(

132 *
Q_°¨t
,

133 *
Q_íd
,

134 *
Q_±r
,

135 *
d©a
,

136 
N
);

139 *
	mQ_°¨t
;

140 *
	mQ_íd
;

141 *
	mQ_±r
;

142 } 
	tQueue
;

144 
queue_byãs_v2
(
Queue
 *
queue
, *
d©a
, 
N
);

145 
queue_byãs_v2_s
(
Queue
 *
queue
, *
d©a
, 
N
);

147 
nybbÀ_to_hex
(
ö
);

148 
uöt_to_hex
(*
out
, 
ö
);

149 
uöt_to_hex_s
(*
out
, 
ö
);

152 
timîs_v1
(*
timî1
, *
timî2
, *
°ï
);

153 °ru˘ { 
	m°ï
; } 
	tSèã
;

154 °ru˘ { 
	mtimî1
, 
	mtimî2
; } 
	tTimîs
;

155 
timîs_v2
(
Sèã
 *
°©e
, 
Timîs
 *
timîs
);

156 
timîs_v3
(
Sèã
 *
°©e
, 
Timîs
 *
timîs
);

157 *
gë_√xt_∑ckë
(*
N
);

158 
checksum_√xt_∑ckë
();

159 
˘ﬁowî
(*
c
);

160 
˛ù1
();

161 
öc1
(
sum
, *
°ï
);

166 
	ma
;

167 
	mb
;

168 
	mc
;

169 
	md
;

171 
	t°ru˘_1
;

175 
	ma
;

176 
	mc
;

177 
	md
;

178 
	mb
;

180 
	t°ru˘_2
;

183 
__∑cked
 struct {

184 
	ma
;

185 
	mb
;

186 
	mc
;

187 
	md
;

189 
	t°ru˘_3
;

192 
	mFALSE
,

193 
	mTRUE


194 } 
	tBoﬁ
;

198 
do°ageA
();

199 
do°ageB
();

200 
do°ageC
();

203 
	m°ageA
 : 1;

204 
	m°ageB
 : 1;

205 
	m°ageC
 : 1;

206 } 
	tSèges_v1
;

208 
do°ages_v1
(
Sèges_v1
 *
°ages
);

210 
	tSèges_v2
;

211 
	#STAGEA
 (1ul<<0)

	)

212 
	#STAGEB
 (1ul<<1)

	)

213 
	#STAGEC
 (1ul<<2)

	)

215 
do°ages_v2
(
Sèges_v2
 *
°ages2
);

219 
ªadöt
(
__∑cked
 *
d©a
);

220 
ªadöt_lôée
(*
d©a
);

221 
ªadöt_big
(*
d©a
);

222 
ªad_ßm∂es
(*
out
, *
ö
, 
N
);

227 
	mx
;

228 
	my
;

229 } 
	tpoöt
;

231 
poöt
 
	t‚_gëxy
(
	toff£t
, 
	tbyãs_≥r_löe
);

232 
poöt
 
gëxy_v1
(
off£t
, 
byãs_≥r_löe
);

233 
poöt
 
gëxy_v1_s
(
off£t
, 
byãs_≥r_löe
);

234 
poöt
 
gëxy_v2
(
off£t
, 
byãs_≥r_löe
);

235 
poöt
 
gëxy_v2_s
(
off£t
, 
byãs_≥r_löe
);

236 
sˇÀ
(*
de°
, *
§c
, sˇÀ, 
Àngth
);

237 
sˇÀ_s
(*
de°
, *
§c
, 
sˇÀ
, 
Àngth
);

238 
udiv_by_c⁄°
(
n
, 
d
);

239 
sdiv_by_c⁄°
(
n
, 
d
);

243 
‚_ßtc‹
 
	gßt_c‹ªœã_v1
;

244 
‚_ßtc‹
 
	gßt_c‹ªœã_v2
;

245 
‚_ßtc‹
 
	gßt_c‹ªœã_v3
;

246 
‚_ßtc‹
 
	gßt_c‹ªœã_v1_s
;

247 
‚_ßtc‹
 
	gßt_c‹ªœã_v2_s
;

248 
‚_ßtc‹
 
	gßt_c‹ªœã_v3_s
;

250 
Êush_Iˇche
();

251 
°r_tﬁowî
(*
out
, *
ö
);

252 
°r_tﬁowî_s
(*
out
, *
ö
);

257 
ã°_checksum
(

258 *
«me
,

259 
‚_checksum
 *
‚
,

260 
N
,

261 
size


264 
	#TEST_CHECKSUM
(
«me
, 
N
, 
size
Ë
îr‹s
 +
	`ã°_checksum
(#«me, (
‚_checksum
*)(&«me), N, size);

	)

267 
ã°_queue
(

268 *
«me
,

269 
vîsi⁄


272 
	#TEST_QUEUE
(
«me
, 
vî
Ë
îr‹s
 +
	`ã°_queue
(#«me, vî);

	)

275 
ã°_tohex
(

276 *
«me
,

277 
‚_tohex
 *
‚


280 
	#TEST_TOHEX
(
«me
Ë
îr‹s
 +
	`ã°_tohex
(#«me, &«me);

	)

283 
ã°_gëxy
(

284 *
«me
,

285 
‚_gëxy
 *
‚


288 
	#TEST_GETXY
(
«me
Ë
îr‹s
 +
	`ã°_gëxy
(#«me, &«me);

	)

291 
ã°_sˇÀ
(

292 *
«me
,

293 
‚_sˇÀ
 *
‚


296 
	#TEST_SCALE
(
«me
Ë
îr‹s
 +
	`ã°_sˇÀ
(#«me, &«me);

	)

299 
ã°_tﬁowî
(

300 *
«me
,

301 
‚_tﬁowî
 *
‚


304 
	#TEST_TOLOWER
(
«me
Ë
îr‹s
 +
	`ã°_tﬁowî
(#«me, &«me);

	)

307 
ã°_ßtc‹
(

308 *
«me
,

309 
‚_ßtc‹
 *
‚


312 
	#TEST_SATCOR
(
«me
Ë
îr‹s
 +
	`ã°_ßtc‹
(#«me, &«me);

	)

315 
ã°_ªadöt
(

316 *
«me
,

317 
‚_ªadöt
 *
‚
,

318 
big


321 
	#TEST_READINT
(
«me
, 
big
Ë
îr‹s
 +
	`ã°_ªadöt
(#«me, (
‚_ªadöt
*)&«me, big);

	)

324 
ã°_ªadßmp
(

325 *
«me
,

326 
‚_ªadßmp
 *
‚


329 
	#TEST_READSAMP
(
«me
Ë
îr‹s
 +
	`ã°_ªadßmp
(#«me, &«me);

	)

332 
ã°_div
(

333 *
«me
,

334 
‚_div
 *
‚
,

335 
sign


338 
	#TEST_DIV
(
«me
, 
sign
Ë
îr‹s
 +
	`ã°_div
(#«me, (
‚_div
*)&«me, sign);

	)

	@/home/jkr555/arm/guide/ch05_C/test.c

48 
	~"ch05ã°.h
"

53 
	$mem˛r
(*
d©a
, 
N
)

55  ; 
N
>0; N--)

57 *
d©a
=0;

58 
d©a
++;

60 
	}
}

65 
	$ã°ch¨
(*
p
, 
a
)

67  *
p
 + 
a
;

68 
	}
}

70 
	$ã°sh‹t
(*
p
, 
a
)

72  *
p
 + 
a
;

73 
	}
}

75 
	$ã°l⁄g
(*
p
, 
a
)

77  *
p
 + 
a
;

78 
	}
}

80 
	$ã°l⁄gl⁄g
(*
p
, 
a
)

82  *
p
 + 
a
;

83 
	}
}

89 
	$checksum_v1
(*
d©a
)

91 
i
;

92 
sum
=0;

94 
i
=0; i<64; i++)

96 
sum
 +
d©a
[
i
];

98  
sum
;

99 
	}
}

102 
	$checksum_v2
(*
d©a
)

104 
i
;

105 
sum
=0;

107 
i
=0; i<64; i++)

109 
sum
 +
d©a
[
i
];

111  
sum
;

112 
	}
}

115 
	$checksum_v3
(*
d©a
)

117 
i
;

118 
sum
=0;

120 
i
=0; i<64; i++)

122 
sum
 = ()(sum + 
d©a
[
i
]);

124  
sum
;

125 
	}
}

129 
	$checksum_v4
(*
d©a
)

131 
i
;

132 
sum
=0;

134 
i
=0; i<64; i++)

136 
sum
 +*(
d©a
++);

138  ()
sum
;

139 
	}
}

141 
	$add_v1
(
a
, 
b
)

143  ()(
a
 + (
b
>>1));

144 
	}
}

146 
	$add_v2
(
a
, 
b
)

148  
	`add_v3
(()
a
,()
b
);

149 
	}
}

153 
	$avîage_v1
(
a
, 
b
)

155  (
a
+
b
)/2;

156 
	}
}

158 
	$avîage_v2
(
a
, 
b
)

160  (
a
+
b
)/2;

161 
	}
}

165 
	$checksum_v5
(*
d©a
)

167 
i
;

168 
sum
=0;

170 
i
=0; i<64; i++)

172 
sum
 +*(
d©a
++);

174  
sum
;

175 
	}
}

179 
	$checksum_v6
(*
d©a
)

181 
i
;

182 
sum
=0;

184 
i
=64; i!=0; i--)

186 
sum
 +*(
d©a
++);

188  
sum
;

189 
	}
}

192 
	$checksum_v7
(*
d©a
, 
N
)

194 
sum
=0;

196  ; 
N
!=0; N--)

198 
sum
 +*(
d©a
++);

200  
sum
;

201 
	}
}

205 
	$checksum_v8
(*
d©a
, 
N
)

207 
sum
=0;

211 
sum
 +*(
d©a
++);

212 }  --
N
!=0);

213  
sum
;

214 
	}
}

218 
	$checksum_v9
(*
d©a
, 
N
)

220 
sum
=0;

224 
sum
 +*(
d©a
++);

225 
sum
 +*(
d©a
++);

226 
sum
 +*(
d©a
++);

227 
sum
 +*(
d©a
++);

228 
N
-=4;

229 }  
N
!=0);

230  
sum
;

231 
	}
}

235 
	$checksum_v10
(*
d©a
, 
N
)

237 
i
;

238 
sum
=0;

240 
i
=
N
/4; i!=0; i--)

242 
sum
 +*(
d©a
++);

243 
sum
 +*(
d©a
++);

244 
sum
 +*(
d©a
++);

245 
sum
 +*(
d©a
++);

247 
i
=
N
&3; i!=0; i--)

249 
sum
 +*(
d©a
++);

251  
sum
;

252 
	}
}

262 *
	$queue_byãs_v1
(

263 *
Q_°¨t
,

264 *
Q_íd
,

265 *
Q_±r
,

266 *
d©a
,

267 
N
)

271 *(
Q_±r
++Ë*(
d©a
++);

273 i‡(
Q_±r
 =
Q_íd
)

275 
Q_±r
 = 
Q_°¨t
;

277 } --
N
);

278  
Q_±r
;

279 
	}
}

283 
	$queue_byãs_v2
(
Queue
 *
queue
, *
d©a
, 
N
)

285 *
Q_±r
 = 
queue
->Q_ptr;

286 *
Q_íd
 = 
queue
->Q_end;

290 *(
Q_±r
++Ë*(
d©a
++);

292 i‡(
Q_±r
 =
Q_íd
)

294 
Q_±r
 = 
queue
->
Q_°¨t
;

296 } --
N
);

297 
queue
->
Q_±r
 = Q_ptr;

298 
	}
}

304 
	$nybbÀ_to_hex
(
d
)

306 i‡(
d
<10)

308  
d
+'0';

310  
d
-10+'A';

311 
	}
}

313 
	$uöt_to_hex
(*
out
, 
ö
)

315 
i
;

317 
i
=8; i!=0; i--)

319 
ö
 = (in<<4) | (in>>28);

320 *(
out
++Ë()
	`nybbÀ_to_hex
(
ö
 & 15);

322 
	}
}

326 
	$timîs_v1
(*
timî1
, *
timî2
, *
°ï
)

328 *
timî1
 +*
°ï
;

329 *
timî2
 +*
°ï
;

330 
	}
}

332 
	$timîs_v2
(
Sèã
 *
°©e
, 
Timîs
 *
timîs
)

334 
timîs
->
timî1
 +
°©e
->
°ï
;

335 
timîs
->
timî2
 +
°©e
->
°ï
;

336 
	}
}

340 
	$timîs_v3
(
Sèã
 *
°©e
, 
Timîs
 *
timîs
)

342 
°ï
 = 
°©e
->step;

344 
timîs
->
timî1
 +
°ï
;

345 
timîs
->
timî2
 +
°ï
;

346 
	}
}

348 
	$checksum_√xt_∑ckë
()

350 *
d©a
;

351 
N
, 
sum
=0;

353 
d©a
 = 
	`gë_√xt_∑ckë
(&
N
);

357 
sum
 +*(
d©a
++);

358 } --
N
);

360  
sum
;

361 
	}
}

363 
	$˘ﬁowî
(*
c
)

365 i‡(*
c
>='A' && *c<='Z')

367 *
c
 += 'a'-'A';

369 
	}
}

374 
	$öc1
(
sum
, *
°ï
)

376 
sum
 +*
°ï
;

377 
sum
 = 
	`˛ù1
(sum);

378 
sum
 +*
°ï
;

379  
sum
;

380 
	}
}

388 
	$do°ages_v1
(
Sèges_v1
 *
°ages
)

390 i‡(
°ages
->
°ageA
)

392 
	`do°ageA
();

394 i‡(
°ages
->
°ageB
)

396 
	`do°ageB
();

398 i‡(
°ages
->
°ageC
)

400 
	`do°ageC
();

402 
	}
}

406 
	$do°ages_v2
(
Sèges_v2
 *
°ages_v2
)

408 
Sèges_v2
 
°ages
 = *
°ages_v2
;

410 i‡(
°ages
 & 
STAGEA
)

412 
	`do°ageA
();

414 i‡(
°ages
 & 
STAGEB
)

416 
	`do°ageB
();

418 i‡(
°ages
 & 
STAGEC
)

420 
	`do°ageC
();

422 
	}
}

426 #ifde‡
__ARMCC_VERSION


428 
	$ªadöt
(
__∑cked
 *
d©a
)

430  *
d©a
;

431 
	}
}

437 
	$ªadöt_lôée
(*
d©a
)

439 
a0
,
a1
,
a2
,
a3
;

441 
a0
 = *(
d©a
++);

442 
a1
 = *(
d©a
++);

443 
a2
 = *(
d©a
++);

444 
a3
 = *(
d©a
++);

445  
a0
 | (
a1
<<8Ë| (
a2
<<16Ë| (
a3
<<24);

446 
	}
}

448 
	$ªadöt_big
(*
d©a
)

450 
a0
,
a1
,
a2
,
a3
;

452 
a0
 = *(
d©a
++);

453 
a1
 = *(
d©a
++);

454 
a2
 = *(
d©a
++);

455 
a3
 = *(
d©a
++);

456  (((((
a0
<<8Ë| 
a1
)<<8Ë| 
a2
)<<8Ë| 
a3
;

457 
	}
}

461 
	$ªad_ßm∂es
(*
out
, *
ö
, 
N
)

463 *
d©a
;

464 
ßm∂e
, 
√xt
;

466 ()
ö
 & 1)

469 
d©a
 = (*)
ö
;

472 
ßm∂e
 = *(
d©a
++);

473 #ifde‡
__BIG_ENDIAN


474 
ßm∂e
 = (sample>>8) | (sample<<8);

476 *(
out
++Ë()
ßm∂e
;

477 } --
N
);

481 
d©a
 = (*)(
ö
-1);

482 
ßm∂e
 = *(
d©a
++);

483 #ifde‡
__BIG_ENDIAN


484 
ßm∂e
 = sample & 0xFF;

486 
ßm∂e
 = sample >> 8;

490 
√xt
 = *(
d©a
++);

492 #ifde‡
__BIG_ENDIAN


493 *
out
++ = ()((
√xt
 & 0xFF00Ë| 
ßm∂e
);

494 
ßm∂e
 = 
√xt
 & 0xFF;

496 *
out
++ = ()((
√xt
<<8Ë| 
ßm∂e
);

497 
ßm∂e
 = 
√xt
>>8;

499 } --
N
);

502 
	}
}

506 
poöt
 
	$gëxy_v1
(
off£t
, 
byãs_≥r_löe
)

508 
poöt
 
p
;

510 
p
.
y
 = 
off£t
 / 
byãs_≥r_löe
;

511 
p
.
x
 = 
off£t
 -Ö.
y
 * 
byãs_≥r_löe
;

512  
p
;

513 
	}
}

517 
poöt
 
	$gëxy_v2
(
off£t
, 
byãs_≥r_löe
)

519 
poöt
 
p
;

521 
p
.
x
 = 
off£t
 % 
byãs_≥r_löe
;

522 
p
.
y
 = 
off£t
 / 
byãs_≥r_löe
;

523  
p
;

524 
	}
}

528 
	$sˇÀ
(

529 *
de°
,

530 *
§c
,

531 
d
,

532 
N
)

534 
s
 = 0xFFFFFFFFu / 
d
;

538 
n
, 
q
, 
r
;

540 
n
 = *(
§c
++);

541 
q
 = ()–(()
n
 * 
s
) >> 32);

542 
r
 = 
n
 - 
q
*
d
;

543 i‡(
r
 >
d
)

545 
q
++;

547 *(
de°
++Ë
q
;

548 } --
N
);

549 
	}
}

553 
	$udiv_by_c⁄°
(
n
, 
d
)

555 
s
,
k
,
q
;

560 
k
=0; 
d
/2>=(1u<<k); k++);

562 i‡(
d
==1u<<
k
)

565  
n
>>
k
;

569 
s
 = ()(((1uŒ<<(32+
k
))+(1uŒ<<k))/
d
);

571 i‡(()
s
*
d
 >(1uŒ<<(32+
k
)))

574 
q
 = ()((()
n
*
s
)>>32);

575  
q
>>
k
;

579 
q
 = ()((()
n
*
s
 + s)>>32);

580  
q
>>
k
;

581 
	}
}

585 
	$sdiv_by_c⁄°
(
n
, 
d
)

587 
s
,
k
,
q
;

588 
D
;

591 i‡(
d
>0)

593 
D
=()
d
;

597 
D
=()-
d
;

601 
k
=0; 
D
/2>=(1u<<k); k++);

603 i‡(
D
==1u<<
k
)

606 
q
 = 
n
>>31;

607 
q
 = 
n
 + (()q>>(32-
k
));

608 
q
 = q>>
k
;

609 i‡(
d
<0)

611 
q
 = -q;

613  
q
;

618 
s
 = ()(((1uŒ<<(31+(
k
+1)))+(1uŒ<<(k+1)))/
D
);

620 i‡(
s
>=0)

622 
q
 = ()(((sig√d )
n
*
s
)>>32);

627 
q
 = 
n
 + ()(((sig√d Í*
s
)>>32);

629 
q
 = q>>
k
;

632 
q
 +()
n
>>31;

635 i‡(
d
<0)

637 
q
 = -q;

640  
q
;

641 
	}
}

646 
__ölöe
 
	$qmac_v1
(
a
, 
x
, 
y
)

648 
i
;

650 
i
 = 
x
*
y
;

651 i‡(
i
>=0)

654 
i
 = 2*i;

655 i‡(
i
<0)

658 
i
 = 0x7FFFFFFF;

660 i‡(
a
 + 
i
 <á)

665  
a
 + 
i
;

668 i‡(
a
 + 2*
i
 >á)

673  
a
 + 2*
i
;

674 
	}
}

676 
	$ßt_c‹ªœã_v1
(*
x
, *
y
, 
N
)

678 
a
=0;

682 
a
 = 
	`qmac_v1
◊, *(
x
++), *(
y
++) );

683 } --
N
);

684  
a
;

685 
	}
}

687 #i‡!
deföed
(
__thumb
)

691 
__ölöe
 
	$qmac_v2
(
a
, 
x
, 
y
)

693 
i
;

694 c⁄° 
mask
 = 0x80000000;

696 
i
 = 
x
*
y
;

697 #ifde‡
__ARMCC_VERSION


698 
__asm


700 
ADDS
 
i
, i, i

701 
EORVS
 
i
, 
mask
, i, 
ASR
 31

702 
ADDS
 
a
,á, 
i


703 
EORVS
 
a
, 
mask
,á, 
ASR
 31

706 #ifde‡
__GNUC__


707 
	`asm
("ADDS %0,%1,%2 ":"Ù" (
i
):"r" (i) ,"r" (i):"cc");

708 
	`asm
("EORVS %0,%1,%2,ASR#31":"Ù" (
i
):"r" (
mask
),"r" (i):"cc");

709 
	`asm
("ADDS %0,%1,%2 ":"Ù" (
a
):"r" (aË,"r" (
i
):"cc");

710 
	`asm
("EORVS %0,%1,%2,ASR#31":"Ù" (
a
):"r" (
mask
),"r" (a):"cc");

713  
a
;

714 
	}
}

716 
	$ßt_c‹ªœã_v2
(*
x
, *
y
, 
N
)

718 
a
=0;

722 
a
 = 
	`qmac_v2
◊, *(
x
++), *(
y
++) );

723 } --
N
);

724  
a
;

725 
	}
}

727 #ifde‡
__TARGET_FEATURE_DSPMUL


731 
__ölöe
 
	$qmac_v3
(
a
, 
x
, 
y
)

733 
i
;

735 
__asm


737 
SMULBB
 
i
, 
x
, 
y


738 
QDADD
 
a
,á, 
i


740  
a
;

741 
	}
}

743 
	$ßt_c‹ªœã_v3
(*
x
, *
y
, 
N
)

745 
a
=0;

749 
a
 = 
	`qmac_v3
◊, *(
x
++), *(
y
++) );

750 } --
N
);

751  
a
;

752 
	}
}

758 
	$Êush_Iˇche
()

760 #ifde‡
__ARMCC_VERSION


761 
__asm
 { 
MCR
 
p15
, 0, 0, 
c7
, 
c5
, 0 }

763 #ifde‡
__GNUC__


764 
	`asm
 ( "MCRÖ15, 0,Ñ0, c7, c5, 0" );

766 
	}
}

772 
	$°r_tﬁowî
(*
out
, *
ö
)

774 
c
;

778 
c
 = *(
ö
++);

779 i‡(
c
>='A' && c<='Z')

781 
c
 = c + ('a' - 'A');

783 *(
out
++Ë()
c
;

784 } 
c
);

785 
	}
}

	@/home/jkr555/arm/guide/ch05_C/test_s.s

48 
AREA
 
	gch04
, 
	gCODE
, 
READONLY


50 
EXPORT
 
checksum_v1_s


51 
EXPORT
 
checksum_v2_s


52 
EXPORT
 
checksum_v3_s


53 
EXPORT
 
checksum_v4_s


54 
EXPORT
 
checksum_v5_s


55 
EXPORT
 
checksum_v6_s


56 
EXPORT
 
checksum_v7_s


57 
EXPORT
 
checksum_v8_s


58 
EXPORT
 
checksum_v9_s


59 
EXPORT
 
checksum_v10_s


60 
EXPORT
 
queue_byãs_v1_s


61 
EXPORT
 
queue_byãs_v2_s


62 
EXPORT
 
uöt_to_hex_s


63 
EXPORT
 
gëxy_v1_s


64 
EXPORT
 
gëxy_v2_s


65 
EXPORT
 
sˇÀ_s


66 
EXPORT
 
ßt_c‹ªœã_v1_s


67 
EXPORT
 
ßt_c‹ªœã_v2_s


68 
EXPORT
 
ßt_c‹ªœã_v3_s


69 
EXPORT
 
°r_tﬁowî_s


71 
IMPORT
 
add_v3


72 
IMPORT
 
˛ù1


73 
IMPORT
 
do°ageA


74 
IMPORT
 
do°ageB


75 
IMPORT
 
do°ageC


76 
IMPORT
 
gë_√xt_∑ckë


77 
IMPORT
 
	g__π_udiv


81 
checksum_v1_s


82 
MOV
 
	gr2
,
	gr0
 ;Ñ2 = 
d©a


83 
MOV
 
r0
,#0 ; 
	gsum
 = 0

84 
MOV
 
r1
,#0 ; 
	gi
 = 0

85 
checksum_v1_lo›


86 
LDR
 
r3
,[
r2
,
r1
,
LSL
 #2] ; 
	gr3
 = 
d©a
[
i
]

87 
ADD
 
r1
,
	gr1
,#1 ;Ñ1 = 
i
+1

88 
AND
 
r1
,
	gr1
,#0
	gxff
 ; 
	gi
 = ()r1

89 
CMP
 
r1
,#0
	gx40
 ; 
com∑ª
 
	gi
, 64

90 
ADD
 
	gr0
,
	gr3
,r0 ; 
	gsum
 +
r3


91 
BCC
 
checksum_v1_lo›
 ; i‡(
	gi
<64Ë
lo›


92 
MOV
 
	gpc
,
	gr14
 ;  
sum


94 
checksum_v2_s


95 
MOV
 
	gr2
,
	gr0
 ;Ñ2 = 
d©a


96 
MOV
 
r0
,#0 ; 
	gsum
 = 0

97 
MOV
 
r1
,#0 ; 
	gi
 = 0

98 
checksum_v2_lo›


99 
LDR
 
r3
,[
r2
,
r1
,
LSL
 #2] ; 
	gr3
 = 
d©a
[
i
]

100 
ADD
 
r1
,
	gr1
,#1 ;Ñ1++

101 
CMP
 
	gr1
,#0
	gx40
 ; 
com∑ª
 
	gi
, 64

102 
ADD
 
	gr0
,
	gr3
,r0 ; 
	gsum
 +
r3


103 
BCC
 
checksum_v2_lo›
 ; i‡(
	gi
<64Ë
lo›


104 
MOV
 
	gpc
,
	gr14
 ;  
sum


106 
checksum_v3_s


107 
MOV
 
	gr2
,
	gr0
 ;Ñ2 = 
d©a


108 
MOV
 
r0
,#0 ; 
	gsum
 = 0

109 
MOV
 
r1
,#0 ; 
	gi
 = 0

110 
checksum_v3_lo›


111 
ADD
 
r3
,
	gr2
,
	gr1
,
	gLSL
 #1 ; 
	gr3
 = &
d©a
[
i
]

112 
LDRH
 
r3
,[r3,#0] ; 
	gr3
 = 
d©a
[
i
]

113 
ADD
 
r1
,
	gr1
,#1 ; 
	gi
++

114 
CMP
 
	gr1
,#0
	gx40
 ; 
com∑ª
 
	gi
, 64

115 
ADD
 
	gr0
,
	gr3
,r0 ;Ñ0 = 
sum
 + 
r3


116 
MOV
 
r0
,
	gr0
,
	gLSL
 #16

117 
MOV
 
	gr0
,r0,
	gASR
 #16 ; 
	gsum
 = ()
r0


118 
BCC
 
checksum_v3_lo›
 ; i‡(
	gi
<64Ë
lo›


119 
MOV
 
	gpc
,
	gr14
 ;  
sum


121 
checksum_v4_s


122 
MOV
 
	gr2
,#0 ; 
	gsum
 = 0

123 
MOV
 
r1
,#0 ; 
	gi
 = 0

124 
checksum_v4_lo›


125 
LDRSH
 
r3
,[
r0
],#2 ; 
	gr3
 = *(
d©a
++)

126 
ADD
 
r1
,
	gr1
,#1 ; 
	gi
++

127 
CMP
 
	gr1
,#0
	gx40
 ; 
com∑ª
 
	gi
, 64

128 
ADD
 
	gr2
,
	gr3
,r2 ; 
	gsum
 +
r3


129 
BCC
 
checksum_v4_lo›
 ; i‡(
	gsum
<64Ë
lo›


130 
MOV
 
	gr0
,
	gr2
,
	gLSL
 #16

131 
MOV
 
	gr0
,r0,
	gASR
 #16 ;Ñ0 = ()
sum


132 
MOV
 
pc
,
	gr14
 ;  
r0


134 
add_v1_s


135 
ADD
 
	gr0
,r0,
	gr1
,
	gASR
 #1 ;Ñ0 = ()
a
 + (()
b
>>1)

136 
MOV
 
r0
,
	gr0
,
	gLSL
 #16

137 
MOV
 
	gr0
,r0,
	gASR
 #16 ;Ñ0 = ()
r0


138 
MOV
 
pc
,
	gr14
 ;  
r0


140 
add_v1_gcc


141 
MOV
 
	gr0
,Ñ0, 
	gLSL
 #16

142 
MOV
 
	gr1
,Ñ1, 
	gLSL
 #16

143 
MOV
 
	gr1
,Ñ1, 
	gASR
 #17 ;Ñ1 = ()
a


144 
ADD
 
r1
, 
	gr1
, 
	gr0
, 
	gASR
 #16 ;Ñ1 +()
b


145 
MOV
 
r1
, 
	gr1
, 
	gLSL
 #16

146 
MOV
 
	gr0
, 
	gr1
, 
	gASR
 #16 ;Ñ0 = ()
r1


147 
MOV
 
pc
, 
	gÃ
 ;  
r0


149 
add_v2_s


150 
MOV
 
	gr1
,r1,
	gLSL
 #16

151 
MOV
 
	gr0
,r0,
	gLSL
 #16

152 
MOV
 
	gr0
,r0,
	gASR
 #16

153 
MOV
 
	gr1
,r1,
	gASR
 #16

154 
B
 
add_v3


156 
avîage_v1_s


157 
ADD
 
	gr0
,r0,
	gr1
 ;Ñ0 = 
a
+
b


158 
ADD
 
r0
,
	gr0
,r0,
	gLSR
 #31 ; if (r0<0)Ñ0++

159 
MOV
 
	gr0
,r0,
	gASR
 #1 ;Ñ0 = 
r0
>>1

160 
MOV
 
pc
,
	gr14
 ;  
r0


162 
avîage_v2_s


163 
ADD
 
	gr0
,r0,
r1


164 
MOV
 
	gr0
,r0,
	gLSR
 #1

165 
MOV
 
	gpc
,
	gr14


169 
checksum_v5_s


170 
MOV
 
	gr2
,
	gr0
 ;Ñ2 = 
d©a


171 
MOV
 
r0
,#0 ; 
	gsum
 = 0

172 
MOV
 
r1
,#0 ; 
	gi
 = 0

173 
checksum_v5_lo›


174 
LDR
 
r3
,[
r2
],#4 ; 
	gr3
 = *(
d©a
++)

175 
ADD
 
r1
,
	gr1
,#1 ; 
	gi
++

176 
CMP
 
	gr1
,#0
	gx40
 ; 
com∑ª
 
	gi
, 64

177 
ADD
 
	gr0
,
	gr3
,r0 ; 
	gsum
 +
r3


178 
BCC
 
checksum_v5_lo›
 ; i‡(
	gi
<64Ë
lo›


179 
MOV
 
	gpc
,
	gr14
 ;  
sum


181 
checksum_v6_s


182 
MOV
 
	gr2
,
	gr0
 ;Ñ2 = 
d©a


183 
MOV
 
r0
,#0 ; 
	gsum
 = 0

184 
MOV
 
r1
,#0
	gx40
 ; 
	gi
 = 64

185 
checksum_v6_lo›


186 
LDR
 
r3
,[
r2
],#4 ; 
	gr3
 = *(
d©a
++)

187 
SUBS
 
r1
,
	gr1
,#1 ; 
	gi
-- 
™d
 
£t
 
Êags


188 
ADD
 
	gr0
,
	gr3
,r0 ; 
	gsum
 +
r3


189 
BNE
 
checksum_v6_lo›
 ; i‡(
	gi
!=0Ë
lo›


190 
MOV
 
pc
,
	gr14
 ;  
sum


192 
checksum_v7_s


193 
MOV
 
	gr2
,#0 ; 
	gsum
 = 0

194 
CMP
 
r1
,#0 ; 
com∑ª
 
	gN
, 0

195 
BEQ
 
	gchecksum_v7_íd
 ; i‡(
	gN
==0Ë
íd


196 
checksum_v7_lo›


197 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

198 
SUBS
 
r1
,
	gr1
,#1 ; 
	gN
-- 
™d
 
£t
 
Êags


199 
ADD
 
	gr2
,
	gr3
,r2 ; 
	gsum
 +
r3


200 
BNE
 
checksum_v7_lo›
 ; i‡(
	gN
!=0Ë
lo›


201 
checksum_v7_íd


202 
MOV
 
r0
,
	gr2
 ; 
	gr0
 = 
sum


203 
MOV
 
pc
,
	gr14
 ;  
r0


205 
checksum_v8_s


206 
MOV
 
	gr2
,#0 ; 
	gsum
 = 0

207 
checksum_v8_lo›


208 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

209 
SUBS
 
r1
,
	gr1
,#1 ; 
	gN
-- 
™d
 
£t
 
Êags


210 
ADD
 
	gr2
,
	gr3
,r2 ; 
	gsum
 +
r3


211 
BNE
 
checksum_v8_lo›
 ; i‡(
	gN
!=0Ë
lo›


212 
MOV
 
r0
,
	gr2
 ; 
	gr0
 = 
sum


213 
MOV
 
pc
,
	gr14
 ;  
r0


215 
checksum_v9_s


216 
MOV
 
	gr2
,#0 ; 
	gsum
 = 0

217 
checksum_v9_lo›


218 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

219 
SUBS
 
r1
,
	gr1
,#4 ; 
	gN
-=4 & 
£t
 
Êags


220 
ADD
 
r2
,
	gr3
,
	gr2
 ; 
	gsum
 +
r3


221 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

222 
ADD
 
r2
,
	gr3
,
	gr2
 ; 
	gsum
 +
r3


223 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

224 
ADD
 
r2
,
	gr3
,
	gr2
 ; 
	gsum
 +
r3


225 
LDR
 
r3
,[
r0
],#4 ; 
	gr3
 = *(
d©a
++)

226 
ADD
 
r2
,
	gr3
,
	gr2
 ; 
	gsum
 +
r3


227 
BNE
 
checksum_v9_lo›
 ; i‡(
	gN
!=0Ë
lo›


228 
MOV
 
r0
,
	gr2
 ; 
	gr0
 = 
sum


229 
MOV
 
pc
,
	gr14
 ;  
r0


231 
checksum_v10_s


232 
MOV
 
	gr3
,#0

233 
MOVS
 
	gr2
,
	gr1
,
	gLSR
 #2

234 
	gBEQ
 {
	gpc
} + 0x2c ; 0x22c

235 
LDR
 
	gr12
,[
r0
],#4

236 
SUBS
 
	gr2
,r2,#1

237 
ADD
 
	gr3
,
	gr12
,
r3


238 
LDR
 
	gr12
,[
r0
],#4

239 
ADD
 
	gr3
,
	gr12
,
r3


240 
LDR
 
	gr12
,[
r0
],#4

241 
ADD
 
	gr3
,
	gr12
,
r3


242 
LDR
 
	gr12
,[
r0
],#4

243 
ADD
 
	gr3
,
	gr12
,
r3


244 
	gBNE
 {
	gpc
} - 0x24 ; 0x204

245 
ANDS
 
	gr1
,r1,#3

246 
	gBEQ
 {
	gpc
} + 0x14 ; 0x244

247 
LDR
 
	gr2
,[
r0
],#4

248 
SUBS
 
	gr1
,r1,#1

249 
ADD
 
	gr3
,
	gr2
,
r3


250 
	gBNE
 {
	gpc
} - 0xc ; 0x234

251 
MOV
 
	gr0
,
r3


252 
MOV
 
	gpc
,
	gr14


258 
queue_byãs_v1_s


259 
STR
 
	gr14
,[
r13
,#-4]! ; 
ßve
 
Ã
 
⁄
 
the
 
°ack


260 
LDR
 
	gr12
,[
r13
,#4] ;Ñ12 = 
N


261 
queue_v1_lo›


262 
LDRB
 
r14
,[
r3
],#1 ; 
	gr14
 = *(
d©a
++)

263 
STRB
 
r14
,[
r2
],#1 ; *(
	gQ_±r
++) =Ñ14

264 
CMP
 
r2
,
	gr1
 ; i‡(
	gQ_±r
 =
Q_íd
)

265 
MOVEQ
 
r2
,
	gr0
 ; { 
	gQ_±r
 = 
Q_°¨t
; }

266 
SUBS
 
	gr12
,r12,#1 ; --
N
 
™d
 
£t
 
Êags


267 
BNE
 
	gqueue_v1_lo›
 ; i‡(
	gN
!=0Ë
lo›


268 
MOV
 
r0
,
	gr2
 ; 
	gr0
 = 
Q_±r


269 
LDR
 
pc
,[
r13
],#4 ;  
r0


271 
queue_byãs_v2_s


272 
STR
 
	gr14
,[
r13
,#-4]! ; 
ßve
 
Ã
 
⁄
 
the
 
°ack


273 
LDR
 
	gr3
,[
r0
,#8] ;Ñ3 = 
queue
->
Q_±r


274 
LDR
 
r14
,[
r0
,#4] ; 
	gr14
 = 
queue
->
Q_íd


275 
queue_v2_lo›


276 
LDRB
 
r12
,[
r1
],#1 ; 
	gr12
 = *(
d©a
++)

277 
STRB
 
r12
,[
r3
],#1 ; *(
	gQ_±r
++) =Ñ12

278 
CMP
 
r3
,
	gr14
 ; i‡(
	gQ_±r
 =
Q_íd
)

279 
LDREQ
 
r3
,[
r0
,#0] ; { 
	gQ_±r
 = 
queue
->
Q_°¨t
 }

280 
SUBS
 
	gr2
,r2,#1 ; --
N
 
™d
 
£t
 
Êags


281 
BNE
 
	gqueue_v2_lo›
 ; i‡(
	gN
!=0Ë
lo›


282 
STR
 
r3
,[
r0
,#8] ; 
	gqueue
->
	gQ_±r
 =Ñ3

283 
LDR
 
pc
,[
r13
],#4 ; 

285 
nybbÀ_to_hex


286 
CMP
 
	gr0
,#0
xa


287 
ADDCS
 
	gr0
,r0,#0
x37


288 
ADDCC
 
	gr0
,r0,#0
x30


289 
MOV
 
	gpc
,
r14


291 
uöt_to_hex_s


292 
MOV
 
	gr3
,#8 ; 
	gi
 = 8

293 
uöt_to_hex_lo›


294 
MOV
 
r1
,
	gr1
,
	gROR
 #28 ; 
	gö
 = (
ö
<<4)|(in>>28)

295 
AND
 
r2
,
	gr1
,#0
	gxf
 ; 
	gr2
 = 
ö
 & 15

296 
CMP
 
r2
,#0
	gxa
 ; i‡(
	gr2
>=10)

297 
ADDCS
 
r2
,
	gr2
,#0
	gx37
 ;Ñ2 += 'A'-10

298 
ADDCC
 
r2
,
	gr2
,#0
	gx30
 ; r2 += '0'

299 
STRB
 
r2
,[
r0
],#1 ; *(
	gout
++) =Ñ2

300 
SUBS
 
r3
,
	gr3
,#1 ; 
	gi
-- 
™d
 
£t
 
Êags


301 
BNE
 
	guöt_to_hex_lo›
 ; i‡(
	gi
!=0Ë
lo›


302 
MOV
 
pc
,
	gr14
 ; 

306 
timîs_v1


307 
LDR
 
	gr3
,[
r0
,#0] ;Ñ3 = *
timî1


308 
LDR
 
r12
,[
r2
,#0] ; 
	gr12
 = *
°ï


309 
ADD
 
r3
,
	gr3
,
	gr12
 ;Ñ3 +
r12


310 
STR
 
r3
,[
r0
,#0] ; *
	gtimî1
 =Ñ3

311 
LDR
 
r0
,[
r1
,#0] ; 
	gr0
 = *
timî2


312 
LDR
 
r2
,[r2,#0] ; 
	gr2
 = *
°ï


313 
ADD
 
r0
,
	gr0
,
	gr2
 ;Ñ0 +
r2


314 
STR
 
r0
,[
r1
,#0] ; *
	gtimî2
 = 
t0


315 
MOV
 
pc
,
	gr14
 ; 

317 
timîs_v2


318 
LDR
 
	gr2
,[
r1
,#0] ;Ñ2 = 
timîs
->
timî1


319 
LDR
 
r3
,[
r0
,#0] ; 
	gr3
 = 
°©e
->
°ï


320 
ADD
 
r2
,
	gr2
,
	gr3
 ;Ñ2 +
r3


321 
STR
 
r2
,[
r1
,#0] ; 
	gtimîs
->
	gtimî1
 =Ñ2

322 
LDR
 
r2
,[
r1
,#4] ; 
	gr2
 = 
timîs
->
timî2


323 
LDR
 
r0
,[r0,#0] ; 
	gr0
 = 
°©e
->
°ï


324 
ADD
 
r0
,
	gr2
,
	gr0
 ;Ñ0 +
r2


325 
STR
 
r0
,[
r1
,#4] ; 
	gtimîs
->
	gtimî2
 =Ñ0

326 
MOV
 
pc
,
	gr14
 ; 

328 
checksum_√xt_∑ckë


329 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
} ; 
ßve
Ñ4, 
Ã
 
⁄
 
the
 
°ack


330 
SUB
 
	gr13
,r13,#8 ; 
¸óã
 
two
 
°acked
 
v¨übÀs


331 
ADD
 
	gr0
,
	gr13
,#4 ;Ñ0 = &
N
, N 
°acked


332 
MOV
 
	gr4
,#0 ; 
	gsum
 = 0

333 
BL
 
gë_√xt_∑ckë
 ; 
	gr0
 = 
d©a


334 
checksum_lo›


335 
LDR
 
r1
,[
r0
],#4 ; 
	gr1
 = *(
d©a
++)

336 
ADD
 
r4
,
	gr1
,
	gr4
 ; 
	gsum
 +
r1


337 
LDR
 
r1
,[
r13
,#4] ; 
	gr1
 = 
	$N
 (
ªad
 
‰om
 
°ack
)

338 
SUBS
 
r1
,r1,#1 ;Ñ1-- & 
£t
 
Êags


339 
STR
 
r1
,[
r13
,#4] ; 
N
 = 
	$r1
 (
wrôe
 
to
 
°ack
)

340 
BNE
 
checksum_lo›
 ; i‡(
N
!=0Ë
lo›


341 
MOV
 
r0
,
r4
 ;Ñ0 = 
sum


342 
ADD
 
r13
,r13,#8 ; 
dñëe
 
°acked
 
v¨übÀs


343 
LDMFD
 
r13
!,{
r4
,
pc
} ; Ñ0

345 
˘ﬁowî


346 
LDRB
 
	gr1
,[
r0
,#0] ;Ñ1 = *
c


347 
SUB
 
r2
,
	gr1
,#0
	gx41
 ; 
	gr2
 = 
r1
-'A'

348 
CMP
 
r2
,#0
	gx19
 ; i‡(
	gr2
<=25)

349 
ADDLS
 
r1
,
	gr1
,#0
	gx20
 ; {Ñ1 += 'a'-'A';

350 
STRLSB
 
	gr1
,[
r0
,#0] ; *
	gc
 = 
r1
; }

351 
MOV
 
	gpc
,
	gr14
 ; 

353 
öc1


354 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
}

355 
MOV
 
	gr4
,
r1


356 
LDR
 
	gr1
,[
r1
,#0]

357 
ADD
 
	gr0
,
	gr1
,
r0


358 
BL
 
˛ù1


359 
LDR
 
	gr1
,[
r4
,#0]

360 
ADD
 
	gr0
,
	gr1
,
r0


361 
LDMFD
 
	gr13
!,{
	gr4
,
	gpc
}

365 
do°ages_v1


366 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
} ; 
°ack
Ñ4, 
Ã


367 
MOV
 
	gr4
,
	gr0
 ; 
move
 
°ages
 
to
 
r4


368 
LDR
 
	gr0
,[
r0
,#0] ;Ñ0 = 
°ages
 
bôfõld


369 
TST
 
r0
,#1 ; i‡(
	g°ages
->
	g°ageA
)

370 
BLNE
 
	gdo°ageA
 ; { 
do°ageA
(); }

371 
LDR
 
	gr0
,[
r4
,#0] ;Ñ0 = 
°ages
 
bôfõld


372 
MOV
 
r0
,
	gr0
,
	gLSL
 #30 ; 
shi·
 
	gbô
 1 
to
 bit 31

373 
CMP
 
	gr0
,#0 ; i‡(
	gbô31
)

374 
BLLT
 
	gdo°ageB
 ; { 
do°ageB
(); }

375 
LDR
 
	gr0
,[
r4
,#0] ;Ñ0 = 
°ages
 
bôfõld


376 
MOV
 
r0
,
	gr0
,
	gLSL
 #29 ; 
shi·
 
	gbô
 2 
to
 bit 31

377 
CMP
 
	gr0
,#0 ; i‡(!
	gbô31
)

378 
LDMLTFD
 
	gr13
!,{
	gr4
,
	gr14
} ; 

379 
BLT
 
	gdo°ageC
 ; 
do°ageC
();

380 
LDMFD
 
	gr13
!,{
	gr4
,
	gpc
} ; 

382 
do°ages_v2


383 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
} ; 
°ack
Ñ4, 
Ã


384 
LDR
 
	gr4
,[
r0
,#0] ; 
	g°ages
 = *
°ages_v2


385 
TST
 
r4
,#1 ; i‡(
	g°age
 & 
	gSTAGEA
)

386 
BLNE
 
	gdo°ageA
 ; { 
do°ageA
(); }

387 
TST
 
	gr4
,#2 ; i‡(
	g°age
 & 
	gSTAGEB
)

388 
BLNE
 
	gdo°ageB
 ; { 
do°ageB
(); }

389 
TST
 
	gr4
,#4 ; i‡(!(
	g°age
 & 
	gSTAGEC
))

390 
LDMNEFD
 
	gr13
!,{
	gr4
,
	gr14
} ; ;

391 
BNE
 
	gdo°ageC
 ; 
do°ageC
();

392 
LDMFD
 
	gr13
!,{
	gr4
,
	gpc
} ; 

396 
gëxy_v1_s


397 
STMFD
 
	gr13
!,{
	gr4
-
	gr6
,
	gr14
}

398 
MOV
 
	gr6
,
r0


399 
MOV
 
	gr0
,
r2


400 
MOV
 
	gr5
,
r2


401 
MOV
 
	gr4
,
r1


402 
BL
 
__π_udiv


403 
MUL
 
	gr1
,
	gr5
,
r0


404 
SUB
 
	gr1
,
	gr4
,
r1


405 
STR
 
	gr0
,[
r6
,#4]

406 
STR
 
	gr1
,[
r6
,#0]

407 
LDMFD
 
	gr13
!,{
	gr4
-
	gr6
,
	gpc
}

409 
gëxy_v2_s


410 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
} ; 
°ack
Ñ4, 
Ã


411 
MOV
 
	gr4
,
	gr0
 ; 
move
 
p
 
to
 
r4


412 
MOV
 
	gr0
,
	gr2
 ;Ñ0 = 
byãs_≥r_löe


413 
BL
 
__π_udiv
 ; (
	gr0
,
	gr1
Ë(
r1
/
r0
,Ñ1%r0)

414 
STR
 
	gr0
,[
r4
,#4] ; 
	gp
.
	gy
 = 
off£t
 / 
byãs_≥r_löe


415 
STR
 
r1
,[
r4
,#0] ; 
	gp
.
	gx
 = 
off£t
 % 
byãs_≥r_löe


416 
LDMFD
 
r13
!,{
	gr4
,
	gpc
} ; 

418 
sˇÀ_s


419 
STMFD
 
	gr13
!,{
	gr3
-
	gr9
,
	gr14
}

420 
MOV
 
	gr7
,
r1


421 
MOV
 
	gr6
,
r0


422 
MOV
 
	gr0
,
r2


423 
MVN
 
	gr1
,#0

424 
MOV
 
	gr8
,
r3


425 
MOV
 
	gr5
,
r2


426 
BL
 
__π_udiv


427 
MOV
 
	gr9
,
r0


428 
sˇÀ_lo›


429 
LDR
 
	gr4
,[
r7
],#4

430 
MOV
 
	gr1
,
r9


431 
UMULL
 
	gr0
,
	gr1
,
	gr4
,
r9


432 
MOV
 
	gr0
,
r1


433 
MUL
 
	gr1
,
	gr0
,
r5


434 
SUB
 
	gr1
,
	gr4
,
r1


435 
CMP
 
	gr1
,
r5


436 
ADC
 
	gr0
,r0,#0

437 
STR
 
	gr0
,[
r6
],#4

438 
SUBS
 
	gr8
,r8,#1

439 
BNE
 
sˇÀ_lo›


440 
LDMFD
 
	gr13
!,{
	gr3
-
	gr9
,
	gpc
}

442 
ªadöt


443 
BIC
 
	gr3
,
	gr0
,#3 ;Ñ3 = 
d©a
 & 0xFFFFFFFC

444 
AND
 
r0
,
	gr0
,#3 ;Ñ0 = 
d©a
 & 0x00000003

445 
MOV
 
r0
,
	gr0
,
	gLSL
 #3 ;Ñ0 = 
bô
 
off£t
 
of
 
d©a
 
w‹d


446 
LDMIA
 
r3
,{
	gr3
,
	gr12
} ;Ñ3,Ñ12 = 8 
byãs
 
ªad
 
‰om
Ñ3

447 
MOV
 
r3
,
	gr3
,
LSR
 
	gr0
 ; 
The£
 
thªe
 
ö°ru˘i⁄s


448 
RSB
 
	gr0
,r0,#0
	gx20
 ; 
shi·
 
	gthe
 64 
bô
 
vÆue
 
	gr12
.
r3


449 
ORR
 
	gr0
,
	gr3
,
	gr12
,
LSL
Ñ0 ; 
right
 
by
 
r0
 
bôs


450 
MOV
 
	gpc
,
	gr14
 ;  
r0


452 
ßt_c‹ªœã_v1_s


453 
STMFD
 
	gr13
!,{
	gr4
,
	gr5
,
	gr14
}

454 
MOV
 
	gr5
,#0
x80000000


455 
MVN
 
	gr4
,#0
x80000000


456 
MOV
 
	gr3
,#0

457 
ßt_v1_lo›


458 
LDRH
 
	gr12
,[
r0
],#2

459 
LDRH
 
	gr14
,[
r1
],#2

460 
SMULBB
 
	gr12
,r12,
r14


461 
CMP
 
	gr12
,#0

462 
BLT
 
ßt_v1_√g


463 
MOV
 
	gr12
,r12,
	gLSL
 #1

464 
CMP
 
	gr12
,#0

465 
MVNLT
 
	gr12
,#0
x80000000


466 
ADD
 
	gr12
,
	gr3
,
r12


467 
CMP
 
	gr12
,
r3


468 
MOVGE
 
	gr3
,
r12


469 
MOVLT
 
	gr3
,
r4


470 
B
 
ßt_v1_√xt


471 
ßt_v1_√g


472 
ADD
 
	gr12
,
	gr3
,r12,
	gLSL
 #1

473 
CMP
 
	gr12
,
r3


474 
MOVLE
 
	gr3
,
r12


475 
MOVGT
 
	gr3
,
r5


476 
ßt_v1_√xt


477 
SUBS
 
	gr2
,r2,#1

478 
BNE
 
ßt_v1_lo›


479 
MOV
 
	gr0
,
r3


480 
LDMFD
 
	gr13
!,{
	gr4
,
	gr5
,
	gpc
}

482 
ßt_c‹ªœã_v2_s


483 
STMFD
 
	gr13
!,{
	gr4
,
	gr14
}

484 
MOV
 
	gr14
,#0
x80000000


485 
MOV
 
	gr12
,#0

486 
ßt_v2_lo›


487 
LDRH
 
	gr3
,[
r0
],#2

488 
LDRH
 
	gr4
,[
r1
],#2

489 
SMULBB
 
	gr3
,r3,
r4


490 
ADDS
 
	gr3
,r3,
r3


491 
EORVS
 
	gr3
,
	gr14
,r3,
	gASR
 #31

492 
ADDS
 
	gr12
,r12,
r3


493 
EORVS
 
	gr12
,
	gr14
,r12,
	gASR
 #31

494 
SUBS
 
	gr2
,r2,#1

495 
BNE
 
ßt_v2_lo›


496 
MOV
 
	gr0
,
r12


497 
LDMFD
 
	gr13
!,{
	gr4
,
	gpc
}

499 
ßt_c‹ªœã_v3_s


500 
STR
 
	gr14
,[
r13
,#-4]! ; 
°ack
 
Ã


501 
MOV
 
	gr12
,#0 ; 
	ga
 = 0

502 
ßt_v3_lo›


503 
LDRSH
 
r3
,[
r0
],#2 ; 
	gr3
 = *(
x
++)

504 
LDRSH
 
r14
,[
r1
],#2 ; 
	gr14
 = *(
y
++)

505 
SUBS
 
r2
,
	gr2
,#1 ; 
	gN
-- 
™d
 
£t
 
Êags


506 
SMULBB
 
	gr3
,r3,
	gr14
 ;Ñ3 = 
r3
 * 
r14


507 
QDADD
 
r12
,
	gr12
,
	gr3
 ; 
	ga
 = 
ßt
(
a
+
	$ßt
(2*
r3
))

508 
BNE
 
ßt_v3_lo›
 ; i‡(
N
!=0Ë
lo›


509 
MOV
 
r0
,
r12
 ;Ñ0 = 
a


510 
LDR
 
pc
,[
r13
],#4 ;  
r0


512 
Êush_Iˇche


513 
MOV
 
r0
,#0

514 
MCR
 
p15
,0x0,
r0
,
c7
,
c5
,0

515 
MOV
 
pc
,
r14


519 
°r_tﬁowî_s


520 
LDRB
 
r2
,[
r1
],#1 ; 
c
 = *(
ö
++)

521 
SUB
 
r3
,
r2
,#0
x41
 ;Ñ3 = 
c
 - 'A'

522 
CMP
 
r3
,#0
x19
 ; i‡(
c
 <= 'Z'-'A')

523 
ADDLS
 
r2
,r2,#0
x20
 ; 
c
 += 'a'-'A'

524 
STRB
 
r2
,[
r0
],#1 ; *(
out
++Ë()
c


525 
CMP
 
r2
,#0 ; i‡(
c
!=0)

526 
BNE
 
°r_tﬁowî_s
 ; 
°r_tﬁowî


527 
MOV
 
pc
,
r14
 ; 

529 
END


	@/home/jkr555/arm/guide/ch06_asm/bitstream.s

47 
AREA
 
	gch06_7
, 
	gCODE
, 
READONLY


49 
EXPORT
 
bô°ªam_wrôe_ã°


50 
EXPORT
 
	gbô°ªam_ªad_ã°


55 
codes
 
	gRN
 1 ; 
poöãr
 
to
 code†tÿ
ö£π
 
ö
 
the
 
bô°ªam


56 
code_Àns
 
	gRN
 2 ; 
Àngth
 
of
 
codes
 
to
 
ö£π
 
ö
 
the
 
	gbô°ªam


60 
bô°ªam
 
	gRN
 0 ; 
cuºít
 
byã
 
addªss
 
ö
 
the
 
ouçut
 bitstream

61 
code
 
	gRN
 4 ; 
cuºít
 code

62 
codebôs
 
	gRN
 5 ; 
Àngth
 
ö
 
bôs
 
of
 
cuºít
 
code


63 
bôbuf„r
 
	gRN
 6 ; 32-
bô
 
ouçut
 
	gbig
-
ídün
 bô 
buf„r


64 
bôs‰ì
 
	gRN
 7 ; 
numbî
 
of
 
bôs
 
‰ì
 
ö
 
the
 
bô
 
buf„r


65 
tmp
 
	gRN
 8 ; 
s¸©ch
 

66 
mask
 
	gRN
 12 ; 
ídün
 
ªvîßl
 
	gmask
 0xFFFF00FF

68 
bô°ªam_wrôe_°¨t


69 
MOV
 
	gbôbuf„r
, #0

70 
MOV
 
	gbôs‰ì
, #32

71 
Æign_lo›


72 
TST
 
	gbô°ªam
, #3

73 
LDRNEB
 
	gcode
, [
bô°ªam
, #-1]!

74 
SUBNE
 
	gbôs‰ì
, bitsfree, #8

75 
ORRNE
 
	gbôbuf„r
, 
	gcode
, bôbuf„r, 
	gROR
 #8

76 
BNE
 
Æign_lo›


77 
MOV
 
	gbôbuf„r
, bôbuf„r, 
	gROR
 #8

78 
MOV
 
	gpc
, 
Ã


80 
bô°ªam_wrôe_code


81 
SUBS
 
	gbôs‰ì
, bôs‰ì, 
codebôs


82 
BLE
 
fuŒ_buf„r


83 
ORR
 
	gbôbuf„r
, bôbuf„r, 
	gcode
, 
LSL
 
bôs‰ì


84 
MOV
 
	gpc
, 
Ã


85 
fuŒ_buf„r


86 
RSB
 
	gbôs‰ì
, bitsfree, #0

87 
ORR
 
	gbôbuf„r
, bôbuf„r, 
	gcode
, 
LSR
 
bôs‰ì


88 
	gIF
 {
	gENDIAN
}="little"

89 ; 
byã
 
ªvî£
 
the
 
bô
 
buf„r
 
¥i‹
 
to
 
°‹ög


90 
EOR
 
	gtmp
, 
	gbôbuf„r
, bôbuf„r, 
	gROR
 #16

91 
AND
 
	gtmp
, 
	gmask
,Åmp, 
	gLSR
 #8

92 
EOR
 
	gbôbuf„r
, 
	gtmp
, bôbuf„r, 
	gROR
 #8

93 
ENDIF


94 
STR
 
	gbôbuf„r
, [
bô°ªam
], #4

95 
RSB
 
	gbôs‰ì
, bitsfree, #32

96 
MOV
 
	gbôbuf„r
, 
	gcode
, 
LSL
 
bôs‰ì


97 
MOV
 
	gpc
, 
Ã


99 
bô°ªam_wrôe_Êush


100 
RSBS
 
	gbôs‰ì
, bitsfree, #32

101 
Êush_lo›


102 
MOVGT
 
	gbôbuf„r
, bôbuf„r, 
	gROR
 #24

103 
STRGTB
 
	gbôbuf„r
, [
bô°ªam
], #1

104 
SUBGTS
 
	gbôs‰ì
, bitsfree, #8

105 
BGT
 
Êush_lo›


106 
MOV
 
	gpc
, 
	gÃ


109 ; *
	$bô°ªam_wrôe_ã°
(*
bô°ªam
, *
codes
, *
code_Àns
)

110 
bô°ªam_wrôe_ã°


111 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

112 
MVN
 
	gmask
, #0
x0000FF00


113 
BL
 
bô°ªam_wrôe_°¨t


114 
wrôe_√xt_code


115 
LDR
 
	gcode
, [
codes
], #4

116 
LDRB
 
	gcodebôs
, [
code_Àns
], #1

117 
BL
 
bô°ªam_wrôe_code


118 
CMP
 
	gcodebôs
, #N

119 
BLE
 
wrôe_√xt_code


120 
BL
 
bô°ªam_wrôe_Êush


121 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

127 
codes
 
	gRN
 1 ; 
poöãr
 
to
 code†
ªad
 
‰om
 
the
 
	gbô°ªam


131 
bô°ªam
 
	gRN
 0 ; 
cuºít
 
byã
 
addªss
 
ö
 
the
 
öput
 bitstream

132 
look_code
 
	gRN
 2 ; 
lookup
 
èbÀ
 
to
 
c⁄vît
 
√xt
 
	gN
-
bôs
Åÿ
a
 
code


133 
look_codebôs
 
	gRN
 3 ; 
lookup
 
èbÀ
 
to
 
c⁄vît
 
√xt
 
	gN
-
bôs
Åÿ
a
 
code
 
Àngth


134 
code
 
	gRN
 4 ; codê
ªad


135 
codebôs
 
	gRN
 5 ; 
Àngth
 
of
 
code
 
ªad


136 
bôbuf„r
 
	gRN
 6 ; 32-
bô
 
öput
 
	$buf„r
 (
big
 
ídün
)

137 
bô¶e·
 
RN
 7 ; 
numbî
 
of
 
vÆid
 
bôs
 
ö
 
the
 
buf„r
 - 
N


138 
tmp
 
RN
 8 ; 
s¸©ch


139 
tmp2
 
RN
 9 ; 
s¸©ch


140 
mask
 
RN
 12 ; 
N
-
bô
 
exåa˘i⁄
 
	`mask
 (1<<N)-1

142 
N
 
EQU
 8 ; 
u£
 
a
 
lookup
 
èbÀ
 
⁄
 8 
	`bôs
 (N 
mu°
 
be
 <= 9)

145 
bô°ªam_ªad_°¨t


146 
MOV
 
bô¶e·
, #32

147 
ªad_fûl_lo›


148 
LDRB
 
tmp
, [
bô°ªam
], #1

149 
ORR
 
bôbuf„r
, 
tmp
, bôbuf„r, 
LSL
#8

150 
SUBS
 
bô¶e·
, bitsleft, #8

151 
BGT
 
ªad_fûl_lo›


152 
MOV
 
bô¶e·
, #(32-
N
)

153 
MOV
 
mask
, #(1<<
N
)-1

154 
MOV
 
pc
, 
Ã


156 
bô°ªam_ªad_code


157 
LDRB
 
codebôs
, [
look_codebôs
, 
bôbuf„r
, 
LSR
#(32-
N
)]

158 
AND
 
code
, 
mask
, 
bôbuf„r
, 
LSR
#(32-
N
)

159 
LDR
 
code
, [
look_code
, code, 
LSL
#2]

160 
SUBS
 
bô¶e·
, bô¶e·, 
codebôs


161 
BMI
 
em±y_buf„r_‹_l⁄g_code


162 
MOV
 
bôbuf„r
, bôbuf„r, 
LSL
 
codebôs


163 
MOV
 
pc
, 
Ã


164 
em±y_buf„r_‹_l⁄g_code


165 
TEQ
 
codebôs
, #0
xFF


166 
BEQ
 
l⁄g_code


167 ; 
em±y
 
buf„r
 - 
fûl
 
up
 
wôh
 3 
byãs


168 ; 
as
 
N
 <9, 
we
 
ˇn
 
fûl
 3 
byãs
 
wôhout
 
ovîÊow


169 
LDRB
 
tmp
, [
bô°ªam
], #1

170 
LDRB
 
tmp2
, [
bô°ªam
], #1

171 
MOV
 
bôbuf„r
, bôbuf„r, 
LSL
 
codebôs


172 
LDRB
 
codebôs
, [
bô°ªam
], #1

173 
ORR
 
tmp
, 
tmp2
,Åmp, 
LSL
#8

174 
RSB
 
bô¶e·
, bô¶e·, #(8-
N
)

175 
ORR
 
tmp
, 
codebôs
,Åmp, 
LSL
#8

176 
ORR
 
bôbuf„r
, bôbuf„r, 
tmp
, 
LSL
 
bô¶e·


177 
RSB
 
bô¶e·
, bô¶e·, #(32-
N
)

178 
MOV
 
pc
, 
Ã


180 
l⁄g_code


181 ; 
h™dÀ
 
the
 
code
 
dïídög
 
⁄
Åhê
≠∂iˇti⁄


182 ; 
hîe
 
we
 
ju°
  
a
 
code
 
of
 -1

183 
MOV
 
code
, #-1

184 
MOV
 
pc
, 
Ã


186 ; *
	`bô°ªam_ªad_ã°
(*
bô°ªam
, *
codes
,

187 ; *
look_code
, *
look_codebôs
)

188 
bô°ªam_ªad_ã°


189 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

190 
BL
 
bô°ªam_ªad_°¨t


191 
ªad_√xt_code


192 
BL
 
bô°ªam_ªad_code


193 
CMP
 
	gcode
, #-1

194 
STRNE
 
	gcode
, [
codes
], #4

195 
BNE
 
ªad_√xt_code


196 
MOV
 
	gr0
, 
codes


197 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

199 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/ch06test.c

48 
	~<°dio.h
>

49 
	~<°rög.h
>

50 
	~<°dlib.h
>

51 
	~"ch06ã°.h
"

53 
	$maö
()

55 
îr‹s
=0;

57 
	`¥ötf
("TestingÉxamples for Chapter 6\n");

60 
	`TEST_TOLOWER
(
°r_tﬁowî_¥ñﬂd
);

61 
	`TEST_TOLOWER
(
°r_tﬁowî_uƒﬁÀd
);

62 
	`TEST_SHIFT
(
shi·_bôs
);

63 
	`TEST_SCALE
(
shi·_right
);

64 
	`TEST_MERGE
(
mîge_images
);

65 
	`TEST_MEMSET
(
my_mem£t
);

66 
	`TEST_MATRIX_MUL
(
m©rix_mul
);

67 
	`TEST_BITSTREAM
(
bô°ªam_wrôe_ã°
, 
bô°ªam_ªad_ã°
);

68 
	`TEST_SWITCH
(
swôch_absﬁuã
);

69 
	`TEST_SWITCH
(
swôch_ªœtive
);

70 
	`TEST_SWITCH
(
swôch_hash
);

72 
	`TEST_LOADSTORE
(
lﬂd_32_lôée
, 
°‹e_32_lôée
, 0);

73 
	`TEST_LOADSTORE
(
lﬂd_32_big
, 
°‹e_32_big
, 1);

74 
	`TEST_CHECKSUM
(
checksum_32_lôée
);

76 i‡(
îr‹s
)

78 
	`¥ötf
("Te° föished wôh %dÉº‹s.\n", 
îr‹s
);

83 
	`¥ötf
("TestÖassed.\n");

86 
	}
}

88 
	#TESTSIZE
 1024

	)

89 
	#TESTOFF
 64

	)

91 
	$ã°_mem£t
(

92 *
«me
,

93 
‚_mem£t
 *
‚


96 c⁄° 
sizes
[]={0,1,2,3,4,5,6,10,40,160,500};

97 
w‹k•a˚
[
TESTSIZE
];

98 
i
,
j
,
off£t
;

99 
îr‹s
=0;

101 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

103 
i
=0; i<(
sizes
)/(sizes[0]); i++)

105 
off£t
=0; offset<4; offset++)

107 #i‡
VERBOSE


108 
	`¥ötf
(" Mem£àsize=%d Alignmít=%d\n", 
sizes
[
i
], 
off£t
);

112 
j
=0; j<
TESTSIZE
; j++)

114 
w‹k•a˚
[
j
]=0x56;

119 (*
‚
)(
w‹k•a˚
+
TESTOFF
+
off£t
, 0xA4, 
sizes
[
i
]);

121 { 
t
=*(volatile *)0x12340000;

122 (*
‚
)(
w‹k•a˚
+
TESTOFF
+
off£t
, 0xA4, 
sizes
[
i
]);

123 
t
-=*(volatile *)0x12340000;

124 
	`¥ötf
("timê%d\n", 
t
);

129 
j
=0; j<
TESTSIZE
; j++)

131 
c
=0xA4;

133 i‡(
j
<
TESTOFF
+
off£t
 || j>=TESTOFF+off£t+
sizes
[
i
])

135 
c
=0x56;

137 i‡(
w‹k•a˚
[
j
]!=
c
)

139 
	`¥ötf
("Eº‹ off£t[%d]=0x%02x (ª‡0x%02x)\n", 
j
-
TESTOFF
-
off£t
, 
w‹k•a˚
[j], 
c
);

140 
îr‹s
++;

146  
îr‹s
;

147 
	}
}

151 
	#R
 40

	)

152 
	#S
 40

	)

153 
	#T
 40

	)

155 
	$ã°_m©rix_mul
(

156 *
«me
,

157 
‚_m©rix_mul
 *
‚


160 
a
[
R
*
T
];

161 
ªf_a
[
R
*
T
];

162 
b
[
R
*
S
];

163 
c
[
S
*
T
];

164 
i
, 
îr‹s
=0;

166 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

169 
i
=0; i<
R
*
S
; i++)

171 
b
[
i
] = (5*i) % 23;

173 
i
=0; i<
S
*
T
; i++)

175 
c
[
i
] = (7*i) % 31;

179 
	`ªf_m©rix_mul
(
ªf_a
, 
b
, 
c
);

180 (*
‚
)(
a
, 
b
, 
c
);

183 
i
=0; i<
R
*
T
; i++)

185 i‡(
a
[
i
] !
ªf_a
[i])

187 
îr‹s
++;

188 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
i
, 
ªf_a
[i], 
a
[i]);

192  
îr‹s
;

193 
	}
}

195 
	#NUM_BITS
 1024

	)

197 
	$ã°_shi·
(

198 *
«me
,

199 
‚_shi·
 *
‚


202 
out
[
NUM_BITS
/32];

203 
ªf_out
[
NUM_BITS
/32];

204 
ö
[
NUM_BITS
/32];

205 
i
, 
k
, 
îr‹s
=0;

206 
ˇºy
, 
ªf_ˇºy
;

209 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

211 
k
=1; k<32; k++)

213 #i‡
VERBOSE


217 
i
=0; i<
NUM_BITS
/32; i++)

219 
ö
[
i
]=()(i*0xA2345679+0x1234567f);

222 
ªf_ˇºy
 = 
	`ªf_shi·_bôs
(
ªf_out
, 
ö
, 
NUM_BITS
, 
k
);

223 
ˇºy
 = (*
‚
)(
out
, 
ö
, 
NUM_BITS
, 
k
);

225 
i
=0; i<
NUM_BITS
/32; i++)

227 i‡(
out
[
i
] !
ªf_out
[i])

229 
îr‹s
++;

230 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
i
, 
ªf_out
[i], 
out
[i]);

233 i‡(
ˇºy
 !
ªf_ˇºy
)

235 
îr‹s
++;

236 
	`¥ötf
("Mism©ch[ˇºy]: %08x %08x\n", 
ªf_ˇºy
, 
ˇºy
);

240  
îr‹s
;

241 
	}
}

243 
	#MAX_LEN
 100

	)

246 
	$ã°_tﬁowî
(

247 *
«me
,

248 
‚_tﬁowî
 *
‚


251 
out
[
MAX_LEN
];

252 
ªf_out
[
MAX_LEN
];

253 
ö
[
MAX_LEN
];

254 
Àn
, 
îr‹s
=0;

256 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

258 
Àn
=0;Üí<
MAX_LEN
;Üen++)

260 #i‡
VERBOSE


264 
	`gí_°r
(
ö
, 
Àn
);

266 
	`°r_tﬁowî
(
ªf_out
, 
ö
);

267 (*
‚
)(
out
, 
ö
);

269 i‡(
	`°rcmp
(
ªf_out
, 
out
))

271 
îr‹s
++;

272 
	`¥ötf
("Mism©ch: \"%s\" \"%s\"\n", 
ªf_out
, 
out
);

276  
îr‹s
;

277 
	}
}

279 
	#SCALE_LEN
 40

	)

282 
	$ã°_sˇÀ
(

283 *
«me
,

284 
‚_sˇÀ
 *
‚


287 
out
[
SCALE_LEN
];

288 
ö
[
SCALE_LEN
];

289 
i
, 
k
, 
îr‹s
=0;

291 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

293 
k
=0; k<31; k++)

295 #i‡
VERBOSE


299 
i
=0; i<
SCALE_LEN
; i++)

301 
ö
[
i
] = 0xa5367898 * i + 0x23478909;

304 (*
‚
)(
out
, 
ö
, 
k
);

306 
i
=0; i<
SCALE_LEN
; i++)

308 i‡(
out
[
i
] !(
ö
[i]>>
k
))

310 
îr‹s
++;

311 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
i
, 
ö
[i]>>
k
, 
out
[i]);

316  
îr‹s
;

317 
	}
}

319 
	$ã°_mîge
(

320 *
«me
,

321 
‚_mîge
 *
‚


324 
z
[
IMAGE_SIZE
];

325 
ªf_z
[
IMAGE_SIZE
];

326 
x
[
IMAGE_SIZE
];

327 
y
[
IMAGE_SIZE
];

328 
i
, 
a
, 
îr‹s
=0;

330 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

332 
a
=0;á<=256; )

334 #i‡
VERBOSE


335 
	`¥ötf
("Te°ög mîgêo‡öãnsôy %d\n", 
a
);

338 
	`gí_byãs
(
x
, 
IMAGE_SIZE
);

339 
	`gí_byãs
(
y
, 
IMAGE_SIZE
);

341 
	`ªf_mîge_images
(
ªf_z
, 
x
, 
y
, 
a
);

342 (*
‚
)(
z
, 
x
, 
y
, 
a
);

344 
i
=0; i<
IMAGE_SIZE
; i++)

346 i‡(
ªf_z
[
i
] !
z
[i])

348 
îr‹s
++;

349 
	`¥ötf
("Mism©ch[%d]: %02x %02x\n", 
i
, 
ªf_z
[i], 
z
[i]);

352 i‡(
a
==255)á=256;

353 
a
+=51;

356  
îr‹s
;

357 
	}
}

359 
	#N
 8

	)

360 
	#MESSAGE_LENGTH
 256

	)

362 
	$ã°_bô°ªam
(

363 *
«me_wrôe
,

364 *
«me_ªad
,

365 
‚_bô_wrôe
 *
‚_wrôe
,

366 
‚_bô_ªad
 *
‚_ªad


369 
look_code
[1<<
N
];

370 
look_codebôs
[1<<
N
];

371 
mesßge_codes
[
MESSAGE_LENGTH
];

372 
mesßge_codebôs
[
MESSAGE_LENGTH
];

373 
bô°ªam_buf„r
[
MESSAGE_LENGTH
+8];

374 
ª˚ived_codes
[
MESSAGE_LENGTH
];

375 
i
, 
k
, 
îr‹s
=0;

376 
Æignmít
;

378 
	`¥ötf
("Te°ög fun˘i⁄s: %†%s\n", 
«me_wrôe
, 
«me_ªad
);

384 
k
=1; k<=
N
; k++)

386 
code
 = (1<<
k
)-2;

389 
i
=0; i<(1<<(
N
-
k
)); i++)

391 
look_code
 [ (
code
 << (
N
-
k
)Ë+ 
i
 ] = code;

392 
look_codebôs
[ (
code
 << (
N
-
k
)Ë+ 
i
 ] = ()k;

395 
look_code
 [(1<<
N
)-1] = -1;

396 
look_codebôs
[(1<<
N
)-1] = 0xFF;

401 
i
=0; i<
MESSAGE_LENGTH
-1; i++)

403 
k
 = (
	`ønd
()%
N
)+1;

404 
mesßge_codes
[
i
] = (1<<
k
)-2;

405 
mesßge_codebôs
[
i
] = ()
k
;

407 
mesßge_codes
[
i
] = (1<<(
N
+1))-2;

408 
mesßge_codebôs
[
i
] = 
N
+1;

411 
Æignmít
=0;álignment<4;álignment++)

413 *
bô°ªam
 = 
bô°ªam_buf„r
 + 4 + 
Æignmít
;

414 
num_byãs
, 
num_codes
;

416 
bô°ªam
[-1] = 0x59;

417 
num_byãs
 = (*
‚_wrôe
)(
bô°ªam
, 
mesßge_codes
, 
mesßge_codebôs
) - bitstream;

418 i‡(
bô°ªam
[-1] != 0x59)

420 
îr‹s
++;

421 
	`¥ötf
("Wrôêbô†c‹ru±ed inôü»mem‹y %02x\n", 
bô°ªam
[-1]);

426 
	`¥ötf
("bitstream = ");

427 
i
=0; i<
num_byãs
; i++)

429 i‡((
i
 % 8)==0Ë
	`putch¨
('\n');

430 
k
=0x80; k!=0; k>>=1)

432 i‡(
k
 & 
bô°ªam
[
i
]Ë
	`putch¨
('1');

433 
	`putch¨
('0');

435 
	`putch¨
(' ');

437 
	`¥ötf
("\n");

440 #i‡
VERBOSE


441 
	`¥ötf
("Alignmít=%d Byã†wrôãn=%d\n", 
Æignmít
, 
num_byãs
);

444 
num_codes
 = (*
‚_ªad
)(
bô°ªam
, 
ª˚ived_codes
, 
look_code
, 
look_codebôs
) -Ñeceived_codes;

446 i‡(
num_codes
!=
MESSAGE_LENGTH
-1)

448 
îr‹s
++;

449 
	`¥ötf
("MesßgêÀngth inc‹ª˘: %d %d\n", 
MESSAGE_LENGTH
-1, 
num_codes
);

451 
i
=0; i<
num_codes
; i++)

453 i‡(
mesßge_codes
[
i
]!=
ª˚ived_codes
[i])

455 
îr‹s
++;

456 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
i
, 
mesßge_codes
[i], 
ª˚ived_codes
[i]);

462  
îr‹s
;

463 
	}
}

467 
	$ã°_swôch
(

468 *
«me
,

469 
‚_swôch
 *
ªf
,

470 
‚_swôch
 *
‚


473 
i
, 
j
, 
k
, 
îr‹s
=0;

475 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

477 
k
=0; k<512; k++)

479 
i
 = (*
ªf
)(
k
);

480 
j
 = (*
‚
)(
k
);

482 i‡(
i
 !
j
)

484 
îr‹s
++;

485 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
k
, 
i
, 
j
);

489  
îr‹s
;

490 
	}
}

494 
	$ã°_checksum
(

495 *
«me
,

496 
‚_checksum
 *
ªf
,

497 
‚_checksum
 *
‚


500 
d©a
[]="16ygsy1gygdy3287484848df82hdun32dkj2nidjhid23";

501 
i
, 
j
, 
a
, 
îr‹s
=0;

503 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

505 
a
=0;á<4;á++)

508 
i
 = (*
ªf
)(&
d©a
[
a
], 3);

509 
j
 = (*
‚
)(&
d©a
[
a
], 3);

511 i‡(
i
 !
j
)

513 
îr‹s
++;

514 
	`¥ötf
("Mism©ch[%d]: %08x %08x\n", 
a
, 
i
, 
j
);

518  
îr‹s
;

519 
	}
}

521 
	$ã°_lﬂd°‹e
(

522 *
lﬂd
,

523 *
°‹e
,

524 
‚_lﬂd
 *
Êﬂd
,

525 
‚_°‹e
 *
f°‹e
,

526 
big


529 
d©a
[8];

530 
a
, 
îr‹s
=0;

532 
	`¥ötf
("Te°ög†fun˘i⁄: %†%s\n", 
lﬂd
, 
°‹e
);

534 
a
=0;á<4;á++)

536 
vÆ
;

539 
	`mem£t
(
d©a
, 0, 8);

541 (*
f°‹e
)(
d©a
+
a
, 0x01020304);

542 i‡(
big
)

544 
vÆ
 = 
	`ªf_ªad_32_big
(
d©a
+
a
);

548 
vÆ
 = 
	`ªf_ªad_32_lôée
(
d©a
+
a
);

551 i‡(
vÆ
 != 0x01020304)

553 
îr‹s
++;

554 
	`¥ötf
("Mism©ch[%d]: st‹ê%08x %08x\n", 
a
, 0x01020304, 
vÆ
);

557 
vÆ
 = (*
Êﬂd
)(
d©a
+
a
);

558 i‡(
vÆ
 != 0x01020304)

560 
îr‹s
++;

561 
	`¥ötf
("Mism©ch[%d]:Üﬂd %08x %08x\n", 
a
, 0x01020304, 
vÆ
);

565  
îr‹s
;

566 
	}
}

	@/home/jkr555/arm/guide/ch06_asm/ch06test.h

48 #i‚de‡
CH06TEST_H


49 
	#CH06TEST_H


	)

52 
	#VERBOSE
 1

	)

55 sig√d 
	töt8
;

56 
	töt16
;

57 
	töt32
;

58 
	tuöt32
;

59 sig√d 
	tsöt32
;

60 
	töt64
;

61 
	tuöt64
;

62 sig√d 
	tsöt64
;

63 
	tªÆ
;

66 
	t‚_tﬁowî
(*
	tout
, *
	tö
);

67 
	t‚_shi·
(*
	tout
, *
	tö
, 
	tN
, 
	tk
);

68 
	t‚_sˇÀ
(*
	tout
, *
	tö
, 
	tshi·
);

69 
	t‚_mîge
(*
	tpz
, *
	tpx
, *
	tpy
, 
	ta
);

70 
	t‚_mem£t
(*
	ts
, 
	tc
, 
	tN
);

71 
	t‚_m©rix_mul
(*
	ta
, *
	tb
, *
	tc
);

72 *
	t‚_bô_wrôe
(*
	tbô°ªam
, *
	tcodes
, *
	tcode_Àns
);

73 *
	t‚_bô_ªad
(*
	tbô°ªam
, *
	tcodes
, *
	tlook_code
, *
	tlook_codebôs
);

74 
	t‚_swôch
(
	tty≥
);

75 
	t‚_lﬂd
(*
	td©a
);

76 
	t‚_°‹e
(*
	td©a
, 
	tx
);

77 
	t‚_checksum
(*
	td©a
, 
	tN
);

80 
gí_°r
(*
out
, 
Àn
);

81 
‚_tﬁowî
 
	g°r_tﬁowî
;

82 
‚_tﬁowî
 
	g°r_tﬁowî_¥ñﬂd
;

83 
‚_tﬁowî
 
	g°r_tﬁowî_uƒﬁÀd
;

86 
gí_byãs
(*
out
, 
Àn
);

87 
‚_shi·
 
	gªf_shi·_bôs
;

88 
‚_shi·
 
	gshi·_bôs
;

89 
‚_sˇÀ
 
	gshi·_right
;

90 
‚_mîge
 
	gªf_mîge_images
;

91 
‚_mîge
 
	gmîge_images
;

92 
	#IMAGE_SIZE
 (176*144Ë

	)

95 
‚_mem£t
 
	gmy_mem£t
;

96 
‚_m©rix_mul
 
	gm©rix_mul
;

97 
‚_m©rix_mul
 
	gªf_m©rix_mul
;

100 
‚_bô_wrôe
 
	gbô°ªam_wrôe_ã°
;

101 
‚_bô_ªad
 
	gbô°ªam_ªad_ã°
;

104 
‚_swôch
 
	gswôch_absﬁuã
;

105 
‚_swôch
 
	gswôch_ªœtive
;

106 
‚_swôch
 
	gswôch_hash
;

107 
‚_swôch
 
	gªf_swôch
;

108 
‚_swôch
 
	gªf_swôch_hash
;

109 
	#ªf_swôch_absﬁuã
 
ªf_swôch


	)

110 
	#ªf_swôch_ªœtive
 
ªf_swôch


	)

113 
‚_checksum
 
	gchecksum_32_lôée
;

114 
‚_checksum
 
	gªf_checksum_32_lôée
;

115 
‚_lﬂd
 
	glﬂd_32_lôée
;

116 
‚_lﬂd
 
	glﬂd_32_big
;

117 
‚_°‹e
 
	g°‹e_32_lôée
;

118 
‚_°‹e
 
	g°‹e_32_big
;

119 
ªf_ªad_32_lôée
(*
p
);

120 
ªf_ªad_32_big
(*
p
);

123 
ã°_tﬁowî
(

124 *
«me
,

125 
‚_tﬁowî
 *
‚


128 
	#TEST_TOLOWER
(
«me
Ë
îr‹s
 +
	`ã°_tﬁowî
(#«me, &«me);

	)

131 
ã°_shi·
(

132 *
«me
,

133 
‚_shi·
 *
‚


136 
	#TEST_SHIFT
(
«me
Ë
îr‹s
 +
	`ã°_shi·
(#«me, &«me);

	)

139 
ã°_sˇÀ
(

140 *
«me
,

141 
‚_sˇÀ
 *
‚


144 
	#TEST_SCALE
(
«me
Ë
îr‹s
 +
	`ã°_sˇÀ
(#«me, &«me);

	)

147 
ã°_mîge
(

148 *
«me
,

149 
‚_mîge
 *
‚


152 
	#TEST_MERGE
(
«me
Ë
îr‹s
 +
	`ã°_mîge
(#«me, &«me);

	)

155 
ã°_mem£t
(

156 *
«me
,

157 
‚_mem£t
 *
‚


160 
	#TEST_MEMSET
(
«me
Ë
îr‹s
 +
	`ã°_mem£t
(#«me, &«me);

	)

163 
ã°_m©rix_mul
(

164 *
«me
,

165 
‚_m©rix_mul
 *
‚


168 
	#TEST_MATRIX_MUL
(
«me
Ë
îr‹s
 +
	`ã°_m©rix_mul
(#«me, &«me);

	)

171 
ã°_bô°ªam
(

172 *
«me_wrôe
,

173 *
«me_ªad
,

174 
‚_bô_wrôe
 *
‚_wrôe
,

175 
‚_bô_ªad
 *
‚_ªad


178 
	#TEST_BITSTREAM
(
wrôe
,
ªad
Ë
îr‹s
 +
	`ã°_bô°ªam
(#wrôe, #ªad, &wrôe, &ªad);

	)

181 
ã°_swôch
(

182 *
«me
,

183 
‚_swôch
 *
‚_ªf
,

184 
‚_swôch
 *
‚


187 
	#TEST_SWITCH
(
«me
Ë
îr‹s
 +
	`ã°_swôch
(#«me, &
ªf_
##«me, &«me);

	)

190 
ã°_lﬂd°‹e
(

191 *
lﬂd
,

192 *
°‹e
,

193 
‚_lﬂd
 *fn_load,

194 
‚_°‹e
 *fn_store,

195 
big


198 
	#TEST_LOADSTORE
(
lﬂd
,
°‹e
,
big
Ë
îr‹s
 +
	`ã°_lﬂd°‹e
(#lﬂd, #°‹e, &lﬂd, &°‹e, big);

	)

201 
ã°_checksum
(

202 *
«me
,

203 
‚_checksum
 *
‚_ªf
,

204 
‚_checksum
 *
‚


207 
	#TEST_CHECKSUM
(
«me
Ë
îr‹s
 +
	`ã°_checksum
(#«me, &
ªf_
##«me, &«me);

	)

	@/home/jkr555/arm/guide/ch06_asm/main.c

47 
	~<°dio.h
>

49 
squ¨e
(
i
);

51 
	$maö
()

53 
i
;

55 
i
=0; i<10; i++)

57 
	`¥ötf
("Squ¨êo‡%d i†%d\n", 
i
, 
	`squ¨e
(i));

59 
	}
}

61 
	$squ¨e
(
i
)

63  
i
*i;

64 
	}
}

	@/home/jkr555/arm/guide/ch06_asm/main1.c

47 
	~<°dio.h
>

49 
squ¨e
(
i
);

51 
	$maö
()

53 
i
;

55 
i
=0; i<10; i++)

57 
	`¥ötf
("Squ¨êo‡%d i†%d\n", 
i
, 
	`squ¨e
(i));

59 
	}
}

	@/home/jkr555/arm/guide/ch06_asm/main3.s

46 
	gAREA
 |.
	gãxt
|, 
	gCODE
, 
READONLY


48 
EXPORT
 
maö


50 
	gIMPORT
 |
	gLib$$Reque°$$¨mlib
|, 
WEAK


51 
IMPORT
 
	g__maö
 ; 
C
 
libøry
 
íåy


52 
IMPORT
 
	g¥ötf
 ; 
¥öts
 
to
 
°dout


54 
i
 
	gRN
 4

56 ; 
	$maö
()

57 
maö


58 
STMFD
 
•
!, {
i
, 
Ã
}

59 
MOV
 
	gi
, #0

60 
lo›


61 
ADR
 
	gr0
, 
¥öt_°rög


62 
MOV
 
	gr1
, 
i


63 
MUL
 
	gr2
, 
	gi
, 
i


64 
BL
 
¥ötf


65 
ADD
 
	gi
, i, #1

66 
CMP
 
	gi
, #10

67 
BLT
 
lo›


68 
LDMFD
 
	g•
!, {
	gi
, 
	gpc
}

70 
¥öt_°rög


71 
	gDCB
 "Square of %d is %d\n", 0

73 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/main4.c

47 
	~<°dio.h
>

50 
sumof
(
N
, ...);

52 
	$maö
()

54 
	`¥ötf
("Em±y sum=%d\n", 
	`sumof
(0));

55 
	`¥ötf
("1=%d\n", 
	`sumof
(1,1));

56 
	`¥ötf
("1+2=%d\n", 
	`sumof
(2,1,2));

57 
	`¥ötf
("1+2+3=%d\n", 
	`sumof
(3,1,2,3));

58 
	`¥ötf
("1+2+3+4=%d\n", 
	`sumof
(4,1,2,3,4));

59 
	`¥ötf
("1+2+3+4+5=%d\n", 
	`sumof
(5,1,2,3,4,5));

60 
	`¥ötf
("1+2+3+4+5+6=%d\n", 
	`sumof
(6,1,2,3,4,5,6));

61 
	}
}

	@/home/jkr555/arm/guide/ch06_asm/matrix.s

47 
AREA
 
	gch06_6_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
	gm©rix_mul


53 
R
 
	gEQU
 40

54 
S
 
	gEQU
 40

55 
T
 
	gEQU
 40

57 
a
 
	gRN
 0 ; 
poöts
 
to
 
™
 
R
 
rows
 
x
 
T
 
cﬁumns
 
m©rix


58 
b
 
	gRN
 1 ; 
poöts
 
to
 
™
 
R
 
rows
 
x
 
S
 
cﬁumns
 
m©rix


59 
c
 
	gRN
 2 ; 
poöts
 
to
 
™
 
S
 
rows
 
x
 
T
 
cﬁumns
 
m©rix


60 
sum
 
	gRN
 3

61 
bvÆ
 
	gRN
 4

62 
cvÆ
 
	gRN
 12

63 
cou¡
 
	gRN
 14

65 ; 
	$m©rx_mul
(*
a
, *
b
, *
c
)

66 
m©rix_mul


67 
STMFD
 
•
!, {
r4
, 
Ã
}

68 
MOV
 
	gcou¡
, #(
	gR
-1Ë; 
	gi
=0

69 
lo›_i


70 
ADD
 
cou¡
, 
	gcou¡
, #(
	gT
-1)<<8 ; 
	gj
=0

71 
lo›_j


72 
ADD
 
cou¡
, 
	gcou¡
, #(
	gS
-1)<<16 ; 
	gk
=0

73 
MOV
 
sum
, #0

74 
lo›_k


75 
LDR
 
	gbvÆ
, [
b
], #4 ; bvÆ = 
B
[
i
,
k
], 
	gb
=&B[i,k+1]

76 
LDR
 
	gcvÆ
, [
c
], #4*
	gT
 ; cvÆ = 
C
[
k
,
j
], 
	gc
=&C[k+1,j]

77 
SUBS
 
	gcou¡
, cou¡, #1<<16 ; 
	gk
++

78 
MLA
 
	gsum
, 
	gbvÆ
, 
	gcvÆ
, sum ; sum +
bvÆ
*
cvÆ


79 
BPL
 
lo›_k
 ; 
bønch
 
	gk
<=
S
-1

80 
STR
 
sum
, [
a
], #4 ; 
	gA
[
i
,
j
] = sum, 
	ga
=&
A
[i,j+1]

81 
SUB
 
	gc
, c, #4*
S
*
	gT
 ; c = &
C
[0,
j
]

82 
ADD
 
	gc
, c, #4 ; c = &
C
[0,
j
+1]

83 
ADDS
 
	gcou¡
, cou¡, #(1<<16)-(1<<8Ë; 
zîo
 (
S
-1-
k
), 
	gj
++

84 
SUBPL
 
	gb
, b, #4*
	gS
 ; b = &
B
[
i
,0]

85 
BPL
 
	glo›_j
 ; 
bønch
 
	gj
<=
T
-1

86 
SUB
 
c
, 
	gc
, #4*
	gT
 ; c = &
C
[0,0]

87 
ADDS
 
	gcou¡
, cou¡, #(1<<8)-1 ; 
zîo
 (
T
-1-
j
), 
	gi
++

88 
BPL
 
	glo›_i
 ; 
bønch
 
	gi
<=
R
-1

89 
LDMFD
 
•
!, {
	gr4
, 
	gpc
}

91 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/memset.s

47 
AREA
 
	gch06_6_2
, 
	gCODE
, 
	gREADONLY


51 
EXPORT
 
my_mem£t


53 
T_1
 
	gEQU
 5

54 
T_2
 
	gEQU
 128

56 
s
 
	gRN
 0 ; 
cuºít
 
°rög
 
poöãr


57 
c
 
	gRN
 1 ; 
the
 
ch¨a˘î
 
to
 
fûl
 
wôh


58 
N
 
	gRN
 2 ; 
the
 
numbî
 
of
 
byãs
 
to
 
fûl


59 
c_1
 
	gRN
 3 ; 
c›õs
 
of
 
c


60 
c_2
 
	gRN
 4

61 
c_3
 
	gRN
 5

62 
c_4
 
	gRN
 6

63 
c_5
 
	gRN
 7

64 
c_6
 
	gRN
 8

65 
c_7
 
	gRN
 12

67 ; 
	$my_mem£t
(*
s
, 
c
, 
N
)

68 
my_mem£t


70 ; 
Fú°
 
£˘i⁄
 
Æigns
 
the
 
¨øy


71 
CMP
 
N
, #T_1 ; 
We
 
know
 
th©
 
T_1
>=3

72 
BCC
 
mem£t_1ByãBlk
 ; i‡(
N
<
T_1
) memset_1ByteBlk

73 
ANDS
 
c_1
, 
s
, #3 ; 
föd
 
the
 
byã
 
Æignmít
 
of
 s

74 
BEQ
 
Æig√d
 ; 
bønch
 
Æªady
áligned

75 
RSB
 
c_1
, c_1, #4 ; 
numbî
 
of
 
byãs
 
u¡û
 
Æignmít


76 
SUB
 
N
, N, 
c_1
 ; 
numbî
 
of
 
byãs
 
a·î
 
Æignmít


77 
CMP
 
c_1
, #2

78 
STRB
 
c
, [
s
], #1

79 
STRGEB
 
c
, [
s
], #1 ; i‡(
c_1
>=2Ë
thí
 
ouçut
 
byã


80 
STRGTB
 
c
, [
s
], #1 ; i‡(
c_1
>=3Ë
thí
 
ouçut
 
byã


81 
Æig√d
 ; 
the
 
s
 
¨øy
 
is
 
now
áligned

82 
ORR
 
c
, c, c, 
LSL
#8 ; 
du∂iˇã
 
the
 
ch¨a˘î


83 
ORR
 
c
, c, c, 
LSL
#16 ; 
to
 
fûl
 
Æl
 
four
 
byãs
 
of
 c

85 ; 
Sec⁄d
 
£˘i⁄
 
wrôes
 
blocks
 
of
 128 
byãs


86 
CMP
 
N
, #T_2 ; 
We
 
know
 
th©
 
T_2
 >= 128

87 
BCC
 
mem£t_4ByãBlk
 ; i‡(
N
<
T_2
) memset_4ByteBlk

88 
STMFD
 
•
!, {
c_2
-
c_6
} ; sèck s¸©chÑegi°îs

89 
MOV
 
	gc_1
, 
c


90 
MOV
 
	gc_2
, 
c


91 
MOV
 
	gc_3
, 
c


92 
MOV
 
	gc_4
, 
c


93 
MOV
 
	gc_5
, 
c


94 
MOV
 
	gc_6
, 
c


95 
MOV
 
	gc_7
, 
c


96 
SUB
 
	gN
, N, #128 ; 
byãs
 
À·
 
a·î
 
√xt
 
block


97 
	glo›128
 ; 
	gwrôe
 32 
	gw‹ds
 = 128 
byãs


98 
STMIA
 
s
!, {
	gc
, 
	gc_1
-
	gc_6
, 
	gc_7
} ; 
	gwrôe
 8 
w‹ds


99 
STMIA
 
	gs
!, {
	gc
, 
	gc_1
-
	gc_6
, 
	gc_7
} ; 
	gwrôe
 8 
w‹ds


100 
STMIA
 
	gs
!, {
	gc
, 
	gc_1
-
	gc_6
, 
	gc_7
} ; 
	gwrôe
 8 
w‹ds


101 
STMIA
 
	gs
!, {
	gc
, 
	gc_1
-
	gc_6
, 
	gc_7
} ; 
	gwrôe
 8 
w‹ds


102 
SUBS
 
	gN
, N, #128 ; 
byãs
 
À·
 
a·î
 
√xt
 
block


103 
BGE
 
lo›128


104 
ADD
 
	gN
, N, #128 ; 
numbî
 
of
 
byãs
 
À·


105 
LDMFD
 
	g•
!, {
	gc_2
-
	gc_6
} ; 
ª°‹e
 
c‹ru±ed
 
	gªgi°îs


107 ; 
Thúd
 
£˘i⁄
 
dóls
 
wôh
 
À·
 
ovî
 
byãs


108 
mem£t_4ByãBlk


109 
SUBS
 
	gN
, N, #4 ; 
åy
 
	gdoög
 4 
byãs


110 
	glo›4
 ; 
	gwrôe
 4 
byãs


111 
STRGE
 
	gc
, [
s
], #4

112 
SUBGES
 
	gN
, N, #4

113 
BGE
 
lo›4


114 
ADD
 
	gN
, N, #4 ; 
numbî
 
of
 
byãs
 
À·


115 
mem£t_1ByãBlk


116 
SUBS
 
	gN
, N, #1

117 
	glo›1
 ; 
	gwrôe
 1 
byã


118 
STRGEB
 
	gc
, [
s
], #1

119 
SUBGES
 
	gN
, N, #1

120 
BGE
 
lo›1


121 
MOV
 
	gpc
, 
	gÃ
 ; 
föished
 
so
 

123 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/merge.s

47 
AREA
 
	gch06_4_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
	gmîge_images


53 
IMAGE_WIDTH
 
	gEQU
 176 ; 
QCIF
 
width


54 
IMAGE_HEIGHT
 
	gEQU
 144 ; 
QCIF
 
height


56 
pz
 
	gRN
 0 ; 
poöãr
 
to
 
de°ö©i⁄
 
	$image
 (
w‹d
 
Æig√d
)

57 
px
 
RN
 1 ; 
poöãr
 
to
 
fú°
 
sour˚
 
	$image
 (
w‹d
 
Æig√d
)

58 
py
 
RN
 2 ; 
poöãr
 
to
 
£c⁄d
 
sour˚
 
	$image
 (
w‹d
 
Æig√d
)

59 
a
 
RN
 3 ; 8-
bô
 
sˇlög
 
	`Á˘‹
 (0-256)

61 
xx
 
RN
 4 ; 
hﬁds
 
four
 
x
 
pixñs
 [ 
x3
, 
x2
, 
x1
, 
x0
 ]

62 
yy
 
RN
 5 ; 
hﬁds
 
four
 
y
 
pixñs
 [ 
y3
, 
y2
, 
y1
, 
y0
 ]

63 
x
 
RN
 6 ; 
hﬁds
 
two
 
ex∑nded
 x 
pixñs
 [ 
x2
, 
x0
 ]

64 
y
 
RN
 7 ; 
hﬁds
 
two
 
ex∑nded
 y 
pixñs
 [ 
y2
, 
y0
 ]

65 
z
 
RN
 8 ; 
hﬁds
 
four
 z 
pixñs
 [ 
z3
, 
z2
, 
z1
, 
z0
 ]

66 
cou¡
 
RN
 12 ; 
numbî
 
of
 
pixñs
 
ªmaöög


67 
mask
 
RN
 14 ; 
c⁄°™t
 mask 
wôh
 
vÆue
 0x00ff00ff

69 ; 
	$mîge_images
(*
pz
, *
px
, *
py
, 
a
)

70 
mîge_images


71 
STMFD
 
•
!, {
r4
-
r8
, 
Ã
}

72 
MOV
 
	gcou¡
, #IMAGE_WIDTH*
IMAGE_HEIGHT


73 
LDR
 
	gmask
, =0x00FF00FF ; [ 0, 0xFF, 0, 0xFF ]

74 
mîge_lo›


75 
LDR
 
	gxx
, [
px
], #4 ; [ 
x3
, 
x2
, 
x1
, 
x0
 ]

76 
LDR
 
	gyy
, [
py
], #4 ; [ 
y3
, 
y2
, 
y1
, 
y0
 ]

77 
AND
 
	gx
, 
	gmask
, 
	gxx
 ; [ 0, 
x2
, 0, 
x0
 ]

78 
AND
 
	gy
, 
	gmask
, 
	gyy
 ; [ 0, 
y2
, 0, 
y0
 ]

79 
SUB
 
	gx
, x, 
	gy
 ; [ (
x2
-
y2
), (
x0
-
y0
) ]

80 
MUL
 
	gx
, 
	ga
, x ; [ 
a
*(
x2
-
y2
),á*(
x0
-
y0
) ]

81 
ADD
 
	gx
, x, 
	gy
, 
	gLSL
#8 ; [ 
w2
, 
w0
 ]

82 
AND
 
	gz
, 
	gmask
, 
	gx
, 
	gLSR
#8 ; [ 0, 
z2
, 0, 
z0
 ]

83 
AND
 
	gx
, 
	gmask
, 
	gxx
, 
	gLSR
#8 ; [ 0, 
x3
, 0, 
x1
 ]

84 
AND
 
	gy
, 
	gmask
, 
	gyy
, 
	gLSR
#8 ; [ 0, 
y3
, 0, 
y1
 ]

85 
SUB
 
	gx
, x, 
	gy
 ; [ (
x3
-
y3
), (
x1
-
y1
) ]

86 
MUL
 
	gx
, 
	ga
, x ; [ 
a
*(
x3
-
y3
),á*(
x1
-
y1
) ]

87 
ADD
 
	gx
, x, 
	gy
, 
	gLSL
#8 ; [ 
w3
, 
w1
 ]

88 
AND
 
	gx
, 
	gmask
, x, 
	gLSR
#8 ; [ 0, 
z3
, 0, 
z1
 ]

89 
ORR
 
	gz
, z, 
	gx
, 
	gLSL
#8 ; [ 
z3
, 
z2
, 
z1
, 
z0
 ]

90 
STR
 
	gz
, [
pz
], #4 ; 
°‹e
 
four
 
z
 
pixñs


91 
SUBS
 
	gcou¡
, count, #4

92 
BGT
 
mîge_lo›


93 
LDMFD
 
	g•
!, {
	gr4
-
	gr8
, 
	gpc
}

95 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/ref.c

48 
	~"ch06ã°.h
"

52 
	$gí_°r
(*
out
, 
Àn
)

54 
£ed
=0x123456;

56 
Àn
--)

58 
c
;

60 
£ed
 = seed * 0xabcdef45 + 0x13456789;

61 
c
 = ()(
£ed
 >> 25);

62 i‡(
c
==0x7F | c<0x20)

64 
c
=0x20;

66 *
out
++ = 
c
;

68 *
out
=0;

69 
	}
}

73 
	$gí_byãs
(*
out
, 
Àn
)

75 
£ed
=0x123456;

77 
Àn
--)

79 
£ed
 = seed * 0xabcdef45 + 0x13456789;

80 *
out
++ = ()(
£ed
 >> 24);

82 
	}
}

86 
	$°r_tﬁowî
(*
out
, *
ö
)

88 
c
;

92 
c
 = *
ö
++;

93 i‡(
c
>='A' && c<='Z')

95 
c
 = c + ('a' - 'A');

97 *
out
++ = ()
c
;

98 } 
c
);

99 
	}
}

103 
	$ªf_shi·_bôs
(*
out
, *
ö
,

104 
N
, 
k
)

106 
ˇºy
=0, 
x
;

110 
x
 = *
ö
++;

111 *
out
++ = (
x
<<
k
Ë| 
ˇºy
;

112 
ˇºy
 = 
x
 >> (32-
k
);

113 
N
 -= 32;

114 } 
N
);

116  
ˇºy
;

117 
	}
}

122 
	#R
 40

	)

123 
	#S
 40

	)

124 
	#T
 40

	)

126 
	$ªf_m©rix_mul
(*
a
, *
b
, *
c
)

128 
i
,
j
,
k
;

129 
sum
;

131 
i
=0; i<
R
; i++)

133 
j
=0; j<
T
; j++)

136 
sum
 = 0;

137 
k
=0; k<
S
; k++)

140 
sum
 +
b
[
i
*
S
+
k
]*
c
[k*
T
+
j
];

142 
a
[
i
*
T
+
j
] = 
sum
;

145 
	}
}

148 
	$ªf_mîge_images
(*
pz
, *
px
, *
py
, 
a
)

150 
i
;

152 
i
=0; i<
IMAGE_SIZE
; i++)

154 
pz
[
i
] = ()((
px
[i]*
a
 + 
py
[i]*(256-a))/256);

156 
	}
}

158 
	$mëhod_0
(Ë{  0xe0; 
	}
}

159 
	$mëhod_1
(Ë{  0xe1; 
	}
}

160 
	$mëhod_2
(Ë{  0xe2; 
	}
}

161 
	$mëhod_3
(Ë{  0xe3; 
	}
}

162 
	$mëhod_4
(Ë{  0xe4; 
	}
}

163 
	$mëhod_5
(Ë{  0xe5; 
	}
}

164 
	$mëhod_6
(Ë{  0xe6; 
	}
}

165 
	$mëhod_7
(Ë{  0xe7; 
	}
}

166 
	$mëhod_d
(Ë{  0xed; 
	}
}

171 
	$ªf_swôch
(
x
)

173 
x
)

175 0:  
	`mëhod_0
();

176 1:  
	`mëhod_1
();

177 2:  
	`mëhod_2
();

178 3:  
	`mëhod_3
();

179 4:  
	`mëhod_4
();

180 5:  
	`mëhod_5
();

181 6:  
	`mëhod_6
();

182 7:  
	`mëhod_7
();

183 :  
	`mëhod_d
();

185 
	}
}

189 
	$ªf_swôch_hash
(
x
)

191 
x
)

193 0x01:  
	`mëhod_0
();

194 0x02:  
	`mëhod_1
();

195 0x04:  
	`mëhod_2
();

196 0x08:  
	`mëhod_3
();

197 0x10:  
	`mëhod_4
();

198 0x20:  
	`mëhod_5
();

199 0x40:  
	`mëhod_6
();

200 0x80:  
	`mëhod_7
();

201 :  
	`mëhod_d
();

203 
	}
}

208 
	$ªf_ªad_32_lôée
(*
p
)

210  
p
[0] | (p[1]<<8) | (p[2]<<16) | (p[3]<<24);

211 
	}
}

213 
	$ªf_ªad_32_big
(*
p
)

215  (
p
[0]<<24) | (p[1]<<16) | (p[2]<<8) |Ö[3];

216 
	}
}

218 
	$ªf_checksum_32_lôée
(*
d©a
, 
N
)

220 
sum
=0;

224 
sum
 +
	`ªf_ªad_32_lôée
(
d©a
);

225 
d©a
 += 4;

226 } --
N
);

228  
sum
;

229 
	}
}

	@/home/jkr555/arm/guide/ch06_asm/shift.s

47 
AREA
 
	gch06_4_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
shi·_bôs


50 
EXPORT
 
	gshi·_right


54 
out
 
	gRN
 0 ; 
ouçut
 
¨øy
 
	gN
-
bô
 
shi·ed
 
öãgî


55 
ö
 
	gRN
 1 ; 
öput
 
¨øy
 
	gN
-
bô
 
sour˚
 
öãgî


56 
N
 
	gRN
 2 ; 
Àngth
 
ö
 
	$bôs
 (
a
 
mu…ùÀ
 
of
 256)

57 
k
 
RN
 3 ; 
numbî
 
of
 
bôs
 
to
 
	`shi·
 (0-32)

59 
x_0
 
RN
 5

60 
x_1
 
RN
 6

61 
x_2
 
RN
 7

62 
x_3
 
RN
 8

63 
x_4
 
RN
 9

64 
x_5
 
RN
 10

65 
x_6
 
RN
 11

66 
x_7
 
RN
 12

67 
y_0
 
RN
 4

68 
y_1
 
RN
 
x_0


69 
y_2
 
RN
 
x_1


70 
y_3
 
RN
 
x_2


71 
y_4
 
RN
 
x_3


72 
y_5
 
RN
 
x_4


73 
y_6
 
RN
 
x_5


74 
y_7
 
RN
 
x_6


75 
kr
 
RN
 
Ã


77 ; 
	$shi·_bôs
(*
out
, *
ö
, 
N
, 
k
)

78 
shi·_bôs


79 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
} ; savêªgi°îs

80 
RSB
 
	gkr
, 
	gk
, #32 ; k∏32-
k
;

81 
MOV
 
	gy_0
, #0 ; 
öôül
 
ˇºy


82 
lo›


83 
LDMIA
 
	gö
!, {
	gx_0
-
	gx_7
} ; 
	glﬂd
 8 
w‹ds


84 
ORR
 
	gy_0
, y_0, 
	gx_0
, 
LSL
 
	gk
 ; 
shi·
 
	gthe
 8 
w‹ds


85 
MOV
 
	gy_1
, 
	gx_0
, 
LSR
 
	gkr
 ; 
ªˇŒ
 x_0 = 
y_1


86 
ORR
 
y_1
, 
	gy_1
, 
	gx_1
, 
LSL
 
k


87 
MOV
 
	gy_2
, 
	gx_1
, 
LSR
 
kr


88 
ORR
 
	gy_2
, y_2, 
	gx_2
, 
LSL
 
k


89 
MOV
 
	gy_3
, 
	gx_2
, 
LSR
 
kr


90 
ORR
 
	gy_3
, y_3, 
	gx_3
, 
LSL
 
k


91 
MOV
 
	gy_4
, 
	gx_3
, 
LSR
 
kr


92 
ORR
 
	gy_4
, y_4, 
	gx_4
, 
LSL
 
k


93 
MOV
 
	gy_5
, 
	gx_4
, 
LSR
 
kr


94 
ORR
 
	gy_5
, y_5, 
	gx_5
, 
LSL
 
k


95 
MOV
 
	gy_6
, 
	gx_5
, 
LSR
 
kr


96 
ORR
 
	gy_6
, y_6, 
	gx_6
, 
LSL
 
k


97 
MOV
 
	gy_7
, 
	gx_6
, 
LSR
 
kr


98 
ORR
 
	gy_7
, y_7, 
	gx_7
, 
LSL
 
k


99 
STMIA
 
	gout
!, {
	gy_0
-
	gy_7
} ; 
	g°‹e
 8 
w‹ds


100 
MOV
 
	gy_0
, 
	gx_7
, 
LSR
 
kr


101 
SUBS
 
	gN
, N, #256 ; N -(8 
w‹ds
 * 32 
bôs
)

102 
BNE
 
lo›
 ; i‡(
	gN
!=0) loop;

103 
MOV
 
	gr0
, 
	gy_0
 ;  
	gˇºy
;

104 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

106 
	gMAP
 0 ; 
m≠
 
symbﬁs
 
to
 
off£ts
 
°¨tög
 
©
 
	goff£t
 0

107 
a
 
	gFIELD
 4 ;á 
	gis
 4 
byã
 
	$öãgî
 (
©
 
off£t
 0)

108 
b
 
FIELD
 2 ; b 
is
 2 
byã
 
	$öãgî
 (
©
 
off£t
 4)

109 
c
 
FIELD
 2 ; c 
is
 2 
byã
 
	$öãgî
 (
©
 
off£t
 6)

110 
d
 
FIELD
 64 ; d 
is
 
™
 
¨øy
 
of
 64 
	$ch¨a˘îs
 (
©
 
off£t
 8)

111 
Àngth
 
FIELD
 0 ;Üígth 
ªc‹ds
 
the
 
cuºít
 
off£t
 
ªached


113 
exam∂e


114 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
} ; savêˇŒìÑegi°îs

115 
SUB
 
	g•
, sp, #Àngth ; 
¸óã
 
°ack
 
	g‰ame


117 
STR
 
	gr0
, [
•
, #a] ; 
	ga
 = 
r0
;

118 
LDRSH
 
	gr1
, [
•
, #b] ;Ñ1 = 
b
;

119 
ADD
 
	gr2
, 
	g•
, #d ;Ñ2 = &
d
[0]

121 
ADD
 
	g•
, sp, #Àngth ; 
ª°‹e
 
the
 
°ack
 
poöãr


122 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
} ; 

126 
out
 
	gRN
 0 ; 
addªss
 
of
 
the
 
ouçut
 
¨øy


127 
ö
 
	gRN
 1 ; 
addªss
 
of
 
the
 
öput
 
¨øy


128 
˙tshf
 
	gRN
 2 ; 
cou¡
 
™d
 
shi·
 
right
 
amou¡


129 
x
 
	gRN
 3 ; 
s¸©ch
 
	gv¨übÀ


131 ; 
shi·_right
(*
out
, *
ö
, 
shi·
);

132 
shi·_right


133 
ADD
 
	g˙tshf
, c¡shf, #39<<8 ; 
	gcou¡
 = 39

134 
shi·_lo›


135 
LDR
 
x
, [
ö
], #4

136 
SUBS
 
	g˙tshf
, c¡shf, #1<<8 ; 
de¸emít
 
cou¡


137 
MOV
 
	gx
, x, 
ASR
 
	g˙tshf
 ; 
shi·
 
by
 shift

138 
STR
 
	gx
, [
out
], #4

139 
BGE
 
	gshi·_lo›
 ;  
	gcou¡
>=0

140 
MOV
 
pc
, 
Ã


142 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/square.s

46 
	gAREA
 |.
	gãxt
|, 
	gCODE
, 
READONLY


48 
EXPORT
 
	gsqu¨e


50 ; 
	$squ¨e
(
i
)

51 
squ¨e


52 
MUL
 
r1
, 
r0
,Ñ0 ;Ñ1 =Ñ0 *Ñ0

53 
MOV
 
r0
, 
r1
 ;Ñ0 =Ñ1

54 
MOV
 
pc
, 
Ã
 ;  
r0


56 
END


	@/home/jkr555/arm/guide/ch06_asm/square2.s

46 
	gAREA
 |.
	gãxt
|, 
	gCODE
, 
READONLY


48 
EXPORT
 
	gsqu¨e


50 ; 
	$squ¨e
(
i
)

51 
squ¨e


52 
MUL
 
r1
, 
r0
,Ñ0 ;Ñ1 =Ñ0 *Ñ0

53 
MOV
 
r0
, 
r1
 ;Ñ0 =Ñ1

54 
BX
 
Ã
 ;  
r0


56 
END


	@/home/jkr555/arm/guide/ch06_asm/sumof.s

46 
	gAREA
 |.
	gãxt
|, 
	gCODE
, 
READONLY


48 
EXPORT
 
sumof


50 
N
 
	gRN
 0 ; 
numbî
 
of
 
ñemíts
 
to
 
sum


51 
sum
 
	gRN
 1 ; 
cuºít
 
	gsum


53 ; 
	$sumof
(
N
, ...)

54 
sumof


55 
SUBS
 
N
, N, #1 ; dÿ
we
 
have
 
⁄e
 
ñemít


56 
MOVLT
 
sum
, #0 ; 
no
 
ñemíts
 
to
 sum!

57 
SUBS
 
N
, N, #1 ; dÿ
we
 
have
 
two
 
ñemíts


58 
ADDGE
 
sum
, sum, 
r2


59 
SUBS
 
N
, N, #1 ; dÿ
we
 
have
 
thªe
 
ñemíts


60 
ADDGE
 
sum
, sum, 
r3


61 
MOV
 
r2
, 
•
 ; 
t›
 
of
 
°ack


62 
lo›


63 
SUBS
 
N
, N, #1 ; dÿ
we
 
have
 
™Ÿhî
 
ñemít


64 
LDMGEFD
 
r2
!, {
r3
} ;Üﬂd fromÅhê°ack

65 
ADDGE
 
	gsum
, sum, 
r3


66 
BGE
 
lo›


67 
MOV
 
	gr0
, 
sum


68 
MOV
 
	gpc
, 
	gÃ
 ;  
r0


70 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/switch.s

47 
AREA
 
	gch06_8
, 
	gCODE
, 
READONLY


49 
EXPORT
 
swôch_absﬁuã


50 
EXPORT
 
swôch_ªœtive


51 
EXPORT
 
	gswôch_hash


55 
x
 
	gRN
 0

56 
hash
 
	gRN
 1

58 ; 
	$swôch_absﬁuã
(
x
)

59 
swôch_absﬁuã


60 
CMP
 
x
, #8

61 
LDRLT
 
pc
, [pc, 
x
, 
LSL
#2]

62 
B
 
mëhod_d


63 
DCD
 
mëhod_0


64 
DCD
 
mëhod_1


65 
DCD
 
mëhod_2


66 
DCD
 
mëhod_3


67 
DCD
 
mëhod_4


68 
DCD
 
mëhod_5


69 
DCD
 
mëhod_6


70 
DCD
 
mëhod_7


74 ; 
	$swôch_ªœtive
(
x
)

75 
swôch_ªœtive


76 
CMP
 
x
, #8

77 
ADDLT
 
pc
,Öc, 
x
, 
LSL
#2

78 
B
 
mëhod_d


79 
B
 
mëhod_0


80 
B
 
mëhod_1


81 
B
 
mëhod_2


82 
B
 
mëhod_3


83 
B
 
mëhod_4


84 
B
 
mëhod_5


85 
B
 
mëhod_6


86 
B
 
mëhod_7


90 ; 
	$swôch_hash
(
x
)

91 
swôch_hash


92 
RSB
 
hash
, 
x
, x, 
LSL
#4 ; hash=x*15

93 
RSB
 
hash
, hash, hash, 
LSL
#5 ; hash=
x
*15*31

94 
AND
 
hash
, hash, #7<<9 ; 
mask
 
out
 
the
 hash 
vÆue


95 
ADD
 
pc
,Öc, 
hash
, 
LSR
#6

96 
NOP


97 
TEQ
 
x
, #0
x01


98 
BEQ
 
mëhod_0


99 
TEQ
 
x
, #0
x02


100 
BEQ
 
mëhod_1


101 
TEQ
 
x
, #0
x40


102 
BEQ
 
mëhod_6


103 
TEQ
 
x
, #0
x04


104 
BEQ
 
mëhod_2


105 
TEQ
 
x
, #0
x80


106 
BEQ
 
mëhod_7


107 
TEQ
 
x
, #0
x20


108 
BEQ
 
mëhod_5


109 
TEQ
 
x
, #0
x10


110 
BEQ
 
mëhod_4


111 
TEQ
 
x
, #0
x08


112 
BEQ
 
mëhod_3


113 
B
 
mëhod_d


115 
mëhod_0


116 
MOV
 
r0
, #0
xe0


117 
MOV
 
pc
, 
Ã


118 
mëhod_1


119 
MOV
 
r0
, #0
xe1


120 
MOV
 
pc
, 
Ã


121 
mëhod_2


122 
MOV
 
r0
, #0
xe2


123 
MOV
 
pc
, 
Ã


124 
mëhod_3


125 
MOV
 
r0
, #0
xe3


126 
MOV
 
pc
, 
Ã


127 
mëhod_4


128 
MOV
 
r0
, #0
xe4


129 
MOV
 
pc
, 
Ã


130 
mëhod_5


131 
MOV
 
r0
, #0
xe5


132 
MOV
 
pc
, 
Ã


133 
mëhod_6


134 
MOV
 
r0
, #0
xe6


135 
MOV
 
pc
, 
Ã


136 
mëhod_7


137 
MOV
 
r0
, #0
xe7


138 
MOV
 
pc
, 
Ã


139 
mëhod_d


140 
MOV
 
r0
, #0
xed


141 
MOV
 
pc
, 
Ã


143 
END


	@/home/jkr555/arm/guide/ch06_asm/tolower.s

47 
AREA
 
	gch06_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
°r_tﬁowî_¥ñﬂd


50 
EXPORT
 
	g°r_tﬁowî_uƒﬁÀd


54 
out
 
	gRN
 0 ; 
poöãr
 
to
 
ouçut
 
°rög


55 
ö
 
	gRN
 1 ; 
poöãr
 
to
 
öput
 
°rög


56 
c
 
	gRN
 2 ; 
ch¨a˘î
 
lﬂded


57 
t
 
	gRN
 3 ; 
s¸©ch
 

59 ; 
	$°r_tﬁowî_¥ñﬂd
(*
out
, *
ö
)

60 
°r_tﬁowî_¥ñﬂd


61 
LDRB
 
c
, [
ö
], #1 ; c = *(in++)

62 
lo›


63 
SUB
 
t
, 
c
, #'
A
' ;Å = c-'A'

64 
CMP
 
t
, #'
Z
'-'
A
' ; if (t <= 'Z'-'A')

65 
ADDLS
 
c
, c, #'
a
'-'
A
' ; c += 'a'-'A';

66 
STRB
 
c
, [
out
], #1 ; *(out++) = ()c;

67 
TEQ
 
c
, #0 ; 
ã°
 c==0

68 
LDRNEB
 
c
, [
ö
], #1 ; if (c!=0) { c=*in++;

69 
BNE
 
lo›
 ; lo›; 
	}
}

70 
MOV
 
	gpc
, 
	gÃ
 ; 

74 
out
 
	gRN
 0 ; 
poöãr
 
to
 
ouçut
 
°rög


75 
ö
 
	gRN
 1 ; 
poöãr
 
to
 
öput
 
°rög


76 
ˇ0
 
	gRN
 2 ; 
	gch¨a˘î
 0

77 
t
 
	gRN
 3 ; 
s¸©ch
 

78 
ˇ1
 
	gRN
 12 ; 
	gch¨a˘î
 1

79 
ˇ2
 
	gRN
 14 ; 
	gch¨a˘î
 2

81 ; 
	$°r_tﬁowî_uƒﬁÀd
(*
out
, *
ö
)

82 
°r_tﬁowî_uƒﬁÀd


83 
STMFD
 
•
!, {
Ã
} ; fun˘i⁄É¡ry

84 
lo›_√xt3


85 
LDRB
 
	gˇ0
, [
ö
], #1 ; ca0 = *in++;

86 
LDRB
 
	gˇ1
, [
ö
], #1 ; ca1 = *in++;

87 
LDRB
 
	gˇ2
, [
ö
], #1 ; ca2 = *in++;

88 
SUB
 
	gt
, 
	gˇ0
, #'
	gA
' ; convert ca0ÅoÜower case

89 
CMP
 
	gt
, #'
	gZ
'-'
	gA
'

90 
ADDLS
 
	gˇ0
, ca0, #'
	ga
'-'
	gA
'

91 
SUB
 
	gt
, 
	gˇ1
, #'
	gA
' ; convert ca1ÅoÜower case

92 
CMP
 
	gt
, #'
	gZ
'-'
	gA
'

93 
ADDLS
 
	gˇ1
, ca1, #'
	ga
'-'
	gA
'

94 
SUB
 
	gt
, 
	gˇ2
, #'
	gA
' ; convert ca2ÅoÜower case

95 
CMP
 
	gt
, #'
	gZ
'-'
	gA
'

96 
ADDLS
 
	gˇ2
, ca2, #'
	ga
'-'
	gA
'

97 
STRB
 
	gˇ0
, [
out
], #1 ; *
	gout
++ = 
ˇ0
;

98 
TEQ
 
	gˇ0
, #0 ; if (ca0!=0)

99 
STRNEB
 
ˇ1
, [
out
], #1 ; *
	gout
++ = ca1;

100 
TEQNE
 
	gˇ1
, #0 ; i‡(
	gˇ0
!=0 && 
ˇ1
!=0)

101 
STRNEB
 
ˇ2
, [
out
], #1 ; *
	gout
++ = ca2;

102 
TEQNE
 
	gˇ2
, #0 ; i‡(
	gˇ0
!=0 && 
ˇ1
!=0 && 
ˇ2
!=0)

103 
BNE
 
lo›_√xt3
 ; 
	glo›_√xt3
;

104 
LDMFD
 
	g•
!, {
	gpc
} ; ;

106 
	gEND


	@/home/jkr555/arm/guide/ch06_asm/unalign.s

47 
AREA
 
	gch06_9
, 
	gCODE
, 
READONLY


49 
EXPORT
 
lﬂd_32_lôée


50 
EXPORT
 
lﬂd_32_big


51 
EXPORT
 
°‹e_32_lôée


52 
EXPORT
 
°‹e_32_big


53 
EXPORT
 
	gchecksum_32_lôée


57 
p
 
	gRN
 0

58 
x
 
	gRN
 1

59 
t0
 
	gRN
 2

60 
t1
 
	gRN
 3

61 
t2
 
	gRN
 12

63 ; 
	$lﬂd_32_lôée
(*
p
)

64 
lﬂd_32_lôée


65 
LDRB
 
x
, [
p
]

66 
LDRB
 
t0
, [
p
, #1]

67 
LDRB
 
t1
, [
p
, #2]

68 
LDRB
 
t2
, [
p
, #3]

69 
ORR
 
x
, x, 
t0
, 
LSL
#8

70 
ORR
 
x
, x, 
t1
, 
LSL
#16

71 
ORR
 
r0
, 
x
, 
t2
, 
LSL
#24

72 
MOV
 
pc
, 
Ã


74 ; 
	$lﬂd_32_big
(*
p
)

75 
lﬂd_32_big


76 
LDRB
 
x
, [
p
]

77 
LDRB
 
t0
, [
p
, #1]

78 
LDRB
 
t1
, [
p
, #2]

79 
LDRB
 
t2
, [
p
, #3]

80 
ORR
 
x
, 
t0
, x, 
LSL
#8

81 
ORR
 
x
, 
t1
, x, 
LSL
#8

82 
ORR
 
r0
, 
t2
, 
x
, 
LSL
#8

83 
MOV
 
pc
, 
Ã


85 ; 
	$°‹e_32_lôée
(*
p
, 
x
)

86 
°‹e_32_lôée


87 
STRB
 
x
, [
p
]

88 
MOV
 
t0
, 
x
, 
LSR
#8

89 
STRB
 
t0
, [
p
, #1]

90 
MOV
 
t0
, 
x
, 
LSR
#16

91 
STRB
 
t0
, [
p
, #2]

92 
MOV
 
t0
, 
x
, 
LSR
#24

93 
STRB
 
t0
, [
p
, #3]

94 
MOV
 
pc
, 
Ã


96 ; 
	$°‹e_32_big
(*
p
, 
x
)

97 
°‹e_32_big


98 
MOV
 
t0
, 
x
, 
LSR
#24

99 
STRB
 
t0
, [
p
]

100 
MOV
 
t0
, 
x
, 
LSR
#16

101 
STRB
 
t0
, [
p
, #1]

102 
MOV
 
t0
, 
x
, 
LSR
#8

103 
STRB
 
t0
, [
p
, #2]

104 
STRB
 
x
, [
p
, #3]

105 
MOV
 
pc
, 
Ã


109 
sum
 
RN
 0 ; 
cuºít
 
checksum


110 
N
 
RN
 1 ; 
numbî
 
of
 
w‹ds
 
À·
 
to
 
sum


111 
d©a
 
RN
 2 ; 
w‹d
 
Æig√d
 
öput
 d©®
poöãr


112 
w
 
RN
 3 ; 
d©a
 
w‹d


114 ; 
	$checksum_32_lôée
(*
d©a
, 
N
)

115 
checksum_32_lôée


116 
BIC
 
d©a
, 
r0
, #3 ; 
Æig√d
 d©®
poöãr


117 
AND
 
w
, 
r0
, #3 ; 
byã
 
Æignmít
 
off£t


118 
MOV
 
sum
, #0 ; 
öôül
 
checksum


119 
LDR
 
pc
, [pc, 
w
, 
LSL
#2] ; 
⁄
 
Æignmít


120 
NOP
 ; 
∑ddög


121 
DCD
 
checksum_0


122 
DCD
 
checksum_1


123 
DCD
 
checksum_2


124 
DCD
 
checksum_3


126 
MACRO


127 
CHECKSUM
 
$Æignmít


128 
checksum_$Æignmít


129 
LDR
 
w
, [
d©a
], #4 ; 
¥e
-
lﬂd
 
fú°
 
vÆue


130 10 ; 
lo›


131 
IF
 
$Æignmít
<>0

132 
ADD
 
sum
, sum, 
w
, 
LSR
#8*
$Æignmít


133 
LDR
 
w
, [
d©a
], #4

134 
SUBS
 
N
, N, #1

135 
ADD
 
sum
, sum, 
w
, 
LSL
#32-8*
$Æignmít


136 
ELSE


137 
ADD
 
sum
, sum, 
w


138 
LDR
 
w
, [
d©a
], #4

139 
SUBS
 
N
, N, #1

140 
ENDIF


141 
BGT
 %
BT10


142 
MOV
 
pc
, 
Ã


143 
MEND


145 ; 
gíî©e
 
four
 
checksum
 
routöes


146 ; 
⁄e
 
óch
 
possibÀ
 
byã
 
Æignmít


147 
CHECKSUM
 0

148 
CHECKSUM
 1

149 
CHECKSUM
 2

150 
CHECKSUM
 3

152 
END


	@/home/jkr555/arm/guide/ch07_primitives/bits.s

47 
AREA
 
	gch07_6
, 
	gCODE
, 
READONLY


49 
EXPORT
 
byã_ªvî£_2ªg


50 
EXPORT
 
byã_ªvî£


51 
EXPORT
 
bô_cou¡


52 
EXPORT
 
bô_ªvî£


53 
EXPORT
 
bô_•ªad


54 
EXPORT
 
bô_ªv_•ªad


56 
n
 
	gRN
 0 ; 
	göput
, 
ouçut
 
w‹ds


57 
t
 
	gRN
 1 ; 
	gs¸©ch
 1

58 
m
 
	gRN
 2 ; 
	gs¸©ch
 2

60 
	gbyã_ªvî£
 ; 
	gn
 = [ 
a
 , 
b
 , 
c
 , 
d
 ]

61 
MVN
 
	gm
, #0
	gx0000FF00
 ; m = [0xFF,0xFF,0x00,0xFF ]

62 
EOR
 
	gt
, 
	gn
,Ç, 
	gROR
 #16 ;Å = [ 
a
^
c
, 
b
^
d
,á^c, b^d ]

63 
AND
 
	gt
, 
	gm
,Å, 
	gLSR
#8 ;Å = [ 0 , 
a
^
c
, 0 ,á^c ]

64 
EOR
 
	gn
, 
	gt
,Ç, 
	gROR
 #8 ;Ç = [ 
d
 , 
c
 , 
b
 , 
a
 ]

65 
MOV
 
	gpc
, 
Ã


67 
	gbyã_ªvî£_2ªg
 ; 
	gn
 = [ 
a
 , 
b
 , 
c
, 
d
 ]

68 
EOR
 
	gt
, 
	gn
,Ç, 
	gROR
#16 ;Å = [ 
a
^
c
, 
b
^
d
,á^c, b^d ]

69 
MOV
 
	gt
,Å, 
	gLSR
#8 ;Å = [ 0 , 
a
^
c
, 
b
^
d
,á^c ]

70 
BIC
 
	gt
,Å, #0
	gxFF00
 ;Å = [ 0 , 
a
^
c
, 0 ,á^c ]

71 
EOR
 
	gn
, 
	gt
,Ç, 
	gROR
 #8 ;Ç = [ 
d
 , 
c
 , 
b
 , 
a
 ]

72 
MOV
 
	gpc
, 
Ã


74 
mask0
 
	gEQU
 0x55555555 ; 
£t
 
bô
 
posôi⁄s
 
wôh
 
	gb0
=0

75 
mask1
 
EQU
 0x33333333 ; 
£t
 
bô
 
posôi⁄s
 
wôh
 
	gb1
=0

76 
mask2
 
EQU
 0x0F0F0F0F ; 
£t
 
bô
 
posôi⁄s
 
wôh
 
	gb2
=0

77 
mask3
 
EQU
 0x00FF00FF ; 
£t
 
bô
 
posôi⁄s
 
wôh
 
	gb3
=0

78 
mask4
 
EQU
 0x0000FFFF ; 
£t
 
bô
 
posôi⁄s
 
wôh
 
	gb4
=0

80 
MACRO


81 
PERMUTE_A
 
$k


82 ; [ ... 
b_k
 ... ] -> [ ... 1-b_k ... ]

83 
IF
 
	g$k
=4

84 
MOV
 
n
, 
	gn
, 
	gROR
#16

85 
ELSE


86 
LDR
 
	gm
, =
mask$k


87 
AND
 
t
, 
	gm
, 
	gn
, 
	gLSR
#(1<<
	g$k
Ë; 
gë
 
bôs
 
wôh
 
ödex
 
	gb_k
=1

88 
AND
 
n
, 
	gn
, 
	gm
 ; 
gë
 
bôs
 
wôh
 
ödex
 
	gb_k
=0

89 
ORR
 
n
, 
	gt
, 
	gn
, 
	gLSL
#(1<<
	g$k
Ë; 
sw≠
 
them
 
ovî


90 
ENDIF


91 
MEND


93 
MACRO


94 
PERMUTE_B
 
	g$j
, 
	g$k


95 ; [ .. 
b_j
 .. 
b_k
 .. ] -> [ .. b_k .. b_j .. ] 
™d
 
	gj
>
k


96 
LDR
 
	gm
, =(
mask$j
:
AND
::
NOT
:
mask$k
Ë; 
£t
 
whí
 
	gb_j
=0 
b_k
=1

97 
EOR
 
t
, 
	gn
,Ç, 
	gLSR
#(1<<
	g$j
)-(1<<
	g$k
)

98 
AND
 
	gt
,Å, 
	gm
 ; 
gë
 
bôs
 
whîe
 
	gb_j
!=
b_k


99 
EOR
 
n
, 
	gn
, 
	gt
, 
	gLSL
#(1<<
	g$j
)-(1<<
	g$k
Ë; 
ch™ge
 
whí
 
	gb_j
=1 
b_k
=0

100 
EOR
 
n
, 
	gn
, 
	gt
 ; 
ch™ge
 
whí
 
	gb_j
=0 
b_k
=1

101 
MEND


103 
MACRO


104 
PERMUTE_C
 
$j
, 
	g$k


105 ; [ .. 
b_j
 .. 
b_k
 .. ] -> [ .. 1-b_k .. 1-b_j .. ] 
™d
 
	gj
>
k


106 
LDR
 
	gm
, =(
mask$j
:
AND
:
mask$k
Ë; 
£t
 
whí
 
	gb_j
=0 
b_k
=0

107 
EOR
 
t
, 
	gn
,Ç, 
	gLSR
#(1<<
	g$j
)+(1<<
	g$k
)

108 
AND
 
	gt
,Å, 
	gm
 ; 
gë
 
bôs
 
whîe
 
	gb_j
==
b_k


109 
EOR
 
n
, 
	gn
, 
	gt
, 
	gLSL
#(1<<
	g$j
)+(1<<
	g$k
Ë; 
ch™ge
 
whí
 
	gb_j
=1 
b_k
=1

110 
EOR
 
n
, 
	gn
, 
	gt
 ; 
ch™ge
 
whí
 
	gb_j
=0 
b_k
=0

111 
MEND


113 
bô_ªvî£
 ; 
	gn
[ 
b4
 
b3
 
b2
 
b1
 
b0
 ]

114 
PERMUTE_A
 0 ; -> [ 
b4
 
b3
 
b2
 
b1
 1-
b0
 ]

115 
	gPERMUTE_A
 1 ; -> [ 
b4
 
b3
 
b2
 1-
b1
 1-
b0
 ]

116 
	gPERMUTE_A
 2 ; -> [ 
b4
 
b3
 1-
b2
 1-
b1
 1-
b0
 ]

117 
	gPERMUTE_A
 3 ; -> [ 
b4
 1-
b3
 1-
b2
 1-
b1
 1-
b0
 ]

118 
	gPERMUTE_A
 4 ; -> [ 1-
b4
 1-
b3
 1-
b2
 1-
b1
 1-
b0
 ]

119 
MOV
 
	gpc
, 
Ã


121 
	gbô_•ªad
 ; 
	gn
[ 
b4
 
b3
 
b2
 
b1
 
b0
 ]

122 
PERMUTE_B
 4,3 ; -> [ 
b3
 
b4
 
b2
 
b1
 
b0
 ]

123 
	gPERMUTE_B
 3,2 ; -> [ 
b3
 
b2
 
b4
 
b1
 
b0
 ]

124 
	gPERMUTE_B
 2,1 ; -> [ 
b3
 
b2
 
b1
 
b4
 
b0
 ]

125 
	gPERMUTE_B
 1,0 ; -> [ 
b3
 
b2
 
b1
 
b0
 
b4
 ]

126 
MOV
 
	gpc
, 
Ã


128 
	gbô_ªv_•ªad
 ; 
	gn
[ 
b4
 
b3
 
b2
 
b1
 
b0
 ]

129 
PERMUTE_C
 4,3 ; -> [ 1-
b3
 1-
b4
 
b2
 
b1
 
b0
 ]

130 
	gPERMUTE_C
 3,2 ; -> [ 1-
b3
 1-
b2
 
b4
 
b1
 
b0
 ]

131 
	gPERMUTE_C
 2,1 ; -> [ 1-
b3
 1-
b2
 1-
b1
 1-
b4
 
b0
 ]

132 
	gPERMUTE_C
 1,0 ; -> [ 1-
b3
 1-
b2
 1-
b1
 1-
b0
 
b4
 ]

133 
MOV
 
	gpc
, 
	gÃ


137 
bô_cou¡
 ; 
öput
 
	gn
 = 
xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxy


138 
LDR
 
m
, =0x49249249 ; 01001001001001001001001001001001

139 
AND
 
	gt
, 
	gn
, 
	gm
, 
	gLSL
 #1 ; 
x00x00x00x00x00x00x00x00x00x00x0


140 
SUB
 
	gn
,Ç, 
	gt
, 
	gLSR
 #1 ; 
uuzuuzuuzuuzuuzuuzuuzuuzuuzuuzuu


141 
AND
 
	gt
, 
	gn
, 
	gm
, 
	gLSR
 #1 ; 00
z00z00z00z00z00z00z00z00z00z00


142 
ADD
 
	gn
,Ç, 
	gt
 ; 
	gvv0vv0vv0vv0vv0vv0vv0vv0vv0vv0vv


143 ; 
åùÀts
 
	gsummed
, 
	guu
=
x
+
y
, 
	gvv
=x+y+
z


144 
LDR
 
m
, =0xC71C71C7 ; 11000111000111000111000111000111

145 
ADD
 
	gn
,Ç,Ç, 
	gLSR
 #3 ; 
ww0vvwww0vvwww0vvwww0vvwww0vvwww


146 
AND
 
	gn
,Ç, 
	gm
 ; 
	gww000www000www000www000www000www


147 ; 
óch
 
www
 
is
 
the
 
sum
 
of
 
six
 
adja˚¡
 
bôs


148 
ADD
 
	gn
,Ç,Ç, 
	gLSR
 #6 ; 
sum
 
the
 
	gw
's

149 
ADD
 
	gn
,Ç,Ç, 
	gLSR
 #12

150 
ADD
 
	gn
,Ç,Ç, 
	gLSR
 #24

151 
AND
 
	gn
,Ç, #63 ; 
mask
 
out
 
úªÀv™t
 
bôs


152 
MOV
 
	gpc
, 
Ã


154 
	gEND


	@/home/jkr555/arm/guide/ch07_primitives/ch07test.c

48 
	~<°dio.h
>

49 
	~"ch07ã°.h
"

51 
	$maö
()

53 
îr‹s
=0;

55 
	`¥ötf
("TestingÉxamples for Chapter 7\n");

58 
	`TEST_B64
(
mul_64to64
, 
gí_s64
, gen_s64, 1);

59 
	`TEST_B64TO128
(
umul_64to128_¨m7m
, 
gí_s64
, gen_s64, 1);

60 
	`TEST_B64TO128
(
umul_64to128_¨m9e
, 
gí_s64
, gen_s64, 1);

61 
	`TEST_B64TO128
(
smul_64to128
, 
gí_s64
, gen_s64, 1);

63 
	`TEST_U32TOB32
(
un‹m_¨m9e
, 
gí_s32
, 1);

64 
	`TEST_U32TOB32
(
¢‹m_¨m9e
, 
gí_s32
, 1);

65 
	`TEST_U32TOB32
(
un‹m_¨m7m
, 
gí_s32
, 1);

66 
	`TEST_U32TOB32
(
un‹m_¨m7m_hash
, 
gí_s32
, 1);

67 
	`TEST_U32
(
˘z_¨m9e
, 
gí_s32_˘z
, 1);

68 
	`TEST_U32
(
˘z_¨m7m
, 
gí_s32_˘z
, 1);

70 
	`TEST_B32TOB32
(
udiv_sim∂e_ã°
, 
gí_s32
, gen_s32, 1);

71 
	`TEST_B32TOB32
(
udiv_32by32_¨m7m
, 
gí_s32
, gen_s32, 1);

72 
	`TEST_B32TOB32
(
udiv_32by16_¨m7m
, 
gí_u15
, 
gí_s32
, 1);

73 
	`TEST_32_64TOB32
(
udiv_64by32_¨m7m
, 
gí_u31
, 
gí_s64
, 1);

74 
	`TEST_B32TOB32
(
udiv_32by32_¨m9e
, 
gí_s32
, gen_s32, 1);

75 
	`TEST_B32
(
udiv_q15_¨m9e
, 
gí_u15
, 
gí_u31
, 1);

76 
	`TEST_B32
(
udiv_q31_¨m9e
, 
gí_u31
, 
gí_s32
, 1);

77 
	`TEST_B32TOB32
(
sdiv_32by32_¨m7m
, 
gí_s32
, gen_s32, 1);

79 
	`TEST_U32
(
usqr_sim∂e_ã°
, 
gí_s32
, 1);

80 
	`TEST_U32
(
usqr_32
, 
gí_s32
, 1);

81 
	`TEST_U32
(
ucbr_32
, 
gí_s32
, 1);

82 
	`TEST_U32
(
rsqr_32
, 
gí_s32
, 2);

84 
	`TEST_U32
(
ulog2_32
, 
gí_s32
, 2);

85 
	`TEST_U32
(
uexp2_32
, 
gí_s32
, 4);

86 
	`TEST_U32
(
sö_32
, 
gí_s32
, 4);

87 
	`TEST_U32
(
cos_32
, 
gí_s32
, 4);

89 
	`TEST_U32
(
byã_ªvî£
, 
gí_s32
, 1);

90 
	`TEST_U32
(
byã_ªvî£_2ªg
, 
gí_s32
, 1);

91 
	`TEST_U32
(
bô_cou¡
, 
gí_s32
, 1);

92 
	`TEST_U32
(
bô_ªvî£
, 
gí_s32
, 1);

93 
	`TEST_U32
(
bô_•ªad
, 
gí_s32
, 1);

94 
	`TEST_U32
(
bô_ªv_•ªad
, 
gí_s32
, 1);

96 
	`TEST_U32
(
qßt_16
, 
gí_s32
, 1);

97 
	`TEST_B32
(
qshl_32
, 
gí_s32
, 
gí_shi·
, 1);

98 
	`TEST_B32
(
qshr_32
, 
gí_s32
, 
gí_shi·
, 1);

99 
	`TEST_B32
(
qadd_32
, 
gí_s32
, gen_s32, 1);

100 
	`TEST_B32
(
qsub_32
, 
gí_s32
, gen_s32, 1);

101 
	`TEST_B32
(
abß_32
, 
gí_s32
, gen_s32, 1);

102 
	`TEST_U32
(
qabs_32
, 
gí_s32
, 1);

104 
	`TEST_RAND
(
ønd_32
);

106 i‡(
îr‹s
)

108 
	`¥ötf
("Te° föished wôh %dÉº‹s.\n", 
îr‹s
);

113 
	`¥ötf
("TestÖassed.\n");

116 
	}
}

118 
	$ã°_b64
(

119 *
«me
,

120 
‚_b64
 *
ªf
,

121 
‚_b64
 *
‚
,

122 
‚_u64
 *
√xtb
,

123 
‚_u64
 *
√xtc
,

124 
maxîr


127 
öt64
 
b
=0,
c
=0,
out
,
ªfout
,
d
;

128 
îr
=0;

130 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

134 #i‡
VERBOSE


135 
	`¥ötf
("b = %016Œx\n", 
b
);

140 
ªfout
 = (*
ªf
)(
b
,
c
);

141 
out
 = (*
‚
)(
b
,
c
);

142 
d
 = 
out
-
ªfout
;

143 i‡(
d
<0) d=-d;

144 i‡(
d
>=
maxîr
)

146 
	`¥ötf
("FAIL %s(%016Œx, %016ŒxË", 
«me
, 
b
, 
c
);

147 
	`¥ötf
("%016Œx (ªf: %016Œx)\n", 
out
, 
ªfout
);

148 
îr
++;

150 
c
 = (*
√xtc
)(c);

151 } 
c
);

153 
b
 = (*
√xtb
)(b);

154 } 
b
);

156  
îr
;

157 
	}
}

159 
	$ã°_b64to128
(

160 *
«me
,

161 
‚_b64to128
 *
ªf
,

162 
‚_b64to128
 *
‚
,

163 
‚_u64
 *
√xtb
,

164 
‚_u64
 *
√xtc
,

165 
maxîr


168 
öt64
 
b
=0,
c
=0;

169 
uöt128
 
ªfout
, 
out
;

170 
d
;

171 
îr
=0;

173 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

177 #i‡
VERBOSE


178 
	`¥ötf
("b = %016Œx\n", 
b
);

183 
ªfout
 = (*
ªf
)(
b
,
c
);

184 
out
 = (*
‚
)(
b
,
c
);

185 
d
 = ()(
out
.
a0
-
ªfout
.a0);

186 i‡(
d
<0) d=-d;

187 i‡(
out
.
a1
!=
ªfout
.a1 ||

188 
out
.
a2
!=
ªfout
.a2 ||

189 
out
.
a3
!=
ªfout
.a3 ||

190 
d
>=
maxîr
)

192 
	`¥ötf
("FAIL %s(%016Œx, %016Œx)\n", 
«me
, 
b
, 
c
);

193 
	`¥ötf
(" out: ");

194 
	`¥öt128
(
out
);

195 
	`¥ötf
("\nÑef: ");

196 
	`¥öt128
(
ªfout
);

197 
	`¥ötf
("\n");

198 
îr
++;

200 
c
 = (*
√xtc
)(c);

201 } 
c
);

203 
b
 = (*
√xtb
)(b);

204 } 
b
);

206  
îr
;

207 
	}
}

209 
	$ã°_b32tob32
(

210 *
«me
,

211 
‚_b32tob32
 *
ªf
,

212 
‚_b32tob32
 *
‚
,

213 
‚_u32
 *
√xtb
,

214 
‚_u32
 *
√xtc
,

215 
maxîr


218 
öt32
 
b
=0, 
c
=0;

219 
∑ú32
 
ªfout
, 
out
;

220 
d
;

221 
îr
=0;

223 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

227 #i‡
VERBOSE


228 
	`¥ötf
("b = %08lx\n", 
b
);

233 
ªfout
 = (*
ªf
)(
b
,
c
);

234 
out
 = (*
‚
)(
b
,
c
);

235 
d
 = ()(
out
.
a
-
ªfout
.a);

236 i‡(
d
<0) d=-d;

237 i‡(
out
.
b
!=
ªfout
.b || 
d
>=
maxîr
)

239 
	`¥ötf
("FAIL %s(%08lx,%08lxË", 
«me
, 
b
, 
c
);

240 
	`¥ötf
("%08lx %08lx ", 
out
.
a
, out.
b
);

241 
	`¥ötf
("‘ef: %08lx %08lx)\n", 
ªfout
.
a
,Ñefout.
b
);

242 
îr
++;

244 
c
 = (*
√xtc
)(c);

245 } 
c
);

247 
b
 = (*
√xtb
)(b);

248 } 
b
);

250  
îr
;

251 
	}
}

253 
	$ã°_32_64tob32
(

254 *
«me
,

255 
‚_32_64tob32
 *
ªf
,

256 
‚_32_64tob32
 *
‚
,

257 
‚_u32
 *
√xtb
,

258 
‚_u64
 *
√xtc
,

259 
maxîr


262 
öt32
 
b
=0;

263 
öt64
 
c
=0;

264 
∑ú32
 
ªfout
, 
out
;

265 
d
;

266 
îr
=0;

268 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

272 #i‡
VERBOSE


273 
	`¥ötf
("b = %08lx\n", 
b
);

278 
ªfout
 = (*
ªf
)(
b
,
c
);

279 
out
 = (*
‚
)(
b
,
c
);

280 
d
 = ()(
out
.
a
-
ªfout
.a);

281 i‡(
d
<0) d=-d;

282 i‡(
out
.
b
!=
ªfout
.b || 
d
>=
maxîr
)

284 
	`¥ötf
("FAIL %s(%08lx,%016ŒxË", 
«me
, 
b
, 
c
);

285 
	`¥ötf
("%08lx %08lx ", 
out
.
a
, out.
b
);

286 
	`¥ötf
("‘ef: %08lx %08lx)\n", 
ªfout
.
a
,Ñefout.
b
);

287 
îr
++;

289 
c
 = (*
√xtc
)(c);

290 } 
c
);

292 
b
 = (*
√xtb
)(b);

293 } 
b
);

295  
îr
;

296 
	}
}

298 
	$ã°_u32tob32
(

299 *
«me
,

300 
‚_u32tob32
 *
ªf
,

301 
‚_u32tob32
 *
‚
,

302 
‚_u32
 *
√xtb
,

303 
maxîr


306 
öt32
 
b
=0;

307 
∑ú32
 
ªfout
, 
out
;

308 
d
;

309 
îr
=0;

311 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

315 #i‡
VERBOSE


316 
	`¥ötf
("b = %08lx\n", 
b
);

319 
ªfout
 = (*
ªf
)(
b
);

320 
out
 = (*
‚
)(
b
);

321 
d
 = ()(
out
.
a
-
ªfout
.a);

322 i‡(
d
<0) d=-d;

323 i‡(
out
.
b
!=
ªfout
.b || 
d
>=
maxîr
)

325 
	`¥ötf
("FAIL %s(%08lxË", 
«me
, 
b
);

326 
	`¥ötf
("%08lx %08lx ", 
out
.
a
, out.
b
);

327 
	`¥ötf
("‘ef: %08lx %08lx)\n", 
ªfout
.
a
,Ñefout.
b
);

328 
îr
++;

331 
b
 = (*
√xtb
)(b);

332 } 
b
);

334  
îr
;

335 
	}
}

337 
	$ã°_u32
(

338 *
«me
,

339 
‚_u32
 *
ªf
,

340 
‚_u32
 *
‚
,

341 
‚_u32
 *
√xtb
,

342 
maxîr


345 
öt32
 
b
=0;

346 
öt32
 
ªfout
, 
out
;

347 
d
;

348 
îr
=0;

350 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

354 #i‡
VERBOSE


355 
	`¥ötf
("b = %08lx\n", 
b
);

358 
ªfout
 = (*
ªf
)(
b
);

359 
out
 = (*
‚
)(
b
);

360 
d
 = ()(
out
-
ªfout
);

361 i‡(
d
<0) d=-d;

362 i‡(
d
>=
maxîr
)

364 
	`¥ötf
("FAIL %s(%08lxË", 
«me
, 
b
);

365 
	`¥ötf
("%08lx ", 
out
);

366 
	`¥ötf
("‘ef: %08lx)\n", 
ªfout
);

367 
îr
++;

370 
b
 = (*
√xtb
)(b);

371 } 
b
);

373  
îr
;

374 
	}
}

376 
	$ã°_b32
(

377 *
«me
,

378 
‚_b32
 *
ªf
,

379 
‚_b32
 *
‚
,

380 
‚_u32
 *
√xtb
,

381 
‚_u32
 *
√xtc
,

382 
maxîr


385 
öt32
 
b
=0, 
c
=0;

386 
öt32
 
ªfout
, 
out
;

387 
d
;

388 
îr
=0;

390 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

394 #i‡
VERBOSE


395 
	`¥ötf
("b = %08lx\n", 
b
);

400 
ªfout
 = (*
ªf
)(
b
,
c
);

401 
out
 = (*
‚
)(
b
,
c
);

402 
d
 = ()(
out
-
ªfout
);

403 i‡(
d
<0) d=-d;

404 i‡(
d
>=
maxîr
)

406 
	`¥ötf
("FAIL %s(%08lx,%08lxË", 
«me
, 
b
, 
c
);

407 
	`¥ötf
("%08lx ", 
out
);

408 
	`¥ötf
("‘ef: %08lx)\n", 
ªfout
);

409 
îr
++;

411 
c
 = (*
√xtc
)(c);

412 } 
c
);

414 
b
 = (*
√xtb
)(b);

415 } 
b
);

417  
îr
;

418 
	}
}

420 
	#RANDSIZE
 10

	)

422 
	$ã°_ønd
(

423 *
«me
,

424 
‚_u32
 *
‚


429 
i
, 
n
;

430 
bös
[
RANDSIZE
];

432 
i
=0; i<
RANDSIZE
; i++)

434 
bös
[
i
]=0;

437 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

439 
n
 = 
RANDSIZE
*100;

440 
i
=0; i<
n
; i++)

442 
r
;

444 
r
 = ()(*
‚
)(
RANDSIZE
);

445 i‡(
r
>=
RANDSIZE
)

447 
	`¥ötf
("R™domÇumbîÇŸ i¿øngê%d\n", 
r
);

450 #i‡
VERBOSE


451 i‡(
i
<40Ë
	`¥ötf
("%ld ", (*
‚
)(10));

453 
bös
[
r
]++;

455 #i‡
VERBOSE


456 
	`¥ötf
("\n");

461 
sum
=0;

462 
chi
;

464 
i
=0; i<
RANDSIZE
; i++)

466 #i‡
VERBOSE


467 
	`¥ötf
("Fªquícy[%d] = %d\n", 
i
, 
bös
[i]);

469 
sum
 +
bös
[
i
]*bins[i];

471 
chi
 = ()
RANDSIZE
*()
sum
/()
n
 - ()n;

472 #i‡
VERBOSE


473 
	`¥ötf
("Chòsqu¨ê%lf\n", 
chi
);

476 i‡(
chi
 < 5.0 || chi > 12.0 )

478 
	`¥ötf
("Chòsqu¨ênŸ i¿c‹ª˘Ñ™ge: %lf\n", 
chi
);

483 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ch07test.h

48 #i‚de‡
CH07TEST_H


49 
	#CH07TEST_H


	)

52 
	#VERBOSE
 0

	)

56 #ifde‡
__ARMCC_VERSION


59 
	#__vÆue_ö_ªgs


	)

63 
	töt32
;

64 
	tuöt32
;

65 sig√d 
	tsöt32
;

66 
	töt64
;

67 
	tuöt64
;

68 sig√d 
	tsöt64
;

69 °ru˘ { 
uöt32
 
	ma0
,
	ma1
,
	ma2
,
	ma3
; } 
	tuöt128
;

70 °ru˘ { 
uöt32
 
	ma0
,
	ma1
,
	ma2
; 
söt32
 
	ma3
; } 
	tsöt128
;

71 °ru˘ { 
öt32
 
	ma
, 
	mb
; } 
	t∑ú32
;

74 
öt32
 
	t‚_u32
(
	töt32
);

75 
öt32
 
	t‚_b32
(
	töt32
, int32);

76 
öt64
 
	t‚_u64
(
	töt64
);

77 
öt64
 
	t‚_b64
(
	töt64
, int64);

78 
__vÆue_ö_ªgs
 
	tuöt128
 
	t‚_b64to128
(
	tuöt64
,uint64);

79 
__vÆue_ö_ªgs
 
	tsöt128
 
	t‚_sb64to128
(
	tsöt64
,sint64);

80 
__vÆue_ö_ªgs
 
	t∑ú32
 
	t‚_u32tob32
(
	töt32
);

81 
__vÆue_ö_ªgs
 
	t∑ú32
 
	t‚_b32tob32
(
	töt32
,int32);

82 
__vÆue_ö_ªgs
 
	t∑ú32
 
	t‚_32_64tob32
(
	töt32
,
	töt64
);

85 
‚_b64
 
	gmul_64to64
;

86 
‚_b64
 
	gªf_mul_64to64
;

87 
‚_b64to128
 
	gumul_64to128_¨m7m
;

88 
‚_b64to128
 
	gumul_64to128_¨m9e
;

89 
‚_b64to128
 
	gªf_umul_64to128
;

90 
	#ªf_umul_64to128_¨m7m
 
ªf_umul_64to128


	)

91 
	#ªf_umul_64to128_¨m9e
 
ªf_umul_64to128


	)

92 
‚_sb64to128
 
	gsmul_64to128
;

93 
‚_sb64to128
 
	gªf_smul_64to128
;

96 
‚_u32tob32
 
	gun‹m_¨m9e
;

97 
‚_u32tob32
 
	g¢‹m_¨m9e
;

98 
‚_u32tob32
 
	gun‹m_¨m7m
;

99 
‚_u32tob32
 
	gun‹m_¨m7m_hash
;

100 
‚_u32tob32
 
	gªf_un‹m
;

101 
‚_u32tob32
 
	gªf_¢‹m
;

102 
	#ªf_un‹m_¨m9e
 
ªf_un‹m


	)

103 
	#ªf_¢‹m_¨m9e
 
ªf_¢‹m


	)

104 
	#ªf_un‹m_¨m7m
 
ªf_un‹m


	)

105 
	#ªf_un‹m_¨m7m_hash
 
ªf_un‹m


	)

106 
‚_u32
 
	g˘z_¨m9e
;

107 
‚_u32
 
	g˘z_¨m7m
;

108 
‚_u32
 
	gªf_˘z
;

109 
	#ªf_˘z_¨m9e
 
ªf_˘z


	)

110 
	#ªf_˘z_¨m7m
 
ªf_˘z


	)

113 
udiv_sim∂e
(
d
, 
r
, 
N
);

114 
‚_b32tob32
 
	gudiv_sim∂e_ã°
;

115 
‚_b32tob32
 
	gudiv_32by32_¨m7m
;

116 
‚_b32tob32
 
	gudiv_32by32_¨m9e
;

117 
‚_b32tob32
 
	gªf_udiv_32by32
;

118 
	#ªf_udiv_32by32_¨m7m
 
ªf_udiv_32by32


	)

119 
	#ªf_udiv_32by32_¨m9e
 
ªf_udiv_32by32


	)

120 
	#ªf_udiv_sim∂e_ã°
 
ªf_udiv_32by32


	)

121 
‚_b32tob32
 
	gudiv_32by16_¨m7m
;

122 
‚_b32tob32
 
	gªf_udiv_32by16
;

123 
	#ªf_udiv_32by16_¨m7m
 
ªf_udiv_32by16


	)

124 
‚_32_64tob32
 
	gudiv_64by32_¨m7m
;

125 
‚_32_64tob32
 
	gªf_udiv_64by32
;

126 
	#ªf_udiv_64by32_¨m7m
 
ªf_udiv_64by32


	)

127 
‚_b32
 
	gudiv_q15_¨m9e
;

128 
‚_b32
 
	gªf_udiv_q15
;

129 
	#ªf_udiv_q15_¨m9e
 
ªf_udiv_q15


	)

130 
‚_b32
 
	gudiv_q31_¨m9e
;

131 
‚_b32
 
	gªf_udiv_q31
;

132 
	#ªf_udiv_q31_¨m9e
 
ªf_udiv_q31


	)

133 
‚_b32tob32
 
	gsdiv_32by32_¨m7m
;

134 
‚_b32tob32
 
	gªf_sdiv_32by32
;

135 
	#ªf_sdiv_32by32_¨m7m
 
ªf_sdiv_32by32


	)

138 
usqr_sim∂e
(
r
, 
N
);

139 
‚_u32
 
	gusqr_32
;

140 
‚_u32
 
	gusqr_sim∂e_ã°
;

141 
‚_u32
 
	gucbr_32
;

142 
‚_u32
 
	grsqr_32
;

143 
‚_u32
 
	gªf_usqr_32
;

144 
‚_u32
 
	gªf_ucbr_32
;

145 
‚_u32
 
	gªf_rsqr_32
;

146 
	#ªf_usqr_sim∂e_ã°
 
ªf_usqr_32


	)

149 
‚_u32
 
	gªf_ulog2_32
;

150 
‚_u32
 
	gªf_uexp2_32
;

151 
‚_u32
 
	gªf_sö_32
;

152 
‚_u32
 
	gªf_cos_32
;

153 
‚_u32
 
	gulog2_32
;

154 
‚_u32
 
	guexp2_32
;

155 
‚_u32
 
	gsö_32
;

156 
‚_u32
 
	gcos_32
;

159 
‚_u32
 
	gbyã_ªvî£_2ªg
;

160 
‚_u32
 
	gbyã_ªvî£
;

161 
‚_u32
 
	gªf_byã_ªvî£
;

162 
	#ªf_byã_ªvî£_2ªg
 
ªf_byã_ªvî£


	)

163 
‚_u32
 
	gbô_cou¡
;

164 
‚_u32
 
	gªf_bô_cou¡
;

165 
‚_u32
 
	gbô_ªvî£
;

166 
‚_u32
 
	gªf_bô_ªvî£
;

167 
‚_u32
 
	gbô_•ªad
;

168 
‚_u32
 
	gªf_bô_•ªad
;

169 
‚_u32
 
	gbô_ªv_•ªad
;

170 
‚_u32
 
	gªf_bô_ªv_•ªad
;

173 
‚_u32
 
	gqßt_16
;

174 
‚_b32
 
	gqshl_32
;

175 
‚_b32
 
	gqshr_32
;

176 
‚_b32
 
	gqadd_32
;

177 
‚_b32
 
	gqsub_32
;

178 
‚_b32
 
	gabß_32
;

179 
‚_u32
 
	gqabs_32
;

180 
‚_u32
 
	gªf_qßt_16
;

181 
‚_b32
 
	gªf_qshl_32
;

182 
‚_b32
 
	gªf_qshr_32
;

183 
‚_b32
 
	gªf_qadd_32
;

184 
‚_b32
 
	gªf_qsub_32
;

185 
‚_b32
 
	gªf_abß_32
;

186 
‚_u32
 
	gªf_qabs_32
;

189 
‚_u32
 
	gønd_32
;

192 
‚_u32
 
	ggí_shi·
;

193 
‚_u32
 
	ggí_s32
;

194 
‚_u32
 
	ggí_u31
;

195 
‚_u32
 
	ggí_u15
;

196 
‚_u32
 
	ggí_s32_˘z
;

197 
‚_u64
 
	ggí_s64
;

198 
¥öt128
(
uöt128
 
a
);

201 
ã°_b64
(

202 *
«me
,

203 
‚_b64
 *
ªf
,

204 
‚_b64
 *
‚
,

205 
‚_u64
 *
√xtb
,

206 
‚_u64
 *
√xtc
,

207 
maxîr


210 
	#TEST_B64
(
«me
, 
√xtb
, 
√xtc
, 
maxîr
Ë
îr‹s
 +
	`ã°_b64
(#«me, &
ªf_
##«me, &«me,Çextb,Çextc, maxîr);

	)

213 
ã°_b64to128
(

214 *
«me
,

215 
‚_b64to128
 *
ªf
,

216 
‚_b64to128
 *
‚
,

217 
‚_u64
 *
√xtb
,

218 
‚_u64
 *
√xtc
,

219 
maxîr


221 
	#TEST_B64TO128
(
«me
, 
√xtb
, 
√xtc
, 
maxîr
Ë
îr‹s
 +
	`ã°_b64to128
(#«me, (
‚_b64to128
*)(&
ªf_
##«me), (‚_b64to128*)(&«me),Çextb,Çextc, maxîr);

	)

224 
ã°_u32tob32
(

225 *
«me
,

226 
‚_u32tob32
 *
ªf
,

227 
‚_u32tob32
 *
‚
,

228 
‚_u32
 *
√xtb
,

229 
maxîr


231 
	#TEST_U32TOB32
(
«me
, 
√xtb
, 
maxîr
Ë
îr‹s
 +
	`ã°_u32tob32
(#«me, &
ªf_
##«me, &«me,Çextb, maxîr);

	)

234 
ã°_b32tob32
(

235 *
«me
,

236 
‚_b32tob32
 *
ªf
,

237 
‚_b32tob32
 *
‚
,

238 
‚_u32
 *
√xtb
,

239 
‚_u32
 *
√xtc
,

240 
maxîr


242 
	#TEST_B32TOB32
(
«me
, 
√xtb
, 
√xtc
, 
maxîr
Ë
îr‹s
 +
	`ã°_b32tob32
(#«me, &
ªf_
##«me, &«me,Çextb,Çextc, maxîr);

	)

245 
ã°_32_64tob32
(

246 *
«me
,

247 
‚_32_64tob32
 *
ªf
,

248 
‚_32_64tob32
 *
‚
,

249 
‚_u32
 *
√xtb
,

250 
‚_u64
 *
√xtc
,

251 
maxîr


253 
	#TEST_32_64TOB32
(
«me
, 
√xtb
, 
√xtc
, 
maxîr
Ë
îr‹s
 +
	`ã°_32_64tob32
(#«me, &
ªf_
##«me, &«me,Çextb,Çextc, maxîr);

	)

256 
ã°_u32
(

257 *
«me
,

258 
‚_u32
 *
ªf
,

259 
‚_u32
 *
‚
,

260 
‚_u32
 *
√xtb
,

261 
maxîr


263 
	#TEST_U32
(
«me
, 
√xtb
, 
maxîr
Ë
îr‹s
 +
	`ã°_u32
(#«me, &
ªf_
##«me, &«me,Çextb, maxîr);

	)

266 
ã°_b32
(

267 *
«me
,

268 
‚_b32
 *
ªf
,

269 
‚_b32
 *
‚
,

270 
‚_u32
 *
√xtb
,

271 
‚_u32
 *
√xtc
,

272 
maxîr


274 
	#TEST_B32
(
«me
, 
√xtb
, 
√xtc
, 
maxîr
Ë
îr‹s
 +
	`ã°_b32
(#«me, &
ªf_
##«me, &«me,Çextb,Çextc, maxîr);

	)

277 
ã°_ønd
(

278 *
«me
,

279 
‚_u32
 *
‚


281 
	#TEST_RAND
(
«me
Ë
îr‹s
 +
	`ã°_ønd
(#«me, &«me);

	)

	@/home/jkr555/arm/guide/ch07_primitives/div_a7m.s

47 
AREA
 
	gch07_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
udiv_32by32_¨m7m


50 
EXPORT
 
udiv_32by16_¨m7m


51 
EXPORT
 
udiv_64by32_¨m7m


52 
EXPORT
 
sdiv_32by32_¨m7m


55 
d
 
	gRN
 0 ; 
öput
 
díomö©‹
 
	gd
, 
ouçut
 
quŸõ¡


56 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 
	gn
, 
ouçut
 
ªmaödî


57 
t
 
	gRN
 2 ; 
s¸©ch
 

58 
q
 
	gRN
 3 ; 
cuºít
 
	gquŸõ¡


60 ; 
__vÆue_ö_ªgs
 såu˘ { 
	mq
, 
	mr
; }

61 ; 
	$udiv_32by32_¨m7m
(
d
, 
n
)

62 
udiv_32by32_¨m7m


63 
MOV
 
q
, #0 ; 
zîo
 
quŸõ¡


64 
RSBS
 
t
, 
d
, 
r
, 
LSR
#3 ; i‡(‘>>3)>=dË
C
=1; C=0;

65 
BCC
 
div_3bôs
 ; 
quŸõ¡
 
fôs
 
ö
 3 
bôs


66 
RSBS
 
t
, 
d
, 
r
, 
LSR
#8 ; i‡(‘>>8)>=dË
C
=1; C=0;

67 
BCC
 
div_8bôs
 ; 
quŸõ¡
 
fôs
 
ö
 8 
bôs


68 
MOV
 
d
, d, 
LSL
#8 ; d = d*256

69 
ORR
 
q
, q, #0
xFF000000
 ; 
make
 
div_lo›
 
ôî©e
 
twi˚


70 
RSBS
 
t
, 
d
, 
r
, 
LSR
#4 ; i‡(‘>>4)>=dË
C
=1; C=0;

71 
BCC
 
div_4bôs
 ; 
quŸõ¡
 
fôs
 
ö
 12 
bôs


72 
RSBS
 
t
, 
d
, 
r
, 
LSR
#8 ; i‡(‘>>8)>=dË
C
=1; C=0;

73 
BCC
 
div_8bôs
 ; 
quŸõ¡
 
fôs
 
ö
 16 
bôs


74 
MOV
 
d
, d, 
LSL
#8 ; d = d*256

75 
ORR
 
q
, q, #0
x00FF0000
 ; 
make
 
div_lo›
 
ôî©e
 3 
times


76 
RSBS
 
t
, 
d
, 
r
, 
LSR
#8 ; if ((r>>8)>=d)

77 
MOVCS
 
d
, d, 
LSL
#8 ; { d = d*256;

78 
ORRCS
 
q
, q, #0
x0000FF00
 ; 
make
 
div_lo›
 
ôî©e
 4 
times
}

79 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#4 ; if ((r>>4)<d)

80 
BCC
 
	gdiv_4bôs
 ; 
	gr
/
d
 
quŸõ¡
 
fôs
 
	gö
 4 
bôs


81 
RSBS
 
	gt
, 
	gd
, #0 ; i‡(0 >
d
)

82 
BCS
 
div_by_0
 ; 
divide
 
by
 
zîo
 
	gå≠


83 ; 
ÁŒ
 
through
 
to
 
the
 
lo›
 
wôh
 
	gC
=0

84 
div_lo›


85 
MOVCS
 
d
, 
	gd
, 
	gLSR
#8 ; i‡(
√xt
 
	glo›
) d = d/256

86 
div_8bôs
 ; 
	gˇlcuœã
 8 
quŸõ¡
 
bôs


87 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#7 ; i‡(‘>>7)>=
d
Ë
C
=1; 
	gC
=0;

88 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#7 ; i‡(
	gC
Ë∏-
d
<<7;

89 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

90 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#6 ; i‡(‘>>6)>=
d
Ë
C
=1; 
	gC
=0;

91 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#6 ; i‡(
	gC
Ë∏-
d
<<6;

92 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

93 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#5 ; i‡(‘>>5)>=
d
Ë
C
=1; 
	gC
=0;

94 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#5 ; i‡(
	gC
Ë∏-
d
<<5;

95 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

96 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#4 ; i‡(‘>>4)>=
d
Ë
C
=1; 
	gC
=0;

97 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#4 ; i‡(
	gC
Ë∏-
d
<<4;

98 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

99 
	gdiv_4bôs
 ; 
	gˇlcuœã
 4 
quŸõ¡
 
bôs


100 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#3 ; i‡(‘>>3)>=
d
Ë
C
=1; 
	gC
=0;

101 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#3 ; i‡(
	gC
Ë∏-
d
<<3;

102 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

103 
	gdiv_3bôs
 ; 
	gˇlcuœã
 3 
quŸõ¡
 
bôs


104 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#2 ; i‡(‘>>2)>=
d
Ë
C
=1; 
	gC
=0;

105 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#2 ; i‡(
	gC
Ë∏-
d
<<2;

106 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

107 
RSBS
 
	gt
, 
	gd
, 
	gr
, 
	gLSR
#1 ; i‡(‘>>1)>=
d
Ë
C
=1; 
	gC
=0;

108 
SUBCS
 
	gr
,Ñ, 
	gd
, 
	gLSL
#1 ; i‡(
	gC
Ë∏-
d
<<1;

109 
ADC
 
	gq
, q, q ; q=(
q
<<1)+
C
;

110 
RSBS
 
	gt
, 
	gd
, 
	gr
 ; i‡‘>=
d
Ë
C
=1; 
	gC
=0;

111 
SUBCS
 
	gr
,Ñ, 
	gd
 ; i‡(
	gC
Ë∏-
d
;

112 
ADCS
 
	gq
, q, q ; q=(
q
<<1)+
C
; 
	gC
=
ﬁd
 q 
bô
 31;

113 
div_√xt


114 
BCS
 
	gdiv_lo›
 ; 
lo›
 
m‹e
 
quŸõ¡
 
bôs


115 
MOV
 
	gr0
, 
	gq
 ;Ñ0 = 
quŸõ¡
; 
	gr1
=
ªmaödî
;

116 
MOV
 
	gpc
, 
	gÃ
 ;  { 
	gr0
, 
	gr1
 } 
	g°ru˘uª
;

117 
div_by_0


118 
MOV
 
	gr0
, #-1

119 
MOV
 
	gr1
, #-1

120 
MOV
 
	gpc
, 
	gÃ
 ;  { -1, -1 } 
	g°ru˘uª
;

123 
d
 
	gRN
 0 ; 
öput
 
	gdíomö©‹
, 
ouçut
 
quŸõ¡


124 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 
	gn
, 
ouçut
 
ªmaödî


125 
sign
 
	gRN
 12

127 ; 
__vÆue_ö_ªgs
 såu˘ { sig√d 
	mq
, 
	mr
; }

128 ; 
	$udiv_32by32_¨m7m
(sig√d 
d
, sig√d 
n
)

129 
sdiv_32by32_¨m7m


130 
STMFD
 
•
!, {
Ã
}

131 
ANDS
 
	gsign
, 
	gd
, #1<<31 ; sign=(
d
<0 ? 1<<31 : 0);

132 
RSBMI
 
	gd
, d, #0 ; i‡(d<0Ëd=-
d
;

133 
EORS
 
	gsign
, sign, 
	gr
, 
	gASR
#32 ; i‡‘<0Ësign=~
sign
;

134 
RSBCS
 
	gr
,Ñ, #0 ; i‡‘<0Ër=-
r
;

135 
BL
 
	gudiv_32by32_¨m7m
 ; (
	gd
,
	gr
)=(
r
/
d
,r%d)

136 
MOVS
 
	gsign
, sign, 
	gLSL
#1 ; 
	gC
=
sign
[31], 
	gN
=sign[30]

137 
RSBCS
 
d
, 
	gd
, #0 ; i‡(
	gsign
[31]) d=-d;

138 
RSBMI
 
	gr
,Ñ, #0 ; i‡(
	gsign
[30]Ër=-
r
;

139 
LDMFD
 
	g•
!, {
	gpc
}

143 
m
 
	gRN
 0 ; 
öput
 
díomö©‹
 
d
 
thí
 (-d<<14)

144 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 
n
 
thí
 
	gªmaödî


146 ; 
__vÆue_ö_ªgs
 såu˘ { 
	mq
, 
	mr
; }

147 ; 
	$udiv_32by16_¨m7m
(
d
, 
n
)

148 
udiv_32by16_¨m7m


149 
RSBS
 
m
, m, 
r
, 
LSR
#15 ; m = (
n
>>15Ë- 
d


150 
BCS
 
ovîÊow_15
 ; 
ovîÊow
 i‡(
n
>>15)>=
d


151 
SUB
 
m
, m, 
r
, 
LSR
#15 ; m = -
d


152 
MOV
 
m
, m, 
LSL
#14 ; m = -
d
<<14

153 ; 15 
åül
 
divisi⁄
 
°ïs
 
fﬁlow


154 
ADDS
 
r
, 
m
,Ñ ;ÑÙ-(
d
<<14); 
C
=(r>=0);

155 
SUBCC
 
r
,Ñ, 
m
 ; i‡(
C
==0Ër+=(
d
<<14)

156 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1 ;Ñ=(2*r+
C
)-(
d
<<14); C=(r>=0);

157 
SUBCC
 
r
,Ñ, 
m
 ; i‡(
C
==0Ër+=(
d
<<14)

158 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1 ; ... 
™d
 
ª≥©
 ...

159 
SUBCC
 
r
,Ñ, 
m


160 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

161 
SUBCC
 
r
,Ñ, 
m


162 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

163 
SUBCC
 
r
,Ñ, 
m


164 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

165 
SUBCC
 
r
,Ñ, 
m


166 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

167 
SUBCC
 
r
,Ñ, 
m


168 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

169 
SUBCC
 
r
,Ñ, 
m


170 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

171 
SUBCC
 
r
,Ñ, 
m


172 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

173 
SUBCC
 
r
,Ñ, 
m


174 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

175 
SUBCC
 
r
,Ñ, 
m


176 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

177 
SUBCC
 
r
,Ñ, 
m


178 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

179 
SUBCC
 
r
,Ñ, 
m


180 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

181 
SUBCC
 
r
,Ñ, 
m


182 
ADCS
 
r
, 
m
,Ñ, 
LSL
 #1

183 
SUBCC
 
r
,Ñ, 
m


184 ; 
exåa˘
 
™swî
 
™d
 
	$ªmaödî
 (
ªquúed
)

185 
ADC
 
r0
, 
r
,Ñ ; 
ö£π
 
föÆ
 
™swî
 
bô


186 
MOV
 
r
, 
r0
, 
LSR
 #15 ; 
exåa˘
 
ªmaödî


187 
BIC
 
r0
,Ñ0, 
r
, 
LSL
 #15 ; 
exåa˘
 
quŸõ¡


188 
MOV
 
pc
, 
Ã
 ;  { 
r0
, 
r
 
	}
}

189 
	govîÊow_15
 ; 
quŸõ¡
 
	goveÊows
 15 
bôs


190 
LDR
 
	gr0
, =0x7FFF ; 
maximum
 
quŸõ¡


191 
MOV
 
	gr1
, 
	gr0
 ; 
maximum
 
ªmaödî


192 
MOV
 
	gpc
, 
	gÃ
 ;  { 0x7fff, 0x7fff }

194 
m
 
	gRN
 0 ; 
öput
 
díomö©‹
 
	gd
, -
d


195 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 (
low
), 
	$ªmaödî
 (
high
)

196 
t
 
RN
 2 ; 
öput
 
	$numî©‹
 (
high
)

197 
q
 
RN
 3 ; 
ªsu…
 
quŸõ¡
 
™d
 
	`ªmaödî
 (
low
)

199 ; 
__vÆue_ö_ªgs
 såu˘ { 
q
, 
r
; }

200 ; 
	$udiv_64by32_¨m7m
(
d
, 
n
)

201 
udiv_64by32_¨m7m


202 
CMP
 
t
, 
m
 ; i‡(
n
 >(
d
<<32))

203 
BCS
 
ovîÊow_32
 ; overflow_32;

204 
RSB
 
m
, m, #0 ; m = -
d


205 
ADDS
 
q
, 
r
,Ñ ; { [r,q] = 2*[r,q]-[
d
,0];

206 
ADCS
 
r
, 
m
, 
t
, 
LSL
#1 ; 
C
 = ([r,
q
]>=0); 
	}
}

207 
SUBCC
 
	gr
,Ñ, 
	gm
 ; i‡(
	gC
==0Ë[
r
,
q
] +[
d
,0]

208 
GBLA
 
	gk
 ; 
the
 
	g√xt
 32 
°ïs
 
¨e
Åhê
ßme


209 
k
 
	gSETA
 1 ; 
so
 
we
 
gíî©e
 
them
 
usög
 
™


210 
WHILE
 
	gk
<32 ; 
as£mbÀr
 
lo›


211 
ADCS
 
	gq
, q, q ; { [
r
,
q
] = 2*[r,q]+
	gC
 - [
d
,0];

212 
ADCS
 
	gr
, 
	gm
,Ñ, 
	gLSL
#1 ; 
	gC
 = ([
r
,
q
]>=0); }

213 
SUBCC
 
	gr
,Ñ, 
	gm
 ; i‡(
	gC
==0Ë[
r
,
q
] +[
d
,0]

214 
k
 
SETA
 
	gk
+1

215 
WEND


216 
ADCS
 
	gr0
, 
	gq
, q ; 
ö£π
 
föÆ
 
™swî
 
bô


217 
MOV
 
	gpc
, 
	gÃ
 ;  { 
	gr0
, 
	gr1
 }

218 
ovîÊow_32


219 
MOV
 
	gr0
, #-1

220 
MOV
 
	gr1
, #-1

221 
MOV
 
	gpc
, 
	gÃ
 ;  { -1, -1 }

223 
	gEND


	@/home/jkr555/arm/guide/ch07_primitives/div_a9e.s

47 
AREA
 
	gch07_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
udiv_32by32_¨m9e


50 
EXPORT
 
udiv_q15_¨m9e


51 
EXPORT
 
	gudiv_q31_¨m9e


55 
q
 
RN
 0 ; 
öput
 
díomö©‹
 
	gd
, 
ouçut
 
quŸõ¡
 q

56 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 
	gn
, 
ouçut
 
ªmaödî
Ñ

57 
s
 
	gRN
 2 ; 
s¸©ch
 

58 
m
 
	gRN
 3 ; 
s¸©ch
 

59 
a
 
	gRN
 12 ; 
s¸©ch
 

61 ; 
__vÆue_ö_ªgs
 såu˘ { 
	mq
, 
	mr
; }

62 ; 
	$udiv_32by32_¨m9e
(
d
, 
n
)

63 
udiv_32by32_¨m9e
 ; 
ö°ru˘i⁄
 
numbî
 : 
commít


64 
CLZ
 
s
, 
q
 ; 01 : 
föd
 
n‹mÆizög
 
shi·


65 
MOVS
 
a
, 
q
, 
LSL
 
s
 ; 02 : 
≥rf‹m
á 
lookup
 
⁄
 
the


66 
ADD
 
a
, 
pc
,á, 
LSR
#25 ; 03 : 
mo°
 
signifiˇ¡
 7 
bôs


67 
LDRNEB
 
a
, [a, #t32-
b32
-64] ; 04 : 
of
 
divis‹


68 
b32
 
SUBS
 
s
, s, #7 ; 05 : 
c‹ª˘
 
shi·


69 
RSB
 
m
, 
q
, #0 ; 06 : m = -
d


70 
MOVPL
 
q
, 
a
, 
LSL
 
s
 ; 07 : q 
	`≠¥ox
 (1<<32)/
d


71 ; 1
°
 
Newt⁄
 
ôî©i⁄
 
fﬁlows


72 
MULPL
 
a
, 
q
, 
m
 ; 08 :á = -q*
d


73 
BMI
 
udiv_by_œrge_d
 ; 09 : 
œrge
 
d
 
å≠


74 
SMLAWT
 
q
, q, 
a
, q ; 10 : q 
≠¥ox
 q-(q*q*
d
>>32)

75 
TEQ
 
m
, m, 
ASR
#1 ; 11 : 
check
 
d
=0 
‹
 d=1

76 ; 2
nd
 
Newt⁄
 
ôî©i⁄
 
fﬁlows


77 
MULNE
 
a
, 
q
, 
m
 ; 12 :á = -q*
d


78 
MOVNE
 
s
, #0 ; 13 : s = 0

79 
SMLALNE
 
s
, 
q
, 
a
, q ; 14 : q = q-(q*q*
d
>>32)

80 
BEQ
 
udiv_by_0_‹_1
 ; 15 : 
å≠
 
d
=0 
‹
 d=1

81 ; 
q
 
now
 
accuøã
 
íough
 
a
 
ªmaödî
 
r
, 0<Ù<3*
d


82 
UMULL
 
s
, 
q
, 
r
, q ; 16 : q = (r*q)>>32

83 
ADD
 
r
,Ñ, 
m
 ; 17 :Ñ = 
n
-
d


84 
MLA
 
r
, 
q
, 
m
,Ñ ; 18 :Ñ = 
n
-(q+1)*
d


85 ; 
sö˚
 0 <
n
-
q
*
d
 < 3*d, 
thus
 -d <
r
 < 2*d

86 
CMN
 
r
, 
m
 ; 19 : 
t
 =Ñ-
d


87 
SUBCS
 
r
,Ñ, 
m
 ; 20 : i‡(
t
<-
d
 ||Å>=0)Ñ=r+d

88 
ADDCC
 
q
, q, #1 ; 21 : i‡(-
d
<=
t
 &&Å<0) q=q+1

89 
ADDPL
 
r
,Ñ, 
m
, 
LSL
#1 ; 22 : i‡(
t
>=0Ë{ÑÙ-2*
d


90 
ADDPL
 
q
, q, #2 ; 23 : q=q+2 
	}
}

91 
BX
 
Ã
 ; 24 :  {
q
, 
	gr
}

92 
	gudiv_by_œrge_d


93 ; 
©
 
this
 
poöt
 
we
 
know
 
	gd
 >= 2^(31-6)=2^25

94 
SUB
 
a
, 
	ga
, #4 ; 25 : 
£t
 
q
 
to
 
be
 
™


95 
RSB
 
s
, 
	gs
, #0 ; 26 : 
undîe°im©e
 
of


96 
MOV
 
q
, 
	ga
, 
LSR
 
	gs
 ; 27 : (1<<32)/
d


97 
UMULL
 
s
, 
	gq
, 
	gr
, q ; 28 : 
q
 = (
n
*q)>>32

98 
MLA
 
r
, 
	gq
, 
	gm
, 
	gr
 ; 29 :Ñ = 
n
-
q
*
d


99 ; 
q
 
now
 
accuøã
 
íough
 
a
 
ªmaödî
 
	gr
, 0<=
r
<4*
d


100 
CMN
 
m
, 
	gr
, 
	gLSR
#1 ; 30 : i‡(
r
/2 >
d
)

101 
ADDCS
 
r
, 
	gr
, 
	gm
, 
	gLSL
#1 ; 31 : {ÑÙ-2*
d
;

102 
ADDCS
 
	gq
, q, #2 ; 32 : 
q
=q+2; }

103 
CMN
 
	gm
, 
	gr
 ; 33 : i‡(
r
 >
d
)

104 
ADDCS
 
r
, 
	gr
, 
	gm
 ; 34 : {ÑÙ-
d
;

105 
ADDCS
 
	gq
, q, #1 ; 35 : 
q
=q+1; }

106 
BX
 
	gÃ
 ; 36 :  {
q
, 
	gr
}

107 
	gudiv_by_0_‹_1


108 ; 
ˇºy
 
£t
 
	gd
=1, c¨ry 
˛ór
 d=0

109 
MOVCS
 
q
, 
	gr
 ; 37 : i‡(
d
==1Ë{ q=
n
;

110 
MOVCS
 
	gr
, #0 ; 38 : 
r
=0; }

111 
MOVCC
 
	gq
, #-1 ; 39 : i‡(
d
==0Ë{ 
q
=-1;

112 
MOVCC
 
	gr
, #-1 ; 40 : 
r
=-1; }

113 
BX
 
	gÃ
 ; 41 :  {
q
,
	gr
}

115 ; 
èbÀ
 32 
	gby
 32 
bô
 
Newt⁄
 
R≠hs⁄
 
	gdivisi⁄s


116 ; 
	gèbÀ
[0] = 255

117 ; 
	gèbÀ
[
i
] = (1<<14)/(64+i) i=1,2,3,...,63

118 
t32
 
	gDCB
 0xff, 0xfc, 0xf8, 0xf4, 0xf0, 0xed, 0xea, 0xe6

119 
	gDCB
 0xe3, 0xe0, 0xdd, 0xda, 0xd7, 0xd4, 0xd2, 0xcf

120 
	gDCB
 0xcc, 0xca, 0xc7, 0xc5, 0xc3, 0xc0, 0xbe, 0xbc

121 
	gDCB
 0xba, 0xb8, 0xb6, 0xb4, 0xb2, 0xb0, 0xae, 0xac

122 
	gDCB
 0xaa, 0xa8, 0xa7, 0xa5, 0xa3, 0xa2, 0xa0, 0x9f

123 
	gDCB
 0x9d, 0x9c, 0x9a, 0x99, 0x97, 0x96, 0x94, 0x93

124 
	gDCB
 0x92, 0x90, 0x8f, 0x8e, 0x8d, 0x8c, 0x8a, 0x89

125 
	gDCB
 0x88, 0x87, 0x86, 0x85, 0x84, 0x83, 0x82, 0x81

129 
q
 
RN
 0 ; 
öput
 
díomö©‹
 
	gd
, 
quŸõ¡
 
e°im©e
 q

130 
r
 
	gRN
 1 ; 
öput
 
numî©‹
 
	gn
, 
ªmaödî
Ñ

131 
s
 
	gRN
 2 ; 
n‹mÆißti⁄
 
	gshi·
, 
s¸©ch


132 
d
 
	gRN
 3 ; 
Q15
 
n‹mÆi£d
 
	gdíomö©‹
 2^14<=d<2^15

134 ; 
	$udiv_q15_¨m9e
(
d
, 
q
)

135 
udiv_q15_¨m9e
 ; 
ö°ru˘i⁄
 
numbî
 : 
commít


136 
CLZ
 
s
, 
q
 ; 01 : 
choo£
 
a
 
shi·
 s 
to


137 
SUB
 
s
, s, #17 ; 02 : 
n‹mÆize
 
d
 
to
 
the


138 
MOVS
 
d
, 
q
, 
LSL
 
s
 ; 03 : 
ønge
 0.5<=d<1 
©
 
Q15


139 
ADD
 
q
, 
pc
, 
d
, 
LSR
#7 ; 04 : 
look
 
up
 q, 
a
 
Q8


140 
LDRNEB
 
q
, [q, #t15-
b15
-128] ; 05 : 
≠¥oxim©i⁄
 
to
 1

141 
b15
 
MOV
 
r
,Ñ, 
LSL
 
s
 ; 06 : 
n‹mÆize
 
numî©‹


142 
ADD
 
q
, q, #256 ; 07 : 
∑π
 
of
 
èbÀ
 
lookup


143 ; 
q
 
is
 
now
 
a
 
Q8
, 9-
bô
 
e°im©e
 
to
 1

144 
SMULBB
 
s
, 
q
, q ; 08 : s = q*q 
©
 
Q16


145 
CMP
 
r
, 
d
 ; 09 : 
check
 
ovîÊow


146 
MUL
 
s
, 
d
, s ; 10 : s = 
q
*q*d 
©
 
Q31


147 
MOV
 
q
, q, 
LSL
#9 ; 11 : 
ch™ge
 q 
to
 
Q17


148 
SBC
 
q
, q, 
s
, 
LSR
#15 ; 12 : q = 2*q-q*q*
d
 
©
 
Q16


149 ; 
q
 
is
 
now
 
a
 
Q16
, 17-
bô
 
e°im©e
 
to
 1

150 
SMULWB
 
q
, q, 
r
 ; 13 : q 
≠¥ox
 
n


151 
BCS
 
ovîÊow_15
 ; 14 : 
å≠
 
ovîÊow
 

152 
SMULBB
 
s
, 
q
, 
d
 ; 15 : s = q*d 
©
 
Q30


153 
RSB
 
r
, 
d
,Ñ, 
LSL
#15 ; 16 :Ñ = 
n
-d 
©
 
Q30


154 
CMP
 
r
, 
s
 ; 17 : if (r>=s)

155 
ADDPL
 
q
, q, #1 ; 18 : q++

156 
BX
 
Ã
 ; 19 :  
q


157 
ovîÊow_15


158 
LDR
 
q
, =0x7FFF ; 20 : q = 0x7FFF

159 
BX
 
Ã
 ; 21 :  
q


161 ; 
èbÀ
 
‰a˘i⁄Æ
 
Newt⁄
 
R≠hs⁄
 
divisi⁄


162 ; 
èbÀ
[
a
] = ()((511*(128-a))/(257+2*a)) 0<=a<128

163 
t15
 
DCB
 0xfe, 0xfa, 0xf6, 0xf2, 0xef, 0xeb, 0xe7, 0xe4

164 
DCB
 0xe0, 0xdd, 0xd9, 0xd6, 0xd2, 0xcf, 0xcc, 0xc9

165 
DCB
 0xc6, 0xc2, 0xbf, 0xbc, 0xb9, 0xb6, 0xb3, 0xb1

166 
DCB
 0xae, 0xab, 0xa8, 0xa5, 0xa3, 0xa0, 0x9d, 0x9b

167 
DCB
 0x98, 0x96, 0x93, 0x91, 0x8e, 0x8c, 0x8a, 0x87

168 
DCB
 0x85, 0x83, 0x80, 0x7e, 0x7c, 0x7a, 0x78, 0x75

169 
DCB
 0x73, 0x71, 0x6f, 0x6d, 0x6b, 0x69, 0x67, 0x65

170 
DCB
 0x63, 0x61, 0x5f, 0x5e, 0x5c, 0x5a, 0x58, 0x56

171 
DCB
 0x54, 0x53, 0x51, 0x4f, 0x4e, 0x4c, 0x4a, 0x49

172 
DCB
 0x47, 0x45, 0x44, 0x42, 0x40, 0x3f, 0x3d, 0x3c

173 
DCB
 0x3a, 0x39, 0x37, 0x36, 0x34, 0x33, 0x32, 0x30

174 
DCB
 0x2f, 0x2d, 0x2c, 0x2b, 0x29, 0x28, 0x27, 0x25

175 
DCB
 0x24, 0x23, 0x21, 0x20, 0x1f, 0x1e, 0x1c, 0x1b

176 
DCB
 0x1a, 0x19, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12

177 
DCB
 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09

178 
DCB
 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01

182 
q
 
RN
 0 ; 
öput
 
díomö©‹
 
d
, 
quŸõ¡
 
e°im©e
 q

183 
r
 
RN
 1 ; 
öput
 
numî©‹
 
n
, 
ªmaödî
 
high
Ñ

184 
s
 
RN
 2 ; 
n‹mÆißti⁄
 
shi·
, 
s¸©ch
 

185 
d
 
RN
 3 ; 
Q31
 
n‹mÆi£d
 
díomö©‹
 2^30<=d<2^31

186 
a
 
RN
 12 ; 
s¸©ch


188 ; 
	$udiv_q31_¨m9e
(
d
, 
q
)

189 
udiv_q31_¨m9e
 ; 
ö°ru˘i⁄
 
numbî
 : 
commít


190 
CLZ
 
s
, 
q
 ; 01 : 
choo£
 
a
 
shi·
 s 
to


191 
CMP
 
r
, 
q
 ; 02 : 
n‹mÆize
 
d
 
to
 
the


192 
MOVCC
 
d
, 
q
, 
LSL
 
s
 ; 03 : 
ønge
 0.5<=d<1 
©
 
Q32


193 
ADDCC
 
q
, 
pc
, 
d
, 
LSR
#24 ; 04 : 
look
 
up
 q, 
a
 
Q8


194 
LDRCCB
 
q
, [q, #t15-
b31
-128] ; 05 : 
≠¥oxim©i⁄
 
to
 1

195 
b31
 
MOVCC
 
r
,Ñ, 
LSL
 
s
 ; 06 : 
n‹mÆize
 
numî©‹


196 
ADDCC
 
q
, q, #256 ; 07 : 
∑π
 
of
 
èbÀ
 
lookup


197 ; 
q
 
is
 
now
 
a
 
Q8
, 9-
bô
 
e°im©e
 
to
 1

198 
SMULBBCC
 
a
, 
q
, q ; 08 :á = q*q 
©
 
Q16


199 
MOVCS
 
q
, #0
x7FFFFFFF
 ; 09 : 
ovîÊow
 

200 
UMULLCC
 
s
, 
a
, 
d
,á ; 10 :á = 
q
*q*d 
©
 
Q16


201 
BXCS
 
Ã
 ; 11 : 
exô
 
⁄
 
ovîÊow


202 
RSB
 
q
, 
a
, q, 
LSL
#9 ; 12 : q = 2*q-q*q*
d
 
©
 
Q16


203 ; 
q
 
is
 
now
 
a
 
Q16
, 17-
bô
 
e°im©e
 
to
 1

204 
UMULL
 
a
, 
s
, 
q
, q ; 13 : [s,a] = q*q 
©
 
Q32


205 
MOVS
 
a
,á, 
LSR
#1 ; 14 : 
now
 
hÆve
 [
s
,a] 
™d


206 
ADC
 
a
,á, 
s
, 
LSL
#31 ; 15 : 
round
 
so
 [
N
,a]=
q
*q 
©


207 
MOVS
 
s
, s, 
LSL
#30 ; 16 : 
Q31
, 
C
=0

208 
UMULL
 
s
, 
a
, 
d
,á ; 17 :á =á*d 
©
 
Q31


209 
ADDMI
 
a
,á, 
d
 ; 18 : i‡(
N
Ëa+=2*d 
©
 
Q31


210 
RSC
 
q
, 
a
, q, 
LSL
#16 ; 19 : q = 2*q-q*q*
d
 
©
 
Q31


211 ; 
q
 
is
 
now
 
a
 
Q31
 
e°im©e
 
to
 1/
d


212 
UMULL
 
s
, 
q
, 
r
, q ; 20 : q 
≠¥ox
 
n


213 ; 
q
 
is
 
now
 
a
 
Q31
 
e°im©e
 
to
 
num
/
dí
, 
ªmaödî
<3*
d


214 
UMULL
 
s
, 
a
, 
d
, 
q
 ; 21 : [a,s] = d*q 
©
 
Q62


215 
RSBS
 
s
, s, #0 ; 22 : [
r
,s] = 
n
-
d
*
q


216 
RSC
 
r
, 
a
,Ñ, 
LSR
#1 ; 23 : 
©
 
Q62


217 ; [
r
,
s
]=‘<<32)+†
is
 
now
 
the
 
posôive
 
ªmaödî
<3*
d


218 
SUBS
 
s
, s, 
d
 ; 24 : [
r
,s] = 
n
-(d+1)*
q


219 
SBCS
 
r
,Ñ, #0 ; 25 : 
©
 
Q62


220 
ADDPL
 
q
, q, #1 ; 26 : i‡([
r
,
s
]>=0) q++

221 
SUBS
 
s
, s, 
d
 ; 27 : [
r
,s] = [r,s]-d

222 
SBCS
 
r
,Ñ, #0 ; 28 : 
©
 
Q62


223 
ADDPL
 
q
, q, #1 ; 29 : i‡([
r
,
s
]>=0) q++

224 
BX
 
Ã
 ; 30 :  
q


226 
END


	@/home/jkr555/arm/guide/ch07_primitives/gen.c

48 
	~<°dio.h
>

49 
	~<m©h.h
>

50 
	~"ch07ã°.h
"

56 
öt32
 
	$gí_s32
(
öt32
 
£ed
)

58 
öt32
 
n
;

60 
£ed
 = ~seed;

61 i‡(
£ed
<0)  seed;

62 i‡(
£ed
<8)  (seed+1);

63 
n
 = 
£ed
 + (seed>>1);

64 i‡(
n
<0)

66 
n
 = 0x7FFFFFFFul;

68 i‡(
n
>
£ed
) Ç;

70 
	}
}

74 
öt32
 
	$gí_shi·
(
öt32
 
£ed
)

76 
£ed
++;

77  
£ed
 & 31;

78 
	}
}

82 
öt32
 
	$gí_u31
(
öt32
 
£ed
)

84 
öt32
 
n
;

86 i‡(
£ed
<8)  (seed+1);

87 
n
 = 
£ed
 + (seed>>1);

88 i‡(
n
<0)

90 
n
 = 0x7FFFFFFFul;

92 i‡(
n
>
£ed
) Ç;

94 
	}
}

98 
öt32
 
	$gí_u15
(
öt32
 
£ed
)

100 
öt32
 
n
;

102 i‡(
£ed
<8)  (seed+1);

103 
n
 = 
£ed
 + (seed>>1);

104 i‡(
n
>0x7FFF)

106 
n
 = 0x7FFFul;

108 i‡(
n
>
£ed
) Ç;

110 
	}
}

114 
öt32
 
	$gí_s32_˘z
(
öt32
 
£ed
)

116 i‡(
£ed
 & 1)  0;

117 
£ed
 = (seed>>1) | (1u<<31);

118 
£ed
 = seed+(seed<<1);

119  
£ed
;

120 
	}
}

126 
öt64
 
	$gí_s64
(
öt64
 
£ed
)

128 
öt64
 
n
;

130 
£ed
 = ~seed;

131 i‡(
£ed
<0)  seed;

132 i‡(
£ed
<8)  (seed+1);

133 
n
 = 
£ed
 + (seed>>1);

134 i‡(
n
<0)

136 
n
 = 0x7FFFFFFFFFFFFFFFull;

138 i‡(
n
>
£ed
) Ç;

140 
	}
}

142 
	$¥öt128
(
uöt128
 
a
)

144 
	`¥ötf
("%08lx %08lx %08lx %08lx", 
a
.
a3
,á.
a2
,á.
a1
,á.
a0
);

145 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/mul.s

47 
AREA
 
	gch07_1
, 
	gCODE
, 
READONLY


49 
EXPORT
 
mul_64to64


50 
EXPORT
 
umul_64to128_¨m7m


51 
EXPORT
 
umul_64to128_¨m9e


52 
EXPORT
 
smul_64to128


54 
b_0
 
	gRN
 0 ; 
b
 
	gbôs
 [31:00] (b 
low
)

55 
b_1
 
RN
 1 ; 
b
 
	gbôs
 [63:32] (b 
high
)

56 
c_0
 
RN
 2 ; 
c
 
	gbôs
 [31:00] (¯
low
)

57 
c_1
 
RN
 3 ; 
c
 
	gbôs
 [63:32] (¯
high
)

58 
a_0
 
RN
 4 ; 
a
 
	gbôs
 [31:00] (®
low
-low)

59 
a_1
 
RN
 5 ; 
a
 
	gbôs
 [63:32] (®
low
-
high
)

60 
a_2
 
RN
 12 ; 
a
 
	gbôs
 [95:64] (®
high
-
low
)

61 
a_3
 
RN
 
Ã
 ; 
a
 
	gbôs
 [127:96] (®
high
-high)

63 ; 
	$mul_64to64
(
b
, 
c
)

64 
mul_64to64


65 
STMFD
 
•
!, {
r4
,
r5
,
Ã
}

66 ; 64-
bô
 
	ga
 = 64-bô 
b
 * 64-bô 
c


67 
UMULL
 
a_0
, 
	ga_1
, 
	gb_0
, 
	gc_0
 ; 
low
*low

68 
MLA
 
	ga_1
, 
	gb_0
, 
	gc_1
,á_1 ; 
low
*
high


69 
MLA
 
	ga_1
, 
	gb_1
, 
	gc_0
,á_1 ; 
high
*
	glow


70 ;  
wøµî


71 
MOV
 
	gr0
, 
a_0


72 
MOV
 
	gr1
, 
a_1


73 
LDMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gpc
}

75 ; 
__vÆue_ö_ªgs
 såu˘ { 
	ma0
,
	ma1
,
	ma2
,
	ma3
; }

76 ; 
umul_64to128_¨m7m
(
b
,

77 ; 
c
)

78 
umul_64to128_¨m7m


79 
STMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gÃ
}

80 ; 128-
bô
 
	ga
 = 64-bô 
b
 * 64-bô 
c


81 
UMULL
 
a_0
, 
	ga_1
, 
	gb_0
, 
	gc_0
 ; 
low
*low

82 
UMULL
 
	ga_2
, 
	ga_3
, 
	gb_0
, 
	gc_1
 ; 
low
*
high


83 
UMULL
 
	gc_1
, 
	gb_0
, 
	gb_1
, c_1 ; 
high
*high

84 
ADDS
 
	ga_1
,á_1, 
a_2


85 
ADCS
 
	ga_2
, 
	ga_3
, 
c_1


86 
ADC
 
	ga_3
, 
	gb_0
, #0

87 
UMULL
 
	gc_0
, 
	gb_0
, 
	gb_1
, c_0 ; 
high
*
low


88 
ADDS
 
	ga_1
,á_1, 
c_0


89 
ADCS
 
	ga_2
,á_2, 
b_0


90 
ADC
 
	ga_3
,á_3, #0

91 ;  
wøµî


92 
MOV
 
	gr0
, 
a_0


93 
MOV
 
	gr1
, 
a_1


94 
MOV
 
	gr2
, 
a_2


95 
MOV
 
	gr3
, 
a_3


96 
LDMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gpc
}

98 ; 
__vÆue_ö_ªgs
 såu˘ { 
	ma0
,
	ma1
,
	ma2
,
	ma3
; }

99 ; 
umul_64to128_¨m9e
(
b
,

100 ; 
c
)

101 
umul_64to128_¨m9e


102 
STMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gÃ
}

103 ; 128-
bô
 
	ga
 = 64-bô 
b
 * 64-bô 
c


104 
UMULL
 
a_0
, 
	ga_1
, 
	gb_0
, 
	gc_0
 ; 
low
*low

105 
MOV
 
	ga_2
, #0

106 
UMLAL
 
	ga_1
, 
	ga_2
, 
	gb_0
, 
	gc_1
 ; 
low
*
high


107 
MOV
 
	ga_3
, #0

108 
UMLAL
 
	ga_1
, 
	ga_3
, 
	gb_1
, 
	gc_0
 ; 
high
*
low


109 
MOV
 
	gb_0
, #0

110 
ADDS
 
	ga_2
,á_2, 
a_3


111 
ADC
 
	ga_3
, 
	gb_0
, #0

112 
UMLAL
 
	ga_2
, 
	ga_3
, 
	gb_1
, 
	gc_1
 ; 
high
*
	ghigh


113 ;  
wøµî


114 
MOV
 
	gr0
, 
a_0


115 
MOV
 
	gr1
, 
a_1


116 
MOV
 
	gr2
, 
a_2


117 
MOV
 
	gr3
, 
a_3


118 
LDMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gpc
}

120 
MACRO


121 
USMLAL
 
	g$Æ
, 
	g$ah
, 
	g$b
, 
	g$c


122 ; sig√d 
	g$ah
.
	g$Æ
 +
$b
 * sig√d 
$c


123 
SMLAL
 
$Æ
, 
	g$ah
, 
	g$b
, 
	g$c
 ; 
	ga
 = (sig√d)
b
 * 
c
;

124 
TST
 
	g$b
, #1<<31 ; i‡((sig√d)
	gb
<0)

125 
ADDNE
 
	g$ah
, $ah, 
	g$c
 ; 
	ga
 +(
c
<<32);

126 
MEND


128 
MACRO


129 
SUMLAL
 
	g$Æ
, 
	g$ah
, 
	g$b
, 
	g$c


130 ; sig√d 
	g$ah
.
	g$Æ
 +sig√d 
$b
 * 
$c


131 
SMLAL
 
$Æ
, 
	g$ah
, 
	g$b
, 
	g$c
 ; 
	ga
 = 
b
 * (sig√d)
c
;

132 
TST
 
	g$c
, #1<<31 ; i‡((sig√d)
	gc
<0)

133 
ADDNE
 
	g$ah
, $ah, 
	g$b
 ; 
	ga
 +(
b
<<32);

134 
	gMEND


136 ; 
__vÆue_ö_ªgs
 såu˘ { 
	ma0
,
	ma1
,
	ma2
; sig√d 
	ma3
; }

137 ; 
	$smul_64to128
(
b
, 
c
)

138 
smul_64to128


139 
STMFD
 
•
!, {
r4
,
r5
,
Ã
}

140 ; sig√d 128-
bô
 
	ga
 = 64-bô 
b
 * 64-bô 
c


141 
UMULL
 
a_0
, 
	ga_1
, 
	gb_0
, 
	gc_0
 ; 
low
*low

142 
MOV
 
	ga_2
, #0

143 
USMLAL
 
	ga_1
, 
	ga_2
, 
	gb_0
, 
	gc_1
 ; 
low
*
high


144 
MOV
 
	ga_3
, #0

145 
SUMLAL
 
	ga_1
, 
	ga_3
, 
	gb_1
, 
	gc_0
 ; 
high
*
low


146 
MOV
 
	gb_0
, 
	ga_2
, 
	gASR
#31

147 
ADDS
 
	ga_2
,á_2, 
a_3


148 
ADC
 
	ga_3
, 
	gb_0
,á_3, 
	gASR
#31

149 
SMLAL
 
	ga_2
, 
	ga_3
, 
	gb_1
, 
	gc_1
 ; 
high
*
	ghigh


150 ;  
wøµî


151 
MOV
 
	gr0
, 
a_0


152 
MOV
 
	gr1
, 
a_1


153 
MOV
 
	gr2
, 
a_2


154 
MOV
 
	gr3
, 
a_3


155 
LDMFD
 
	g•
!, {
	gr4
,
	gr5
,
	gpc
}

157 
	gEND


	@/home/jkr555/arm/guide/ch07_primitives/norm.s

47 
AREA
 
	gch07_2
, 
	gCODE
, 
READONLY


49 
EXPORT
 
un‹m_¨m9e


50 
EXPORT
 
¢‹m_¨m9e


51 
EXPORT
 
un‹m_¨m7m


52 
EXPORT
 
un‹m_¨m7m_hash


53 
EXPORT
 
˘z_¨m9e


54 
EXPORT
 
˘z_¨m7m


56 
x
 
	gRN
 0 ; 
	göput
, 
ouçut
 
öãgî


57 
shi·
 
	gRN
 1 ; shi· 
to
 
	gn‹mÆize


59 ; 
__vÆue_ö_ªgs
 såu˘ { 
	mx
; 
	mshi·
; }

60 ; 
	$un‹m_¨m9e
(
x
)

61 
un‹m_¨m9e


62 
CLZ
 
shi·
, 
x
 ; 
À·
 shi· 
to
 
n‹mÆize


63 
MOV
 
x
, x, 
LSL
 
shi·
 ; 
n‹mÆize


64 
MOV
 
pc
, 
Ã


66 ; 
__vÆue_ö_ªgs
 såu˘ { sig√d 
x
; 
shi·
; }

67 ; 
	$un‹m_¨m9e
(sig√d 
x
)

68 
¢‹m_¨m9e
 ; [ 
s
 s s 1-†
x
 x ... ]

69 
EOR
 
shi·
, 
x
, x, 
LSL
#1 ; [ 0 0 1 x x x ... ]

70 
CLZ
 
shi·
, shi· ; 
À·
 shi· 
to
 
n‹mÆize


71 
MOV
 
x
, x, 
LSL
 
shi·
 ; 
n‹mÆize


72 
MOV
 
pc
, 
Ã


74 ; 
__vÆue_ö_ªgs
 såu˘ { 
x
; 
shi·
; }

75 ; 
	$un‹m_¨m7m
(
x
)

76 
un‹m_¨m7m


77 
MOV
 
shi·
, #0 ; shift=0;

78 
CMP
 
x
, #1<<16 ; if (x < (1<<16))

79 
MOVCC
 
x
, x, 
LSL
#16 ; { x = x<<16;

80 
ADDCC
 
shi·
, shi·, #16 ; shi·+=16; 
	}
}

81 
TST
 
	gx
, #0
	gxFF000000
 ; if (x < (1<<24))

82 
MOVEQ
 
	gx
, x, 
	gLSL
#8 ; { x = 
x
<<8;

83 
ADDEQ
 
	gshi·
, shift, #8 ; shift+=8; }

84 
TST
 
	gx
, #0
	gxF0000000
 ; if (x < (1<<28))

85 
MOVEQ
 
	gx
, x, 
	gLSL
#4 ; { x = 
x
<<4;

86 
ADDEQ
 
	gshi·
, shift, #4 ; shift+=4; }

87 
TST
 
	gx
, #0
	gxC0000000
 ; if (x < (1<<30))

88 
MOVEQ
 
	gx
, x, 
	gLSL
#2 ; { x = 
x
<<2;

89 
ADDEQ
 
	gshi·
, shift, #2 ; shift+=2; }

90 
TST
 
	gx
, #0
	gx80000000
 ; if (x < (1<<31))

91 
ADDEQ
 
	gshi·
, shift, #1 ; { shift+=1;

92 
MOVEQS
 
	gx
, x, 
	gLSL
#1 ; x<<=1;

93 
MOVEQ
 
	gshi·
, #32 ; i‡(
	gx
==0Ë
shi·
=32; }

94 
MOV
 
	gpc
, 
Ã


96 
èbÀ
 
	gRN
 2 ; 
addªss
 
of
 
hash
 
lookup
 
	gèbÀ


98 ; 
__vÆue_ö_ªgs
 såu˘ { 
	mx
; 
	mshi·
; }

99 ; 
	$un‹m_¨m7m_hash
(
x
)

100 
un‹m_¨m7m_hash


101 
ORR
 
shi·
, 
x
, x, 
LSR
#1

102 
ORR
 
shi·
, shi·, shi·, 
LSR
#2

103 
ORR
 
shi·
, shi·, shi·, 
LSR
#4

104 
ORR
 
shi·
, shi·, shi·, 
LSR
#8

105 
BIC
 
shi·
, shi·, shi·, 
LSR
#16

106 
RSB
 
shi·
, shi·, shi·, 
LSL
#9 ; *(2^9-1)

107 
RSB
 
shi·
, shi·, shi·, 
LSL
#11 ; *(2^11-1)

108 
RSB
 
shi·
, shi·, shi·, 
LSL
#14 ; *(2^14-1)

109 
ADR
 
èbÀ
, 
un‹m_¨m7m_hash_èbÀ


110 
LDRB
 
shi·
, [
èbÀ
, shi·, 
LSR
#26]

111 
MOV
 
x
, x, 
LSL
 
shi·


112 
MOV
 
pc
, 
Ã


114 
un‹m_¨m7m_hash_èbÀ


115 
DCB
 0x20, 0x14, 0x13, 0xff, 0xff, 0x12, 0xff, 0x07

116 
DCB
 0x0a, 0x11, 0xff, 0xff, 0x0e, 0xff, 0x06, 0xff

117 
DCB
 0xff, 0x09, 0xff, 0x10, 0xff, 0xff, 0x01, 0x1a

118 
DCB
 0xff, 0x0d, 0xff, 0xff, 0x18, 0x05, 0xff, 0xff

119 
DCB
 0xff, 0x15, 0xff, 0x08, 0x0b, 0xff, 0x0f, 0xff

120 
DCB
 0xff, 0xff, 0xff, 0x02, 0x1b, 0x00, 0x19, 0xff

121 
DCB
 0x16, 0xff, 0x0c, 0xff, 0xff, 0x03, 0x1c, 0xff

122 
DCB
 0x17, 0xff, 0x04, 0x1d, 0xff, 0xff, 0x1e, 0x1f

124 ; 
	$˘z_¨m9e
(
x
)

125 
˘z_¨m9e


126 
RSBS
 
shi·
, 
x
, #0 ; shift=-x

127 
AND
 
shi·
, shi·, 
x
 ; 
isﬁ©e
 
åaûög
 1 
of
 x

128 
CLZCC
 
shi·
, shi· ; 
numbî
 
of
 
zîos
 
above
 
œ°
 1

129 
RSC
 
r0
, 
shi·
, #32 ; 
numbî
 
of
 
zîos
 
bñow
 
œ°
 1

130 
MOV
 
pc
, 
Ã


132 ; 
	$˘z_¨m7m
(
x
)

133 
˘z_¨m7m


134 
RSB
 
shi·
, 
x
, #0

135 
AND
 
shi·
, shi·, 
x
 ; 
isﬁ©e
 
lowe°
 
bô


136 
ADD
 
shi·
, shi·, shi·, 
LSL
#4 ; *(2^4+1)

137 
ADD
 
shi·
, shi·, shi·, 
LSL
#6 ; *(2^6+1)

138 
RSB
 
shi·
, shi·, shi·, 
LSL
#16 ; *(2^16-1)

139 
ADR
 
èbÀ
, 
˘z_¨m7m_hash_èbÀ


140 
LDRB
 
r0
, [
èbÀ
, 
shi·
, 
LSR
#26]

141 
MOV
 
pc
, 
Ã


143 
˘z_¨m7m_hash_èbÀ


144 
DCB
 0x20, 0x00, 0x01, 0x0c, 0x02, 0x06, 0xff, 0x0d

145 
DCB
 0x03, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 0x0e

146 
DCB
 0x0a, 0x04, 0xff, 0xff, 0x08, 0xff, 0xff, 0x19

147 
DCB
 0xff, 0xff, 0xff, 0xff, 0xff, 0x15, 0x1b, 0x0f

148 
DCB
 0x1f, 0x0b, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff

149 
DCB
 0x09, 0xff, 0xff, 0x18, 0xff, 0xff, 0x14, 0x1a

150 
DCB
 0x1e, 0xff, 0xff, 0xff, 0xff, 0x17, 0xff, 0x13

151 
DCB
 0x1d, 0xff, 0x16, 0x12, 0x1c, 0x11, 0x10

153 
END


	@/home/jkr555/arm/guide/ch07_primitives/rand.s

47 
AREA
 
	gch07_8
, 
	gCODE
, 
READWRITE


49 
EXPORT
 
	gønd_32


54 
n
 
	gRN
 0

55 
r
 
	gRN
 1

56 
a
 
	gRN
 2

57 
t
 
	gRN
 3

59 
EXPORT
 
ønd_32


60 
	gønd_32


61 ; 
lﬂd
 
°©e


62 
LDR
 
	ga
, = 0x91E6D6A5

63 
LDR
 
r
, 
	g£ed


64 ; 
gíî©e
 
√xt
 
øndom
 
numbî


65 
MLA
 
	gr
, 
	ga
,Ñ,á ;Ñ = 
r
*
a
+a

66 
UMULL
 
t
, 
	gn
, 
	gr
,Ç ;Ç = (
r
*
n
)>>32

67 ; 
ßve
 
°©e
 
™d
 

68 
STR
 
	gr
, 
£ed


69 
MOV
 
	gpc
, 
Ã


71 
£ed
 
	gDCD
 0x12345678 ; 
öôül
 
øndom
 seed

73 
	gEND


	@/home/jkr555/arm/guide/ch07_primitives/ref_bits.c

48 
	~"ch07ã°.h
"

50 
öt32
 
	$ªf_byã_ªvî£
(
öt32
 
a
)

52 
öt32
 
b
=0;

53 
i
;

55 
i
=4; i!=0; i--)

57 
b
 = (b<<8Ë| (
a
 & 0xFF);

58 
a
 =á>>8;

61  
b
;

62 
	}
}

64 
öt32
 
	$ªf_bô_cou¡
(
öt32
 
a
)

66 
öt32
 
b
=0;

67 
i
;

69 
i
=32; i!=0; i--)

71 
b
 +
a
&1;

72 
a
 =á>>1;

74  
b
;

75 
	}
}

77 
öt32
 
	$ªf_bô_ªvî£
(
öt32
 
a
)

79 
öt32
 
b
=0;

80 
i
;

82 
i
=0; i<32; i++)

84 i‡(
a
&((
öt32
)1u<<
i
))

86 
b
 |(
öt32
)1u<<(31-
i
);

89  
b
;

90 
	}
}

92 
öt32
 
	$ªf_bô_•ªad
(
öt32
 
a
)

94 
öt32
 
b
=0;

95 
i
;

97 
i
=0; i<32; i++)

99 i‡(
a
&((
öt32
)1u<<
i
))

101 
j
=2*
i
;

102 i‡(
j
>=32) j-=31;

103 
b
 |(
öt32
)1u<<
j
;

106  
b
;

107 
	}
}

109 
öt32
 
	$ªf_bô_ªv_•ªad
(
öt32
 
a
)

111 
öt32
 
b
=0;

112 
i
;

114 
i
=0; i<32; i++)

116 i‡(
a
&((
öt32
)1u<<
i
))

118 
j
=2*
i
;

119 i‡(
j
>=32)

121 
j
=63-j;

125 
j
=30-j;

127 
b
 |(
öt32
)1u<<
j
;

130  
b
;

131 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_div.c

48 
	~"ch07ã°.h
"

50 
	$udiv_sim∂e
(
d
, 
n
, 
N
)

52 
q
=0, 
r
=
n
;

56 
N
--;

57 i‡–(
r
>>
N
Ë>
d
 )

59 
r
 -(
d
<<
N
);

60 
q
 +(1<<
N
);

62 } 
N
);

64  
q
;

65 
	}
}

67 
__vÆue_ö_ªgs
 
∑ú32
 
	$udiv_sim∂e_ã°
(
öt32
 
a
, i¡32 
b
)

69 
∑ú32
 
™s
;

71 i‡(
a
==0)

73 
™s
.
a
 = -1;

74 
™s
.
b
 = -1;

78 
™s
.
a
 = 
	`udiv_sim∂e
((Ô,()
b
,32);

79 
™s
.
b
 = b-
a
*ans.a;

81  
™s
;

82 
	}
}

84 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_udiv_32by32
(
öt32
 
a
, i¡32 
b
)

86 
uöt32
 
d
=
a
, 
n
=
b
;

87 
∑ú32
 
r
;

89 i‡(
d
==0)

91 
r
.
a
=-1;

92 
r
.
b
=-1;

94 
r
.
a
 = 
n
/
d
;

95 
r
.
b
 = 
n
%
d
;

97  
r
;

98 
	}
}

100 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_sdiv_32by32
(
öt32
 
a
, i¡32 
b
)

102 
söt32
 
d
=
a
, 
n
=
b
;

103 
∑ú32
 
r
;

105 i‡(
d
==0)

107 i‡(
n
<0)

109 
r
.
a
=+1;

110 
r
.
b
=+1;

114 
r
.
a
=-1;

115 
r
.
b
=-1;

118 
r
.
a
 = 
n
/
d
;

119 
r
.
b
 = 
n
%
d
;

121  
r
;

122 
	}
}

124 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_udiv_32by16
(
öt32
 
a
, i¡32 
b
)

126 
uöt32
 
d
=
a
, 
n
=
b
;

127 
∑ú32
 
r
;

129 i‡((
n
>>15)>=
d
)

131 
r
.
a
 = 0x7FFF;

132 
r
.
b
 = 0x7FFF;

134 
r
.
a
 = 
n
/
d
;

135 
r
.
b
 = 
n
%
d
;

137  
r
;

138 
	}
}

140 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_udiv_64by32
(
öt32
 
a
, 
öt64
 
b
)

142 
uöt64
 
d
=()
a
;

143 
uöt64
 
n
=
b
;

144 
∑ú32
 
r
;

146 i‡((
n
>>32)>=
d
)

148 
r
.
a
=-1;

149 
r
.
b
=-1;

153 
r
.
a
=(
öt32
)(
n
/
d
);

154 
r
.
b
=(
öt32
)(
n
%
d
);

156  
r
;

157 
	}
}

159 
öt32
 
	$ªf_udiv_q15
(
öt32
 
a
, i¡32 
b
)

161 
uöt32
 
d
=(uöt32)
a
, 
n
=(uöt32)
b
;

163 i‡(
n
>=
d
)

169  (
n
<<15)/
d
;

171 
	}
}

173 
öt32
 
	$ªf_udiv_q31
(
öt32
 
a
, i¡32 
b
)

175 
uöt32
 
d
=(uöt32)
a
, 
n
=(uöt32)
b
;

177 i‡(
n
>=
d
)

183  (
uöt32
)(((
uöt64
)
n
<<31)/
d
);

185 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_mul.c

48 
	~"ch07ã°.h
"

50 
öt64
 
	$ªf_mul_64to64
(
öt64
 
b
, i¡64 
c
)

52  
b
*
c
;

53 
	}
}

55 
__vÆue_ö_ªgs
 
uöt128
 
	$ªf_umul_64to128
(
uöt64
 
b
, uöt64 
c
)

57 
uöt128
 
a
;

58 
uöt64
 
acc
;

59 
uöt32
 
b0
,
b1
,
c0
,
c1
,
ˇºy
;

61 
b0
 = (
uöt32
)
b
;

62 
b1
 = (
uöt32
)(
b
>>32);

63 
c0
 = (
uöt32
)
c
;

64 
c1
 = (
uöt32
)(
c
>>32);

66 
acc
 = (
uöt64
)
b0
*
c0
;

67 
a
.
a0
 = (
uöt32
)
acc
;

68 
ˇºy
 = (
uöt32
)(
acc
>>32);

69 
acc
 = (
uöt64
)
b1
*
c0
 + 
ˇºy
;

70 
a
.
a1
 = (
uöt32
)
acc
;

71 
a
.
a2
 = (
uöt32
)(
acc
>>32);

73 
acc
 = (
uöt64
)
b0
*
c1
 + 
a
.
a1
;

74 
a
.
a1
 = (
uöt32
)
acc
;

75 
ˇºy
 = (
uöt32
)(
acc
>>32);

76 
acc
 = (
uöt64
)
b1
*
c1
 + 
a
.
a2
 + 
ˇºy
;

77 
a
.
a2
 = (
uöt32
)
acc
;

78 
a
.
a3
 = (
uöt32
)(
acc
>>32);

80  
a
;

81 
	}
}

83 
__vÆue_ö_ªgs
 
söt128
 
	$ªf_smul_64to128
(
söt64
 
b
, söt64 
c
)

85 
söt128
 
a
;

86 
uöt64
 
acc
;

87 
uöt32
 
b0
,
c0
,
ˇºy
;

88 
söt32
 
b1
,
c1
,
sˇºy
;

90 
b0
 = (
uöt32
)
b
;

91 
b1
 = (
söt32
)(
b
>>32);

92 
c0
 = (
uöt32
)
c
;

93 
c1
 = (
söt32
)(
c
>>32);

95 
acc
 = (
uöt64
)
b0
*
c0
;

96 
a
.
a0
 = (
uöt32
)
acc
;

97 
ˇºy
 = (
uöt32
)(
acc
>>32);

98 
acc
 = (
söt64
)
b1
*(
uöt64
)
c0
 + 
ˇºy
;

99 
a
.
a1
 = (
uöt32
)
acc
;

100 
a
.
a3
 = (
söt32
)(
acc
>>32);

102 
acc
 = (
uöt64
)
b0
*(
söt64
)
c1
 + (uöt64)
a
.
a1
;

103 
a
.
a1
 = (
uöt32
)
acc
;

104 
sˇºy
(
söt32
)(
acc
>>32);

105 
acc
 = (
söt64
)
b1
*(söt64)
c1
 + 
a
.
a3
 + 
sˇºy
;

106 
a
.
a2
 = (
uöt32
)
acc
;

107 
a
.
a3
 = (
söt32
)(
acc
>>32);

109  
a
;

110 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_norm.c

48 
	~"ch07ã°.h
"

50 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_un‹m
(
öt32
 
a
)

52 
∑ú32
 
r
;

53 
uöt32
 
x
, 
shi·
;

55 
x
=
a
;

56 i‡(
x
==0)

58 
shi·
=32;

62 
shi·
=0;

63 
x
<0x80000000ul)

65 
x
<<=1;

66 
shi·
++;

70 
r
.
a
 = 
x
;

71 
r
.
b
 = 
shi·
;

73  
r
;

74 
	}
}

76 
__vÆue_ö_ªgs
 
∑ú32
 
	$ªf_¢‹m
(
öt32
 
a
)

78 
∑ú32
 
r
;

79 
söt32
 
x
, 
shi·
;

81 
x
=
a
;

82 i‡(
x
==0)

84 
shi·
=32;

88 
shi·
=0;

89 -(1<<30)<=
x
 && x<(1<<30))

91 
x
<<=1;

92 
shi·
++;

96 
r
.
a
 = 
x
;

97 
r
.
b
 = 
shi·
;

99  
r
;

100 
	}
}

104 
öt32
 
	$ªf_˘z
(
öt32
 
a
)

106 
uöt32
 
x
 = 
a
;

107 
shi·
=0;

108 (
x
&1)==0)

110 
x
 = (x>>1) | (1u<<31);

111 
shi·
++;

113  
shi·
;

114 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_root.c

48 
	~"ch07ã°.h
"

49 
	~<m©h.h
>

51 
	$usqr_sim∂e
(
d
, 
N
)

53 
t
, 
q
=0, 
r
=
d
;

57 
N
--;

58 
t
 = 2*
q
+(1<<
N
);

59 i‡–(
r
>>
N
Ë>
t
 )

61 
r
 -(
t
<<
N
);

62 
q
 +(1<<
N
);

64 } 
N
);

66  
q
;

67 
	}
}

69 
öt32
 
	$usqr_sim∂e_ã°
(
öt32
 
a
)

71  
	`usqr_sim∂e
(()
a
,16);

72 
	}
}

74 
öt32
 
	$ªf_usqr_32
(
öt32
 
a
)

76 
uöt32
 
d
 = 
a
;

77 
N
=16;

78 
uöt32
 
q
=0,
q1
;

82 
N
--;

83 
q1
 = 
q
+((
uöt32
)1<<
N
);

84 i‡(
d
 >
q1
*q1)

86 
q
=
q1
;

88 } 
N
);

90  
q
;

91 
	}
}

93 
öt32
 
	$ªf_ucbr_32
(
öt32
 
a
)

95 
uöt32
 
d
 = 
a
;

96 
N
=11;

97 
uöt32
 
q
=0,
q1
;

101 
N
--;

102 
q1
 = 
q
+((
uöt32
)1<<
N
);

104 i‡(
q1
 <1625 && 
d
 >= q1*q1*q1)

106 
q
=
q1
;

108 } 
N
);

110  
q
;

111 
	}
}

113 
öt32
 
	$ªf_rsqr_32
(
öt32
 
a
)

115 
d
=()(
uöt32
)
a
;

117 i‡(
a
==0)

121 
d
 = ()(1u<<31)/
	`sqπ
(d);

123  (
öt32
)(
d
+0.5);

124 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_sat.c

48 
	~"ch07ã°.h
"

50 
	#MAXPOS
 (
öt32
)(+0x7FFFFFFF)

	)

51 
	#MAXNEG
 (
öt32
)(-0x80000000)

	)

53 
öt32
 
	$ªf_qßt_16
(
öt32
 
a
)

55 i‡(
a
>=0x7FFF)  0x7FFF;

56 i‡(
a
<=-0x8000)  -0x8000;

57  
a
;

58 
	}
}

60 
öt32
 
	$ªf_qshl_32
(
öt32
 
b
, i¡32 
c
)

62 i‡(
b
>(
MAXPOS
>>
c
))  MAXPOS;

63 i‡(
b
<(
MAXNEG
>>
c
))  MAXNEG;

64  
b
<<
c
;

65 
	}
}

69 
öt32
 
	$ªf_qshr_32
(
öt32
 
b
, i¡32 
c
)

71 
öt32
 
a
;

73 i‡(
c
==0Ë 
b
;

75 
a
 = 
b
>>
c
;

76 
b
 = b-(
a
<<
c
);

77 i‡(
b
>=((
öt32
)1<<(
c
-1)))

79 
a
++;

81  
a
;

82 
	}
}

84 
öt32
 
	$ªf_qadd_32
(
öt32
 
b
, i¡32 
c
)

86 
öt64
 
a
=(öt64)
b
+(öt64)
c
;

88 i‡(
a
>=(
öt64
)
MAXPOS
)  MAXPOS;

89 i‡(
a
<=(
öt64
)
MAXNEG
)  MAXNEG;

90  (
öt32
)
a
;

91 
	}
}

93 
öt32
 
	$ªf_qsub_32
(
öt32
 
b
, i¡32 
c
)

95 
öt64
 
a
=(öt64)
b
-(öt64)
c
;

97 i‡(
a
>=(
öt64
)
MAXPOS
)  MAXPOS;

98 i‡(
a
<=(
öt64
)
MAXNEG
)  MAXNEG;

99  (
öt32
)
a
;

100 
	}
}

102 
öt32
 
	$ªf_abß_32
(
öt32
 
b
, i¡32 
c
)

104 i‡(
c
>=0Ë 
b
+c;

105  
b
-
c
;

106 
	}
}

108 
öt32
 
	$ªf_qabs_32
(
öt32
 
a
)

110 i‡(
a
<0)

112 
a
=-a;

115 i‡(
a
<0Ë 
MAXPOS
;

116  
a
;

117 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/ref_tran.c

48 
	~"ch07ã°.h
"

49 
	~<m©h.h
>

51 c⁄° 
	gT16
 = ()(1<<16);

52 c⁄° 
	gT26
 = ()(1<<26);

53 c⁄° 
	gT28
 = ()(1<<28);

54 c⁄° 
	gT30
 = ()(1u<<30);

55 c⁄° 
	gT31
 = ()(1u<<31);

56 c⁄° 
	gPI
 = 3.14159265358;

58 
	$uround
(
d
)

60  ()(
d
+0.5);

61 
	}
}

63 
	$round
(
d
)

65 i‡(
d
>=0)

67  ()(
d
+0.5);

71  ()(
d
-0.5);

73 
	}
}

77 
öt32
 
	$ªf_ulog2_32
(
öt32
 
a
)

79 
uöt32
 
n
=
a
;

81 i‡(
n
==0)  -0x03ffffff;

82  
	`uround
(
	`log
(()
n
)/log(2)*
T26
);

83 
	}
}

87 
öt32
 
	$ªf_uexp2_32
(
öt32
 
n
)

89 
d
;

91 i‡(
n
<0)  0;

92 
d
 = ()
n
/
T26
;

93 
d
 = 
	`exp
(d*
	`log
(2.0));

94  
	`uround
(
d
);

95 
	}
}

99 
öt32
 
	$ªf_sö_32
(
öt32
 
n
)

101 
a

PI
*()
n
/
T31
;

102  
	`round
(
	`sö
(
a
)*
T30
);

103 
	}
}

107 
öt32
 
	$ªf_cos_32
(
öt32
 
n
)

109 
a
=
PI
*()
n
/
T31
;

110  
	`round
(
	`cos
(
a
)*
T30
);

111 
	}
}

	@/home/jkr555/arm/guide/ch07_primitives/root.s

47 
AREA
 
	gch07_4
, 
	gCODE
, 
READONLY


49 
EXPORT
 
usqr_32


50 
EXPORT
 
ucbr_32


51 
EXPORT
 
rsqr_32


53 
q
 
	gRN
 0 ; 
öput
 
	gvÆue
, 
cuºít
 
squ¨e
 
roŸ
 
e°im©e


54 
r
 
	gRN
 1 ; 
the
 
cuºít
 
ªmaödî


55 
c
 
	gRN
 2 ; 
s¸©ch
 

57 
	gusqr_32
 ; 
	$usqr_32
(
q
)

58 
SUBS
 
r
, 
q
, #1<<30 ; 
is
 q>=(1<<15)^2?

59 
ADDCC
 
r
,Ñ, #1<<30 ; 
nŸ
 
ª°‹e


60 
MOV
 
c
, #3<<30 ; c 
is
 
a
 
c⁄°™t


61 
ADC
 
q
, 
c
, #1<<31 ; 
£t
 
bô
 15 
of
 
™swî


62 ; 
ˇlcuœã
 
bôs
 14..0 
of
 
the
 
™swî


63 
GBLA
 
N


64 
N
 
SETA
 14

65 
WHILE
 
N
<>-1

66 
CMP
 
r
, 
q
, 
ROR
 #(30-2*
N
Ë; 
is
Ñ >
t
<<N ?

67 
SUBCS
 
r
,Ñ, 
q
, 
ROR
 #(30-2*
N
Ë; 
yes
 
thí
Ñ -
t
<<N;

68 
ADC
 
q
, 
c
, q, 
LSL
#1 ; 
ö£π
 
√xt
 
bô
 
of
 
™swî


69 
N
 
	`SETA
 (N-1)

70 
WEND


71 
BIC
 
q
, q, #3<<30 ; 
exåa˘
 
™swî


72 
MOV
 
pc
, 
Ã


74 
q0
 
RN
 0 ; 
öput
 
vÆue
, 
cuºít
 
e°im©e


75 
r
 
RN
 1 ; 
cuºít
 
ªmaödî


76 
s
 
RN
 2 ; 
cuºít
 
ªmaödî


77 
q1
 
RN
 3 ; 
cuºít
 
e°im©e


78 
c_1
 
RN
 12 ; 1<<29

79 
c_2
 
RN
 
Ã
 ; 3<<30

81 
MACRO


82 
CBR_STEP
 
$N
, 
$q1
, 
$q0


83 
SUBS
 
$q1
, 
r
, 
s
, 
ROR
 #(30-3*
$N
)

84 
MOVCS
 
r
, 
$q1


85 
ADC
 
$q1
, 
c_2
, 
$q0
, 
LSL
#1

86 
ADD
 
s
, 
$q0
, s, 
ROR
 #30

87 
EORCS
 
$q0
, 
c_1
, $q0, 
LSL
 #1

88 
SUB
 
s
, s, 
$q0
, 
ROR
 #30

89 
MEND


91 
ucbr_32
 ; 
	$ub¸_32
(
q
)

92 
STR
 
Ã
, [
•
, #-4]!

93 
MVN
 
c_1
, #1<<29

94 
MOV
 
c_2
, #3<<30

95 ; 
ˇlcuœã
 
™swî
 
bô
 10

96 
SUBS
 
r
, 
q0
, #1<<30

97 
MOVCC
 
r
, 
q0


98 
ADC
 
q0
, 
c_2
, #1<<31

99 
MOVCC
 
s
, #(1<<30)

100 
MOVCS
 
s
, #(3<<30)+4

101 ; 
ˇlcuœã
 
™swî
 
bôs
 9,8,...,1

102 
CBR_STEP
 9, 
q1
, 
q0


103 
CBR_STEP
 8, 
q0
, 
q1


104 
CBR_STEP
 7, 
q1
, 
q0


105 
CBR_STEP
 6, 
q0
, 
q1


106 
CBR_STEP
 5, 
q1
, 
q0


107 
CBR_STEP
 4, 
q0
, 
q1


108 
CBR_STEP
 3, 
q1
, 
q0


109 
CBR_STEP
 2, 
q0
, 
q1


110 
CBR_STEP
 1, 
q1
, 
q0


111 ; 
ˇlcuœã
 
™swî
 
bô
 0

112 
CMP
 
r
, 
s
, 
ROR
 #30

113 
ADC
 
q0
, 
q1
, q1

114 
BIC
 
r0
, 
q0
, #3<<30

115 
LDR
 
pc
, [
•
], #4

118 
q
 
RN
 0 ; 
öput
 
vÆue
, 
e°im©ed
 
ªcùroˇl
 
roŸ


119 
b
 
RN
 1 ; 
s¸©ch
 

120 
s
 
RN
 2 ; 
n‹mÆiz©i⁄
 
shi·


121 
d
 
RN
 3 ; 
n‹mÆized
 
öput
 
vÆue


122 
a
 
RN
 12 ; 
s¸©ch
 /
accumuœt‹


125 
rsqr_32
 ; 
	$rsqr_32
(
q
)

126 
CLZ
 
s
, 
q
 ; 
choo£
 
shi·
 s 
which
 
is


127 
BIC
 
s
, s, #1 ; 
eví
 
such
 
th©
 
d
=(
q
<<s)

128 
MOVS
 
d
, 
q
, 
LSL
 
s
 ; 
is
 0.25<=d<1 
©
 
Q32


129 
ADDNE
 
q
, 
pc
, 
d
, 
LSR
#25 ; 
èbÀ
 
lookup
 
⁄
 
t›
 7 
bôs


130 
LDRNEB
 
q
, [q, #èb-
ba£
-32] ; 
of
 
d
 
ö
 
ønge
 32 
to
 127

131 
ba£
 
BEQ
 
div_by_zîo
 ; 
divide
 
by
 
zîo
 
å≠


132 
ADD
 
q
, q, #0
x100
 ; 
èbÀ
 
°‹es
 
⁄ly
 
bŸtom
 8 
bôs


133 ; 
q
 
is
 
now
 
a
 
Q8
, 9-
bô
 
e°im©e
 
to
 1/
	$sqπ
(
d
)

134 
SMULBB
 
a
, 
q
, q ;á = q*q 
©
 
Q16


135 
MOV
 
b
, 
d
, 
LSR
 #17 ; b = d 
©
 
Q15


136 
SMULWB
 
a
,á, 
b
 ;á = 
d
*
q
*q 
©
 
Q15


137 
MOV
 
b
, 
q
, 
LSL
 #7 ; b = q 
©
 
Q15


138 
RSB
 
a
,á, #3<<15 ;á = (3-
d
*
q
*qË
©
 
Q15


139 
MUL
 
q
, 
a
, 
b
 ; q = q*(3-
d
*q*q)/2 
©
 
Q31


140 ; 
q
 
is
 
now
 
a
 
Q31
 
e°im©e
 
to
 1/
	$sqπ
(
d
)

141 
UMULL
 
b
, 
a
, 
d
, 
q
 ;á = d*q 
©
 
Q31


142 
MOV
 
s
, s, 
LSR
 #1 ; 
squ¨e
 
roŸ
 
hÆves
 
the
 
shi·


143 
UMULL
 
b
, 
a
, 
q
,á ;á = 
d
*q*q 
©
 
Q30


144 
RSB
 
s
, s, #15 ; 
ªcùroˇl
 
övîts
 
the
 
shi·


145 
RSB
 
a
,á, #3<<30 ;á = (3-
d
*
q
*qË
©
 
Q30


146 
UMULL
 
b
, 
q
, 
a
, q ; q = q*(3-
d
*q*q)/2 
©
 
Q31


147 ; 
q
 
is
 
now
 
a
 
good
 
Q31
 
e°im©e
 
to
 1/
	$sqπ
(
d
)

148 
MOV
 
q
, q, 
LSR
 
s
 ; 
undo
 
the
 
n‹mÆiz©i⁄
 
shi·


149 
BX
 
Ã
 ;  
q


150 
div_by_zîo


151 
MOV
 
q
, #0
x7FFFFFFF
 ; 
maxium
 
posôive
 
™swî


152 
BX
 
Ã
 ;  
q


154 
èb
 ;Åab[
k
] = 
	`round
(256.0/
	`sqπ
((k+32.3)/128.0)) - 256

155 
DCB
 0xfe, 0xf6, 0xef, 0xe7, 0xe1, 0xda, 0xd4, 0xce

156 
DCB
 0xc8, 0xc3, 0xbd, 0xb8, 0xb3, 0xae, 0xaa, 0xa5

157 
DCB
 0xa1, 0x9c, 0x98, 0x94, 0x90, 0x8d, 0x89, 0x85

158 
DCB
 0x82, 0x7f, 0x7b, 0x78, 0x75, 0x72, 0x6f, 0x6c

159 
DCB
 0x69, 0x66, 0x64, 0x61, 0x5e, 0x5c, 0x59, 0x57

160 
DCB
 0x55, 0x52, 0x50, 0x4e, 0x4c, 0x49, 0x47, 0x45

161 
DCB
 0x43, 0x41, 0x3f, 0x3d, 0x3b, 0x3a, 0x38, 0x36

162 
DCB
 0x34, 0x32, 0x31, 0x2f, 0x2d, 0x2c, 0x2a, 0x29

163 
DCB
 0x27, 0x26, 0x24, 0x23, 0x21, 0x20, 0x1e, 0x1d

164 
DCB
 0x1c, 0x1a, 0x19, 0x18, 0x16, 0x15, 0x14, 0x13

165 
DCB
 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0b, 0x0a, 0x09

166 
DCB
 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01

168 
END


	@/home/jkr555/arm/guide/ch07_primitives/sat.s

47 
AREA
 
	gch07_7
, 
	gCODE
, 
READONLY


49 
EXPORT
 
qßt_16


50 
EXPORT
 
qshl_32


51 
EXPORT
 
qshr_32


52 
EXPORT
 
qadd_32


53 
EXPORT
 
qsub_32


54 
EXPORT
 
abß_32


55 
EXPORT
 
qabs_32


57 
b
 
	gRN
 0

58 
c
 
	gRN
 1

59 
a
 
	gRN
 2

60 
m
 
	gRN
 3

66 
	gqßt_16
 ; 
	gb
=
	$ßtuøã16
(
b
)

67 
LDR
 
m
, =0x00007FFF ; m = 0x7FFF 
maximum
 +
ve


68 
MOV
 
a
, 
b
, 
ASR
#15 ;á = (b>>15)

69 
TEQ
 
a
, 
b
, 
ASR
#31 ; i‡◊!=
	$sign
(
b
))

70 
EORNE
 
b
, 
m
, b, 
ASR
#31 ; b = 0x7FFF ^ 
	$sign
(
b
)

71 
MOV
 
pc
, 
Ã
 ;  
b


75 
qshl_32
 ; 
a
=
	`ßtuøã32
(
b
<<
c
)

76 
MOV
 
m
, #0
x7FFFFFFF
 ; m = 0x7FFFFFFF 
max
 +
ve


77 
MOV
 
a
, 
b
, 
LSL
 
c
 ;á = b<<c

78 
TEQ
 
b
, 
a
, 
ASR
 
c
 ; if (b != (a>>c))

79 
EORNE
 
a
, 
m
, 
b
, 
ASR
#31 ;á = 0x7FFFFFFF^
	$sign
(
b
)

80 
MOV
 
r0
, 
a
 ;Ñ0 =á

81 
MOV
 
pc
, 
Ã
 ;  
r0


85 
qshr_32
 ; 
a
=
	`round
(
b
>>
c
)

86 
ADDS
 
b
, b, #0 ; 
˛ór
 
ˇºy
 
so
 
w‹ks
 
c
=0

87 
MOVS
 
a
, 
b
, 
ASR
 
c
 ;á = b>>c, 
ˇºy
=b 
bô
 c-1

88 
ADC
 
a
,á, #0 ; i‡(
ˇºy
Ëa++ 
to
 
round


89 
MOV
 
r0
, 
a
 ;Ñ0 =á

90 
MOV
 
pc
, 
Ã
 ;  
r0


94 
qadd_32
 ; 
QADD
 
a
, 
b
, 
c


95 ; 
a
 = 
	`ßtuøã32
(
b
+
c
)

96 
MOV
 
m
, #0
x80000000
 ; m = 0x80000000 
max
 -
ve


97 
ADDS
 
a
, 
b
, 
c
 ;á = b+c, 
V
 
ªc‹ds
 
ovîÊow


98 
EORVS
 
a
, 
m
,á, 
ASR
#31 ; i‡(
V
Ëa=0x80000000^
	$sign
(
a
)

99 
MOV
 
r0
, 
a
 ;Ñ0 =á

100 
MOV
 
pc
, 
Ã
 ;  
r0


102 
qsub_32
 ; 
QSUB
 
a
, 
b
, 
c


103 ; 
a
 = 
	`ßtuøã32
(
b
-
c
)

104 
MOV
 
m
, #0
x80000000
 ; m = 0x80000000 
max
 -
ve


105 
SUBS
 
a
, 
b
, 
c
 ;á = b-c, 
V
 
ªc‹ds
 
ovîÊow


106 
EORVS
 
a
, 
m
,á, 
ASR
#31 ; i‡(
V
Ëa=0x80000000^
	$sign
(
a
)

107 
MOV
 
r0
, 
a
 ;Ñ0 =á

108 
MOV
 
pc
, 
Ã
 ;  
r0


112 
qabs_32


113 ; 
a
 = 
	`ßtuøã32
(
	$abs
(
b
))

114 
SUB
 
a
, 
b
, b, 
LSR
 #31 ;á = b - (b<0)

115 
EOR
 
a
,á,á, 
ASR
 #31 ;á =á ^ 
	$sign
(
a
)

116 
MOV
 
r0
, 
a
 ;Ñ0 =á

117 
MOV
 
pc
, 
Ã
 ;  
r0


119 
abß_32


120 ; 
a
 = 
b
+
	$abs
(
c
)

121 
EORS
 
a
, 
c
, c, 
ASR
#32 ;á = c^
	`sign
(cË
	`abs
(c)-(c<0)

122 
ADC
 
a
, 
b
,á ;á = b +á + (
c
<0)

123 
MOV
 
r0
, 
a
 ;Ñ0 =á

124 
MOV
 
pc
, 
Ã
 ;  
r0


127 
END


	@/home/jkr555/arm/guide/ch07_primitives/tran.s

47 
AREA
 
	gch07_5
, 
	gCODE
, 
READONLY


49 
EXPORT
 
ulog2_32


50 
EXPORT
 
uexp2_32


51 
EXPORT
 
sö_32


52 
EXPORT
 
cos_32


54 
n
 
	gRN
 0 ; 
Q0
 
	göput
, 
Q26
 
log2
 
e°im©e


55 
d
 
	gRN
 1 ; 
n‹mÆi£
 
öput
 
Q32


56 
r
 
	gRN
 2

57 
q
 
	gRN
 3

58 
t
 
	gRN
 12

60 ; 
	$ulog2_32
(
n
)

61 
ulog2_32


62 
CLZ
 
r
, 
n


63 
MOV
 
d
, 
n
, 
LSL
#1

64 
MOV
 
d
, d, 
LSL
 
r
 ; 1<=d<2 
©
 
Q32


65 
RSB
 
n
, 
r
, #31 ; 
öãgî
 
∑π
 
of
 
the
 
log


66 
MOV
 
r
, 
d
, 
LSR
#27 ; 
e°im©e
 
a
=1+(r+0.5)/32

67 
ADR
 
t
, 
ulog2_èbÀ


68 
LDR
 
r
, [
t
,Ñ, 
LSL
#3]! ;Ñ=
	$log2
(
a
Ë
©
 
Q26


69 
LDR
 
q
, [
t
, #4] ; q=1/
a
 
©
 
Q32


70 
MOV
 
t
, #0

71 
UMLAL
 
t
, 
r
, 
d
,Ñ ;Ñ=(d/
a
)-1 
©
 
Q32


72 
LDR
 
t
, =0x55555555 ; 
	`round
(2^32/3)

73 
ADD
 
n
, 
q
,Ç, 
LSL
#26 ;Ç+
	$log2
(
a
Ë
©
 
Q26


74 
SMULL
 
t
, 
q
, 
r
,Å ; q =Ñ/3 
©
 
Q32


75 
LDR
 
d
, =0x05c551d9 ; 
	`round
(2^26/
	$ 
(2))

76 
SMULL
 
t
, 
q
, 
r
, q ; q =Ñ^2/3 
©
 
Q32


77 
MOV
 
t
, #0

78 
SUB
 
q
, q, 
r
, 
ASR
#1 ; q = -r/2+r^2/3 
©
 
Q32


79 
SMLAL
 
t
, 
r
, 
q
,Ñ ;Ñ -Ñ^2/2 +Ñ^3/3 
©
 
Q32


80 
MOV
 
t
, #0

81 
SMLAL
 
t
, 
n
, 
d
, 
r
 ;Ç +r/
	$log
(2Ë
©
 
Q26


82 
MOV
 
pc
, 
Ã


84 
ulog2_èbÀ


85 ; 
èbÀ
[2*
i
] =
	`round
(2^32/
a
Ë
whîe
á=1+(i+0.5)/32

86 ; 
èbÀ
[2*
i
+1]=
	`round
(2^26*
	$log2
(
a
)Ë
™d
 0<=
i
<32

87 
DCD
 0xfc0fc0fc, 0x0016e797, 0xf4898d60, 0x0043ace2

88 
DCD
 0xed7303b6, 0x006f2109, 0xe6c2b448, 0x0099574f

89 
DCD
 0xe070381c, 0x00c2615f, 0xda740da7, 0x00ea4f72

90 
DCD
 0xd4c77b03, 0x0111307e, 0xcf6474a9, 0x0137124d

91 
DCD
 0xca4587e7, 0x015c01a4, 0xc565c87b, 0x01800a56

92 
DCD
 0xc0c0c0c1, 0x01a33761, 0xbc52640c, 0x01c592fb

93 
DCD
 0xb81702e0, 0x01e726aa, 0xb40b40b4, 0x0207fb51

94 
DCD
 0xb02c0b03, 0x0228193f, 0xac769184, 0x0247883b

95 
DCD
 0xa8e83f57, 0x02664f8d, 0xa57eb503, 0x02847610

96 
DCD
 0xa237c32b, 0x02a20231, 0x9f1165e7, 0x02bef9ff

97 
DCD
 0x9c09c09c, 0x02db632d, 0x991f1a51, 0x02f7431f

98 
DCD
 0x964fda6c, 0x03129ee9, 0x939a85c4, 0x032d7b5a

99 
DCD
 0x90fdbc09, 0x0347dcfe, 0x8e78356d, 0x0361c825

100 
DCD
 0x8c08c08c, 0x037b40e4, 0x89ae408a, 0x03944b1c

101 
DCD
 0x8767ab5f, 0x03acea7c, 0x85340853, 0x03c52286

102 
DCD
 0x83126e98, 0x03dcf68e, 0x81020408, 0x03f469c2

104 
n
 
RN
 0 ; 
öput
, 
öãgî
 
∑π


105 
d
 
RN
 1 ; 
‰a˘i⁄Æ
 
∑π


106 
r
 
RN
 2

107 
q
 
RN
 3

108 
t
 
RN
 12

110 ; 
	$uexp2_32
(
n
)

111 
uexp2_32


112 
MOV
 
d
, 
n
, 
LSL
#6 ; d = 
‰a˘i⁄Æ
 
∑π
 
©
 
Q32


113 
MOV
 
q
, 
d
, 
LSR
#27 ; 
e°im©e
 
a
=(q+0.5)/32

114 
LDR
 
r
, =0xb17217f8 ; 
	`round
(2^32*
	$log
(2))

115 
BIC
 
d
, d, 
q
, 
LSL
#27 ; d = d - (q/32Ë
©
 
Q32


116 
UMULL
 
t
, 
d
, 
r
, d ; d = d*
	$log
(2Ë
©
 
Q32


117 
LDR
 
t
, =0x55555555 ; 
	`round
(2^32/3)

118 
SUB
 
d
, d, 
r
, 
LSR
#6 ; d = d - 
	`log
(2)/64 
©
 
Q32


119 
SMULL
 
t
, 
r
, 
d
,Å ;Ñ = d/3 
©
 
Q32


120 
MOVS
 
n
,Ç, 
ASR
#26 ;Ç = 
öãgî
 
∑π
 
of
 
exp⁄ít


121 
SMULL
 
t
, 
r
, 
d
,Ñ ;Ñ = d^2/3 
©
 
Q32


122 
BMI
 
√g©ive
 ; 
ˇtch
Çeg©ivê
exp⁄ít


123 
ADD
 
r
,Ñ, 
d
 ;Ñ = d+d^2/3

124 
SMULL
 
t
, 
r
, 
d
,Ñ ;Ñ = d^2+d^3/3

125 
ADR
 
t
, 
uexp2_èbÀ


126 
LDR
 
q
, [
t
, q, 
LSL
#2] ; q = 
	$exp2
(
a
Ë
©
 
Q31


127 
ADDS
 
r
, 
d
,Ñ, 
ASR
#1 ;Ñ = d+d^2/2+d^3/6 
©
 
Q32


128 
UMULL
 
t
, 
r
, 
q
,Ñ ;Ñ = 
	`exp2
(
a
)*∏
©
 
Q31
 r<0

129 
RSB
 
n
,Ç, #31 ; 31-(
öãgî
 
∑π
 
of
 
exp⁄ít
)

130 
ADDPL
 
r
,Ñ, 
q
 ; 
c‹ª˘
 r>0

131 
MOV
 
n
, 
r
, 
LSR
Ç ; 
ªsu…
 
©
 
Q0


132 
MOV
 
pc
, 
Ã


133 
√g©ive


134 
MOV
 
r0
, #0 ; 2^(-
ve
)=0

135 
MOV
 
pc
, 
Ã


137 
uexp2_èbÀ


138 ; 
èbÀ
[
i
]=
	`round
(2^31*
	$exp2
(
a
)Ë
whîe
á=(
i
+0.5)/32

139 
DCD
 0x8164d1f4, 0x843a28c4, 0x871f6197, 0x8a14d575

140 
DCD
 0x8d1adf5b, 0x9031dc43, 0x935a2b2f, 0x96942d37

141 
DCD
 0x99e04593, 0x9d3ed9a7, 0xa0b05110, 0xa43515ae

142 
DCD
 0xa7cd93b5, 0xab7a39b6, 0xaf3b78ad, 0xb311c413

143 
DCD
 0xb6fd91e3, 0xbaff5ab2, 0xbf1799b6, 0xc346ccda

144 
DCD
 0xc78d74c9, 0xcbec14ff, 0xd06333db, 0xd4f35aac

145 
DCD
 0xd99d15c2, 0xde60f482, 0xe33f8973, 0xe8396a50

146 
DCD
 0xed4f301f, 0xf281773c, 0xf7d0df73, 0xfd3e0c0d

148 
n
 
RN
 0 ; 
the
 
öput
 
™gÀ
 
ö
 
ªvﬁuti⁄s
 
©
 
Q32
, 
ªsu…
 
Q30


149 
s
 
RN
 1 ; 
the
 
ouçut
 
sign


150 
r
 
RN
 2

151 
q
 
RN
 3

152 
t
 
RN
 12

154 
cos_32
 ; 
	$cos_32
(
n
)

155 
EOR
 
s
, 
n
,Ç, 
LSL
#1 ; 
cos
 
is
 -
ve
 
ö
 
quadø¡s
 1,2

156 
MOVS
 
n
,Ç, 
LSL
#1 ; 
™gÀ
 
ö
 
ªvﬁuti⁄s
 
©
 
Q33


157 
RSBMI
 
n
,Ç, #0 ; 
ö
 
ønge
 0-1/4 
of
 
a
 
ªvﬁuti⁄


158 
CMP
 
n
, #1<<30 ; 
™gÀ
 < 1/8 
of
 
a
 
ªvﬁuti⁄


159 
BCC
 
cos_c‹e
 ; 
èke
 
cosöe


160 
SUBEQ
 
n
,Ç, #1 ; 
Ÿhîwi£
 
èke
 
söe
 
of


161 
RSBHI
 
n
,Ç, #1<<31 ; (1/4 
ªvﬁuti⁄
)-(
™gÀ
)

162 
sö_c‹e
 ; 
èke
 
söe
 
of
 
Q33
 
™gÀ
 
n


163 
MOV
 
q
, 
n
, 
LSR
#25 ; 
≠¥oxim©i⁄
 
a
=(q+0.5)/32

164 
SUB
 
n
,Ç, 
q
, 
LSL
#25 ;Ç =Ç-(q/32Ë
©
 
Q33


165 
SUB
 
n
,Ç, #1<<24 ;Ç =Ç-(1/64Ë
©
 
Q33


166 
LDR
 
t
, =0x6487ed51 ; 
	`round
(2*
PI
*2^28)

167 
MOV
 
r
, 
n
, 
LSL
#3 ;Ñ =Ç 
©
 
Q36


168 
SMULL
 
t
, 
n
, 
r
,Å ;Ç = (
x
-
a
)*
PI
/2^31 
©
 
Q32


169 
ADR
 
t
, 
cossö_èb


170 
LDR
 
q
, [
t
, q, 
LSL
#3]! ; 
	$c
(
a
Ë
©
 
Q30


171 
LDR
 
t
, [t, #4] ; 
	$s
(
a
Ë
©
 
Q30


172 
EOR
 
q
, q, 
s
, 
ASR
#31 ; 
c‹ª˘
 
	$c
(
a
Ë
sign


173 
EOR
 
s
, 
t
, s, 
ASR
#31 ; 
c‹ª˘
 
	$s
(
a
Ë
sign


174 
SMULL
 
t
, 
r
, 
n
,Ç ;Ç^2 
©
 
Q32


175 
SMULL
 
t
, 
q
, 
n
, q ;Ç*
	$c
(
a
Ë
©
 
Q30


176 
SMULL
 
t
, 
n
, 
r
, 
s
 ;Ç^2*
	$s
(
a
Ë
©
 
Q30


177 
LDR
 
t
, =0xd5555556 ; 
	`round
(-2^32/6)

178 
SUB
 
n
, 
s
,Ç, 
ASR
#1 ;Ç = 
	`s
(
a
)*(1-n^2/2Ë
©
 
Q30


179 
SMULL
 
t
, 
s
, 
r
,Å ; s=-
n
^2/6 
©
 
Q32


180 
ADD
 
n
,Ç, 
q
 ;Ç +
	`c
(
a
)*¿
©
 
Q30


181 
MOV
 
t
, #0

182 
SMLAL
 
t
, 
n
, 
q
, 
s
 ;Ç +-
	`c
(
a
)*n^3/6 
©
 
Q30


183 
MOV
 
pc
, 
Ã
 ;  
n


185 
sö_32
 ; 
	$sö_32
(
n
)

186 
AND
 
s
, 
n
, #1<<31 ; 
sö
 
is
 -
ve
 
ö
 
quadø¡s
 2,3

187 
MOVS
 
n
,Ç, 
LSL
#1 ; 
™gÀ
 
ö
 
ªvﬁu©i⁄s
 
©
 
Q33


188 
RSBMI
 
n
,Ç, #0 ; 
ö
 
ønge
 0-1/4 
of
 
a
 
ªvﬁuti⁄


189 
CMP
 
n
, #1<<30 ; 
™gÀ
 < 1/8 
ªvﬁuti⁄


190 
BCC
 
sö_c‹e
 ; 
èke
 
söe


191 
SUBEQ
 
n
,Ç, #1 ; 
Ÿhîwi£
 
èke
 
cosöe
 
of


192 
RSBHI
 
n
,Ç, #1<<31 ; (1/4 
ªvﬁuti⁄
)-(
™gÀ
)

193 
cos_c‹e
 ; 
èke
 
cosöe
 
of
 
Q33
 
™gÀ
 
n


194 
MOV
 
q
, 
n
, 
LSR
#25 ; 
≠¥oxim©i⁄
 
a
=(q+0.5)/32

195 
SUB
 
n
,Ç, 
q
, 
LSL
#25 ;Ç =Ç-(q/32Ë
©
 
Q33


196 
SUB
 
n
,Ç, #1<<24 ;Ç =Ç-(1/64Ë
©
 
Q33


197 
LDR
 
t
, =0x6487ed51 ; 
	`round
(2*
PI
*2^28)

198 
MOV
 
r
, 
n
, 
LSL
#3 ;Ñ =Ç 
©
 
Q26


199 
SMULL
 
t
, 
n
, 
r
,Å ;Ç = (
x
-
a
)*
PI
/2^31 
©
 
Q32


200 
ADR
 
t
, 
cossö_èb


201 
LDR
 
q
, [
t
, q, 
LSL
#3]! ; 
	$c
(
a
Ë
©
 
Q30


202 
LDR
 
t
, [t, #4] ; 
	$s
(
a
Ë
©
 
Q30


203 
EOR
 
q
, q, 
s
, 
ASR
#31 ; 
c‹ª˘
 
	$c
(
a
Ë
sign


204 
EOR
 
s
, 
t
, s, 
ASR
#31 ; 
c‹ª˘
 
	$s
(
a
Ë
sign


205 
SMULL
 
t
, 
r
, 
n
,Ç ;Ç^2 
©
 
Q32


206 
SMULL
 
t
, 
s
, 
n
, s ;Ç*
	$s
(
a
Ë
©
 
Q30


207 
SMULL
 
t
, 
n
, 
r
, 
q
 ;Ç^2*
	$c
(
a
Ë
©
 
Q30


208 
LDR
 
t
, =0x2ØØØb ; 
	`round
(+2^23/6)

209 
SUB
 
n
, 
q
,Ç, 
ASR
#1 ;Ç = 
	`c
(
a
)*(1-n^2/2Ë
©
 
Q30


210 
SMULL
 
t
, 
q
, 
r
,Å ; 
n
^2/6 
©
 
Q32


211 
SUB
 
n
,Ç, 
s
 ;Ç +-
sö
*¿
©
 
Q30


212 
MOV
 
t
, #0

213 
SMLAL
 
t
, 
n
, 
s
, 
q
 ;Ç +
sö
*n^3/6 
©
 
Q30


214 
MOV
 
pc
, 
Ã
 ;  
n


216 
cossö_èb


217 ; 
èbÀ
[2*
i
] =
	`round
(2^30*
	$cos
(
a
)Ë
whîe
á=(
PI
/4)*(
i
+0.5)/32

218 ; 
èbÀ
[2*
i
+1]=
	`round
(2^30*
	$sö
(
a
)Ë
™d
 0 <
i
 < 32

219 
DCD
 0x3ffec42d, 0x00c90e90, 0x3ff4e5e0, 0x025b0caf

220 
DCD
 0x3fe12acb, 0x03ecadcf, 0x3fc395f9, 0x057db403

221 
DCD
 0x3f9c2bfb, 0x070de172, 0x3f6af2e3, 0x089cf867

222 
DCD
 0x3f2ff24a, 0x0a2abb59, 0x3eeb3347, 0x0bb6ecef

223 
DCD
 0x3e9cc076, 0x0d415013, 0x3e44a5ef, 0x0ec9a7f3

224 
DCD
 0x3de2f148, 0x104fb80e, 0x3d77b192, 0x11d3443f

225 
DCD
 0x3d02f757, 0x135410c3, 0x3c84d496, 0x14d1e242

226 
DCD
 0x3bfd5cc4, 0x164c7ddd, 0x3b6ca4c4, 0x17c3a931

227 
DCD
 0x3ad2c2e8, 0x19372a64, 0x3a2fcee8, 0x1aa6c82b

228 
DCD
 0x3983e1e8, 0x1c1249d8, 0x38cf1669, 0x1d79775c

229 
DCD
 0x3811884d, 0x1edc1953, 0x374b54ce, 0x2039f90f

230 
DCD
 0x367c9a7e, 0x2192e09b, 0x35a5793c, 0x22e69ac8

231 
DCD
 0x34c61236, 0x2434f332, 0x33de87de, 0x257db64c

232 
DCD
 0x32eefdea, 0x26c0b162, 0x31f79948, 0x27fdb2a7

233 
DCD
 0x30f8801f, 0x29348937, 0x2ff1d9c7, 0x2a650525

234 
DCD
 0x2ee3cebe, 0x2b8ef77d, 0x2dce88aa, 0x2cb2324c

236 
END


	@/home/jkr555/arm/guide/ch08_dsp/ch08test.c

48 
	~<°dio.h
>

49 
	~"ch08ã°.h
"

51 
	$maö
()

53 
maxîr
, 
îr‹s
=0;

57 
	`¥ötf
("TestingÉxamples for Chapter 8\n");

60 
maxîr
=1<<13;

61 
	`TEST_DOT
(
dŸ_16by16_¨m7m
, 
q13ö32
, q13ö32, 
q26ö32
, 
maxîr
);

62 
	`TEST_DOT
(
dŸ_16by16_¨m9m
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

63 
	`TEST_DOT
(
dŸ_16by16_SA1
 , 
q13ö32
, q13ö32, 
q26ö32
, 
maxîr
);

64 
	`TEST_DOT
(
dŸ_16by16_¨m9e
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

65 
	`TEST_DOT
(
dŸ_16by16_¨m10
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

66 
	`TEST_DOT
(
dŸ_16by16_xsˇÀ
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

69 
maxîr
=1<<15;

70 
	`TEST_FIR
(
fú_16by16_¨m7m
, 
q13ö32
, q13ö32, 
q26ö32
, 
maxîr
);

71 
	`TEST_FIR
(
fú_16by16_¨m9m
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

72 
	`TEST_FIR
(
fú_16by16_¨m9e
, 
q13ö16
, q13ö16, 
q26ö32
, 
maxîr
);

73 
	`TEST_FIR
(
fú_32by16_¨m9e
, 
q29ö32
, 
q13ö16
, 
q26ö32
, 
maxîr
);

74 
	`TEST_FIR
(
fú_32by32
, 
q29ö32
, q29ö32, 
q58ö64
, 0x7FFFFFFF);

77 
	`TEST_IIR
(
iú_q14_¨m7m
, 
q13ö32
, 
q14ö32
, q13in32, 8);

78 
	`TEST_IIR
(
iú_q14_¨m9m
, 
q13ö16
, 
q14ö16
, q13in16, 8);

79 
	`TEST_IIR
(
iú_q14_¨m9e
, 
q13ö16
, 
q14ö16
, q13in16, 8);

82 
	`TEST_FFT
(
f·_16_¨m9m
, 
q15ö16
, q15in16, 7);

83 
	`TEST_FFT
(
f·_16_¨m9e
, 
q15ö16
, q15in16, 7);

85 i‡(
îr‹s
)

87 
	`¥ötf
("Te° föished wôh %dÉº‹s.\n", 
îr‹s
);

92 
	`¥ötf
("TestÖassed.\n");

95 
	}
}

97 
	$ã°_dŸ
(

98 *
«me
,

99 
‚_dŸ
 *
‚
,

100 
f‹m©
 
ßmp
,

101 
f‹m©
 
c€f
,

102 
f‹m©
 
ªsu…
,

103 
maxîr


106 
öt32
 
out
;

107 c⁄° 
nSamps
=40;

108 *
ßmps
, *
c€fs
;

109 
ªÆ
 *
ªf_ßmps
, *
ªf_c€fs
, 
ªf_out
;

111 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

114 
ªf_ßmps
 = 
	`gí_sig«l
(
nSamps
, 0);

115 
ªf_c€fs
 = 
	`gí_sig«l
(
nSamps
, 1);

118 
ßmps
 = 
	`gí_d©a
(
nSamps
, 
ßmp
, 
ªf_ßmps
);

119 
c€fs
 = 
	`gí_d©a
(
nSamps
, 
c€f
, 
ªf_c€fs
);

122 
	`¥öt_sig«l
("ªf_ßmps", 
ªf_ßmps
, 
nSamps
);

123 
	`¥öt_d©a
("ßmps", 
ßmps
, 
ßmp
, 
nSamps
);

124 
	`¥öt_sig«l
("ªf_c€fs", 
ªf_c€fs
, 
nSamps
);

125 
	`¥öt_d©a
("c€fs", 
c€fs
, 
c€f
, 
nSamps
);

129 
out
 = (*
‚
)(
ßmps
, 
c€fs
, 
nSamps
);

130 
ªf_out
 = 
	`ªf_dŸ
(
ªf_ßmps
, 
ªf_c€fs
, 
nSamps
);

132 
	`‰ì_sig«l
(
ªf_ßmps
);

133 
	`‰ì_sig«l
(
ªf_c€fs
);

134 
	`‰ì_sig«l
(
ßmps
);

135 
	`‰ì_sig«l
(
c€fs
);

137  
	`com∑ª
(&
ªf_out
, &
out
, 
ªsu…
, 1, 
maxîr
);

138 
	}
}

140 
	$ã°_fú
(

141 *
«me
,

142 
‚_fú
 *
‚
,

143 
f‹m©
 
ßmp
,

144 
f‹m©
 
c€f
,

145 
f‹m©
 
ªsu…
,

146 
maxîr


149 c⁄° 
nC€fs
=24;

150 c⁄° 
nOut
 = 36;

151 c⁄° 
nSamps
=
nC€fs
+
nOut
-1;

152 *
ßmps
, *
out
;

153 
sC€fs
 
c€fs
;

154 
ªÆ
 *
ªf_ßmps
, *
ªf_out
;

155 
rC€fs
 
ªf_c€fs
;

156 
îr
;

158 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

161 
ªf_ßmps
 = 
	`gí_sig«l
(
nSamps
, 0);

162 
ªf_c€fs
.
c
 = 
	`gí_sig«l
(
nC€fs
, 1);

163 
ªf_c€fs
.
M
 = 
nC€fs
;

164 
ªf_out
 = 
	`gí_sig«l
(
nOut
, 2);

167 
ßmps
 = 
	`gí_d©a
(
nSamps
, 
ßmp
, 
ªf_ßmps
);

168 
c€fs
.
c
 = 
	`gí_d©a
(
nC€fs
, 
c€f
, 
ªf_c€fs
.c);

169 
c€fs
.
M
 = 
nC€fs
;

170 
out
 = 
	`gí_d©a
(
nOut
, 
ªsu…
, 
ªf_out
);

173 
	`¥öt_sig«l
("ªf_ßmps", 
ªf_ßmps
, 
nSamps
);

174 
	`¥öt_d©a
("ßmps", 
ßmps
, 
ßmp
, 
nSamps
);

175 
	`¥öt_sig«l
("ªf_c€fs", 
ªf_c€fs
.
c
, 
nC€fs
);

176 
	`¥öt_d©a
("c€fs", 
c€fs
.
c
, 
c€f
, 
nC€fs
);

180 (*
‚
)(
out
, 
ßmps
, &
c€fs
, 
nOut
);

181 
	`ªf_fú
(
ªf_out
, 
ªf_ßmps
, &
ªf_c€fs
, 
nOut
);

183 
	`‰ì_sig«l
(
ªf_ßmps
);

184 
	`‰ì_sig«l
(
ªf_c€fs
.
c
);

185 
	`‰ì_sig«l
(
ßmps
);

186 
	`‰ì_sig«l
(
c€fs
.
c
);

188 
îr
 = 
	`com∑ª
(
ªf_out
, 
out
, 
ªsu…
, 
nOut
, 
maxîr
);

189 
	`‰ì_sig«l
(
ªf_out
);

190 
	`‰ì_sig«l
(
out
);

192  
îr
;

193 
	}
}

195 
	$ã°_iú
(

196 *
«me
,

197 
‚_iú
 *
‚
,

198 
f‹m©
 
ßmp
,

199 
f‹m©
 
c€f
,

200 
f‹m©
 
ªsu…
,

201 
maxîr


204 c⁄° 
nBiquads
=4;

205 c⁄° 
nSamps
=36;

206 *
ßmps
, *
out
;

207 
sBiquads
 
biquads
;

208 
ªÆ
 *
ªf_ßmps
, *
ªf_out
;

209 
rBiquads
 
ªf_biquads
;

210 
i
, 
îr
;

212 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

215 
ªf_ßmps
 = 
	`gí_sig«l
(
nSamps
, 3);

216 
ªf_biquads
.
b
 = 
	`gí_sig«l
(
nBiquads
*6, 1);

217 
ªf_biquads
.
M
 = 
nBiquads
;

218 
ªf_out
 = 
	`gí_sig«l
(
nSamps
, 2);

221 
i
=0; i<
nBiquads
; i++)

223 
ªf_biquads
.
b
[6*
i
+4] = 0.0;

224 
ªf_biquads
.
b
[6*
i
+5] = 0.0;

228 
ßmps
 = 
	`gí_d©a
(
nSamps
, 
ßmp
, 
ªf_ßmps
);

229 
biquads
.
b
 = 
	`gí_d©a
(
nBiquads
*6, 
c€f
, 
ªf_biquads
.b);

230 
biquads
.
M
 = 
nBiquads
;

231 
out
 = 
	`gí_d©a
(
nSamps
, 
ªsu…
, 
ªf_out
);

234 
	`¥öt_sig«l
("ªf_ßmps", 
ªf_ßmps
, 
nSamps
);

235 
	`¥öt_d©a
("ßmps", 
ßmps
, 
ßmp
, 
nSamps
);

236 
	`¥öt_sig«l
("ªf_c€fs", 
ªf_c€fs
.
c
, 
nC€fs
);

237 
	`¥öt_d©a
("c€fs", 
c€fs
.
c
, 
c€f
, 
nC€fs
);

241 (*
‚
)(
out
, 
ßmps
, &
biquads
, 
nSamps
);

242 
	`ªf_iú
(
ªf_out
, 
ªf_ßmps
, &
ªf_biquads
, 
nSamps
);

244 
	`‰ì_sig«l
(
ªf_ßmps
);

245 
	`‰ì_sig«l
(
ªf_biquads
.
b
);

246 
	`‰ì_sig«l
(
ßmps
);

247 
	`‰ì_sig«l
(
biquads
.
b
);

249 
îr
 = 
	`com∑ª
(
ªf_out
, 
out
, 
ªsu…
, 
nSamps
, 
maxîr
);

250 
	`‰ì_sig«l
(
ªf_out
);

251 
	`‰ì_sig«l
(
out
);

253  
îr
;

254 
	}
}

256 
	$ã°_f·
(

257 *
«me
,

258 
‚_f·
 *
‚
,

259 
f‹m©
 
ßmp
,

260 
f‹m©
 
ªsu…
,

261 
maxîr


264 c⁄° 
nSamps
=256;

265 *
ßmps
, *
out
;

266 
ªÆ
 *
ªf_ßmps
, *
ªf_out
;

267 
îr
;

269 
	`¥ötf
("Te°ög fun˘i⁄: %s\n", 
«me
);

272 
ªf_ßmps
 = 
	`gí_sig«l
(2*
nSamps
, 3);

273 
ªf_out
 = 
	`gí_sig«l
(2*
nSamps
, 2);

276 
ßmps
 = 
	`gí_d©a
(2*
nSamps
, 
ßmp
, 
ªf_ßmps
);

277 
out
 = 
	`gí_d©a
(2*
nSamps
, 
ªsu…
, 
ªf_out
);

280 (*
‚
)(
out
, 
ßmps
, 
nSamps
);

281 
	`ªf_f·
((
com∂ex
*)
ªf_out
, (com∂ex*)
ªf_ßmps
, 
nSamps
);

284 { 
i
, 
j
=4; 
ªÆ
 
d
=0;

285 
i
=0; i<
j
; i++Ë
d
+=
ªf_ßmps
[2*i*(
nSamps
/j)];

286 
	`¥ötf
("avîagê%lf\n", 
d
/(
ªÆ
)
j
);

288 
	`¥öt_sig«l
("ªf_ßmps", 
ªf_ßmps
, 2*
nSamps
);

289 
	`¥öt_d©a
("ßmps", 
ßmps
, 
ßmp
, 2*
nSamps
);

290 
	`¥öt_sig«l
("ªf_out", 
ªf_out
, 2*
nSamps
);

291 
	`¥öt_d©a
("out", 
out
, 
ªsu…
, 2*
nSamps
);

294 
	`‰ì_sig«l
(
ªf_ßmps
);

295 
	`‰ì_sig«l
(
ßmps
);

297 
îr
 = 
	`com∑ª
(
ªf_out
, 
out
, 
ªsu…
, 2*
nSamps
, 
maxîr
);

298 
	`‰ì_sig«l
(
ªf_out
);

299 
	`‰ì_sig«l
(
out
);

301  
îr
;

302 
	}
}

	@/home/jkr555/arm/guide/ch08_dsp/ch08test.h

48 #i‚de‡
CH08TEST_H


49 
	#CH08TEST_H


	)

52 
	#VERBOSE
 0

	)

55 sig√d 
	töt8
;

56 
	töt16
;

57 
	töt32
;

58 
	tuöt32
;

59 sig√d 
	tsöt32
;

60 
	töt64
;

61 
	tuöt64
;

62 sig√d 
	tsöt64
;

63 
	tªÆ
;

64 °ru˘ { 
ªÆ
 
	mª
,
	mim
; } 
	tcom∂ex
;

72 
	mq13ö32
 = (13<<16)|32,

73 
	mq13ö16
 = (13<<16)|16,

74 
	mq14ö32
 = (14<<16)|32,

75 
	mq14ö16
 = (14<<16)|16,

76 
	mq15ö32
 = (15<<16)|32,

77 
	mq15ö16
 = (15<<16)|16,

78 
	mq26ö32
 = (26<<16)|32,

79 
	mq29ö32
 = (29<<16)|32,

80 
	mq58ö64
 = (58<<16)|64,

81 
	mãnd


82 } 
	tf‹m©
;

84 
	#QSHIFT
(
ty≥
Ë—y≥>>16)

	)

85 
	#TSIZE
(
ty≥
Ë—y≥ & 0xFF)

	)

88 
öt32
 
	t‚_dŸ
(*
	td©a
, *
	tc€fs
, 
	tN
);

89 °ru˘ { *
	mc
; 
	mM
; } 
	tsC€fs
;

90 °ru˘ { 
ªÆ
 *
	mc
; 
	mM
; } 
	trC€fs
;

91 °ru˘ { *
	mb
; 
	mM
; } 
	tsBiquads
;

92 °ru˘ { 
ªÆ
 *
	mb
; 
	mM
; } 
	trBiquads
;

93 
	t‚_fú
(*
	ta
, *
	tx
, 
	tsC€fs
 *
	tc
, 
	tN
);

94 
	t‚_iú
(*
	ty
, *
	tx
, 
	tsBiquads
 *
	tb
, 
	tN
);

95 
	t‚_f·
(*
	ty
, *
	tx
, 
	tN
);

98 
‚_dŸ
 
	gdŸ_16by16_¨m7m
;

99 
‚_dŸ
 
	gdŸ_16by16_¨m9m
;

100 
‚_dŸ
 
	gdŸ_16by16_SA1
;

101 
‚_dŸ
 
	gdŸ_16by16_¨m9e
;

102 
‚_dŸ
 
	gdŸ_16by16_¨m10
;

103 
‚_dŸ
 
	gdŸ_16by16_xsˇÀ
;

104 
ªÆ
 
ªf_dŸ
‘ó»*
ßmps
,Ñó»*
c€fs
, 
nSamps
);

107 
‚_fú
 
	gfú_16by16_¨m7m
;

108 
‚_fú
 
	gfú_16by16_¨m9m
;

109 
‚_fú
 
	gfú_16by16_¨m9e
;

110 
‚_fú
 
	gfú_32by16_¨m9e
;

111 
‚_fú
 
	gfú_32by32
;

112 
ªf_fú
(
ªÆ
 *
a
,Ñó»*
x
, 
rC€fs
 *
c
, 
N
);

115 
‚_iú
 
	giú_q14_¨m7m
;

116 
‚_iú
 
	giú_q14_¨m9m
;

117 
‚_iú
 
	giú_q14_¨m9e
;

118 
ªf_iú
(
ªÆ
 *
y
,Ñó»*
x
, 
rBiquads
 *
b
, 
N
);

121 
‚_f·
 
	gf·_16_¨m9m
;

122 
‚_f·
 
	gf·_16_¨m9e
;

123 
ªf_bô_ªvî£
(
com∂ex
 *
y
, com∂ex *
x
, 
N
);

124 
ªf_powîs_èbÀ
(
com∂ex
 *
èbÀ
, com∂ex 
w
, 
N
);

125 
ªf_f·_°age
(
com∂ex
 *
y
, com∂ex *
èbÀ
, 
R
, 
S
);

126 
ªf_f·
(
com∂ex
 *
y
, com∂ex *
x
, 
N
);

129 *
my_mÆloc
(
size
);

130 *
gí_d©a
(
size
, 
f‹m©
 
ty≥
, 
ªÆ
 *
ªf
);

131 
ªÆ
 *
gí_sig«l
(
size
, 
code
);

132 
‰ì_sig«l
(*
d©a
);

133 
com∑ª
(
ªÆ
 *
ªf
, *
d©a
, 
f‹m©
 
ty≥
, 
size
, 
maxîr
);

134 
¥öt_sig«l
(*
«me
, 
ªÆ
 *
sig«l
, 
size
);

135 
¥öt_d©a
(*
«me
, *
d©a
, 
f‹m©
 
ty≥
, 
size
);

136 
gí_f·_èbÀs
(
N
, 
¨ch
);

139 
ã°_dŸ
(

140 *
«me
,

141 
‚_dŸ
 *
‚
,

142 
f‹m©
 
ßmp
,

143 
f‹m©
 
c€f
,

144 
f‹m©
 
ªsu…
,

145 
maxîr


148 
	#TEST_DOT
(
«me
, 
ßmp
, 
c€f
, 
ªsu…
, 
maxîr
Ë
îr‹s
 +
	`ã°_dŸ
(#«me, &«me, samp, c€f,Ñesu…, maxîr);

	)

151 
ã°_fú
(

152 *
«me
,

153 
‚_fú
 *
‚
,

154 
f‹m©
 
ßmp
,

155 
f‹m©
 
c€f
,

156 
f‹m©
 
ªsu…
,

157 
maxîr


160 
	#TEST_FIR
(
«me
, 
ßmp
, 
c€f
, 
ªsu…
, 
maxîr
Ë
îr‹s
 +
	`ã°_fú
(#«me, &«me, samp, c€f,Ñesu…, maxîr);

	)

163 
ã°_iú
(

164 *
«me
,

165 
‚_iú
 *
‚
,

166 
f‹m©
 
ßmp
,

167 
f‹m©
 
c€f
,

168 
f‹m©
 
ªsu…
,

169 
maxîr


172 
	#TEST_IIR
(
«me
, 
ßmp
, 
c€f
, 
ªsu…
, 
maxîr
Ë
îr‹s
 +
	`ã°_iú
(#«me, &«me, samp, c€f,Ñesu…, maxîr);

	)

175 
ã°_f·
(

176 *
«me
,

177 
‚_f·
 *
‚
,

178 
f‹m©
 
ßmp
,

179 
f‹m©
 
ªsu…
,

180 
maxîr


183 
	#TEST_FFT
(
«me
, 
ßmp
, 
ªsu…
, 
maxîr
Ë
îr‹s
 +
	`ã°_f·
(#«me, &«me, samp,Ñesu…, maxîr);

	)

	@/home/jkr555/arm/guide/ch08_dsp/dot.s

47 
AREA
 
	gch08_2
, 
	gCODE
, 
READONLY


49 
EXPORT
 
dŸ_16by16_¨m7m


50 
EXPORT
 
dŸ_16by16_¨m9m


51 
EXPORT
 
dŸ_16by16_SA1


52 
EXPORT
 
dŸ_16by16_¨m9e


53 
EXPORT
 
dŸ_16by16_¨m10


54 
EXPORT
 
	gdŸ_16by16_xsˇÀ


58 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[]

59 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[]

60 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 5)

61 
acc
 
RN
 3 ; 
accumuœt‹


62 
x_0
 
RN
 4 ; 
ñemíts
 
‰om
 
¨øy
 
x
[]

63 
x_1
 
RN
 5

64 
x_2
 
RN
 6

65 
x_3
 
RN
 7

66 
x_4
 
RN
 8

67 
c_0
 
RN
 9 ; 
ñemíts
 
‰om
 
¨øy
 
c
[]

68 
c_1
 
RN
 10

69 
c_2
 
RN
 11

70 
c_3
 
RN
 12

71 
c_4
 
RN
 14

73 ; 
	$dŸ_16by16_¨m7m
(*
x
, *
c
, 
N
)

74 
dŸ_16by16_¨m7m


75 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

76 
MOV
 
	gacc
, #0

77 
	glo›_7m
 ; 
	gaccumuœã
 5 
¥odu˘s


78 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
, 
	gx_2
, 
	gx_3
, 
	gx_4
}

79 
LDMIA
 
	gc
!, {
	gc_0
, 
	gc_1
, 
	gc_2
, 
	gc_3
, 
	gc_4
}

80 
MLA
 
	gacc
, 
	gx_0
, 
	gc_0
, 
acc


81 
MLA
 
	gacc
, 
	gx_1
, 
	gc_1
, 
acc


82 
MLA
 
	gacc
, 
	gx_2
, 
	gc_2
, 
acc


83 
MLA
 
	gacc
, 
	gx_3
, 
	gc_3
, 
acc


84 
MLA
 
	gacc
, 
	gx_4
, 
	gc_4
, 
acc


85 
SUBS
 
	gN
, N, #5

86 
BGT
 
lo›_7m


87 
MOV
 
	gr0
, 
acc


88 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

92 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[]

93 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[]

94 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 4)

95 
acc
 
RN
 3 ; 
accumuœt‹


96 
x_0
 
RN
 4 ; 
ñemíts
 
‰om
 
¨øy
 
x
[]

97 
x_1
 
RN
 5

98 
c_0
 
RN
 9 ; 
ñemíts
 
‰om
 
¨øy
 
c
[]

99 
c_1
 
RN
 10

101 ; 
	$dŸ_16by16_¨m9m
(*
x
, *
c
, 
N
)

102 
dŸ_16by16_¨m9m


103 
STMFD
 
•
!, {
r4
-
r5
, 
r9
-
r10
, 
Ã
}

104 
MOV
 
	gacc
, #0

105 
LDRSH
 
	gx_0
, [
x
], #2

106 
LDRSH
 
	gc_0
, [
c
], #2

107 
	glo›_9m
 ; 
	gaccumuœã
 4 
¥odu˘s


108 
SUBS
 
	gN
, N, #4

109 
LDRSH
 
	gx_1
, [
x
], #2

110 
LDRSH
 
	gc_1
, [
c
], #2

111 
MLA
 
	gacc
, 
	gx_0
, 
	gc_0
, 
acc


112 
LDRSH
 
	gx_0
, [
x
], #2

113 
LDRSH
 
	gc_0
, [
c
], #2

114 
MLA
 
	gacc
, 
	gx_1
, 
	gc_1
, 
acc


115 
LDRSH
 
	gx_1
, [
x
], #2

116 
LDRSH
 
	gc_1
, [
c
], #2

117 
MLA
 
	gacc
, 
	gx_0
, 
	gc_0
, 
acc


118 
LDRGTSH
 
	gx_0
, [
x
], #2

119 
LDRGTSH
 
	gc_0
, [
c
], #2

120 
MLA
 
	gacc
, 
	gx_1
, 
	gc_1
, 
acc


121 
BGT
 
lo›_9m


122 
MOV
 
	gr0
, 
acc


123 
LDMFD
 
	g•
!, {
	gr4
-
	gr5
, 
	gr9
-
	gr10
, 
	gpc
}

127 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[]

128 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[]

129 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 4)

130 
acc
 
RN
 3 ; 
accumuœt‹


131 
x_0
 
RN
 4 ; 
ñemíts
 
‰om
 
¨øy
 
x
[]

132 
x_1
 
RN
 5

133 
c_0
 
RN
 9 ; 
ñemíts
 
‰om
 
¨øy
 
c
[]

134 
c_1
 
RN
 10

136 ; 
	$dŸ_16by16_SA1
(*
x
, *
c
, 
N
)

137 
dŸ_16by16_SA1


138 
STMFD
 
•
!, {
r4
-
r5
, 
r9
-
r10
, 
Ã
}

139 
MOV
 
	gacc
, #0

140 
LDR
 
	gx_0
, [
x
], #4

141 
LDR
 
	gc_0
, [
c
], #4

142 
	glo›_ß
 ; 
	gaccumuœã
 4 
¥odu˘s


143 
SUBS
 
	gN
, N, #4

144 
LDR
 
	gx_1
, [
x
], #4

145 
LDR
 
	gc_1
, [
c
], #4

146 
MLA
 
	gacc
, 
	gx_0
, 
	gc_0
, 
acc


147 
LDR
 
	gx_0
, [
x
], #4

148 
LDR
 
	gc_0
, [
c
], #4

149 
MLA
 
	gacc
, 
	gx_1
, 
	gc_1
, 
acc


150 
LDR
 
	gx_1
, [
x
], #4

151 
LDR
 
	gc_1
, [
c
], #4

152 
MLA
 
	gacc
, 
	gx_0
, 
	gc_0
, 
acc


153 
LDRGT
 
	gx_0
, [
x
], #4

154 
LDRGT
 
	gc_0
, [
c
], #4

155 
MLA
 
	gacc
, 
	gx_1
, 
	gc_1
, 
acc


156 
BGT
 
lo›_ß


157 
MOV
 
	gr0
, 
acc


158 
LDMFD
 
	g•
!, {
	gr4
-
	gr5
, 
	gr9
-
	gr10
, 
	gpc
}

162 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[]

163 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[]

164 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 8)

165 
acc
 
RN
 3 ; 
accumuœt‹


166 
x_10
 
RN
 4 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
x
[]

167 
x_32
 
RN
 5

168 
c_10
 
RN
 8 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
c
[]

169 
c_32
 
RN
 9

171 ; 
	$dŸ_16by16_¨m9e
(*
x
, *
c
, 
N
)

172 
dŸ_16by16_¨m9e


173 
STMFD
 
•
!, {
r4
-
r5
, 
r8
-
r9
, 
Ã
}

174 
MOV
 
	gacc
, #0

175 
LDR
 
	gx_10
, [
x
], #4

176 
LDR
 
	gc_10
, [
c
], #4

177 
	glo›_9e
 ; 
	gaccumuœã
 8 
¥odu˘s


178 
SUBS
 
	gN
, N, #8

179 
LDR
 
	gx_32
, [
x
], #4

180 
SMLABB
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


181 
LDR
 
	gc_32
, [
c
], #4

182 
SMLATT
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


183 
LDR
 
	gx_10
, [
x
], #4

184 
SMLABB
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


185 
LDR
 
	gc_10
, [
c
], #4

186 
SMLATT
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


187 
LDR
 
	gx_32
, [
x
], #4

188 
SMLABB
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


189 
LDR
 
	gc_32
, [
c
], #4

190 
SMLATT
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


191 
LDRGT
 
	gx_10
, [
x
], #4

192 
SMLABB
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


193 
LDRGT
 
	gc_10
, [
c
], #4

194 
SMLATT
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


195 
BGT
 
lo›_9e


196 
MOV
 
	gr0
, 
acc


197 
LDMFD
 
	g•
!, {
	gr4
-
	gr5
, 
	gr8
-
	gr9
, 
	gpc
}

201 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[]

202 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[]

203 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 10)

204 
acc
 
RN
 3 ; 
accumuœt‹


205 
x_10
 
RN
 4 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
x
[]

206 
x_32
 
RN
 5

207 
x_54
 
RN
 6

208 
x_76
 
RN
 7

209 
x_98
 
RN
 14

210 
c_10
 
RN
 8 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
c
[]

211 
c_32
 
RN
 9

212 
c_54
 
RN
 10

213 
c_76
 
RN
 11

214 
c_98
 
RN
 12

216 ; 
	$dŸ_16by16_¨m10
(*
x
, *
c
, 
n
)

217 
dŸ_16by16_¨m10


218 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

219 
LDMIA
 
	gx
!, {
	gx_10
, 
	gx_32
}

220 
MOV
 
	gacc
, #0

221 
LDMIA
 
	gc
!, {
	gc_10
, 
	gc_32
}

222 
	glo›_10
 ; 
	gaccumuœã
 10 
¥odu˘s


223 
SUBS
 
	gN
, N, #10

224 
LDMIA
 
	gx
!, {
	gx_54
, 
	gx_76
, 
	gx_98
}

225 
SMLABB
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


226 
SMLATT
 
	gacc
, 
	gx_10
, 
	gc_10
, 
acc


227 
LDMIA
 
	gc
!, {
	gc_54
, 
	gc_76
, 
	gc_98
}

228 
SMLABB
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


229 
SMLATT
 
	gacc
, 
	gx_32
, 
	gc_32
, 
acc


230 
LDMGTIA
 
	gx
!, {
	gx_10
, 
	gx_32
}

231 
SMLABB
 
	gacc
, 
	gx_54
, 
	gc_54
, 
acc


232 
SMLATT
 
	gacc
, 
	gx_54
, 
	gc_54
, 
acc


233 
SMLABB
 
	gacc
, 
	gx_76
, 
	gc_76
, 
acc


234 
LDMGTIA
 
	gc
!, {
	gc_10
, 
	gc_32
}

235 
SMLATT
 
	gacc
, 
	gx_76
, 
	gc_76
, 
acc


236 
SMLABB
 
	gacc
, 
	gx_98
, 
	gc_98
, 
acc


237 
SMLATT
 
	gacc
, 
	gx_98
, 
	gc_98
, 
acc


238 
BGT
 
lo›_10


239 
MOV
 
	gr0
, 
acc


240 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

244 
x
 
	gRN
 0 ; 
öput
 
¨øy
 
	gx
[] (64-
bô
 
	gÆig√d
)

245 
c
 
	gRN
 1 ; 
öput
 
¨øy
 
	gc
[] (64-
bô
 
	gÆig√d
)

246 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
mu…ùÀ
 
of
 8)

247 
acc0
 
RN
 3 ; 
accumuœt‹s


248 
acc1
 
RN
 14

249 
x_10
 
RN
 4 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
x
[]

250 
x_32
 
RN
 5

251 
x_54
 
RN
 6

252 
x_76
 
RN
 7

253 
c_10
 
RN
 8 ; 
∑cked
 
ñemíts
 
‰om
 
¨øy
 
c
[]

254 
c_32
 
RN
 9

255 
c_54
 
RN
 10

256 
c_76
 
RN
 11

258 
dŸ_16by16_xsˇÀ


259 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

260 
LDRD
 
	gx_10
, [
x
], #8 ; 
	g¥e
-
lﬂd
 x_10, 
x_32


261 
LDRD
 
	gc_10
, [
c
], #8 ; 
	g¥e
-
lﬂd
 c_10, 
c_32


262 
MOV
 
	gacc0
, #0

263 
MOV
 
	gacc1
, #0

264 
	glo›_xsˇÀ


265 ; 
	gaccumuœã
 8 
¥odu˘s


266 
SUBS
 
	gN
, N, #8

267 
LDRD
 
	gx_54
, [
x
], #8 ; 
lﬂd
 x_54, 
x_76


268 
SMLABB
 
	gacc0
, 
	gx_10
, 
	gc_10
, 
acc0


269 
SMLATT
 
	gacc1
, 
	gx_10
, 
	gc_10
, 
acc1


270 
LDRD
 
	gc_54
, [
c
], #8 ; 
lﬂd
 c_54, 
c_76


271 
SMLABB
 
	gacc0
, 
	gx_32
, 
	gc_32
, 
acc0


272 
SMLATT
 
	gacc1
, 
	gx_32
, 
	gc_32
, 
acc1


273 
LDRGTD
 
	gx_10
, [
x
], #8 ; 
lﬂd
 x_10, 
x_32


274 
SMLABB
 
	gacc0
, 
	gx_54
, 
	gc_54
, 
acc0


275 
SMLATT
 
	gacc1
, 
	gx_54
, 
	gc_54
, 
acc1


276 
LDRGTD
 
	gc_10
, [
c
], #8 ; 
lﬂd
 c_10, 
c_32


277 
SMLABB
 
	gacc0
, 
	gx_76
, 
	gc_76
, 
acc0


278 
SMLATT
 
	gacc1
, 
	gx_76
, 
	gc_76
, 
acc1


279 
BGT
 
lo›_xsˇÀ


280 
ADD
 
	gr0
, 
	gacc0
, 
acc1


281 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

283 
	gEND


	@/home/jkr555/arm/guide/ch08_dsp/fft.s

47 
AREA
 
	gch08_5
, 
	gCODE
, 
READONLY


49 
EXPORT
 
f·_16_¨m9m


50 
EXPORT
 
	gf·_16_¨m9e


54 ; 
com∂ex
 
	glﬂd
, 
	gx
=[
a
], 
	ga
+=
off£t


55 
MACRO


56 
C_LDR
 
$x
, 
	g$a
, 
$off£t


57 
LDRSH
 
	g$x
.
	g_i
, [
$a
, #2]

58 
LDRSH
 
	g$x
.
	g_r
, [
$a
], 
$off£t


59 
	gMEND


61 ; 
com∂ex
 
	g°‹e
, [
a
]=
x
, 
	ga
+=
off£t


62 
MACRO


63 
C_STR
 
$x
, 
	g$a
, 
$off£t


64 
STRH
 
	g$x
.
	g_i
, [
$a
, #2]

65 
STRH
 
	g$x
.
	g_r
, [
$a
], 
$off£t


66 
	gMEND


68 ; 
Four
 
poöt
 
com∂ex
 
Fa°
 
Fourõr
 
	gTønsf‹m


70 ; (
	gx0
,
	gx1
,
	gx2
,
	gy3
)=
DFT4
(
x0
,
x2
>>
s
,
x1
>>s,
x3
>>s)/4

72 ; 
	gx0
 = (
x0
 + (
x2
>>
s
Ë+ (
x1
>>sË+ (
x3
>>s))/4

73 ; 
	gx1
 = (
x0
 - 
i
*(
x2
>>
s
Ë- (
x1
>>sË+ i*(
x3
>>s))/4

74 ; 
	gx2
 = (
x0
 - (
x2
>>
s
Ë+ (
x1
>>sË- (
x3
>>s))/4

75 ; 
	gy3
 = (
x0
 + 
i
*(
x2
>>
s
Ë- (
x1
>>sË- i*(
x3
>>s))/4

77 
MACRO


78 
C_FFT4
 
	g$s


79 ; (
	gx2
,
	gx3
Ë(
x2
+
x3
, x2-x3)

80 
ADD
 
	gx2_r
, x2_r, 
x3_r


81 
ADD
 
	gx2_i
, x2_i, 
x3_i


82 
SUB
 
	gx3_r
, 
	gx2_r
, x3_r, 
	gLSL
#1

83 
SUB
 
	gx3_i
, 
	gx2_i
, x3_i, 
	gLSL
#1

84 ; (
	gx0
,
	gx1
Ë(
x0
+(
x1
>>
s
), x0-(x1>>
	gs
))/4

85 
MOV
 
	gx0_r
, x0_r, 
	gASR
#2

86 
MOV
 
	gx0_i
, x0_i, 
	gASR
#2

87 
ADD
 
	gx0_r
, x0_r, 
	gx1_r
, 
	gASR
#(2+
	g$s
)

88 
ADD
 
	gx0_i
, x0_i, 
	gx1_i
, 
	gASR
#(2+
	g$s
)

89 
SUB
 
	gx1_r
, 
	gx0_r
, x1_r, 
	gASR
#(1+
	g$s
)

90 
SUB
 
	gx1_i
, 
	gx0_i
, x1_i, 
	gASR
#(1+
	g$s
)

91 ; (
	gx0
,
	gx2
Ë(
x0
+(
x2
>>
s
)/4, x0-(x2>>
	gs
)/4)

92 
ADD
 
	gx0_r
, x0_r, 
	gx2_r
, 
	gASR
#(2+
	g$s
)

93 
ADD
 
	gx0_i
, x0_i, 
	gx2_i
, 
	gASR
#(2+
	g$s
)

94 
SUB
 
	gx2_r
, 
	gx0_r
, x2_r, 
	gASR
#(1+
	g$s
)

95 
SUB
 
	gx2_i
, 
	gx0_i
, x2_i, 
	gASR
#(1+
	g$s
)

96 ; (
	gx1
,
	gy3
Ë(
x1
-
i
*(
x3
>>
s
)/4, x1+
	gi
*(
	gx3
>>
	gs
)/4)

97 
ADD
 
	gx1_r
, x1_r, 
	gx3_i
, 
	gASR
#(2+
	g$s
)

98 
SUB
 
	gx1_i
, x1_i, 
	gx3_r
, 
	gASR
#(2+
	g$s
)

99 
SUB
 
	gy3_r
, 
	gx1_r
, 
	gx3_i
, 
	gASR
#(1+
	g$s
)

100 
ADD
 
	gy3_i
, 
	gx1_i
, 
	gx3_r
, 
	gASR
#(1+
	g$s
)

101 
	gMEND


103 ; 
Com∂ex
 
c⁄jug©e
 
mu…ùly
 
	ga
=(
xr
+
i
*
xi
)*(
¸
-i*
ci
)

104 ; 
	gx
 = 
xr
 + 
i
*
xi


105 ; 
	gw
 = (
¸
-
ci
Ë+ 
i
*ci

106 
MACRO


107 
C_MUL9m
 
$a
, 
	g$x
, 
$w


108 
SUB
 
	gt1
, 
	g$x
.
	g_i
, $x.
	g_r
 ; (
	gxi
-
	gxr
)

109 
MUL
 
	gt0
, 
	gt1
, 
	g$w
.
	g_i
 ; (
	gxi
-
	gxr
)*
ci


110 
ADD
 
	gt1
, 
	g$w
.
	g_r
, $w.
	g_i
, 
	gLSL
#1 ; (
	g¸
+
	gci
)

111 
MLA
 
	g$a
.
	g_i
, 
	g$x
._i, 
	g$w
.
	g_r
, 
	gt0
 ; 
xi
*
	g¸
-
xr
*
ci


112 
MLA
 
	g$a
.
	g_r
, 
	g$x
._r, 
	gt1
, 
	gt0
 ; 
xr
*
	g¸
+
xi
*
ci


113 
MEND


115 
y
 
	gRN
 0 ; 
ouçut
 
com∂ex
 
¨øy
 
	gy
[]

116 
c
 
	gRN
 0 ; 
c€fficõ¡
 
¨øy


117 
x
 
	gRN
 1 ; 
öput
 
com∂ex
 
¨øy
 
	gx
[]

118 
N
 
	gRN
 2 ; 
numbî
 
of
 
	$ßm∂es
 (
a
 
powî
 
of
 2)

119 
S
 
RN
 2 ; 
the
 
numbî
 
of
 
blocks


120 
R
 
RN
 3 ; 
the
 
numbî
 
of
 
ßm∂es
 
ö
 
óch
 
block


121 
x0_r
 
RN
 4 ; 
d©a
 (
ªÆ
 
∑π
)

122 
x0_i
 
RN
 5 ; 
d©a
 (
imagö¨y
 
∑π
)

123 
x1_r
 
RN
 6

124 
x1_i
 
RN
 7

125 
x2_r
 
RN
 8

126 
x2_i
 
RN
 9

127 
x3_r
 
RN
 10

128 
x3_i
 
RN
 11

129 
y3_r
 
RN
 
x3_i


130 
y3_i
 
RN
 
x3_r


131 
t0
 
RN
 12 ; 
s¸©ch
 

132 
t1
 
RN
 14

134 ; 
	$f·_16_¨m9m
(*
y
, *
x
, 
N
)

135 
f·_16_¨m9m


136 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

137 
MOV
 
	gt0
, #0 ; 
bô
 
ªvî£d
 
cou¡î


138 
	gfú°_°age_¨m9m


139 ; 
fú°
 
°age
 
lﬂd
 
™d
 
bô
 
ªvî£


140 
ADD
 
	gt1
, 
	gx
, 
	gt0
, 
	gLSL
#2

141 
C_LDR
 
	gx0
, 
	gt1
, 
N


142 
C_LDR
 
	gx2
, 
	gt1
, 
N


143 
C_LDR
 
	gx1
, 
	gt1
, 
N


144 
C_LDR
 
	gx3
, 
	gt1
, 
N


145 
	gC_FFT4
 0

146 
C_STR
 
	gx0
, 
	gy
, #4

147 
C_STR
 
	gx1
, 
	gy
, #4

148 
C_STR
 
	gx2
, 
	gy
, #4

149 
C_STR
 
	gy3
, 
	gy
, #4

150 
EOR
 
	gt0
,Å0, 
	gN
, 
	gLSR
#3 ; 
ö¸emít
 
thúd
 
bô


151 
TST
 
	gt0
, 
	gN
, 
	gLSR
#3 ; 
‰om
 
the
 
t›


152 
BNE
 
fú°_°age_¨m9m


153 
EOR
 
	gt0
,Å0, 
	gN
, 
	gLSR
#4 ; 
ö¸emít
 
fouπh
 
bô


154 
TST
 
	gt0
, 
	gN
, 
	gLSR
#4 ; 
‰om
 
the
 
t›


155 
BNE
 
fú°_°age_¨m9m


156 
MOV
 
	gt1
, 
	gN
, 
	gLSR
#5 ; 
ö¸emít
 
fi·h


157 
	gbô_ªvî£d_cou¡_¨m9m
 ; 
bôs
 
downw¨d


158 
EOR
 
	gt0
,Å0, 
t1


159 
TST
 
	gt0
, 
t1


160 
BNE
 
fú°_°age_¨m9m


161 
MOVS
 
	gt1
,Å1, 
	gLSR
#1

162 
BNE
 
	gbô_ªvî£d_cou¡_¨m9m


163 ; 
föished
 
the
 
fú°
 
°age


164 
SUB
 
	gx
, 
	gy
, 
	gN
, 
	gLSL
#2 ; x = 
w‹kög
 
buf„r


165 
MOV
 
R
, #16

166 
MOVS
 
	gS
, 
	gN
, 
	gLSR
#4

167 
LDMEQFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

168 
ADR
 
	gc
, 
f·_èbÀ_¨m9m


169 
	g√xt_°age_¨m9m


170 ; 
	gS
 = 
the
 
numbî
 
of
 
blocks


171 ; 
	gR
 = 
the
 
numbî
 
of
 
ßm∂es
 
ö
 
óch
 
block


172 
STMFD
 
•
!, {
	gx
, 
	gS
}

173 
ADD
 
	gt0
, 
	gR
, R, 
	gLSL
#1

174 
ADD
 
	gx
, x, 
t0


175 
SUB
 
	gS
, S, #1<<16

176 
√xt_block_¨m9m


177 
ADD
 
	gS
, S, 
	gR
, 
	gLSL
#(16-2)

178 
	g√xt_buâîÊy_¨m9m


179 ; 
	gS
=((
numbî
 
buâîÊõs
 
À·
-1)<<16)

180 ; + (
numbî
 
of
 
blocks
 
	gÀ·
)

181 
C_LDR
 
	gx0
, 
	gx
, -
R


182 
C_LDR
 
	gx3
, 
	gc
, #4

183 
C_MUL9m
 
	gx3
, 
	gx0
, 
x3


184 
C_LDR
 
	gx0
, 
	gx
, -
R


185 
C_LDR
 
	gx2
, 
	gc
, #4

186 
C_MUL9m
 
	gx2
, 
	gx0
, 
x2


187 
C_LDR
 
	gx0
, 
	gx
, -
R


188 
C_LDR
 
	gx1
, 
	gc
, #4

189 
C_MUL9m
 
	gx1
, 
	gx0
, 
x1


190 
C_LDR
 
	gx0
, 
	gx
, #0

191 
	gC_FFT4
 14 ; 
c€fficõ¡s
 
¨e
 
Q14


192 
C_STR
 
	gx0
, 
	gx
, 
R


193 
C_STR
 
	gx1
, 
	gx
, 
R


194 
C_STR
 
	gx2
, 
	gx
, 
R


195 
C_STR
 
	gy3
, 
	gx
, #4

196 
SUBS
 
	gS
, S, #1<<16

197 
BGE
 
√xt_buâîÊy_¨m9m


198 
ADD
 
	gt0
, 
	gR
, R, 
	gLSL
#1

199 
ADD
 
	gx
, x, 
t0


200 
SUB
 
	gS
, S, #1

201 
MOVS
 
	gt1
, 
	gS
, 
	gLSL
#16

202 
SUBNE
 
	gc
, c, 
t0


203 
BNE
 
√xt_block_¨m9m


204 
LDMFD
 
	g•
!, {
	gx
, 
	gS
}

205 
MOV
 
	gR
, R, 
	gLSL
#2 ; 
quadrou∂e
 
block
 
size


206 
MOVS
 
	gS
, S, 
	gLSR
#2 ; 
qu¨ãr
 
numbî
 
of
 
blocks


207 
BNE
 
√xt_°age_¨m9m


208 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

210 
	gf·_èbÀ_¨m9m


211 ; 
FFT
 
twiddÀ
 
èbÀ
 
of
 
åùÀts
 
E
(3
t
), E(t), E(2t)

212 ; 
Whîe
 
E
(
t
)=(
cos
—)-
sö
—))+
i
*
	$sö
(
t
Ë
©
 
Q14


213 ; 
N
=16 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

214 
DCW
 0x4000,0x0000, 0x4000,0x0000, 0x4000,0x0000

215 
DCW
 0xdd5d,0x3b21, 0x22a3,0x187e, 0x0000,0x2d41

216 
DCW
 0xa57e,0x2d41, 0x0000,0x2d41, 0xc000,0x4000

217 
DCW
 0xdd5d,0xe782, 0xdd5d,0x3b21, 0xa57e,0x2d41

218 ; 
N
=64 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

219 
DCW
 0x4000,0x0000, 0x4000,0x0000, 0x4000,0x0000

220 
DCW
 0x2aaa,0x1294, 0x396b,0x0646, 0x3249,0x0c7c

221 
DCW
 0x11a8,0x238e, 0x3249,0x0c7c, 0x22a3,0x187e

222 
DCW
 0xf721,0x3179, 0x2aaa,0x1294, 0x11a8,0x238e

223 
DCW
 0xdd5d,0x3b21, 0x22a3,0x187e, 0x0000,0x2d41

224 
DCW
 0xc695,0x3fb1, 0x1a46,0x1e2b, 0xee58,0x3537

225 
DCW
 0xb4be,0x3ec5, 0x11a8,0x238e, 0xdd5d,0x3b21

226 
DCW
 0xa963,0x3871, 0x08df,0x289a, 0xcdb7,0x3ec5

227 
DCW
 0xa57e,0x2d41, 0x0000,0x2d41, 0xc000,0x4000

228 
DCW
 0xa963,0x1e2b, 0xf721,0x3179, 0xb4be,0x3ec5

229 
DCW
 0xb4be,0x0c7c, 0xee58,0x3537, 0xac61,0x3b21

230 
DCW
 0xc695,0xf9ba, 0xe5ba,0x3871, 0xa73b,0x3537

231 
DCW
 0xdd5d,0xe782, 0xdd5d,0x3b21, 0xa57e,0x2d41

232 
DCW
 0xf721,0xd766, 0xd556,0x3d3f, 0xa73b,0x238e

233 
DCW
 0x11a8,0xcac9, 0xcdb7,0x3ec5, 0xac61,0x187e

234 
DCW
 0x2aaa,0xc2c1, 0xc695,0x3fb1, 0xb4be,0x0c7c

235 ; 
N
=256 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

236 
DCW
 0x4000,0x0000, 0x4000,0x0000, 0x4000,0x0000

237 
DCW
 0x3b1e,0x04b5, 0x3e69,0x0192, 0x3cc8,0x0324

238 
DCW
 0x35eb,0x0964, 0x3cc8,0x0324, 0x396b,0x0646

239 
DCW
 0x306c,0x0e06, 0x3b1e,0x04b5, 0x35eb,0x0964

240 
DCW
 0x2aaa,0x1294, 0x396b,0x0646, 0x3249,0x0c7c

241 
DCW
 0x24ae,0x1709, 0x37af,0x07d6, 0x2e88,0x0f8d

242 
DCW
 0x1e7e,0x1b5d, 0x35eb,0x0964, 0x2aaa,0x1294

243 
DCW
 0x1824,0x1f8c, 0x341e,0x0af1, 0x26b3,0x1590

244 
DCW
 0x11a8,0x238e, 0x3249,0x0c7c, 0x22a3,0x187e

245 
DCW
 0x0b14,0x2760, 0x306c,0x0e06, 0x1e7e,0x1b5d

246 
DCW
 0x0471,0x2afb, 0x2e88,0x0f8d, 0x1a46,0x1e2b

247 
DCW
 0xfdc7,0x2e5a, 0x2c9d,0x1112, 0x15fe,0x20e7

248 
DCW
 0xf721,0x3179, 0x2aaa,0x1294, 0x11a8,0x238e

249 
DCW
 0xf087,0x3453, 0x28b2,0x1413, 0x0d48,0x2620

250 
DCW
 0xea02,0x36e5, 0x26b3,0x1590, 0x08df,0x289a

251 
DCW
 0xe39c,0x392b, 0x24ae,0x1709, 0x0471,0x2afb

252 
DCW
 0xdd5d,0x3b21, 0x22a3,0x187e, 0x0000,0x2d41

253 
DCW
 0xd74e,0x3cc5, 0x2093,0x19ef, 0xfb8f,0x2f6c

254 
DCW
 0xd178,0x3e15, 0x1e7e,0x1b5d, 0xf721,0x3179

255 
DCW
 0xcbe2,0x3f0f, 0x1c64,0x1cc6, 0xf2b8,0x3368

256 
DCW
 0xc695,0x3fb1, 0x1a46,0x1e2b, 0xee58,0x3537

257 
DCW
 0xc197,0x3ffb, 0x1824,0x1f8c, 0xea02,0x36e5

258 
DCW
 0xbcf0,0x3fec, 0x15fe,0x20e7, 0xe5ba,0x3871

259 
DCW
 0xb8a6,0x3f85, 0x13d5,0x223d, 0xe182,0x39db

260 
DCW
 0xb4be,0x3ec5, 0x11a8,0x238e, 0xdd5d,0x3b21

261 
DCW
 0xb140,0x3daf, 0x0f79,0x24da, 0xd94d,0x3c42

262 
DCW
 0xae2e,0x3c42, 0x0d48,0x2620, 0xd556,0x3d3f

263 
DCW
 0xab8e,0x3a82, 0x0b14,0x2760, 0xd178,0x3e15

264 
DCW
 0xa963,0x3871, 0x08df,0x289a, 0xcdb7,0x3ec5

265 
DCW
 0xa7b1,0x3612, 0x06a9,0x29ce, 0xca15,0x3f4f

266 
DCW
 0xa678,0x3368, 0x0471,0x2afb, 0xc695,0x3fb1

267 
DCW
 0xa5bc,0x3076, 0x0239,0x2c21, 0xc338,0x3fec

268 
DCW
 0xa57e,0x2d41, 0x0000,0x2d41, 0xc000,0x4000

269 
DCW
 0xa5bc,0x29ce, 0xfdc7,0x2e5a, 0xbcf0,0x3fec

270 
DCW
 0xa678,0x2620, 0xfb8f,0x2f6c, 0xba09,0x3fb1

271 
DCW
 0xa7b1,0x223d, 0xf957,0x3076, 0xb74d,0x3f4f

272 
DCW
 0xa963,0x1e2b, 0xf721,0x3179, 0xb4be,0x3ec5

273 
DCW
 0xab8e,0x19ef, 0xf4ec,0x3274, 0xb25e,0x3e15

274 
DCW
 0xae2e,0x1590, 0xf2b8,0x3368, 0xb02d,0x3d3f

275 
DCW
 0xb140,0x1112, 0xf087,0x3453, 0xae2e,0x3c42

276 
DCW
 0xb4be,0x0c7c, 0xee58,0x3537, 0xac61,0x3b21

277 
DCW
 0xb8a6,0x07d6, 0xec2b,0x3612, 0xaac8,0x39db

278 
DCW
 0xbcf0,0x0324, 0xea02,0x36e5, 0xa963,0x3871

279 
DCW
 0xc197,0xfe6e, 0xe7dc,0x37b0, 0xa834,0x36e5

280 
DCW
 0xc695,0xf9ba, 0xe5ba,0x3871, 0xa73b,0x3537

281 
DCW
 0xcbe2,0xf50f, 0xe39c,0x392b, 0xa678,0x3368

282 
DCW
 0xd178,0xf073, 0xe182,0x39db, 0xa5ed,0x3179

283 
DCW
 0xd74e,0xebed, 0xdf6d,0x3a82, 0xa599,0x2f6c

284 
DCW
 0xdd5d,0xe782, 0xdd5d,0x3b21, 0xa57e,0x2d41

285 
DCW
 0xe39c,0xe33a, 0xdb52,0x3bb6, 0xa599,0x2afb

286 
DCW
 0xea02,0xdf19, 0xd94d,0x3c42, 0xa5ed,0x289a

287 
DCW
 0xf087,0xdb26, 0xd74e,0x3cc5, 0xa678,0x2620

288 
DCW
 0xf721,0xd766, 0xd556,0x3d3f, 0xa73b,0x238e

289 
DCW
 0xfdc7,0xd3df, 0xd363,0x3daf, 0xa834,0x20e7

290 
DCW
 0x0471,0xd094, 0xd178,0x3e15, 0xa963,0x1e2b

291 
DCW
 0x0b14,0xcd8c, 0xcf94,0x3e72, 0xaac8,0x1b5d

292 
DCW
 0x11a8,0xcac9, 0xcdb7,0x3ec5, 0xac61,0x187e

293 
DCW
 0x1824,0xc850, 0xcbe2,0x3f0f, 0xae2e,0x1590

294 
DCW
 0x1e7e,0xc625, 0xca15,0x3f4f, 0xb02d,0x1294

295 
DCW
 0x24ae,0xc44a, 0xc851,0x3f85, 0xb25e,0x0f8d

296 
DCW
 0x2aaa,0xc2c1, 0xc695,0x3fb1, 0xb4be,0x0c7c

297 
DCW
 0x306c,0xc18e, 0xc4e2,0x3fd4, 0xb74d,0x0964

298 
DCW
 0x35eb,0xc0b1, 0xc338,0x3fec, 0xba09,0x0646

299 
DCW
 0x3b1e,0xc02c, 0xc197,0x3ffb, 0xbcf0,0x0324

300 ; 
N
=1024 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

301 
DCW
 0x4000,0x0000, 0x4000,0x0000, 0x4000,0x0000

302 
DCW
 0x3ed0,0x012e, 0x3f9b,0x0065, 0x3f36,0x00c9

303 
DCW
 0x3d9a,0x025b, 0x3f36,0x00c9, 0x3e69,0x0192

304 
DCW
 0x3c5f,0x0388, 0x3ed0,0x012e, 0x3d9a,0x025b

305 
DCW
 0x3b1e,0x04b5, 0x3e69,0x0192, 0x3cc8,0x0324

306 
DCW
 0x39d9,0x05e2, 0x3e02,0x01f7, 0x3bf4,0x03ed

307 
DCW
 0x388e,0x070e, 0x3d9a,0x025b, 0x3b1e,0x04b5

308 
DCW
 0x373f,0x0839, 0x3d31,0x02c0, 0x3a46,0x057e

309 
DCW
 0x35eb,0x0964, 0x3cc8,0x0324, 0x396b,0x0646

310 
DCW
 0x3492,0x0a8e, 0x3c5f,0x0388, 0x388e,0x070e

311 
DCW
 0x3334,0x0bb7, 0x3bf4,0x03ed, 0x37af,0x07d6

312 
DCW
 0x31d2,0x0cdf, 0x3b8a,0x0451, 0x36ce,0x089d

313 
DCW
 0x306c,0x0e06, 0x3b1e,0x04b5, 0x35eb,0x0964

314 
DCW
 0x2f02,0x0f2b, 0x3ab2,0x051a, 0x3505,0x0a2b

315 
DCW
 0x2d93,0x1050, 0x3a46,0x057e, 0x341e,0x0af1

316 
DCW
 0x2c21,0x1173, 0x39d9,0x05e2, 0x3334,0x0bb7

317 
DCW
 0x2aaa,0x1294, 0x396b,0x0646, 0x3249,0x0c7c

318 
DCW
 0x2931,0x13b4, 0x38fd,0x06aa, 0x315b,0x0d41

319 
DCW
 0x27b3,0x14d2, 0x388e,0x070e, 0x306c,0x0e06

320 
DCW
 0x2632,0x15ee, 0x381f,0x0772, 0x2f7b,0x0eca

321 
DCW
 0x24ae,0x1709, 0x37af,0x07d6, 0x2e88,0x0f8d

322 
DCW
 0x2326,0x1821, 0x373f,0x0839, 0x2d93,0x1050

323 
DCW
 0x219c,0x1937, 0x36ce,0x089d, 0x2c9d,0x1112

324 
DCW
 0x200e,0x1a4b, 0x365d,0x0901, 0x2ba4,0x11d3

325 
DCW
 0x1e7e,0x1b5d, 0x35eb,0x0964, 0x2aaa,0x1294

326 
DCW
 0x1ceb,0x1c6c, 0x3578,0x09c7, 0x29af,0x1354

327 
DCW
 0x1b56,0x1d79, 0x3505,0x0a2b, 0x28b2,0x1413

328 
DCW
 0x19be,0x1e84, 0x3492,0x0a8e, 0x27b3,0x14d2

329 
DCW
 0x1824,0x1f8c, 0x341e,0x0af1, 0x26b3,0x1590

330 
DCW
 0x1688,0x2091, 0x33a9,0x0b54, 0x25b1,0x164c

331 
DCW
 0x14ea,0x2193, 0x3334,0x0bb7, 0x24ae,0x1709

332 
DCW
 0x134a,0x2292, 0x32bf,0x0c1a, 0x23a9,0x17c4

333 
DCW
 0x11a8,0x238e, 0x3249,0x0c7c, 0x22a3,0x187e

334 
DCW
 0x1005,0x2488, 0x31d2,0x0cdf, 0x219c,0x1937

335 
DCW
 0x0e61,0x257e, 0x315b,0x0d41, 0x2093,0x19ef

336 
DCW
 0x0cbb,0x2671, 0x30e4,0x0da4, 0x1f89,0x1aa7

337 
DCW
 0x0b14,0x2760, 0x306c,0x0e06, 0x1e7e,0x1b5d

338 
DCW
 0x096d,0x284c, 0x2ff4,0x0e68, 0x1d72,0x1c12

339 
DCW
 0x07c4,0x2935, 0x2f7b,0x0eca, 0x1c64,0x1cc6

340 
DCW
 0x061b,0x2a1a, 0x2f02,0x0f2b, 0x1b56,0x1d79

341 
DCW
 0x0471,0x2afb, 0x2e88,0x0f8d, 0x1a46,0x1e2b

342 
DCW
 0x02c7,0x2bd8, 0x2e0e,0x0fee, 0x1935,0x1edc

343 
DCW
 0x011c,0x2cb2, 0x2d93,0x1050, 0x1824,0x1f8c

344 
DCW
 0xff72,0x2d88, 0x2d18,0x10b1, 0x1711,0x203a

345 
DCW
 0xfdc7,0x2e5a, 0x2c9d,0x1112, 0x15fe,0x20e7

346 
DCW
 0xfc1d,0x2f28, 0x2c21,0x1173, 0x14ea,0x2193

347 
DCW
 0xfa73,0x2ff2, 0x2ba4,0x11d3, 0x13d5,0x223d

348 
DCW
 0xf8ca,0x30b8, 0x2b28,0x1234, 0x12bf,0x22e7

349 
DCW
 0xf721,0x3179, 0x2aaa,0x1294, 0x11a8,0x238e

350 
DCW
 0xf579,0x3236, 0x2a2d,0x12f4, 0x1091,0x2435

351 
DCW
 0xf3d2,0x32ef, 0x29af,0x1354, 0x0f79,0x24da

352 
DCW
 0xf22c,0x33a3, 0x2931,0x13b4, 0x0e61,0x257e

353 
DCW
 0xf087,0x3453, 0x28b2,0x1413, 0x0d48,0x2620

354 
DCW
 0xeee3,0x34ff, 0x2833,0x1473, 0x0c2e,0x26c1

355 
DCW
 0xed41,0x35a5, 0x27b3,0x14d2, 0x0b14,0x2760

356 
DCW
 0xeba1,0x3648, 0x2733,0x1531, 0x09fa,0x27fe

357 
DCW
 0xea02,0x36e5, 0x26b3,0x1590, 0x08df,0x289a

358 
DCW
 0xe865,0x377e, 0x2632,0x15ee, 0x07c4,0x2935

359 
DCW
 0xe6cb,0x3812, 0x25b1,0x164c, 0x06a9,0x29ce

360 
DCW
 0xe532,0x38a1, 0x252f,0x16ab, 0x058d,0x2a65

361 
DCW
 0xe39c,0x392b, 0x24ae,0x1709, 0x0471,0x2afb

362 
DCW
 0xe208,0x39b0, 0x242b,0x1766, 0x0355,0x2b8f

363 
DCW
 0xe077,0x3a30, 0x23a9,0x17c4, 0x0239,0x2c21

364 
DCW
 0xdee9,0x3aab, 0x2326,0x1821, 0x011c,0x2cb2

365 
DCW
 0xdd5d,0x3b21, 0x22a3,0x187e, 0x0000,0x2d41

366 
DCW
 0xdbd5,0x3b92, 0x221f,0x18db, 0xfee4,0x2dcf

367 
DCW
 0xda4f,0x3bfd, 0x219c,0x1937, 0xfdc7,0x2e5a

368 
DCW
 0xd8cd,0x3c64, 0x2117,0x1993, 0xfcab,0x2ee4

369 
DCW
 0xd74e,0x3cc5, 0x2093,0x19ef, 0xfb8f,0x2f6c

370 
DCW
 0xd5d3,0x3d21, 0x200e,0x1a4b, 0xfa73,0x2ff2

371 
DCW
 0xd45c,0x3d78, 0x1f89,0x1aa7, 0xf957,0x3076

372 
DCW
 0xd2e8,0x3dc9, 0x1f04,0x1b02, 0xf83c,0x30f9

373 
DCW
 0xd178,0x3e15, 0x1e7e,0x1b5d, 0xf721,0x3179

374 
DCW
 0xd00c,0x3e5c, 0x1df8,0x1bb8, 0xf606,0x31f8

375 
DCW
 0xcea5,0x3e9d, 0x1d72,0x1c12, 0xf4ec,0x3274

376 
DCW
 0xcd41,0x3ed8, 0x1ceb,0x1c6c, 0xf3d2,0x32ef

377 
DCW
 0xcbe2,0x3f0f, 0x1c64,0x1cc6, 0xf2b8,0x3368

378 
DCW
 0xca88,0x3f40, 0x1bdd,0x1d20, 0xf19f,0x33df

379 
DCW
 0xc932,0x3f6b, 0x1b56,0x1d79, 0xf087,0x3453

380 
DCW
 0xc7e1,0x3f91, 0x1ace,0x1dd3, 0xef6f,0x34c6

381 
DCW
 0xc695,0x3fb1, 0x1a46,0x1e2b, 0xee58,0x3537

382 
DCW
 0xc54e,0x3fcc, 0x19be,0x1e84, 0xed41,0x35a5

383 
DCW
 0xc40c,0x3fe1, 0x1935,0x1edc, 0xec2b,0x3612

384 
DCW
 0xc2cf,0x3ff1, 0x18ad,0x1f34, 0xeb16,0x367d

385 
DCW
 0xc197,0x3ffb, 0x1824,0x1f8c, 0xea02,0x36e5

386 
DCW
 0xc065,0x4000, 0x179b,0x1fe3, 0xe8ef,0x374b

387 
DCW
 0xbf38,0x3fff, 0x1711,0x203a, 0xe7dc,0x37b0

388 
DCW
 0xbe11,0x3ff8, 0x1688,0x2091, 0xe6cb,0x3812

389 
DCW
 0xbcf0,0x3fec, 0x15fe,0x20e7, 0xe5ba,0x3871

390 
DCW
 0xbbd4,0x3fdb, 0x1574,0x213d, 0xe4aa,0x38cf

391 
DCW
 0xbabf,0x3fc4, 0x14ea,0x2193, 0xe39c,0x392b

392 
DCW
 0xb9af,0x3fa7, 0x145f,0x21e8, 0xe28e,0x3984

393 
DCW
 0xb8a6,0x3f85, 0x13d5,0x223d, 0xe182,0x39db

394 
DCW
 0xb7a2,0x3f5d, 0x134a,0x2292, 0xe077,0x3a30

395 
DCW
 0xb6a5,0x3f30, 0x12bf,0x22e7, 0xdf6d,0x3a82

396 
DCW
 0xb5af,0x3efd, 0x1234,0x233b, 0xde64,0x3ad3

397 
DCW
 0xb4be,0x3ec5, 0x11a8,0x238e, 0xdd5d,0x3b21

398 
DCW
 0xb3d5,0x3e88, 0x111d,0x23e2, 0xdc57,0x3b6d

399 
DCW
 0xb2f2,0x3e45, 0x1091,0x2435, 0xdb52,0x3bb6

400 
DCW
 0xb215,0x3dfc, 0x1005,0x2488, 0xda4f,0x3bfd

401 
DCW
 0xb140,0x3daf, 0x0f79,0x24da, 0xd94d,0x3c42

402 
DCW
 0xb071,0x3d5b, 0x0eed,0x252c, 0xd84d,0x3c85

403 
DCW
 0xafa9,0x3d03, 0x0e61,0x257e, 0xd74e,0x3cc5

404 
DCW
 0xaee8,0x3ca5, 0x0dd4,0x25cf, 0xd651,0x3d03

405 
DCW
 0xae2e,0x3c42, 0x0d48,0x2620, 0xd556,0x3d3f

406 
DCW
 0xad7b,0x3bda, 0x0cbb,0x2671, 0xd45c,0x3d78

407 
DCW
 0xacd0,0x3b6d, 0x0c2e,0x26c1, 0xd363,0x3daf

408 
DCW
 0xac2b,0x3afa, 0x0ba1,0x2711, 0xd26d,0x3de3

409 
DCW
 0xab8e,0x3a82, 0x0b14,0x2760, 0xd178,0x3e15

410 
DCW
 0xaaf8,0x3a06, 0x0a87,0x27af, 0xd085,0x3e45

411 
DCW
 0xaa6a,0x3984, 0x09fa,0x27fe, 0xcf94,0x3e72

412 
DCW
 0xa9e3,0x38fd, 0x096d,0x284c, 0xcea5,0x3e9d

413 
DCW
 0xa963,0x3871, 0x08df,0x289a, 0xcdb7,0x3ec5

414 
DCW
 0xa8eb,0x37e1, 0x0852,0x28e7, 0xcccc,0x3eeb

415 
DCW
 0xa87b,0x374b, 0x07c4,0x2935, 0xcbe2,0x3f0f

416 
DCW
 0xa812,0x36b1, 0x0736,0x2981, 0xcafb,0x3f30

417 
DCW
 0xa7b1,0x3612, 0x06a9,0x29ce, 0xca15,0x3f4f

418 
DCW
 0xa757,0x356e, 0x061b,0x2a1a, 0xc932,0x3f6b

419 
DCW
 0xa705,0x34c6, 0x058d,0x2a65, 0xc851,0x3f85

420 
DCW
 0xa6bb,0x3419, 0x04ff,0x2ab0, 0xc772,0x3f9c

421 
DCW
 0xa678,0x3368, 0x0471,0x2afb, 0xc695,0x3fb1

422 
DCW
 0xa63e,0x32b2, 0x03e3,0x2b45, 0xc5ba,0x3fc4

423 
DCW
 0xa60b,0x31f8, 0x0355,0x2b8f, 0xc4e2,0x3fd4

424 
DCW
 0xa5e0,0x3139, 0x02c7,0x2bd8, 0xc40c,0x3fe1

425 
DCW
 0xa5bc,0x3076, 0x0239,0x2c21, 0xc338,0x3fec

426 
DCW
 0xa5a1,0x2faf, 0x01aa,0x2c6a, 0xc266,0x3ff5

427 
DCW
 0xa58d,0x2ee4, 0x011c,0x2cb2, 0xc197,0x3ffb

428 
DCW
 0xa581,0x2e15, 0x008e,0x2cfa, 0xc0ca,0x3fff

429 
DCW
 0xa57e,0x2d41, 0x0000,0x2d41, 0xc000,0x4000

430 
DCW
 0xa581,0x2c6a, 0xff72,0x2d88, 0xbf38,0x3fff

431 
DCW
 0xa58d,0x2b8f, 0xfee4,0x2dcf, 0xbe73,0x3ffb

432 
DCW
 0xa5a1,0x2ab0, 0xfe56,0x2e15, 0xbdb0,0x3ff5

433 
DCW
 0xa5bc,0x29ce, 0xfdc7,0x2e5a, 0xbcf0,0x3fec

434 
DCW
 0xa5e0,0x28e7, 0xfd39,0x2e9f, 0xbc32,0x3fe1

435 
DCW
 0xa60b,0x27fe, 0xfcab,0x2ee4, 0xbb77,0x3fd4

436 
DCW
 0xa63e,0x2711, 0xfc1d,0x2f28, 0xbabf,0x3fc4

437 
DCW
 0xa678,0x2620, 0xfb8f,0x2f6c, 0xba09,0x3fb1

438 
DCW
 0xa6bb,0x252c, 0xfb01,0x2faf, 0xb956,0x3f9c

439 
DCW
 0xa705,0x2435, 0xfa73,0x2ff2, 0xb8a6,0x3f85

440 
DCW
 0xa757,0x233b, 0xf9e5,0x3034, 0xb7f8,0x3f6b

441 
DCW
 0xa7b1,0x223d, 0xf957,0x3076, 0xb74d,0x3f4f

442 
DCW
 0xa812,0x213d, 0xf8ca,0x30b8, 0xb6a5,0x3f30

443 
DCW
 0xa87b,0x203a, 0xf83c,0x30f9, 0xb600,0x3f0f

444 
DCW
 0xa8eb,0x1f34, 0xf7ae,0x3139, 0xb55e,0x3eeb

445 
DCW
 0xa963,0x1e2b, 0xf721,0x3179, 0xb4be,0x3ec5

446 
DCW
 0xa9e3,0x1d20, 0xf693,0x31b9, 0xb422,0x3e9d

447 
DCW
 0xaa6a,0x1c12, 0xf606,0x31f8, 0xb388,0x3e72

448 
DCW
 0xaaf8,0x1b02, 0xf579,0x3236, 0xb2f2,0x3e45

449 
DCW
 0xab8e,0x19ef, 0xf4ec,0x3274, 0xb25e,0x3e15

450 
DCW
 0xac2b,0x18db, 0xf45f,0x32b2, 0xb1cd,0x3de3

451 
DCW
 0xacd0,0x17c4, 0xf3d2,0x32ef, 0xb140,0x3daf

452 
DCW
 0xad7b,0x16ab, 0xf345,0x332c, 0xb0b5,0x3d78

453 
DCW
 0xae2e,0x1590, 0xf2b8,0x3368, 0xb02d,0x3d3f

454 
DCW
 0xaee8,0x1473, 0xf22c,0x33a3, 0xafa9,0x3d03

455 
DCW
 0xafa9,0x1354, 0xf19f,0x33df, 0xaf28,0x3cc5

456 
DCW
 0xb071,0x1234, 0xf113,0x3419, 0xaea9,0x3c85

457 
DCW
 0xb140,0x1112, 0xf087,0x3453, 0xae2e,0x3c42

458 
DCW
 0xb215,0x0fee, 0xeffb,0x348d, 0xadb6,0x3bfd

459 
DCW
 0xb2f2,0x0eca, 0xef6f,0x34c6, 0xad41,0x3bb6

460 
DCW
 0xb3d5,0x0da4, 0xeee3,0x34ff, 0xacd0,0x3b6d

461 
DCW
 0xb4be,0x0c7c, 0xee58,0x3537, 0xac61,0x3b21

462 
DCW
 0xb5af,0x0b54, 0xedcc,0x356e, 0xabf6,0x3ad3

463 
DCW
 0xb6a5,0x0a2b, 0xed41,0x35a5, 0xab8e,0x3a82

464 
DCW
 0xb7a2,0x0901, 0xecb6,0x35dc, 0xab29,0x3a30

465 
DCW
 0xb8a6,0x07d6, 0xec2b,0x3612, 0xaac8,0x39db

466 
DCW
 0xb9af,0x06aa, 0xeba1,0x3648, 0xaa6a,0x3984

467 
DCW
 0xbabf,0x057e, 0xeb16,0x367d, 0xaa0f,0x392b

468 
DCW
 0xbbd4,0x0451, 0xea8c,0x36b1, 0xa9b7,0x38cf

469 
DCW
 0xbcf0,0x0324, 0xea02,0x36e5, 0xa963,0x3871

470 
DCW
 0xbe11,0x01f7, 0xe978,0x3718, 0xa912,0x3812

471 
DCW
 0xbf38,0x00c9, 0xe8ef,0x374b, 0xa8c5,0x37b0

472 
DCW
 0xc065,0xff9b, 0xe865,0x377e, 0xa87b,0x374b

473 
DCW
 0xc197,0xfe6e, 0xe7dc,0x37b0, 0xa834,0x36e5

474 
DCW
 0xc2cf,0xfd40, 0xe753,0x37e1, 0xa7f1,0x367d

475 
DCW
 0xc40c,0xfc13, 0xe6cb,0x3812, 0xa7b1,0x3612

476 
DCW
 0xc54e,0xfae6, 0xe642,0x3842, 0xa774,0x35a5

477 
DCW
 0xc695,0xf9ba, 0xe5ba,0x3871, 0xa73b,0x3537

478 
DCW
 0xc7e1,0xf88e, 0xe532,0x38a1, 0xa705,0x34c6

479 
DCW
 0xc932,0xf763, 0xe4aa,0x38cf, 0xa6d3,0x3453

480 
DCW
 0xca88,0xf639, 0xe423,0x38fd, 0xa6a4,0x33df

481 
DCW
 0xcbe2,0xf50f, 0xe39c,0x392b, 0xa678,0x3368

482 
DCW
 0xcd41,0xf3e6, 0xe315,0x3958, 0xa650,0x32ef

483 
DCW
 0xcea5,0xf2bf, 0xe28e,0x3984, 0xa62c,0x3274

484 
DCW
 0xd00c,0xf198, 0xe208,0x39b0, 0xa60b,0x31f8

485 
DCW
 0xd178,0xf073, 0xe182,0x39db, 0xa5ed,0x3179

486 
DCW
 0xd2e8,0xef4f, 0xe0fc,0x3a06, 0xa5d3,0x30f9

487 
DCW
 0xd45c,0xee2d, 0xe077,0x3a30, 0xa5bc,0x3076

488 
DCW
 0xd5d3,0xed0c, 0xdff2,0x3a59, 0xa5a9,0x2ff2

489 
DCW
 0xd74e,0xebed, 0xdf6d,0x3a82, 0xa599,0x2f6c

490 
DCW
 0xd8cd,0xeacf, 0xdee9,0x3aab, 0xa58d,0x2ee4

491 
DCW
 0xda4f,0xe9b4, 0xde64,0x3ad3, 0xa585,0x2e5a

492 
DCW
 0xdbd5,0xe89a, 0xdde1,0x3afa, 0xa57f,0x2dcf

493 
DCW
 0xdd5d,0xe782, 0xdd5d,0x3b21, 0xa57e,0x2d41

494 
DCW
 0xdee9,0xe66d, 0xdcda,0x3b47, 0xa57f,0x2cb2

495 
DCW
 0xe077,0xe559, 0xdc57,0x3b6d, 0xa585,0x2c21

496 
DCW
 0xe208,0xe448, 0xdbd5,0x3b92, 0xa58d,0x2b8f

497 
DCW
 0xe39c,0xe33a, 0xdb52,0x3bb6, 0xa599,0x2afb

498 
DCW
 0xe532,0xe22d, 0xdad1,0x3bda, 0xa5a9,0x2a65

499 
DCW
 0xe6cb,0xe124, 0xda4f,0x3bfd, 0xa5bc,0x29ce

500 
DCW
 0xe865,0xe01d, 0xd9ce,0x3c20, 0xa5d3,0x2935

501 
DCW
 0xea02,0xdf19, 0xd94d,0x3c42, 0xa5ed,0x289a

502 
DCW
 0xeba1,0xde18, 0xd8cd,0x3c64, 0xa60b,0x27fe

503 
DCW
 0xed41,0xdd19, 0xd84d,0x3c85, 0xa62c,0x2760

504 
DCW
 0xeee3,0xdc1e, 0xd7cd,0x3ca5, 0xa650,0x26c1

505 
DCW
 0xf087,0xdb26, 0xd74e,0x3cc5, 0xa678,0x2620

506 
DCW
 0xf22c,0xda31, 0xd6cf,0x3ce4, 0xa6a4,0x257e

507 
DCW
 0xf3d2,0xd93f, 0xd651,0x3d03, 0xa6d3,0x24da

508 
DCW
 0xf579,0xd851, 0xd5d3,0x3d21, 0xa705,0x2435

509 
DCW
 0xf721,0xd766, 0xd556,0x3d3f, 0xa73b,0x238e

510 
DCW
 0xf8ca,0xd67f, 0xd4d8,0x3d5b, 0xa774,0x22e7

511 
DCW
 0xfa73,0xd59b, 0xd45c,0x3d78, 0xa7b1,0x223d

512 
DCW
 0xfc1d,0xd4bb, 0xd3df,0x3d93, 0xa7f1,0x2193

513 
DCW
 0xfdc7,0xd3df, 0xd363,0x3daf, 0xa834,0x20e7

514 
DCW
 0xff72,0xd306, 0xd2e8,0x3dc9, 0xa87b,0x203a

515 
DCW
 0x011c,0xd231, 0xd26d,0x3de3, 0xa8c5,0x1f8c

516 
DCW
 0x02c7,0xd161, 0xd1f2,0x3dfc, 0xa912,0x1edc

517 
DCW
 0x0471,0xd094, 0xd178,0x3e15, 0xa963,0x1e2b

518 
DCW
 0x061b,0xcfcc, 0xd0fe,0x3e2d, 0xa9b7,0x1d79

519 
DCW
 0x07c4,0xcf07, 0xd085,0x3e45, 0xaa0f,0x1cc6

520 
DCW
 0x096d,0xce47, 0xd00c,0x3e5c, 0xaa6a,0x1c12

521 
DCW
 0x0b14,0xcd8c, 0xcf94,0x3e72, 0xaac8,0x1b5d

522 
DCW
 0x0cbb,0xccd4, 0xcf1c,0x3e88, 0xab29,0x1aa7

523 
DCW
 0x0e61,0xcc21, 0xcea5,0x3e9d, 0xab8e,0x19ef

524 
DCW
 0x1005,0xcb73, 0xce2e,0x3eb1, 0xabf6,0x1937

525 
DCW
 0x11a8,0xcac9, 0xcdb7,0x3ec5, 0xac61,0x187e

526 
DCW
 0x134a,0xca24, 0xcd41,0x3ed8, 0xacd0,0x17c4

527 
DCW
 0x14ea,0xc983, 0xcccc,0x3eeb, 0xad41,0x1709

528 
DCW
 0x1688,0xc8e8, 0xcc57,0x3efd, 0xadb6,0x164c

529 
DCW
 0x1824,0xc850, 0xcbe2,0x3f0f, 0xae2e,0x1590

530 
DCW
 0x19be,0xc7be, 0xcb6e,0x3f20, 0xaea9,0x14d2

531 
DCW
 0x1b56,0xc731, 0xcafb,0x3f30, 0xaf28,0x1413

532 
DCW
 0x1ceb,0xc6a8, 0xca88,0x3f40, 0xafa9,0x1354

533 
DCW
 0x1e7e,0xc625, 0xca15,0x3f4f, 0xb02d,0x1294

534 
DCW
 0x200e,0xc5a7, 0xc9a3,0x3f5d, 0xb0b5,0x11d3

535 
DCW
 0x219c,0xc52d, 0xc932,0x3f6b, 0xb140,0x1112

536 
DCW
 0x2326,0xc4b9, 0xc8c1,0x3f78, 0xb1cd,0x1050

537 
DCW
 0x24ae,0xc44a, 0xc851,0x3f85, 0xb25e,0x0f8d

538 
DCW
 0x2632,0xc3e0, 0xc7e1,0x3f91, 0xb2f2,0x0eca

539 
DCW
 0x27b3,0xc37b, 0xc772,0x3f9c, 0xb388,0x0e06

540 
DCW
 0x2931,0xc31c, 0xc703,0x3fa7, 0xb422,0x0d41

541 
DCW
 0x2aaa,0xc2c1, 0xc695,0x3fb1, 0xb4be,0x0c7c

542 
DCW
 0x2c21,0xc26d, 0xc627,0x3fbb, 0xb55e,0x0bb7

543 
DCW
 0x2d93,0xc21d, 0xc5ba,0x3fc4, 0xb600,0x0af1

544 
DCW
 0x2f02,0xc1d3, 0xc54e,0x3fcc, 0xb6a5,0x0a2b

545 
DCW
 0x306c,0xc18e, 0xc4e2,0x3fd4, 0xb74d,0x0964

546 
DCW
 0x31d2,0xc14f, 0xc476,0x3fdb, 0xb7f8,0x089d

547 
DCW
 0x3334,0xc115, 0xc40c,0x3fe1, 0xb8a6,0x07d6

548 
DCW
 0x3492,0xc0e0, 0xc3a1,0x3fe7, 0xb956,0x070e

549 
DCW
 0x35eb,0xc0b1, 0xc338,0x3fec, 0xba09,0x0646

550 
DCW
 0x373f,0xc088, 0xc2cf,0x3ff1, 0xbabf,0x057e

551 
DCW
 0x388e,0xc064, 0xc266,0x3ff5, 0xbb77,0x04b5

552 
DCW
 0x39d9,0xc045, 0xc1fe,0x3ff8, 0xbc32,0x03ed

553 
DCW
 0x3b1e,0xc02c, 0xc197,0x3ffb, 0xbcf0,0x0324

554 
DCW
 0x3c5f,0xc019, 0xc130,0x3ffd, 0xbdb0,0x025b

555 
DCW
 0x3d9a,0xc00b, 0xc0ca,0x3fff, 0xbe73,0x0192

556 
DCW
 0x3ed0,0xc003, 0xc065,0x4000, 0xbf38,0x00c9

557 ; 
N
=4096 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

558 
DCW
 0x4000,0x0000, 0x4000,0x0000, 0x4000,0x0000

559 
DCW
 0x3fb4,0x004b, 0x3fe7,0x0019, 0x3fce,0x0032

560 
DCW
 0x3f69,0x0097, 0x3fce,0x0032, 0x3f9b,0x0065

561 
DCW
 0x3f1c,0x00e2, 0x3fb4,0x004b, 0x3f69,0x0097

562 
DCW
 0x3ed0,0x012e, 0x3f9b,0x0065, 0x3f36,0x00c9

563 
DCW
 0x3e83,0x0179, 0x3f82,0x007e, 0x3f03,0x00fb

564 
DCW
 0x3e35,0x01c4, 0x3f69,0x0097, 0x3ed0,0x012e

565 
DCW
 0x3de8,0x0210, 0x3f4f,0x00b0, 0x3e9c,0x0160

566 
DCW
 0x3d9a,0x025b, 0x3f36,0x00c9, 0x3e69,0x0192

567 
DCW
 0x3d4c,0x02a6, 0x3f1c,0x00e2, 0x3e35,0x01c4

568 
DCW
 0x3cfd,0x02f2, 0x3f03,0x00fb, 0x3e02,0x01f7

569 
DCW
 0x3cae,0x033d, 0x3ee9,0x0114, 0x3dce,0x0229

570 
DCW
 0x3c5f,0x0388, 0x3ed0,0x012e, 0x3d9a,0x025b

571 
DCW
 0x3c0f,0x03d4, 0x3eb6,0x0147, 0x3d66,0x028d

572 
DCW
 0x3bbf,0x041f, 0x3e9c,0x0160, 0x3d31,0x02c0

573 
DCW
 0x3b6f,0x046a, 0x3e83,0x0179, 0x3cfd,0x02f2

574 
DCW
 0x3b1e,0x04b5, 0x3e69,0x0192, 0x3cc8,0x0324

575 
DCW
 0x3acd,0x0500, 0x3e4f,0x01ab, 0x3c94,0x0356

576 
DCW
 0x3a7c,0x054c, 0x3e35,0x01c4, 0x3c5f,0x0388

577 
DCW
 0x3a2b,0x0597, 0x3e1c,0x01dd, 0x3c2a,0x03bb

578 
DCW
 0x39d9,0x05e2, 0x3e02,0x01f7, 0x3bf4,0x03ed

579 
DCW
 0x3987,0x062d, 0x3de8,0x0210, 0x3bbf,0x041f

580 
DCW
 0x3934,0x0678, 0x3dce,0x0229, 0x3b8a,0x0451

581 
DCW
 0x38e1,0x06c3, 0x3db4,0x0242, 0x3b54,0x0483

582 
DCW
 0x388e,0x070e, 0x3d9a,0x025b, 0x3b1e,0x04b5

583 
DCW
 0x383b,0x0759, 0x3d80,0x0274, 0x3ae8,0x04e7

584 
DCW
 0x37e7,0x07a4, 0x3d66,0x028d, 0x3ab2,0x051a

585 
DCW
 0x3793,0x07ef, 0x3d4c,0x02a6, 0x3a7c,0x054c

586 
DCW
 0x373f,0x0839, 0x3d31,0x02c0, 0x3a46,0x057e

587 
DCW
 0x36ea,0x0884, 0x3d17,0x02d9, 0x3a0f,0x05b0

588 
DCW
 0x3695,0x08cf, 0x3cfd,0x02f2, 0x39d9,0x05e2

589 
DCW
 0x3640,0x0919, 0x3ce3,0x030b, 0x39a2,0x0614

590 
DCW
 0x35eb,0x0964, 0x3cc8,0x0324, 0x396b,0x0646

591 
DCW
 0x3595,0x09af, 0x3cae,0x033d, 0x3934,0x0678

592 
DCW
 0x353f,0x09f9, 0x3c94,0x0356, 0x38fd,0x06aa

593 
DCW
 0x34e8,0x0a44, 0x3c79,0x036f, 0x38c6,0x06dc

594 
DCW
 0x3492,0x0a8e, 0x3c5f,0x0388, 0x388e,0x070e

595 
DCW
 0x343b,0x0ad8, 0x3c44,0x03a1, 0x3857,0x0740

596 
DCW
 0x33e4,0x0b23, 0x3c2a,0x03bb, 0x381f,0x0772

597 
DCW
 0x338c,0x0b6d, 0x3c0f,0x03d4, 0x37e7,0x07a4

598 
DCW
 0x3334,0x0bb7, 0x3bf4,0x03ed, 0x37af,0x07d6

599 
DCW
 0x32dc,0x0c01, 0x3bda,0x0406, 0x3777,0x0807

600 
DCW
 0x3284,0x0c4b, 0x3bbf,0x041f, 0x373f,0x0839

601 
DCW
 0x322b,0x0c95, 0x3ba4,0x0438, 0x3706,0x086b

602 
DCW
 0x31d2,0x0cdf, 0x3b8a,0x0451, 0x36ce,0x089d

603 
DCW
 0x3179,0x0d29, 0x3b6f,0x046a, 0x3695,0x08cf

604 
DCW
 0x3120,0x0d72, 0x3b54,0x0483, 0x365d,0x0901

605 
DCW
 0x30c6,0x0dbc, 0x3b39,0x049c, 0x3624,0x0932

606 
DCW
 0x306c,0x0e06, 0x3b1e,0x04b5, 0x35eb,0x0964

607 
DCW
 0x3012,0x0e4f, 0x3b03,0x04ce, 0x35b1,0x0996

608 
DCW
 0x2fb7,0x0e99, 0x3ae8,0x04e7, 0x3578,0x09c7

609 
DCW
 0x2f5d,0x0ee2, 0x3acd,0x0500, 0x353f,0x09f9

610 
DCW
 0x2f02,0x0f2b, 0x3ab2,0x051a, 0x3505,0x0a2b

611 
DCW
 0x2ea6,0x0f75, 0x3a97,0x0533, 0x34cc,0x0a5c

612 
DCW
 0x2e4b,0x0fbe, 0x3a7c,0x054c, 0x3492,0x0a8e

613 
DCW
 0x2def,0x1007, 0x3a61,0x0565, 0x3458,0x0ac0

614 
DCW
 0x2d93,0x1050, 0x3a46,0x057e, 0x341e,0x0af1

615 
DCW
 0x2d37,0x1099, 0x3a2b,0x0597, 0x33e4,0x0b23

616 
DCW
 0x2cda,0x10e1, 0x3a0f,0x05b0, 0x33a9,0x0b54

617 
DCW
 0x2c7e,0x112a, 0x39f4,0x05c9, 0x336f,0x0b85

618 
DCW
 0x2c21,0x1173, 0x39d9,0x05e2, 0x3334,0x0bb7

619 
DCW
 0x2bc4,0x11bb, 0x39bd,0x05fb, 0x32fa,0x0be8

620 
DCW
 0x2b66,0x1204, 0x39a2,0x0614, 0x32bf,0x0c1a

621 
DCW
 0x2b08,0x124c, 0x3987,0x062d, 0x3284,0x0c4b

622 
DCW
 0x2aaa,0x1294, 0x396b,0x0646, 0x3249,0x0c7c

623 
DCW
 0x2a4c,0x12dc, 0x3950,0x065f, 0x320e,0x0cae

624 
DCW
 0x29ee,0x1324, 0x3934,0x0678, 0x31d2,0x0cdf

625 
DCW
 0x298f,0x136c, 0x3919,0x0691, 0x3197,0x0d10

626 
DCW
 0x2931,0x13b4, 0x38fd,0x06aa, 0x315b,0x0d41

627 
DCW
 0x28d1,0x13fb, 0x38e1,0x06c3, 0x3120,0x0d72

628 
DCW
 0x2872,0x1443, 0x38c6,0x06dc, 0x30e4,0x0da4

629 
DCW
 0x2813,0x148b, 0x38aa,0x06f5, 0x30a8,0x0dd5

630 
DCW
 0x27b3,0x14d2, 0x388e,0x070e, 0x306c,0x0e06

631 
DCW
 0x2753,0x1519, 0x3873,0x0727, 0x3030,0x0e37

632 
DCW
 0x26f3,0x1560, 0x3857,0x0740, 0x2ff4,0x0e68

633 
DCW
 0x2693,0x15a7, 0x383b,0x0759, 0x2fb7,0x0e99

634 
DCW
 0x2632,0x15ee, 0x381f,0x0772, 0x2f7b,0x0eca

635 
DCW
 0x25d1,0x1635, 0x3803,0x078b, 0x2f3e,0x0efb

636 
DCW
 0x2570,0x167c, 0x37e7,0x07a4, 0x2f02,0x0f2b

637 
DCW
 0x250f,0x16c2, 0x37cb,0x07bd, 0x2ec5,0x0f5c

638 
DCW
 0x24ae,0x1709, 0x37af,0x07d6, 0x2e88,0x0f8d

639 
DCW
 0x244c,0x174f, 0x3793,0x07ef, 0x2e4b,0x0fbe

640 
DCW
 0x23ea,0x1795, 0x3777,0x0807, 0x2e0e,0x0fee

641 
DCW
 0x2388,0x17db, 0x375b,0x0820, 0x2dd1,0x101f

642 
DCW
 0x2326,0x1821, 0x373f,0x0839, 0x2d93,0x1050

643 
DCW
 0x22c4,0x1867, 0x3723,0x0852, 0x2d56,0x1080

644 
DCW
 0x2261,0x18ac, 0x3706,0x086b, 0x2d18,0x10b1

645 
DCW
 0x21ff,0x18f2, 0x36ea,0x0884, 0x2cda,0x10e1

646 
DCW
 0x219c,0x1937, 0x36ce,0x089d, 0x2c9d,0x1112

647 
DCW
 0x2138,0x197c, 0x36b2,0x08b6, 0x2c5f,0x1142

648 
DCW
 0x20d5,0x19c1, 0x3695,0x08cf, 0x2c21,0x1173

649 
DCW
 0x2072,0x1a06, 0x3679,0x08e8, 0x2be3,0x11a3

650 
DCW
 0x200e,0x1a4b, 0x365d,0x0901, 0x2ba4,0x11d3

651 
DCW
 0x1faa,0x1a90, 0x3640,0x0919, 0x2b66,0x1204

652 
DCW
 0x1f46,0x1ad4, 0x3624,0x0932, 0x2b28,0x1234

653 
DCW
 0x1ee2,0x1b19, 0x3607,0x094b, 0x2ae9,0x1264

654 
DCW
 0x1e7e,0x1b5d, 0x35eb,0x0964, 0x2aaa,0x1294

655 
DCW
 0x1e19,0x1ba1, 0x35ce,0x097d, 0x2a6c,0x12c4

656 
DCW
 0x1db5,0x1be5, 0x35b1,0x0996, 0x2a2d,0x12f4

657 
DCW
 0x1d50,0x1c29, 0x3595,0x09af, 0x29ee,0x1324

658 
DCW
 0x1ceb,0x1c6c, 0x3578,0x09c7, 0x29af,0x1354

659 
DCW
 0x1c86,0x1cb0, 0x355b,0x09e0, 0x2970,0x1384

660 
DCW
 0x1c21,0x1cf3, 0x353f,0x09f9, 0x2931,0x13b4

661 
DCW
 0x1bbb,0x1d36, 0x3522,0x0a12, 0x28f1,0x13e4

662 
DCW
 0x1b56,0x1d79, 0x3505,0x0a2b, 0x28b2,0x1413

663 
DCW
 0x1af0,0x1dbc, 0x34e8,0x0a44, 0x2872,0x1443

664 
DCW
 0x1a8a,0x1dff, 0x34cc,0x0a5c, 0x2833,0x1473

665 
DCW
 0x1a24,0x1e42, 0x34af,0x0a75, 0x27f3,0x14a2

666 
DCW
 0x19be,0x1e84, 0x3492,0x0a8e, 0x27b3,0x14d2

667 
DCW
 0x1958,0x1ec6, 0x3475,0x0aa7, 0x2773,0x1501

668 
DCW
 0x18f1,0x1f08, 0x3458,0x0ac0, 0x2733,0x1531

669 
DCW
 0x188b,0x1f4a, 0x343b,0x0ad8, 0x26f3,0x1560

670 
DCW
 0x1824,0x1f8c, 0x341e,0x0af1, 0x26b3,0x1590

671 
DCW
 0x17bd,0x1fcd, 0x3401,0x0b0a, 0x2672,0x15bf

672 
DCW
 0x1756,0x200f, 0x33e4,0x0b23, 0x2632,0x15ee

673 
DCW
 0x16ef,0x2050, 0x33c6,0x0b3b, 0x25f1,0x161d

674 
DCW
 0x1688,0x2091, 0x33a9,0x0b54, 0x25b1,0x164c

675 
DCW
 0x1620,0x20d1, 0x338c,0x0b6d, 0x2570,0x167c

676 
DCW
 0x15b9,0x2112, 0x336f,0x0b85, 0x252f,0x16ab

677 
DCW
 0x1551,0x2153, 0x3352,0x0b9e, 0x24ef,0x16da

678 
DCW
 0x14ea,0x2193, 0x3334,0x0bb7, 0x24ae,0x1709

679 
DCW
 0x1482,0x21d3, 0x3317,0x0bd0, 0x246d,0x1737

680 
DCW
 0x141a,0x2213, 0x32fa,0x0be8, 0x242b,0x1766

681 
DCW
 0x13b2,0x2253, 0x32dc,0x0c01, 0x23ea,0x1795

682 
DCW
 0x134a,0x2292, 0x32bf,0x0c1a, 0x23a9,0x17c4

683 
DCW
 0x12e2,0x22d2, 0x32a1,0x0c32, 0x2368,0x17f2

684 
DCW
 0x1279,0x2311, 0x3284,0x0c4b, 0x2326,0x1821

685 
DCW
 0x1211,0x2350, 0x3266,0x0c64, 0x22e5,0x184f

686 
DCW
 0x11a8,0x238e, 0x3249,0x0c7c, 0x22a3,0x187e

687 
DCW
 0x1140,0x23cd, 0x322b,0x0c95, 0x2261,0x18ac

688 
DCW
 0x10d7,0x240b, 0x320e,0x0cae, 0x221f,0x18db

689 
DCW
 0x106e,0x244a, 0x31f0,0x0cc6, 0x21de,0x1909

690 
DCW
 0x1005,0x2488, 0x31d2,0x0cdf, 0x219c,0x1937

691 
DCW
 0x0f9c,0x24c5, 0x31b5,0x0cf8, 0x215a,0x1965

692 
DCW
 0x0f33,0x2503, 0x3197,0x0d10, 0x2117,0x1993

693 
DCW
 0x0eca,0x2541, 0x3179,0x0d29, 0x20d5,0x19c1

694 
DCW
 0x0e61,0x257e, 0x315b,0x0d41, 0x2093,0x19ef

695 
DCW
 0x0df8,0x25bb, 0x313e,0x0d5a, 0x2051,0x1a1d

696 
DCW
 0x0d8e,0x25f8, 0x3120,0x0d72, 0x200e,0x1a4b

697 
DCW
 0x0d25,0x2634, 0x3102,0x0d8b, 0x1fcc,0x1a79

698 
DCW
 0x0cbb,0x2671, 0x30e4,0x0da4, 0x1f89,0x1aa7

699 
DCW
 0x0c52,0x26ad, 0x30c6,0x0dbc, 0x1f46,0x1ad4

700 
DCW
 0x0be8,0x26e9, 0x30a8,0x0dd5, 0x1f04,0x1b02

701 
DCW
 0x0b7e,0x2724, 0x308a,0x0ded, 0x1ec1,0x1b30

702 
DCW
 0x0b14,0x2760, 0x306c,0x0e06, 0x1e7e,0x1b5d

703 
DCW
 0x0aaa,0x279b, 0x304e,0x0e1e, 0x1e3b,0x1b8a

704 
DCW
 0x0a41,0x27d6, 0x3030,0x0e37, 0x1df8,0x1bb8

705 
DCW
 0x09d7,0x2811, 0x3012,0x0e4f, 0x1db5,0x1be5

706 
DCW
 0x096d,0x284c, 0x2ff4,0x0e68, 0x1d72,0x1c12

707 
DCW
 0x0902,0x2886, 0x2fd6,0x0e80, 0x1d2e,0x1c3f

708 
DCW
 0x0898,0x28c1, 0x2fb7,0x0e99, 0x1ceb,0x1c6c

709 
DCW
 0x082e,0x28fb, 0x2f99,0x0eb1, 0x1ca8,0x1c99

710 
DCW
 0x07c4,0x2935, 0x2f7b,0x0eca, 0x1c64,0x1cc6

711 
DCW
 0x075a,0x296e, 0x2f5d,0x0ee2, 0x1c21,0x1cf3

712 
DCW
 0x06ef,0x29a7, 0x2f3e,0x0efb, 0x1bdd,0x1d20

713 
DCW
 0x0685,0x29e1, 0x2f20,0x0f13, 0x1b99,0x1d4d

714 
DCW
 0x061b,0x2a1a, 0x2f02,0x0f2b, 0x1b56,0x1d79

715 
DCW
 0x05b0,0x2a52, 0x2ee3,0x0f44, 0x1b12,0x1da6

716 
DCW
 0x0546,0x2a8b, 0x2ec5,0x0f5c, 0x1ace,0x1dd3

717 
DCW
 0x04db,0x2ac3, 0x2ea6,0x0f75, 0x1a8a,0x1dff

718 
DCW
 0x0471,0x2afb, 0x2e88,0x0f8d, 0x1a46,0x1e2b

719 
DCW
 0x0406,0x2b33, 0x2e6a,0x0fa5, 0x1a02,0x1e58

720 
DCW
 0x039c,0x2b6a, 0x2e4b,0x0fbe, 0x19be,0x1e84

721 
DCW
 0x0331,0x2ba1, 0x2e2c,0x0fd6, 0x197a,0x1eb0

722 
DCW
 0x02c7,0x2bd8, 0x2e0e,0x0fee, 0x1935,0x1edc

723 
DCW
 0x025c,0x2c0f, 0x2def,0x1007, 0x18f1,0x1f08

724 
DCW
 0x01f2,0x2c46, 0x2dd1,0x101f, 0x18ad,0x1f34

725 
DCW
 0x0187,0x2c7c, 0x2db2,0x1037, 0x1868,0x1f60

726 
DCW
 0x011c,0x2cb2, 0x2d93,0x1050, 0x1824,0x1f8c

727 
DCW
 0x00b2,0x2ce8, 0x2d75,0x1068, 0x17df,0x1fb7

728 
DCW
 0x0047,0x2d1e, 0x2d56,0x1080, 0x179b,0x1fe3

729 
DCW
 0xffdc,0x2d53, 0x2d37,0x1099, 0x1756,0x200f

730 
DCW
 0xff72,0x2d88, 0x2d18,0x10b1, 0x1711,0x203a

731 
DCW
 0xff07,0x2dbd, 0x2cf9,0x10c9, 0x16cd,0x2065

732 
DCW
 0xfe9d,0x2df2, 0x2cda,0x10e1, 0x1688,0x2091

733 
DCW
 0xfe32,0x2e26, 0x2cbc,0x10fa, 0x1643,0x20bc

734 
DCW
 0xfdc7,0x2e5a, 0x2c9d,0x1112, 0x15fe,0x20e7

735 
DCW
 0xfd5d,0x2e8e, 0x2c7e,0x112a, 0x15b9,0x2112

736 
DCW
 0xfcf2,0x2ec2, 0x2c5f,0x1142, 0x1574,0x213d

737 
DCW
 0xfc88,0x2ef5, 0x2c40,0x115a, 0x152f,0x2168

738 
DCW
 0xfc1d,0x2f28, 0x2c21,0x1173, 0x14ea,0x2193

739 
DCW
 0xfbb3,0x2f5b, 0x2c02,0x118b, 0x14a5,0x21be

740 
DCW
 0xfb48,0x2f8d, 0x2be3,0x11a3, 0x145f,0x21e8

741 
DCW
 0xfade,0x2fc0, 0x2bc4,0x11bb, 0x141a,0x2213

742 
DCW
 0xfa73,0x2ff2, 0x2ba4,0x11d3, 0x13d5,0x223d

743 
DCW
 0xfa09,0x3024, 0x2b85,0x11eb, 0x138f,0x2268

744 
DCW
 0xf99e,0x3055, 0x2b66,0x1204, 0x134a,0x2292

745 
DCW
 0xf934,0x3087, 0x2b47,0x121c, 0x1304,0x22bc

746 
DCW
 0xf8ca,0x30b8, 0x2b28,0x1234, 0x12bf,0x22e7

747 
DCW
 0xf85f,0x30e8, 0x2b08,0x124c, 0x1279,0x2311

748 
DCW
 0xf7f5,0x3119, 0x2ae9,0x1264, 0x1234,0x233b

749 
DCW
 0xf78b,0x3149, 0x2aca,0x127c, 0x11ee,0x2365

750 
DCW
 0xf721,0x3179, 0x2aaa,0x1294, 0x11a8,0x238e

751 
DCW
 0xf6b7,0x31a9, 0x2a8b,0x12ac, 0x1163,0x23b8

752 
DCW
 0xf64d,0x31d8, 0x2a6c,0x12c4, 0x111d,0x23e2

753 
DCW
 0xf5e3,0x3207, 0x2a4c,0x12dc, 0x10d7,0x240b

754 
DCW
 0xf579,0x3236, 0x2a2d,0x12f4, 0x1091,0x2435

755 
DCW
 0xf50f,0x3265, 0x2a0d,0x130c, 0x104b,0x245e

756 
DCW
 0xf4a5,0x3293, 0x29ee,0x1324, 0x1005,0x2488

757 
DCW
 0xf43b,0x32c1, 0x29ce,0x133c, 0x0fbf,0x24b1

758 
DCW
 0xf3d2,0x32ef, 0x29af,0x1354, 0x0f79,0x24da

759 
DCW
 0xf368,0x331d, 0x298f,0x136c, 0x0f33,0x2503

760 
DCW
 0xf2ff,0x334a, 0x2970,0x1384, 0x0eed,0x252c

761 
DCW
 0xf295,0x3377, 0x2950,0x139c, 0x0ea7,0x2555

762 
DCW
 0xf22c,0x33a3, 0x2931,0x13b4, 0x0e61,0x257e

763 
DCW
 0xf1c2,0x33d0, 0x2911,0x13cc, 0x0e1b,0x25a6

764 
DCW
 0xf159,0x33fc, 0x28f1,0x13e4, 0x0dd4,0x25cf

765 
DCW
 0xf0f0,0x3428, 0x28d1,0x13fb, 0x0d8e,0x25f8

766 
DCW
 0xf087,0x3453, 0x28b2,0x1413, 0x0d48,0x2620

767 
DCW
 0xf01e,0x347f, 0x2892,0x142b, 0x0d01,0x2648

768 
DCW
 0xefb5,0x34aa, 0x2872,0x1443, 0x0cbb,0x2671

769 
DCW
 0xef4c,0x34d4, 0x2852,0x145b, 0x0c75,0x2699

770 
DCW
 0xeee3,0x34ff, 0x2833,0x1473, 0x0c2e,0x26c1

771 
DCW
 0xee7b,0x3529, 0x2813,0x148b, 0x0be8,0x26e9

772 
DCW
 0xee12,0x3553, 0x27f3,0x14a2, 0x0ba1,0x2711

773 
DCW
 0xeda9,0x357c, 0x27d3,0x14ba, 0x0b5b,0x2738

774 
DCW
 0xed41,0x35a5, 0x27b3,0x14d2, 0x0b14,0x2760

775 
DCW
 0xecd9,0x35ce, 0x2793,0x14ea, 0x0ace,0x2788

776 
DCW
 0xec71,0x35f7, 0x2773,0x1501, 0x0a87,0x27af

777 
DCW
 0xec09,0x3620, 0x2753,0x1519, 0x0a41,0x27d6

778 
DCW
 0xeba1,0x3648, 0x2733,0x1531, 0x09fa,0x27fe

779 
DCW
 0xeb39,0x366f, 0x2713,0x1549, 0x09b3,0x2825

780 
DCW
 0xead1,0x3697, 0x26f3,0x1560, 0x096d,0x284c

781 
DCW
 0xea6a,0x36be, 0x26d3,0x1578, 0x0926,0x2873

782 
DCW
 0xea02,0x36e5, 0x26b3,0x1590, 0x08df,0x289a

783 
DCW
 0xe99b,0x370c, 0x2693,0x15a7, 0x0898,0x28c1

784 
DCW
 0xe933,0x3732, 0x2672,0x15bf, 0x0852,0x28e7

785 
DCW
 0xe8cc,0x3758, 0x2652,0x15d7, 0x080b,0x290e

786 
DCW
 0xe865,0x377e, 0x2632,0x15ee, 0x07c4,0x2935

787 
DCW
 0xe7fe,0x37a3, 0x2612,0x1606, 0x077d,0x295b

788 
DCW
 0xe798,0x37c8, 0x25f1,0x161d, 0x0736,0x2981

789 
DCW
 0xe731,0x37ed, 0x25d1,0x1635, 0x06ef,0x29a7

790 
DCW
 0xe6cb,0x3812, 0x25b1,0x164c, 0x06a9,0x29ce

791 
DCW
 0xe664,0x3836, 0x2591,0x1664, 0x0662,0x29f4

792 
DCW
 0xe5fe,0x385a, 0x2570,0x167c, 0x061b,0x2a1a

793 
DCW
 0xe598,0x387d, 0x2550,0x1693, 0x05d4,0x2a3f

794 
DCW
 0xe532,0x38a1, 0x252f,0x16ab, 0x058d,0x2a65

795 
DCW
 0xe4cc,0x38c3, 0x250f,0x16c2, 0x0546,0x2a8b

796 
DCW
 0xe467,0x38e6, 0x24ef,0x16da, 0x04ff,0x2ab0

797 
DCW
 0xe401,0x3909, 0x24ce,0x16f1, 0x04b8,0x2ad6

798 
DCW
 0xe39c,0x392b, 0x24ae,0x1709, 0x0471,0x2afb

799 
DCW
 0xe337,0x394c, 0x248d,0x1720, 0x042a,0x2b20

800 
DCW
 0xe2d2,0x396e, 0x246d,0x1737, 0x03e3,0x2b45

801 
DCW
 0xe26d,0x398f, 0x244c,0x174f, 0x039c,0x2b6a

802 
DCW
 0xe208,0x39b0, 0x242b,0x1766, 0x0355,0x2b8f

803 
DCW
 0xe1a4,0x39d0, 0x240b,0x177e, 0x030e,0x2bb4

804 
DCW
 0xe13f,0x39f0, 0x23ea,0x1795, 0x02c7,0x2bd8

805 
DCW
 0xe0db,0x3a10, 0x23ca,0x17ac, 0x0280,0x2bfd

806 
DCW
 0xe077,0x3a30, 0x23a9,0x17c4, 0x0239,0x2c21

807 
DCW
 0xe013,0x3a4f, 0x2388,0x17db, 0x01f2,0x2c46

808 
DCW
 0xdfaf,0x3a6e, 0x2368,0x17f2, 0x01aa,0x2c6a

809 
DCW
 0xdf4c,0x3a8d, 0x2347,0x180a, 0x0163,0x2c8e

810 
DCW
 0xdee9,0x3aab, 0x2326,0x1821, 0x011c,0x2cb2

811 
DCW
 0xde85,0x3ac9, 0x2305,0x1838, 0x00d5,0x2cd6

812 
DCW
 0xde22,0x3ae6, 0x22e5,0x184f, 0x008e,0x2cfa

813 
DCW
 0xddc0,0x3b04, 0x22c4,0x1867, 0x0047,0x2d1e

814 
DCW
 0xdd5d,0x3b21, 0x22a3,0x187e, 0x0000,0x2d41

815 
DCW
 0xdcfb,0x3b3e, 0x2282,0x1895, 0xffb9,0x2d65

816 
DCW
 0xdc98,0x3b5a, 0x2261,0x18ac, 0xff72,0x2d88

817 
DCW
 0xdc36,0x3b76, 0x2240,0x18c3, 0xff2b,0x2dab

818 
DCW
 0xdbd5,0x3b92, 0x221f,0x18db, 0xfee4,0x2dcf

819 
DCW
 0xdb73,0x3bad, 0x21ff,0x18f2, 0xfe9d,0x2df2

820 
DCW
 0xdb11,0x3bc8, 0x21de,0x1909, 0xfe56,0x2e15

821 
DCW
 0xdab0,0x3be3, 0x21bd,0x1920, 0xfe0e,0x2e37

822 
DCW
 0xda4f,0x3bfd, 0x219c,0x1937, 0xfdc7,0x2e5a

823 
DCW
 0xd9ee,0x3c17, 0x217b,0x194e, 0xfd80,0x2e7d

824 
DCW
 0xd98e,0x3c31, 0x215a,0x1965, 0xfd39,0x2e9f

825 
DCW
 0xd92d,0x3c4b, 0x2138,0x197c, 0xfcf2,0x2ec2

826 
DCW
 0xd8cd,0x3c64, 0x2117,0x1993, 0xfcab,0x2ee4

827 
DCW
 0xd86d,0x3c7d, 0x20f6,0x19aa, 0xfc64,0x2f06

828 
DCW
 0xd80d,0x3c95, 0x20d5,0x19c1, 0xfc1d,0x2f28

829 
DCW
 0xd7ae,0x3cad, 0x20b4,0x19d8, 0xfbd6,0x2f4a

830 
DCW
 0xd74e,0x3cc5, 0x2093,0x19ef, 0xfb8f,0x2f6c

831 
DCW
 0xd6ef,0x3cdd, 0x2072,0x1a06, 0xfb48,0x2f8d

832 
DCW
 0xd690,0x3cf4, 0x2051,0x1a1d, 0xfb01,0x2faf

833 
DCW
 0xd632,0x3d0b, 0x202f,0x1a34, 0xfaba,0x2fd0

834 
DCW
 0xd5d3,0x3d21, 0x200e,0x1a4b, 0xfa73,0x2ff2

835 
DCW
 0xd575,0x3d37, 0x1fed,0x1a62, 0xfa2c,0x3013

836 
DCW
 0xd517,0x3d4d, 0x1fcc,0x1a79, 0xf9e5,0x3034

837 
DCW
 0xd4b9,0x3d63, 0x1faa,0x1a90, 0xf99e,0x3055

838 
DCW
 0xd45c,0x3d78, 0x1f89,0x1aa7, 0xf957,0x3076

839 
DCW
 0xd3fe,0x3d8d, 0x1f68,0x1abe, 0xf911,0x3097

840 
DCW
 0xd3a1,0x3da1, 0x1f46,0x1ad4, 0xf8ca,0x30b8

841 
DCW
 0xd344,0x3db5, 0x1f25,0x1aeb, 0xf883,0x30d8

842 
DCW
 0xd2e8,0x3dc9, 0x1f04,0x1b02, 0xf83c,0x30f9

843 
DCW
 0xd28b,0x3ddd, 0x1ee2,0x1b19, 0xf7f5,0x3119

844 
DCW
 0xd22f,0x3df0, 0x1ec1,0x1b30, 0xf7ae,0x3139

845 
DCW
 0xd1d4,0x3e03, 0x1e9f,0x1b46, 0xf768,0x3159

846 
DCW
 0xd178,0x3e15, 0x1e7e,0x1b5d, 0xf721,0x3179

847 
DCW
 0xd11d,0x3e27, 0x1e5c,0x1b74, 0xf6da,0x3199

848 
DCW
 0xd0c2,0x3e39, 0x1e3b,0x1b8a, 0xf693,0x31b9

849 
DCW
 0xd067,0x3e4a, 0x1e19,0x1ba1, 0xf64d,0x31d8

850 
DCW
 0xd00c,0x3e5c, 0x1df8,0x1bb8, 0xf606,0x31f8

851 
DCW
 0xcfb2,0x3e6c, 0x1dd6,0x1bce, 0xf5bf,0x3217

852 
DCW
 0xcf58,0x3e7d, 0x1db5,0x1be5, 0xf579,0x3236

853 
DCW
 0xcefe,0x3e8d, 0x1d93,0x1bfc, 0xf532,0x3255

854 
DCW
 0xcea5,0x3e9d, 0x1d72,0x1c12, 0xf4ec,0x3274

855 
DCW
 0xce4b,0x3eac, 0x1d50,0x1c29, 0xf4a5,0x3293

856 
DCW
 0xcdf2,0x3ebb, 0x1d2e,0x1c3f, 0xf45f,0x32b2

857 
DCW
 0xcd9a,0x3eca, 0x1d0d,0x1c56, 0xf418,0x32d0

858 
DCW
 0xcd41,0x3ed8, 0x1ceb,0x1c6c, 0xf3d2,0x32ef

859 
DCW
 0xcce9,0x3ee7, 0x1cc9,0x1c83, 0xf38b,0x330d

860 
DCW
 0xcc91,0x3ef4, 0x1ca8,0x1c99, 0xf345,0x332c

861 
DCW
 0xcc3a,0x3f02, 0x1c86,0x1cb0, 0xf2ff,0x334a

862 
DCW
 0xcbe2,0x3f0f, 0x1c64,0x1cc6, 0xf2b8,0x3368

863 
DCW
 0xcb8b,0x3f1c, 0x1c42,0x1cdd, 0xf272,0x3386

864 
DCW
 0xcb34,0x3f28, 0x1c21,0x1cf3, 0xf22c,0x33a3

865 
DCW
 0xcade,0x3f34, 0x1bff,0x1d0a, 0xf1e5,0x33c1

866 
DCW
 0xca88,0x3f40, 0x1bdd,0x1d20, 0xf19f,0x33df

867 
DCW
 0xca32,0x3f4b, 0x1bbb,0x1d36, 0xf159,0x33fc

868 
DCW
 0xc9dc,0x3f56, 0x1b99,0x1d4d, 0xf113,0x3419

869 
DCW
 0xc987,0x3f61, 0x1b77,0x1d63, 0xf0cd,0x3436

870 
DCW
 0xc932,0x3f6b, 0x1b56,0x1d79, 0xf087,0x3453

871 
DCW
 0xc8dd,0x3f75, 0x1b34,0x1d90, 0xf041,0x3470

872 
DCW
 0xc889,0x3f7f, 0x1b12,0x1da6, 0xeffb,0x348d

873 
DCW
 0xc835,0x3f88, 0x1af0,0x1dbc, 0xefb5,0x34aa

874 
DCW
 0xc7e1,0x3f91, 0x1ace,0x1dd3, 0xef6f,0x34c6

875 
DCW
 0xc78d,0x3f99, 0x1aac,0x1de9, 0xef29,0x34e2

876 
DCW
 0xc73a,0x3fa2, 0x1a8a,0x1dff, 0xeee3,0x34ff

877 
DCW
 0xc6e7,0x3faa, 0x1a68,0x1e15, 0xee9d,0x351b

878 
DCW
 0xc695,0x3fb1, 0x1a46,0x1e2b, 0xee58,0x3537

879 
DCW
 0xc643,0x3fb8, 0x1a24,0x1e42, 0xee12,0x3553

880 
DCW
 0xc5f1,0x3fbf, 0x1a02,0x1e58, 0xedcc,0x356e

881 
DCW
 0xc59f,0x3fc6, 0x19e0,0x1e6e, 0xed87,0x358a

882 
DCW
 0xc54e,0x3fcc, 0x19be,0x1e84, 0xed41,0x35a5

883 
DCW
 0xc4fd,0x3fd2, 0x199c,0x1e9a, 0xecfc,0x35c1

884 
DCW
 0xc4ac,0x3fd7, 0x197a,0x1eb0, 0xecb6,0x35dc

885 
DCW
 0xc45c,0x3fdc, 0x1958,0x1ec6, 0xec71,0x35f7

886 
DCW
 0xc40c,0x3fe1, 0x1935,0x1edc, 0xec2b,0x3612

887 
DCW
 0xc3bc,0x3fe6, 0x1913,0x1ef2, 0xebe6,0x362d

888 
DCW
 0xc36c,0x3fea, 0x18f1,0x1f08, 0xeba1,0x3648

889 
DCW
 0xc31d,0x3fed, 0x18cf,0x1f1e, 0xeb5b,0x3662

890 
DCW
 0xc2cf,0x3ff1, 0x18ad,0x1f34, 0xeb16,0x367d

891 
DCW
 0xc280,0x3ff4, 0x188b,0x1f4a, 0xead1,0x3697

892 
DCW
 0xc232,0x3ff7, 0x1868,0x1f60, 0xea8c,0x36b1

893 
DCW
 0xc1e4,0x3ff9, 0x1846,0x1f76, 0xea47,0x36cb

894 
DCW
 0xc197,0x3ffb, 0x1824,0x1f8c, 0xea02,0x36e5

895 
DCW
 0xc14a,0x3ffd, 0x1802,0x1fa2, 0xe9bd,0x36ff

896 
DCW
 0xc0fd,0x3ffe, 0x17df,0x1fb7, 0xe978,0x3718

897 
DCW
 0xc0b1,0x3fff, 0x17bd,0x1fcd, 0xe933,0x3732

898 
DCW
 0xc065,0x4000, 0x179b,0x1fe3, 0xe8ef,0x374b

899 
DCW
 0xc019,0x4000, 0x1778,0x1ff9, 0xe8aa,0x3765

900 
DCW
 0xbfce,0x4000, 0x1756,0x200f, 0xe865,0x377e

901 
DCW
 0xbf83,0x4000, 0x1734,0x2024, 0xe821,0x3797

902 
DCW
 0xbf38,0x3fff, 0x1711,0x203a, 0xe7dc,0x37b0

903 
DCW
 0xbeee,0x3ffe, 0x16ef,0x2050, 0xe798,0x37c8

904 
DCW
 0xbea4,0x3ffc, 0x16cd,0x2065, 0xe753,0x37e1

905 
DCW
 0xbe5a,0x3ffa, 0x16aa,0x207b, 0xe70f,0x37f9

906 
DCW
 0xbe11,0x3ff8, 0x1688,0x2091, 0xe6cb,0x3812

907 
DCW
 0xbdc8,0x3ff6, 0x1665,0x20a6, 0xe686,0x382a

908 
DCW
 0xbd80,0x3ff3, 0x1643,0x20bc, 0xe642,0x3842

909 
DCW
 0xbd38,0x3ff0, 0x1620,0x20d1, 0xe5fe,0x385a

910 
DCW
 0xbcf0,0x3fec, 0x15fe,0x20e7, 0xe5ba,0x3871

911 
DCW
 0xbca8,0x3fe8, 0x15db,0x20fd, 0xe576,0x3889

912 
DCW
 0xbc61,0x3fe4, 0x15b9,0x2112, 0xe532,0x38a1

913 
DCW
 0xbc1b,0x3fe0, 0x1596,0x2128, 0xe4ee,0x38b8

914 
DCW
 0xbbd4,0x3fdb, 0x1574,0x213d, 0xe4aa,0x38cf

915 
DCW
 0xbb8e,0x3fd5, 0x1551,0x2153, 0xe467,0x38e6

916 
DCW
 0xbb49,0x3fd0, 0x152f,0x2168, 0xe423,0x38fd

917 
DCW
 0xbb04,0x3fca, 0x150c,0x217d, 0xe3df,0x3914

918 
DCW
 0xbabf,0x3fc4, 0x14ea,0x2193, 0xe39c,0x392b

919 
DCW
 0xba7a,0x3fbd, 0x14c7,0x21a8, 0xe358,0x3941

920 
DCW
 0xba36,0x3fb6, 0x14a5,0x21be, 0xe315,0x3958

921 
DCW
 0xb9f2,0x3faf, 0x1482,0x21d3, 0xe2d2,0x396e

922 
DCW
 0xb9af,0x3fa7, 0x145f,0x21e8, 0xe28e,0x3984

923 
DCW
 0xb96c,0x3f9f, 0x143d,0x21fe, 0xe24b,0x399a

924 
DCW
 0xb92a,0x3f97, 0x141a,0x2213, 0xe208,0x39b0

925 
DCW
 0xb8e7,0x3f8e, 0x13f7,0x2228, 0xe1c5,0x39c5

926 
DCW
 0xb8a6,0x3f85, 0x13d5,0x223d, 0xe182,0x39db

927 
DCW
 0xb864,0x3f7b, 0x13b2,0x2253, 0xe13f,0x39f0

928 
DCW
 0xb823,0x3f72, 0x138f,0x2268, 0xe0fc,0x3a06

929 
DCW
 0xb7e3,0x3f68, 0x136d,0x227d, 0xe0ba,0x3a1b

930 
DCW
 0xb7a2,0x3f5d, 0x134a,0x2292, 0xe077,0x3a30

931 
DCW
 0xb762,0x3f52, 0x1327,0x22a7, 0xe034,0x3a45

932 
DCW
 0xb723,0x3f47, 0x1304,0x22bc, 0xdff2,0x3a59

933 
DCW
 0xb6e4,0x3f3c, 0x12e2,0x22d2, 0xdfaf,0x3a6e

934 
DCW
 0xb6a5,0x3f30, 0x12bf,0x22e7, 0xdf6d,0x3a82

935 
DCW
 0xb667,0x3f24, 0x129c,0x22fc, 0xdf2b,0x3a97

936 
DCW
 0xb629,0x3f17, 0x1279,0x2311, 0xdee9,0x3aab

937 
DCW
 0xb5ec,0x3f0a, 0x1257,0x2326, 0xdea6,0x3abf

938 
DCW
 0xb5af,0x3efd, 0x1234,0x233b, 0xde64,0x3ad3

939 
DCW
 0xb572,0x3ef0, 0x1211,0x2350, 0xde22,0x3ae6

940 
DCW
 0xb536,0x3ee2, 0x11ee,0x2365, 0xdde1,0x3afa

941 
DCW
 0xb4fa,0x3ed4, 0x11cb,0x237a, 0xdd9f,0x3b0e

942 
DCW
 0xb4be,0x3ec5, 0x11a8,0x238e, 0xdd5d,0x3b21

943 
DCW
 0xb483,0x3eb6, 0x1185,0x23a3, 0xdd1b,0x3b34

944 
DCW
 0xb449,0x3ea7, 0x1163,0x23b8, 0xdcda,0x3b47

945 
DCW
 0xb40f,0x3e98, 0x1140,0x23cd, 0xdc98,0x3b5a

946 
DCW
 0xb3d5,0x3e88, 0x111d,0x23e2, 0xdc57,0x3b6d

947 
DCW
 0xb39b,0x3e77, 0x10fa,0x23f7, 0xdc16,0x3b7f

948 
DCW
 0xb362,0x3e67, 0x10d7,0x240b, 0xdbd5,0x3b92

949 
DCW
 0xb32a,0x3e56, 0x10b4,0x2420, 0xdb93,0x3ba4

950 
DCW
 0xb2f2,0x3e45, 0x1091,0x2435, 0xdb52,0x3bb6

951 
DCW
 0xb2ba,0x3e33, 0x106e,0x244a, 0xdb11,0x3bc8

952 
DCW
 0xb283,0x3e21, 0x104b,0x245e, 0xdad1,0x3bda

953 
DCW
 0xb24c,0x3e0f, 0x1028,0x2473, 0xda90,0x3bec

954 
DCW
 0xb215,0x3dfc, 0x1005,0x2488, 0xda4f,0x3bfd

955 
DCW
 0xb1df,0x3de9, 0x0fe2,0x249c, 0xda0f,0x3c0f

956 
DCW
 0xb1aa,0x3dd6, 0x0fbf,0x24b1, 0xd9ce,0x3c20

957 
DCW
 0xb174,0x3dc2, 0x0f9c,0x24c5, 0xd98e,0x3c31

958 
DCW
 0xb140,0x3daf, 0x0f79,0x24da, 0xd94d,0x3c42

959 
DCW
 0xb10b,0x3d9a, 0x0f56,0x24ef, 0xd90d,0x3c53

960 
DCW
 0xb0d7,0x3d86, 0x0f33,0x2503, 0xd8cd,0x3c64

961 
DCW
 0xb0a4,0x3d71, 0x0f10,0x2518, 0xd88d,0x3c74

962 
DCW
 0xb071,0x3d5b, 0x0eed,0x252c, 0xd84d,0x3c85

963 
DCW
 0xb03e,0x3d46, 0x0eca,0x2541, 0xd80d,0x3c95

964 
DCW
 0xb00c,0x3d30, 0x0ea7,0x2555, 0xd7cd,0x3ca5

965 
DCW
 0xafda,0x3d1a, 0x0e84,0x2569, 0xd78e,0x3cb5

966 
DCW
 0xafa9,0x3d03, 0x0e61,0x257e, 0xd74e,0x3cc5

967 
DCW
 0xaf78,0x3cec, 0x0e3e,0x2592, 0xd70f,0x3cd5

968 
DCW
 0xaf48,0x3cd5, 0x0e1b,0x25a6, 0xd6cf,0x3ce4

969 
DCW
 0xaf18,0x3cbd, 0x0df8,0x25bb, 0xd690,0x3cf4

970 
DCW
 0xaee8,0x3ca5, 0x0dd4,0x25cf, 0xd651,0x3d03

971 
DCW
 0xaeb9,0x3c8d, 0x0db1,0x25e3, 0xd612,0x3d12

972 
DCW
 0xae8a,0x3c74, 0x0d8e,0x25f8, 0xd5d3,0x3d21

973 
DCW
 0xae5c,0x3c5b, 0x0d6b,0x260c, 0xd594,0x3d30

974 
DCW
 0xae2e,0x3c42, 0x0d48,0x2620, 0xd556,0x3d3f

975 
DCW
 0xae01,0x3c29, 0x0d25,0x2634, 0xd517,0x3d4d

976 
DCW
 0xadd4,0x3c0f, 0x0d01,0x2648, 0xd4d8,0x3d5b

977 
DCW
 0xada7,0x3bf5, 0x0cde,0x265c, 0xd49a,0x3d6a

978 
DCW
 0xad7b,0x3bda, 0x0cbb,0x2671, 0xd45c,0x3d78

979 
DCW
 0xad50,0x3bbf, 0x0c98,0x2685, 0xd41d,0x3d86

980 
DCW
 0xad25,0x3ba4, 0x0c75,0x2699, 0xd3df,0x3d93

981 
DCW
 0xacfa,0x3b88, 0x0c52,0x26ad, 0xd3a1,0x3da1

982 
DCW
 0xacd0,0x3b6d, 0x0c2e,0x26c1, 0xd363,0x3daf

983 
DCW
 0xaca6,0x3b50, 0x0c0b,0x26d5, 0xd326,0x3dbc

984 
DCW
 0xac7d,0x3b34, 0x0be8,0x26e9, 0xd2e8,0x3dc9

985 
DCW
 0xac54,0x3b17, 0x0bc5,0x26fd, 0xd2aa,0x3dd6

986 
DCW
 0xac2b,0x3afa, 0x0ba1,0x2711, 0xd26d,0x3de3

987 
DCW
 0xac03,0x3add, 0x0b7e,0x2724, 0xd22f,0x3df0

988 
DCW
 0xabdc,0x3abf, 0x0b5b,0x2738, 0xd1f2,0x3dfc

989 
DCW
 0xabb5,0x3aa1, 0x0b38,0x274c, 0xd1b5,0x3e09

990 
DCW
 0xab8e,0x3a82, 0x0b14,0x2760, 0xd178,0x3e15

991 
DCW
 0xab68,0x3a64, 0x0af1,0x2774, 0xd13b,0x3e21

992 
DCW
 0xab42,0x3a45, 0x0ace,0x2788, 0xd0fe,0x3e2d

993 
DCW
 0xab1d,0x3a25, 0x0aaa,0x279b, 0xd0c2,0x3e39

994 
DCW
 0xaaf8,0x3a06, 0x0a87,0x27af, 0xd085,0x3e45

995 
DCW
 0xaad4,0x39e6, 0x0a64,0x27c3, 0xd049,0x3e50

996 
DCW
 0xaab0,0x39c5, 0x0a41,0x27d6, 0xd00c,0x3e5c

997 
DCW
 0xaa8d,0x39a5, 0x0a1d,0x27ea, 0xcfd0,0x3e67

998 
DCW
 0xaa6a,0x3984, 0x09fa,0x27fe, 0xcf94,0x3e72

999 
DCW
 0xaa47,0x3963, 0x09d7,0x2811, 0xcf58,0x3e7d

1000 
DCW
 0xaa25,0x3941, 0x09b3,0x2825, 0xcf1c,0x3e88

1001 
DCW
 0xaa04,0x391f, 0x0990,0x2838, 0xcee0,0x3e92

1002 
DCW
 0xa9e3,0x38fd, 0x096d,0x284c, 0xcea5,0x3e9d

1003 
DCW
 0xa9c2,0x38db, 0x0949,0x2860, 0xce69,0x3ea7

1004 
DCW
 0xa9a2,0x38b8, 0x0926,0x2873, 0xce2e,0x3eb1

1005 
DCW
 0xa982,0x3895, 0x0902,0x2886, 0xcdf2,0x3ebb

1006 
DCW
 0xa963,0x3871, 0x08df,0x289a, 0xcdb7,0x3ec5

1007 
DCW
 0xa945,0x384e, 0x08bc,0x28ad, 0xcd7c,0x3ecf

1008 
DCW
 0xa926,0x382a, 0x0898,0x28c1, 0xcd41,0x3ed8

1009 
DCW
 0xa908,0x3805, 0x0875,0x28d4, 0xcd06,0x3ee2

1010 
DCW
 0xa8eb,0x37e1, 0x0852,0x28e7, 0xcccc,0x3eeb

1011 
DCW
 0xa8ce,0x37bc, 0x082e,0x28fb, 0xcc91,0x3ef4

1012 
DCW
 0xa8b2,0x3797, 0x080b,0x290e, 0xcc57,0x3efd

1013 
DCW
 0xa896,0x3771, 0x07e7,0x2921, 0xcc1c,0x3f06

1014 
DCW
 0xa87b,0x374b, 0x07c4,0x2935, 0xcbe2,0x3f0f

1015 
DCW
 0xa860,0x3725, 0x07a1,0x2948, 0xcba8,0x3f17

1016 
DCW
 0xa845,0x36ff, 0x077d,0x295b, 0xcb6e,0x3f20

1017 
DCW
 0xa82b,0x36d8, 0x075a,0x296e, 0xcb34,0x3f28

1018 
DCW
 0xa812,0x36b1, 0x0736,0x2981, 0xcafb,0x3f30

1019 
DCW
 0xa7f9,0x368a, 0x0713,0x2994, 0xcac1,0x3f38

1020 
DCW
 0xa7e0,0x3662, 0x06ef,0x29a7, 0xca88,0x3f40

1021 
DCW
 0xa7c8,0x363a, 0x06cc,0x29bb, 0xca4f,0x3f47

1022 
DCW
 0xa7b1,0x3612, 0x06a9,0x29ce, 0xca15,0x3f4f

1023 
DCW
 0xa799,0x35ea, 0x0685,0x29e1, 0xc9dc,0x3f56

1024 
DCW
 0xa783,0x35c1, 0x0662,0x29f4, 0xc9a3,0x3f5d

1025 
DCW
 0xa76d,0x3598, 0x063e,0x2a07, 0xc96b,0x3f64

1026 
DCW
 0xa757,0x356e, 0x061b,0x2a1a, 0xc932,0x3f6b

1027 
DCW
 0xa742,0x3545, 0x05f7,0x2a2c, 0xc8fa,0x3f72

1028 
DCW
 0xa72d,0x351b, 0x05d4,0x2a3f, 0xc8c1,0x3f78

1029 
DCW
 0xa719,0x34f1, 0x05b0,0x2a52, 0xc889,0x3f7f

1030 
DCW
 0xa705,0x34c6, 0x058d,0x2a65, 0xc851,0x3f85

1031 
DCW
 0xa6f2,0x349b, 0x0569,0x2a78, 0xc819,0x3f8b

1032 
DCW
 0xa6df,0x3470, 0x0546,0x2a8b, 0xc7e1,0x3f91

1033 
DCW
 0xa6cd,0x3445, 0x0522,0x2a9d, 0xc7a9,0x3f97

1034 
DCW
 0xa6bb,0x3419, 0x04ff,0x2ab0, 0xc772,0x3f9c

1035 
DCW
 0xa6a9,0x33ed, 0x04db,0x2ac3, 0xc73a,0x3fa2

1036 
DCW
 0xa699,0x33c1, 0x04b8,0x2ad6, 0xc703,0x3fa7

1037 
DCW
 0xa688,0x3395, 0x0494,0x2ae8, 0xc6cc,0x3fac

1038 
DCW
 0xa678,0x3368, 0x0471,0x2afb, 0xc695,0x3fb1

1039 
DCW
 0xa669,0x333b, 0x044d,0x2b0d, 0xc65e,0x3fb6

1040 
DCW
 0xa65a,0x330d, 0x042a,0x2b20, 0xc627,0x3fbb

1041 
DCW
 0xa64c,0x32e0, 0x0406,0x2b33, 0xc5f1,0x3fbf

1042 
DCW
 0xa63e,0x32b2, 0x03e3,0x2b45, 0xc5ba,0x3fc4

1043 
DCW
 0xa630,0x3284, 0x03bf,0x2b58, 0xc584,0x3fc8

1044 
DCW
 0xa623,0x3255, 0x039c,0x2b6a, 0xc54e,0x3fcc

1045 
DCW
 0xa617,0x3227, 0x0378,0x2b7d, 0xc518,0x3fd0

1046 
DCW
 0xa60b,0x31f8, 0x0355,0x2b8f, 0xc4e2,0x3fd4

1047 
DCW
 0xa5ff,0x31c8, 0x0331,0x2ba1, 0xc4ac,0x3fd7

1048 
DCW
 0xa5f4,0x3199, 0x030e,0x2bb4, 0xc476,0x3fdb

1049 
DCW
 0xa5ea,0x3169, 0x02ea,0x2bc6, 0xc441,0x3fde

1050 
DCW
 0xa5e0,0x3139, 0x02c7,0x2bd8, 0xc40c,0x3fe1

1051 
DCW
 0xa5d6,0x3109, 0x02a3,0x2beb, 0xc3d6,0x3fe4

1052 
DCW
 0xa5cd,0x30d8, 0x0280,0x2bfd, 0xc3a1,0x3fe7

1053 
DCW
 0xa5c4,0x30a7, 0x025c,0x2c0f, 0xc36c,0x3fea

1054 
DCW
 0xa5bc,0x3076, 0x0239,0x2c21, 0xc338,0x3fec

1055 
DCW
 0xa5b5,0x3045, 0x0215,0x2c34, 0xc303,0x3fef

1056 
DCW
 0xa5ae,0x3013, 0x01f2,0x2c46, 0xc2cf,0x3ff1

1057 
DCW
 0xa5a7,0x2fe1, 0x01ce,0x2c58, 0xc29a,0x3ff3

1058 
DCW
 0xa5a1,0x2faf, 0x01aa,0x2c6a, 0xc266,0x3ff5

1059 
DCW
 0xa59b,0x2f7d, 0x0187,0x2c7c, 0xc232,0x3ff7

1060 
DCW
 0xa596,0x2f4a, 0x0163,0x2c8e, 0xc1fe,0x3ff8

1061 
DCW
 0xa591,0x2f17, 0x0140,0x2ca0, 0xc1cb,0x3ffa

1062 
DCW
 0xa58d,0x2ee4, 0x011c,0x2cb2, 0xc197,0x3ffb

1063 
DCW
 0xa58a,0x2eb0, 0x00f9,0x2cc4, 0xc164,0x3ffc

1064 
DCW
 0xa586,0x2e7d, 0x00d5,0x2cd6, 0xc130,0x3ffd

1065 
DCW
 0xa584,0x2e49, 0x00b2,0x2ce8, 0xc0fd,0x3ffe

1066 
DCW
 0xa581,0x2e15, 0x008e,0x2cfa, 0xc0ca,0x3fff

1067 
DCW
 0xa580,0x2de0, 0x006b,0x2d0c, 0xc097,0x3fff

1068 
DCW
 0xa57f,0x2dab, 0x0047,0x2d1e, 0xc065,0x4000

1069 
DCW
 0xa57e,0x2d76, 0x0024,0x2d2f, 0xc032,0x4000

1070 
DCW
 0xa57e,0x2d41, 0x0000,0x2d41, 0xc000,0x4000

1071 
DCW
 0xa57e,0x2d0c, 0xffdc,0x2d53, 0xbfce,0x4000

1072 
DCW
 0xa57f,0x2cd6, 0xffb9,0x2d65, 0xbf9c,0x4000

1073 
DCW
 0xa580,0x2ca0, 0xff95,0x2d76, 0xbf6a,0x3fff

1074 
DCW
 0xa581,0x2c6a, 0xff72,0x2d88, 0xbf38,0x3fff

1075 
DCW
 0xa584,0x2c34, 0xff4e,0x2d9a, 0xbf07,0x3ffe

1076 
DCW
 0xa586,0x2bfd, 0xff2b,0x2dab, 0xbed5,0x3ffd

1077 
DCW
 0xa58a,0x2bc6, 0xff07,0x2dbd, 0xbea4,0x3ffc

1078 
DCW
 0xa58d,0x2b8f, 0xfee4,0x2dcf, 0xbe73,0x3ffb

1079 
DCW
 0xa591,0x2b58, 0xfec0,0x2de0, 0xbe42,0x3ffa

1080 
DCW
 0xa596,0x2b20, 0xfe9d,0x2df2, 0xbe11,0x3ff8

1081 
DCW
 0xa59b,0x2ae8, 0xfe79,0x2e03, 0xbde1,0x3ff7

1082 
DCW
 0xa5a1,0x2ab0, 0xfe56,0x2e15, 0xbdb0,0x3ff5

1083 
DCW
 0xa5a7,0x2a78, 0xfe32,0x2e26, 0xbd80,0x3ff3

1084 
DCW
 0xa5ae,0x2a3f, 0xfe0e,0x2e37, 0xbd50,0x3ff1

1085 
DCW
 0xa5b5,0x2a07, 0xfdeb,0x2e49, 0xbd20,0x3fef

1086 
DCW
 0xa5bc,0x29ce, 0xfdc7,0x2e5a, 0xbcf0,0x3fec

1087 
DCW
 0xa5c4,0x2994, 0xfda4,0x2e6b, 0xbcc0,0x3fea

1088 
DCW
 0xa5cd,0x295b, 0xfd80,0x2e7d, 0xbc91,0x3fe7

1089 
DCW
 0xa5d6,0x2921, 0xfd5d,0x2e8e, 0xbc61,0x3fe4

1090 
DCW
 0xa5e0,0x28e7, 0xfd39,0x2e9f, 0xbc32,0x3fe1

1091 
DCW
 0xa5ea,0x28ad, 0xfd16,0x2eb0, 0xbc03,0x3fde

1092 
DCW
 0xa5f4,0x2873, 0xfcf2,0x2ec2, 0xbbd4,0x3fdb

1093 
DCW
 0xa5ff,0x2838, 0xfccf,0x2ed3, 0xbba6,0x3fd7

1094 
DCW
 0xa60b,0x27fe, 0xfcab,0x2ee4, 0xbb77,0x3fd4

1095 
DCW
 0xa617,0x27c3, 0xfc88,0x2ef5, 0xbb49,0x3fd0

1096 
DCW
 0xa623,0x2788, 0xfc64,0x2f06, 0xbb1b,0x3fcc

1097 
DCW
 0xa630,0x274c, 0xfc41,0x2f17, 0xbaed,0x3fc8

1098 
DCW
 0xa63e,0x2711, 0xfc1d,0x2f28, 0xbabf,0x3fc4

1099 
DCW
 0xa64c,0x26d5, 0xfbfa,0x2f39, 0xba91,0x3fbf

1100 
DCW
 0xa65a,0x2699, 0xfbd6,0x2f4a, 0xba64,0x3fbb

1101 
DCW
 0xa669,0x265c, 0xfbb3,0x2f5b, 0xba36,0x3fb6

1102 
DCW
 0xa678,0x2620, 0xfb8f,0x2f6c, 0xba09,0x3fb1

1103 
DCW
 0xa688,0x25e3, 0xfb6c,0x2f7d, 0xb9dc,0x3fac

1104 
DCW
 0xa699,0x25a6, 0xfb48,0x2f8d, 0xb9af,0x3fa7

1105 
DCW
 0xa6a9,0x2569, 0xfb25,0x2f9e, 0xb982,0x3fa2

1106 
DCW
 0xa6bb,0x252c, 0xfb01,0x2faf, 0xb956,0x3f9c

1107 
DCW
 0xa6cd,0x24ef, 0xfade,0x2fc0, 0xb92a,0x3f97

1108 
DCW
 0xa6df,0x24b1, 0xfaba,0x2fd0, 0xb8fd,0x3f91

1109 
DCW
 0xa6f2,0x2473, 0xfa97,0x2fe1, 0xb8d1,0x3f8b

1110 
DCW
 0xa705,0x2435, 0xfa73,0x2ff2, 0xb8a6,0x3f85

1111 
DCW
 0xa719,0x23f7, 0xfa50,0x3002, 0xb87a,0x3f7f

1112 
DCW
 0xa72d,0x23b8, 0xfa2c,0x3013, 0xb84f,0x3f78

1113 
DCW
 0xa742,0x237a, 0xfa09,0x3024, 0xb823,0x3f72

1114 
DCW
 0xa757,0x233b, 0xf9e5,0x3034, 0xb7f8,0x3f6b

1115 
DCW
 0xa76d,0x22fc, 0xf9c2,0x3045, 0xb7cd,0x3f64

1116 
DCW
 0xa783,0x22bc, 0xf99e,0x3055, 0xb7a2,0x3f5d

1117 
DCW
 0xa799,0x227d, 0xf97b,0x3066, 0xb778,0x3f56

1118 
DCW
 0xa7b1,0x223d, 0xf957,0x3076, 0xb74d,0x3f4f

1119 
DCW
 0xa7c8,0x21fe, 0xf934,0x3087, 0xb723,0x3f47

1120 
DCW
 0xa7e0,0x21be, 0xf911,0x3097, 0xb6f9,0x3f40

1121 
DCW
 0xa7f9,0x217d, 0xf8ed,0x30a7, 0xb6cf,0x3f38

1122 
DCW
 0xa812,0x213d, 0xf8ca,0x30b8, 0xb6a5,0x3f30

1123 
DCW
 0xa82b,0x20fd, 0xf8a6,0x30c8, 0xb67c,0x3f28

1124 
DCW
 0xa845,0x20bc, 0xf883,0x30d8, 0xb652,0x3f20

1125 
DCW
 0xa860,0x207b, 0xf85f,0x30e8, 0xb629,0x3f17

1126 
DCW
 0xa87b,0x203a, 0xf83c,0x30f9, 0xb600,0x3f0f

1127 
DCW
 0xa896,0x1ff9, 0xf819,0x3109, 0xb5d7,0x3f06

1128 
DCW
 0xa8b2,0x1fb7, 0xf7f5,0x3119, 0xb5af,0x3efd

1129 
DCW
 0xa8ce,0x1f76, 0xf7d2,0x3129, 0xb586,0x3ef4

1130 
DCW
 0xa8eb,0x1f34, 0xf7ae,0x3139, 0xb55e,0x3eeb

1131 
DCW
 0xa908,0x1ef2, 0xf78b,0x3149, 0xb536,0x3ee2

1132 
DCW
 0xa926,0x1eb0, 0xf768,0x3159, 0xb50e,0x3ed8

1133 
DCW
 0xa945,0x1e6e, 0xf744,0x3169, 0xb4e6,0x3ecf

1134 
DCW
 0xa963,0x1e2b, 0xf721,0x3179, 0xb4be,0x3ec5

1135 
DCW
 0xa982,0x1de9, 0xf6fe,0x3189, 0xb497,0x3ebb

1136 
DCW
 0xa9a2,0x1da6, 0xf6da,0x3199, 0xb470,0x3eb1

1137 
DCW
 0xa9c2,0x1d63, 0xf6b7,0x31a9, 0xb449,0x3ea7

1138 
DCW
 0xa9e3,0x1d20, 0xf693,0x31b9, 0xb422,0x3e9d

1139 
DCW
 0xaa04,0x1cdd, 0xf670,0x31c8, 0xb3fb,0x3e92

1140 
DCW
 0xaa25,0x1c99, 0xf64d,0x31d8, 0xb3d5,0x3e88

1141 
DCW
 0xaa47,0x1c56, 0xf629,0x31e8, 0xb3ae,0x3e7d

1142 
DCW
 0xaa6a,0x1c12, 0xf606,0x31f8, 0xb388,0x3e72

1143 
DCW
 0xaa8d,0x1bce, 0xf5e3,0x3207, 0xb362,0x3e67

1144 
DCW
 0xaab0,0x1b8a, 0xf5bf,0x3217, 0xb33d,0x3e5c

1145 
DCW
 0xaad4,0x1b46, 0xf59c,0x3227, 0xb317,0x3e50

1146 
DCW
 0xaaf8,0x1b02, 0xf579,0x3236, 0xb2f2,0x3e45

1147 
DCW
 0xab1d,0x1abe, 0xf556,0x3246, 0xb2cc,0x3e39

1148 
DCW
 0xab42,0x1a79, 0xf532,0x3255, 0xb2a7,0x3e2d

1149 
DCW
 0xab68,0x1a34, 0xf50f,0x3265, 0xb283,0x3e21

1150 
DCW
 0xab8e,0x19ef, 0xf4ec,0x3274, 0xb25e,0x3e15

1151 
DCW
 0xabb5,0x19aa, 0xf4c8,0x3284, 0xb23a,0x3e09

1152 
DCW
 0xabdc,0x1965, 0xf4a5,0x3293, 0xb215,0x3dfc

1153 
DCW
 0xac03,0x1920, 0xf482,0x32a3, 0xb1f1,0x3df0

1154 
DCW
 0xac2b,0x18db, 0xf45f,0x32b2, 0xb1cd,0x3de3

1155 
DCW
 0xac54,0x1895, 0xf43b,0x32c1, 0xb1aa,0x3dd6

1156 
DCW
 0xac7d,0x184f, 0xf418,0x32d0, 0xb186,0x3dc9

1157 
DCW
 0xaca6,0x180a, 0xf3f5,0x32e0, 0xb163,0x3dbc

1158 
DCW
 0xacd0,0x17c4, 0xf3d2,0x32ef, 0xb140,0x3daf

1159 
DCW
 0xacfa,0x177e, 0xf3ae,0x32fe, 0xb11d,0x3da1

1160 
DCW
 0xad25,0x1737, 0xf38b,0x330d, 0xb0fa,0x3d93

1161 
DCW
 0xad50,0x16f1, 0xf368,0x331d, 0xb0d7,0x3d86

1162 
DCW
 0xad7b,0x16ab, 0xf345,0x332c, 0xb0b5,0x3d78

1163 
DCW
 0xada7,0x1664, 0xf322,0x333b, 0xb093,0x3d6a

1164 
DCW
 0xadd4,0x161d, 0xf2ff,0x334a, 0xb071,0x3d5b

1165 
DCW
 0xae01,0x15d7, 0xf2db,0x3359, 0xb04f,0x3d4d

1166 
DCW
 0xae2e,0x1590, 0xf2b8,0x3368, 0xb02d,0x3d3f

1167 
DCW
 0xae5c,0x1549, 0xf295,0x3377, 0xb00c,0x3d30

1168 
DCW
 0xae8a,0x1501, 0xf272,0x3386, 0xafeb,0x3d21

1169 
DCW
 0xaeb9,0x14ba, 0xf24f,0x3395, 0xafca,0x3d12

1170 
DCW
 0xaee8,0x1473, 0xf22c,0x33a3, 0xafa9,0x3d03

1171 
DCW
 0xaf18,0x142b, 0xf208,0x33b2, 0xaf88,0x3cf4

1172 
DCW
 0xaf48,0x13e4, 0xf1e5,0x33c1, 0xaf68,0x3ce4

1173 
DCW
 0xaf78,0x139c, 0xf1c2,0x33d0, 0xaf48,0x3cd5

1174 
DCW
 0xafa9,0x1354, 0xf19f,0x33df, 0xaf28,0x3cc5

1175 
DCW
 0xafda,0x130c, 0xf17c,0x33ed, 0xaf08,0x3cb5

1176 
DCW
 0xb00c,0x12c4, 0xf159,0x33fc, 0xaee8,0x3ca5

1177 
DCW
 0xb03e,0x127c, 0xf136,0x340b, 0xaec9,0x3c95

1178 
DCW
 0xb071,0x1234, 0xf113,0x3419, 0xaea9,0x3c85

1179 
DCW
 0xb0a4,0x11eb, 0xf0f0,0x3428, 0xae8a,0x3c74

1180 
DCW
 0xb0d7,0x11a3, 0xf0cd,0x3436, 0xae6b,0x3c64

1181 
DCW
 0xb10b,0x115a, 0xf0aa,0x3445, 0xae4d,0x3c53

1182 
DCW
 0xb140,0x1112, 0xf087,0x3453, 0xae2e,0x3c42

1183 
DCW
 0xb174,0x10c9, 0xf064,0x3462, 0xae10,0x3c31

1184 
DCW
 0xb1aa,0x1080, 0xf041,0x3470, 0xadf2,0x3c20

1185 
DCW
 0xb1df,0x1037, 0xf01e,0x347f, 0xadd4,0x3c0f

1186 
DCW
 0xb215,0x0fee, 0xeffb,0x348d, 0xadb6,0x3bfd

1187 
DCW
 0xb24c,0x0fa5, 0xefd8,0x349b, 0xad99,0x3bec

1188 
DCW
 0xb283,0x0f5c, 0xefb5,0x34aa, 0xad7b,0x3bda

1189 
DCW
 0xb2ba,0x0f13, 0xef92,0x34b8, 0xad5e,0x3bc8

1190 
DCW
 0xb2f2,0x0eca, 0xef6f,0x34c6, 0xad41,0x3bb6

1191 
DCW
 0xb32a,0x0e80, 0xef4c,0x34d4, 0xad25,0x3ba4

1192 
DCW
 0xb362,0x0e37, 0xef29,0x34e2, 0xad08,0x3b92

1193 
DCW
 0xb39b,0x0ded, 0xef06,0x34f1, 0xacec,0x3b7f

1194 
DCW
 0xb3d5,0x0da4, 0xeee3,0x34ff, 0xacd0,0x3b6d

1195 
DCW
 0xb40f,0x0d5a, 0xeec0,0x350d, 0xacb4,0x3b5a

1196 
DCW
 0xb449,0x0d10, 0xee9d,0x351b, 0xac98,0x3b47

1197 
DCW
 0xb483,0x0cc6, 0xee7b,0x3529, 0xac7d,0x3b34

1198 
DCW
 0xb4be,0x0c7c, 0xee58,0x3537, 0xac61,0x3b21

1199 
DCW
 0xb4fa,0x0c32, 0xee35,0x3545, 0xac46,0x3b0e

1200 
DCW
 0xb536,0x0be8, 0xee12,0x3553, 0xac2b,0x3afa

1201 
DCW
 0xb572,0x0b9e, 0xedef,0x3561, 0xac11,0x3ae6

1202 
DCW
 0xb5af,0x0b54, 0xedcc,0x356e, 0xabf6,0x3ad3

1203 
DCW
 0xb5ec,0x0b0a, 0xeda9,0x357c, 0xabdc,0x3abf

1204 
DCW
 0xb629,0x0ac0, 0xed87,0x358a, 0xabc2,0x3aab

1205 
DCW
 0xb667,0x0a75, 0xed64,0x3598, 0xaba8,0x3a97

1206 
DCW
 0xb6a5,0x0a2b, 0xed41,0x35a5, 0xab8e,0x3a82

1207 
DCW
 0xb6e4,0x09e0, 0xed1e,0x35b3, 0xab75,0x3a6e

1208 
DCW
 0xb723,0x0996, 0xecfc,0x35c1, 0xab5b,0x3a59

1209 
DCW
 0xb762,0x094b, 0xecd9,0x35ce, 0xab42,0x3a45

1210 
DCW
 0xb7a2,0x0901, 0xecb6,0x35dc, 0xab29,0x3a30

1211 
DCW
 0xb7e3,0x08b6, 0xec93,0x35ea, 0xab11,0x3a1b

1212 
DCW
 0xb823,0x086b, 0xec71,0x35f7, 0xaaf8,0x3a06

1213 
DCW
 0xb864,0x0820, 0xec4e,0x3605, 0xaae0,0x39f0

1214 
DCW
 0xb8a6,0x07d6, 0xec2b,0x3612, 0xaac8,0x39db

1215 
DCW
 0xb8e7,0x078b, 0xec09,0x3620, 0xaab0,0x39c5

1216 
DCW
 0xb92a,0x0740, 0xebe6,0x362d, 0xaa98,0x39b0

1217 
DCW
 0xb96c,0x06f5, 0xebc3,0x363a, 0xaa81,0x399a

1218 
DCW
 0xb9af,0x06aa, 0xeba1,0x3648, 0xaa6a,0x3984

1219 
DCW
 0xb9f2,0x065f, 0xeb7e,0x3655, 0xaa53,0x396e

1220 
DCW
 0xba36,0x0614, 0xeb5b,0x3662, 0xaa3c,0x3958

1221 
DCW
 0xba7a,0x05c9, 0xeb39,0x366f, 0xaa25,0x3941

1222 
DCW
 0xbabf,0x057e, 0xeb16,0x367d, 0xaa0f,0x392b

1223 
DCW
 0xbb04,0x0533, 0xeaf4,0x368a, 0xa9f9,0x3914

1224 
DCW
 0xbb49,0x04e7, 0xead1,0x3697, 0xa9e3,0x38fd

1225 
DCW
 0xbb8e,0x049c, 0xeaaf,0x36a4, 0xa9cd,0x38e6

1226 
DCW
 0xbbd4,0x0451, 0xea8c,0x36b1, 0xa9b7,0x38cf

1227 
DCW
 0xbc1b,0x0406, 0xea6a,0x36be, 0xa9a2,0x38b8

1228 
DCW
 0xbc61,0x03bb, 0xea47,0x36cb, 0xa98d,0x38a1

1229 
DCW
 0xbca8,0x036f, 0xea25,0x36d8, 0xa978,0x3889

1230 
DCW
 0xbcf0,0x0324, 0xea02,0x36e5, 0xa963,0x3871

1231 
DCW
 0xbd38,0x02d9, 0xe9e0,0x36f2, 0xa94f,0x385a

1232 
DCW
 0xbd80,0x028d, 0xe9bd,0x36ff, 0xa93a,0x3842

1233 
DCW
 0xbdc8,0x0242, 0xe99b,0x370c, 0xa926,0x382a

1234 
DCW
 0xbe11,0x01f7, 0xe978,0x3718, 0xa912,0x3812

1235 
DCW
 0xbe5a,0x01ab, 0xe956,0x3725, 0xa8ff,0x37f9

1236 
DCW
 0xbea4,0x0160, 0xe933,0x3732, 0xa8eb,0x37e1

1237 
DCW
 0xbeee,0x0114, 0xe911,0x373f, 0xa8d8,0x37c8

1238 
DCW
 0xbf38,0x00c9, 0xe8ef,0x374b, 0xa8c5,0x37b0

1239 
DCW
 0xbf83,0x007e, 0xe8cc,0x3758, 0xa8b2,0x3797

1240 
DCW
 0xbfce,0x0032, 0xe8aa,0x3765, 0xa89f,0x377e

1241 
DCW
 0xc019,0xffe7, 0xe888,0x3771, 0xa88d,0x3765

1242 
DCW
 0xc065,0xff9b, 0xe865,0x377e, 0xa87b,0x374b

1243 
DCW
 0xc0b1,0xff50, 0xe843,0x378a, 0xa869,0x3732

1244 
DCW
 0xc0fd,0xff05, 0xe821,0x3797, 0xa857,0x3718

1245 
DCW
 0xc14a,0xfeb9, 0xe7fe,0x37a3, 0xa845,0x36ff

1246 
DCW
 0xc197,0xfe6e, 0xe7dc,0x37b0, 0xa834,0x36e5

1247 
DCW
 0xc1e4,0xfe23, 0xe7ba,0x37bc, 0xa823,0x36cb

1248 
DCW
 0xc232,0xfdd7, 0xe798,0x37c8, 0xa812,0x36b1

1249 
DCW
 0xc280,0xfd8c, 0xe775,0x37d5, 0xa801,0x3697

1250 
DCW
 0xc2cf,0xfd40, 0xe753,0x37e1, 0xa7f1,0x367d

1251 
DCW
 0xc31d,0xfcf5, 0xe731,0x37ed, 0xa7e0,0x3662

1252 
DCW
 0xc36c,0xfcaa, 0xe70f,0x37f9, 0xa7d0,0x3648

1253 
DCW
 0xc3bc,0xfc5f, 0xe6ed,0x3805, 0xa7c0,0x362d

1254 
DCW
 0xc40c,0xfc13, 0xe6cb,0x3812, 0xa7b1,0x3612

1255 
DCW
 0xc45c,0xfbc8, 0xe6a8,0x381e, 0xa7a1,0x35f7

1256 
DCW
 0xc4ac,0xfb7d, 0xe686,0x382a, 0xa792,0x35dc

1257 
DCW
 0xc4fd,0xfb32, 0xe664,0x3836, 0xa783,0x35c1

1258 
DCW
 0xc54e,0xfae6, 0xe642,0x3842, 0xa774,0x35a5

1259 
DCW
 0xc59f,0xfa9b, 0xe620,0x384e, 0xa765,0x358a

1260 
DCW
 0xc5f1,0xfa50, 0xe5fe,0x385a, 0xa757,0x356e

1261 
DCW
 0xc643,0xfa05, 0xe5dc,0x3866, 0xa749,0x3553

1262 
DCW
 0xc695,0xf9ba, 0xe5ba,0x3871, 0xa73b,0x3537

1263 
DCW
 0xc6e7,0xf96f, 0xe598,0x387d, 0xa72d,0x351b

1264 
DCW
 0xc73a,0xf924, 0xe576,0x3889, 0xa71f,0x34ff

1265 
DCW
 0xc78d,0xf8d9, 0xe554,0x3895, 0xa712,0x34e2

1266 
DCW
 0xc7e1,0xf88e, 0xe532,0x38a1, 0xa705,0x34c6

1267 
DCW
 0xc835,0xf843, 0xe510,0x38ac, 0xa6f8,0x34aa

1268 
DCW
 0xc889,0xf7f9, 0xe4ee,0x38b8, 0xa6eb,0x348d

1269 
DCW
 0xc8dd,0xf7ae, 0xe4cc,0x38c3, 0xa6df,0x3470

1270 
DCW
 0xc932,0xf763, 0xe4aa,0x38cf, 0xa6d3,0x3453

1271 
DCW
 0xc987,0xf718, 0xe489,0x38db, 0xa6c7,0x3436

1272 
DCW
 0xc9dc,0xf6ce, 0xe467,0x38e6, 0xa6bb,0x3419

1273 
DCW
 0xca32,0xf683, 0xe445,0x38f2, 0xa6af,0x33fc

1274 
DCW
 0xca88,0xf639, 0xe423,0x38fd, 0xa6a4,0x33df

1275 
DCW
 0xcade,0xf5ee, 0xe401,0x3909, 0xa699,0x33c1

1276 
DCW
 0xcb34,0xf5a4, 0xe3df,0x3914, 0xa68e,0x33a3

1277 
DCW
 0xcb8b,0xf559, 0xe3be,0x391f, 0xa683,0x3386

1278 
DCW
 0xcbe2,0xf50f, 0xe39c,0x392b, 0xa678,0x3368

1279 
DCW
 0xcc3a,0xf4c5, 0xe37a,0x3936, 0xa66e,0x334a

1280 
DCW
 0xcc91,0xf47b, 0xe358,0x3941, 0xa664,0x332c

1281 
DCW
 0xcce9,0xf430, 0xe337,0x394c, 0xa65a,0x330d

1282 
DCW
 0xcd41,0xf3e6, 0xe315,0x3958, 0xa650,0x32ef

1283 
DCW
 0xcd9a,0xf39c, 0xe2f3,0x3963, 0xa647,0x32d0

1284 
DCW
 0xcdf2,0xf352, 0xe2d2,0x396e, 0xa63e,0x32b2

1285 
DCW
 0xce4b,0xf308, 0xe2b0,0x3979, 0xa635,0x3293

1286 
DCW
 0xcea5,0xf2bf, 0xe28e,0x3984, 0xa62c,0x3274

1287 
DCW
 0xcefe,0xf275, 0xe26d,0x398f, 0xa623,0x3255

1288 
DCW
 0xcf58,0xf22b, 0xe24b,0x399a, 0xa61b,0x3236

1289 
DCW
 0xcfb2,0xf1e2, 0xe22a,0x39a5, 0xa613,0x3217

1290 
DCW
 0xd00c,0xf198, 0xe208,0x39b0, 0xa60b,0x31f8

1291 
DCW
 0xd067,0xf14f, 0xe1e7,0x39bb, 0xa603,0x31d8

1292 
DCW
 0xd0c2,0xf105, 0xe1c5,0x39c5, 0xa5fb,0x31b9

1293 
DCW
 0xd11d,0xf0bc, 0xe1a4,0x39d0, 0xa5f4,0x3199

1294 
DCW
 0xd178,0xf073, 0xe182,0x39db, 0xa5ed,0x3179

1295 
DCW
 0xd1d4,0xf02a, 0xe161,0x39e6, 0xa5e6,0x3159

1296 
DCW
 0xd22f,0xefe1, 0xe13f,0x39f0, 0xa5e0,0x3139

1297 
DCW
 0xd28b,0xef98, 0xe11e,0x39fb, 0xa5d9,0x3119

1298 
DCW
 0xd2e8,0xef4f, 0xe0fc,0x3a06, 0xa5d3,0x30f9

1299 
DCW
 0xd344,0xef06, 0xe0db,0x3a10, 0xa5cd,0x30d8

1300 
DCW
 0xd3a1,0xeebe, 0xe0ba,0x3a1b, 0xa5c7,0x30b8

1301 
DCW
 0xd3fe,0xee75, 0xe098,0x3a25, 0xa5c2,0x3097

1302 
DCW
 0xd45c,0xee2d, 0xe077,0x3a30, 0xa5bc,0x3076

1303 
DCW
 0xd4b9,0xede4, 0xe056,0x3a3a, 0xa5b7,0x3055

1304 
DCW
 0xd517,0xed9c, 0xe034,0x3a45, 0xa5b2,0x3034

1305 
DCW
 0xd575,0xed54, 0xe013,0x3a4f, 0xa5ae,0x3013

1306 
DCW
 0xd5d3,0xed0c, 0xdff2,0x3a59, 0xa5a9,0x2ff2

1307 
DCW
 0xd632,0xecc4, 0xdfd1,0x3a64, 0xa5a5,0x2fd0

1308 
DCW
 0xd690,0xec7c, 0xdfaf,0x3a6e, 0xa5a1,0x2faf

1309 
DCW
 0xd6ef,0xec34, 0xdf8e,0x3a78, 0xa59d,0x2f8d

1310 
DCW
 0xd74e,0xebed, 0xdf6d,0x3a82, 0xa599,0x2f6c

1311 
DCW
 0xd7ae,0xeba5, 0xdf4c,0x3a8d, 0xa596,0x2f4a

1312 
DCW
 0xd80d,0xeb5e, 0xdf2b,0x3a97, 0xa593,0x2f28

1313 
DCW
 0xd86d,0xeb16, 0xdf0a,0x3aa1, 0xa590,0x2f06

1314 
DCW
 0xd8cd,0xeacf, 0xdee9,0x3aab, 0xa58d,0x2ee4

1315 
DCW
 0xd92d,0xea88, 0xdec8,0x3ab5, 0xa58b,0x2ec2

1316 
DCW
 0xd98e,0xea41, 0xdea6,0x3abf, 0xa588,0x2e9f

1317 
DCW
 0xd9ee,0xe9fa, 0xde85,0x3ac9, 0xa586,0x2e7d

1318 
DCW
 0xda4f,0xe9b4, 0xde64,0x3ad3, 0xa585,0x2e5a

1319 
DCW
 0xdab0,0xe96d, 0xde43,0x3add, 0xa583,0x2e37

1320 
DCW
 0xdb11,0xe926, 0xde22,0x3ae6, 0xa581,0x2e15

1321 
DCW
 0xdb73,0xe8e0, 0xde01,0x3af0, 0xa580,0x2df2

1322 
DCW
 0xdbd5,0xe89a, 0xdde1,0x3afa, 0xa57f,0x2dcf

1323 
DCW
 0xdc36,0xe854, 0xddc0,0x3b04, 0xa57f,0x2dab

1324 
DCW
 0xdc98,0xe80e, 0xdd9f,0x3b0e, 0xa57e,0x2d88

1325 
DCW
 0xdcfb,0xe7c8, 0xdd7e,0x3b17, 0xa57e,0x2d65

1326 
DCW
 0xdd5d,0xe782, 0xdd5d,0x3b21, 0xa57e,0x2d41

1327 
DCW
 0xddc0,0xe73d, 0xdd3c,0x3b2a, 0xa57e,0x2d1e

1328 
DCW
 0xde22,0xe6f7, 0xdd1b,0x3b34, 0xa57e,0x2cfa

1329 
DCW
 0xde85,0xe6b2, 0xdcfb,0x3b3e, 0xa57f,0x2cd6

1330 
DCW
 0xdee9,0xe66d, 0xdcda,0x3b47, 0xa57f,0x2cb2

1331 
DCW
 0xdf4c,0xe628, 0xdcb9,0x3b50, 0xa580,0x2c8e

1332 
DCW
 0xdfaf,0xe5e3, 0xdc98,0x3b5a, 0xa581,0x2c6a

1333 
DCW
 0xe013,0xe59e, 0xdc78,0x3b63, 0xa583,0x2c46

1334 
DCW
 0xe077,0xe559, 0xdc57,0x3b6d, 0xa585,0x2c21

1335 
DCW
 0xe0db,0xe515, 0xdc36,0x3b76, 0xa586,0x2bfd

1336 
DCW
 0xe13f,0xe4d0, 0xdc16,0x3b7f, 0xa588,0x2bd8

1337 
DCW
 0xe1a4,0xe48c, 0xdbf5,0x3b88, 0xa58b,0x2bb4

1338 
DCW
 0xe208,0xe448, 0xdbd5,0x3b92, 0xa58d,0x2b8f

1339 
DCW
 0xe26d,0xe404, 0xdbb4,0x3b9b, 0xa590,0x2b6a

1340 
DCW
 0xe2d2,0xe3c1, 0xdb93,0x3ba4, 0xa593,0x2b45

1341 
DCW
 0xe337,0xe37d, 0xdb73,0x3bad, 0xa596,0x2b20

1342 
DCW
 0xe39c,0xe33a, 0xdb52,0x3bb6, 0xa599,0x2afb

1343 
DCW
 0xe401,0xe2f6, 0xdb32,0x3bbf, 0xa59d,0x2ad6

1344 
DCW
 0xe467,0xe2b3, 0xdb11,0x3bc8, 0xa5a1,0x2ab0

1345 
DCW
 0xe4cc,0xe270, 0xdaf1,0x3bd1, 0xa5a5,0x2a8b

1346 
DCW
 0xe532,0xe22d, 0xdad1,0x3bda, 0xa5a9,0x2a65

1347 
DCW
 0xe598,0xe1eb, 0xdab0,0x3be3, 0xa5ae,0x2a3f

1348 
DCW
 0xe5fe,0xe1a8, 0xda90,0x3bec, 0xa5b2,0x2a1a

1349 
DCW
 0xe664,0xe166, 0xda6f,0x3bf5, 0xa5b7,0x29f4

1350 
DCW
 0xe6cb,0xe124, 0xda4f,0x3bfd, 0xa5bc,0x29ce

1351 
DCW
 0xe731,0xe0e2, 0xda2f,0x3c06, 0xa5c2,0x29a7

1352 
DCW
 0xe798,0xe0a0, 0xda0f,0x3c0f, 0xa5c7,0x2981

1353 
DCW
 0xe7fe,0xe05e, 0xd9ee,0x3c17, 0xa5cd,0x295b

1354 
DCW
 0xe865,0xe01d, 0xd9ce,0x3c20, 0xa5d3,0x2935

1355 
DCW
 0xe8cc,0xdfdc, 0xd9ae,0x3c29, 0xa5d9,0x290e

1356 
DCW
 0xe933,0xdf9b, 0xd98e,0x3c31, 0xa5e0,0x28e7

1357 
DCW
 0xe99b,0xdf5a, 0xd96d,0x3c3a, 0xa5e6,0x28c1

1358 
DCW
 0xea02,0xdf19, 0xd94d,0x3c42, 0xa5ed,0x289a

1359 
DCW
 0xea6a,0xded8, 0xd92d,0x3c4b, 0xa5f4,0x2873

1360 
DCW
 0xead1,0xde98, 0xd90d,0x3c53, 0xa5fb,0x284c

1361 
DCW
 0xeb39,0xde58, 0xd8ed,0x3c5b, 0xa603,0x2825

1362 
DCW
 0xeba1,0xde18, 0xd8cd,0x3c64, 0xa60b,0x27fe

1363 
DCW
 0xec09,0xddd8, 0xd8ad,0x3c6c, 0xa613,0x27d6

1364 
DCW
 0xec71,0xdd98, 0xd88d,0x3c74, 0xa61b,0x27af

1365 
DCW
 0xecd9,0xdd59, 0xd86d,0x3c7d, 0xa623,0x2788

1366 
DCW
 0xed41,0xdd19, 0xd84d,0x3c85, 0xa62c,0x2760

1367 
DCW
 0xeda9,0xdcda, 0xd82d,0x3c8d, 0xa635,0x2738

1368 
DCW
 0xee12,0xdc9b, 0xd80d,0x3c95, 0xa63e,0x2711

1369 
DCW
 0xee7b,0xdc5d, 0xd7ed,0x3c9d, 0xa647,0x26e9

1370 
DCW
 0xeee3,0xdc1e, 0xd7cd,0x3ca5, 0xa650,0x26c1

1371 
DCW
 0xef4c,0xdbe0, 0xd7ae,0x3cad, 0xa65a,0x2699

1372 
DCW
 0xefb5,0xdba2, 0xd78e,0x3cb5, 0xa664,0x2671

1373 
DCW
 0xf01e,0xdb64, 0xd76e,0x3cbd, 0xa66e,0x2648

1374 
DCW
 0xf087,0xdb26, 0xd74e,0x3cc5, 0xa678,0x2620

1375 
DCW
 0xf0f0,0xdae8, 0xd72f,0x3ccd, 0xa683,0x25f8

1376 
DCW
 0xf159,0xdaab, 0xd70f,0x3cd5, 0xa68e,0x25cf

1377 
DCW
 0xf1c2,0xda6e, 0xd6ef,0x3cdd, 0xa699,0x25a6

1378 
DCW
 0xf22c,0xda31, 0xd6cf,0x3ce4, 0xa6a4,0x257e

1379 
DCW
 0xf295,0xd9f4, 0xd6b0,0x3cec, 0xa6af,0x2555

1380 
DCW
 0xf2ff,0xd9b8, 0xd690,0x3cf4, 0xa6bb,0x252c

1381 
DCW
 0xf368,0xd97b, 0xd671,0x3cfb, 0xa6c7,0x2503

1382 
DCW
 0xf3d2,0xd93f, 0xd651,0x3d03, 0xa6d3,0x24da

1383 
DCW
 0xf43b,0xd903, 0xd632,0x3d0b, 0xa6df,0x24b1

1384 
DCW
 0xf4a5,0xd8c8, 0xd612,0x3d12, 0xa6eb,0x2488

1385 
DCW
 0xf50f,0xd88c, 0xd5f3,0x3d1a, 0xa6f8,0x245e

1386 
DCW
 0xf579,0xd851, 0xd5d3,0x3d21, 0xa705,0x2435

1387 
DCW
 0xf5e3,0xd816, 0xd5b4,0x3d28, 0xa712,0x240b

1388 
DCW
 0xf64d,0xd7db, 0xd594,0x3d30, 0xa71f,0x23e2

1389 
DCW
 0xf6b7,0xd7a0, 0xd575,0x3d37, 0xa72d,0x23b8

1390 
DCW
 0xf721,0xd766, 0xd556,0x3d3f, 0xa73b,0x238e

1391 
DCW
 0xf78b,0xd72c, 0xd536,0x3d46, 0xa749,0x2365

1392 
DCW
 0xf7f5,0xd6f2, 0xd517,0x3d4d, 0xa757,0x233b

1393 
DCW
 0xf85f,0xd6b8, 0xd4f8,0x3d54, 0xa765,0x2311

1394 
DCW
 0xf8ca,0xd67f, 0xd4d8,0x3d5b, 0xa774,0x22e7

1395 
DCW
 0xf934,0xd645, 0xd4b9,0x3d63, 0xa783,0x22bc

1396 
DCW
 0xf99e,0xd60c, 0xd49a,0x3d6a, 0xa792,0x2292

1397 
DCW
 0xfa09,0xd5d4, 0xd47b,0x3d71, 0xa7a1,0x2268

1398 
DCW
 0xfa73,0xd59b, 0xd45c,0x3d78, 0xa7b1,0x223d

1399 
DCW
 0xfade,0xd563, 0xd43c,0x3d7f, 0xa7c0,0x2213

1400 
DCW
 0xfb48,0xd52a, 0xd41d,0x3d86, 0xa7d0,0x21e8

1401 
DCW
 0xfbb3,0xd4f3, 0xd3fe,0x3d8d, 0xa7e0,0x21be

1402 
DCW
 0xfc1d,0xd4bb, 0xd3df,0x3d93, 0xa7f1,0x2193

1403 
DCW
 0xfc88,0xd483, 0xd3c0,0x3d9a, 0xa801,0x2168

1404 
DCW
 0xfcf2,0xd44c, 0xd3a1,0x3da1, 0xa812,0x213d

1405 
DCW
 0xfd5d,0xd415, 0xd382,0x3da8, 0xa823,0x2112

1406 
DCW
 0xfdc7,0xd3df, 0xd363,0x3daf, 0xa834,0x20e7

1407 
DCW
 0xfe32,0xd3a8, 0xd344,0x3db5, 0xa845,0x20bc

1408 
DCW
 0xfe9d,0xd372, 0xd326,0x3dbc, 0xa857,0x2091

1409 
DCW
 0xff07,0xd33c, 0xd307,0x3dc2, 0xa869,0x2065

1410 
DCW
 0xff72,0xd306, 0xd2e8,0x3dc9, 0xa87b,0x203a

1411 
DCW
 0xffdc,0xd2d1, 0xd2c9,0x3dd0, 0xa88d,0x200f

1412 
DCW
 0x0047,0xd29b, 0xd2aa,0x3dd6, 0xa89f,0x1fe3

1413 
DCW
 0x00b2,0xd266, 0xd28b,0x3ddd, 0xa8b2,0x1fb7

1414 
DCW
 0x011c,0xd231, 0xd26d,0x3de3, 0xa8c5,0x1f8c

1415 
DCW
 0x0187,0xd1fd, 0xd24e,0x3de9, 0xa8d8,0x1f60

1416 
DCW
 0x01f2,0xd1c9, 0xd22f,0x3df0, 0xa8eb,0x1f34

1417 
DCW
 0x025c,0xd195, 0xd211,0x3df6, 0xa8ff,0x1f08

1418 
DCW
 0x02c7,0xd161, 0xd1f2,0x3dfc, 0xa912,0x1edc

1419 
DCW
 0x0331,0xd12d, 0xd1d4,0x3e03, 0xa926,0x1eb0

1420 
DCW
 0x039c,0xd0fa, 0xd1b5,0x3e09, 0xa93a,0x1e84

1421 
DCW
 0x0406,0xd0c7, 0xd196,0x3e0f, 0xa94f,0x1e58

1422 
DCW
 0x0471,0xd094, 0xd178,0x3e15, 0xa963,0x1e2b

1423 
DCW
 0x04db,0xd062, 0xd15a,0x3e1b, 0xa978,0x1dff

1424 
DCW
 0x0546,0xd030, 0xd13b,0x3e21, 0xa98d,0x1dd3

1425 
DCW
 0x05b0,0xcffe, 0xd11d,0x3e27, 0xa9a2,0x1da6

1426 
DCW
 0x061b,0xcfcc, 0xd0fe,0x3e2d, 0xa9b7,0x1d79

1427 
DCW
 0x0685,0xcf9a, 0xd0e0,0x3e33, 0xa9cd,0x1d4d

1428 
DCW
 0x06ef,0xcf69, 0xd0c2,0x3e39, 0xa9e3,0x1d20

1429 
DCW
 0x075a,0xcf38, 0xd0a3,0x3e3f, 0xa9f9,0x1cf3

1430 
DCW
 0x07c4,0xcf07, 0xd085,0x3e45, 0xaa0f,0x1cc6

1431 
DCW
 0x082e,0xced7, 0xd067,0x3e4a, 0xaa25,0x1c99

1432 
DCW
 0x0898,0xcea7, 0xd049,0x3e50, 0xaa3c,0x1c6c

1433 
DCW
 0x0902,0xce77, 0xd02a,0x3e56, 0xaa53,0x1c3f

1434 
DCW
 0x096d,0xce47, 0xd00c,0x3e5c, 0xaa6a,0x1c12

1435 
DCW
 0x09d7,0xce18, 0xcfee,0x3e61, 0xaa81,0x1be5

1436 
DCW
 0x0a41,0xcde9, 0xcfd0,0x3e67, 0xaa98,0x1bb8

1437 
DCW
 0x0aaa,0xcdba, 0xcfb2,0x3e6c, 0xaab0,0x1b8a

1438 
DCW
 0x0b14,0xcd8c, 0xcf94,0x3e72, 0xaac8,0x1b5d

1439 
DCW
 0x0b7e,0xcd5d, 0xcf76,0x3e77, 0xaae0,0x1b30

1440 
DCW
 0x0be8,0xcd30, 0xcf58,0x3e7d, 0xaaf8,0x1b02

1441 
DCW
 0x0c52,0xcd02, 0xcf3a,0x3e82, 0xab11,0x1ad4

1442 
DCW
 0x0cbb,0xccd4, 0xcf1c,0x3e88, 0xab29,0x1aa7

1443 
DCW
 0x0d25,0xcca7, 0xcefe,0x3e8d, 0xab42,0x1a79

1444 
DCW
 0x0d8e,0xcc7a, 0xcee0,0x3e92, 0xab5b,0x1a4b

1445 
DCW
 0x0df8,0xcc4e, 0xcec2,0x3e98, 0xab75,0x1a1d

1446 
DCW
 0x0e61,0xcc21, 0xcea5,0x3e9d, 0xab8e,0x19ef

1447 
DCW
 0x0eca,0xcbf5, 0xce87,0x3ea2, 0xaba8,0x19c1

1448 
DCW
 0x0f33,0xcbca, 0xce69,0x3ea7, 0xabc2,0x1993

1449 
DCW
 0x0f9c,0xcb9e, 0xce4b,0x3eac, 0xabdc,0x1965

1450 
DCW
 0x1005,0xcb73, 0xce2e,0x3eb1, 0xabf6,0x1937

1451 
DCW
 0x106e,0xcb48, 0xce10,0x3eb6, 0xac11,0x1909

1452 
DCW
 0x10d7,0xcb1e, 0xcdf2,0x3ebb, 0xac2b,0x18db

1453 
DCW
 0x1140,0xcaf3, 0xcdd5,0x3ec0, 0xac46,0x18ac

1454 
DCW
 0x11a8,0xcac9, 0xcdb7,0x3ec5, 0xac61,0x187e

1455 
DCW
 0x1211,0xca9f, 0xcd9a,0x3eca, 0xac7d,0x184f

1456 
DCW
 0x1279,0xca76, 0xcd7c,0x3ecf, 0xac98,0x1821

1457 
DCW
 0x12e2,0xca4d, 0xcd5f,0x3ed4, 0xacb4,0x17f2

1458 
DCW
 0x134a,0xca24, 0xcd41,0x3ed8, 0xacd0,0x17c4

1459 
DCW
 0x13b2,0xc9fb, 0xcd24,0x3edd, 0xacec,0x1795

1460 
DCW
 0x141a,0xc9d3, 0xcd06,0x3ee2, 0xad08,0x1766

1461 
DCW
 0x1482,0xc9ab, 0xcce9,0x3ee7, 0xad25,0x1737

1462 
DCW
 0x14ea,0xc983, 0xcccc,0x3eeb, 0xad41,0x1709

1463 
DCW
 0x1551,0xc95c, 0xccae,0x3ef0, 0xad5e,0x16da

1464 
DCW
 0x15b9,0xc935, 0xcc91,0x3ef4, 0xad7b,0x16ab

1465 
DCW
 0x1620,0xc90e, 0xcc74,0x3ef9, 0xad99,0x167c

1466 
DCW
 0x1688,0xc8e8, 0xcc57,0x3efd, 0xadb6,0x164c

1467 
DCW
 0x16ef,0xc8c1, 0xcc3a,0x3f02, 0xadd4,0x161d

1468 
DCW
 0x1756,0xc89b, 0xcc1c,0x3f06, 0xadf2,0x15ee

1469 
DCW
 0x17bd,0xc876, 0xcbff,0x3f0a, 0xae10,0x15bf

1470 
DCW
 0x1824,0xc850, 0xcbe2,0x3f0f, 0xae2e,0x1590

1471 
DCW
 0x188b,0xc82b, 0xcbc5,0x3f13, 0xae4d,0x1560

1472 
DCW
 0x18f1,0xc807, 0xcba8,0x3f17, 0xae6b,0x1531

1473 
DCW
 0x1958,0xc7e2, 0xcb8b,0x3f1c, 0xae8a,0x1501

1474 
DCW
 0x19be,0xc7be, 0xcb6e,0x3f20, 0xaea9,0x14d2

1475 
DCW
 0x1a24,0xc79a, 0xcb51,0x3f24, 0xaec9,0x14a2

1476 
DCW
 0x1a8a,0xc777, 0xcb34,0x3f28, 0xaee8,0x1473

1477 
DCW
 0x1af0,0xc754, 0xcb18,0x3f2c, 0xaf08,0x1443

1478 
DCW
 0x1b56,0xc731, 0xcafb,0x3f30, 0xaf28,0x1413

1479 
DCW
 0x1bbb,0xc70e, 0xcade,0x3f34, 0xaf48,0x13e4

1480 
DCW
 0x1c21,0xc6ec, 0xcac1,0x3f38, 0xaf68,0x13b4

1481 
DCW
 0x1c86,0xc6ca, 0xcaa5,0x3f3c, 0xaf88,0x1384

1482 
DCW
 0x1ceb,0xc6a8, 0xca88,0x3f40, 0xafa9,0x1354

1483 
DCW
 0x1d50,0xc687, 0xca6b,0x3f43, 0xafca,0x1324

1484 
DCW
 0x1db5,0xc666, 0xca4f,0x3f47, 0xafeb,0x12f4

1485 
DCW
 0x1e19,0xc645, 0xca32,0x3f4b, 0xb00c,0x12c4

1486 
DCW
 0x1e7e,0xc625, 0xca15,0x3f4f, 0xb02d,0x1294

1487 
DCW
 0x1ee2,0xc605, 0xc9f9,0x3f52, 0xb04f,0x1264

1488 
DCW
 0x1f46,0xc5e5, 0xc9dc,0x3f56, 0xb071,0x1234

1489 
DCW
 0x1faa,0xc5c6, 0xc9c0,0x3f5a, 0xb093,0x1204

1490 
DCW
 0x200e,0xc5a7, 0xc9a3,0x3f5d, 0xb0b5,0x11d3

1491 
DCW
 0x2072,0xc588, 0xc987,0x3f61, 0xb0d7,0x11a3

1492 
DCW
 0x20d5,0xc569, 0xc96b,0x3f64, 0xb0fa,0x1173

1493 
DCW
 0x2138,0xc54b, 0xc94e,0x3f68, 0xb11d,0x1142

1494 
DCW
 0x219c,0xc52d, 0xc932,0x3f6b, 0xb140,0x1112

1495 
DCW
 0x21ff,0xc510, 0xc916,0x3f6e, 0xb163,0x10e1

1496 
DCW
 0x2261,0xc4f2, 0xc8fa,0x3f72, 0xb186,0x10b1

1497 
DCW
 0x22c4,0xc4d6, 0xc8dd,0x3f75, 0xb1aa,0x1080

1498 
DCW
 0x2326,0xc4b9, 0xc8c1,0x3f78, 0xb1cd,0x1050

1499 
DCW
 0x2388,0xc49d, 0xc8a5,0x3f7b, 0xb1f1,0x101f

1500 
DCW
 0x23ea,0xc481, 0xc889,0x3f7f, 0xb215,0x0fee

1501 
DCW
 0x244c,0xc465, 0xc86d,0x3f82, 0xb23a,0x0fbe

1502 
DCW
 0x24ae,0xc44a, 0xc851,0x3f85, 0xb25e,0x0f8d

1503 
DCW
 0x250f,0xc42f, 0xc835,0x3f88, 0xb283,0x0f5c

1504 
DCW
 0x2570,0xc414, 0xc819,0x3f8b, 0xb2a7,0x0f2b

1505 
DCW
 0x25d1,0xc3fa, 0xc7fd,0x3f8e, 0xb2cc,0x0efb

1506 
DCW
 0x2632,0xc3e0, 0xc7e1,0x3f91, 0xb2f2,0x0eca

1507 
DCW
 0x2693,0xc3c6, 0xc7c5,0x3f94, 0xb317,0x0e99

1508 
DCW
 0x26f3,0xc3ad, 0xc7a9,0x3f97, 0xb33d,0x0e68

1509 
DCW
 0x2753,0xc394, 0xc78d,0x3f99, 0xb362,0x0e37

1510 
DCW
 0x27b3,0xc37b, 0xc772,0x3f9c, 0xb388,0x0e06

1511 
DCW
 0x2813,0xc363, 0xc756,0x3f9f, 0xb3ae,0x0dd5

1512 
DCW
 0x2872,0xc34b, 0xc73a,0x3fa2, 0xb3d5,0x0da4

1513 
DCW
 0x28d1,0xc333, 0xc71f,0x3fa4, 0xb3fb,0x0d72

1514 
DCW
 0x2931,0xc31c, 0xc703,0x3fa7, 0xb422,0x0d41

1515 
DCW
 0x298f,0xc305, 0xc6e7,0x3faa, 0xb449,0x0d10

1516 
DCW
 0x29ee,0xc2ee, 0xc6cc,0x3fac, 0xb470,0x0cdf

1517 
DCW
 0x2a4c,0xc2d8, 0xc6b0,0x3faf, 0xb497,0x0cae

1518 
DCW
 0x2aaa,0xc2c1, 0xc695,0x3fb1, 0xb4be,0x0c7c

1519 
DCW
 0x2b08,0xc2ac, 0xc679,0x3fb4, 0xb4e6,0x0c4b

1520 
DCW
 0x2b66,0xc296, 0xc65e,0x3fb6, 0xb50e,0x0c1a

1521 
DCW
 0x2bc4,0xc281, 0xc643,0x3fb8, 0xb536,0x0be8

1522 
DCW
 0x2c21,0xc26d, 0xc627,0x3fbb, 0xb55e,0x0bb7

1523 
DCW
 0x2c7e,0xc258, 0xc60c,0x3fbd, 0xb586,0x0b85

1524 
DCW
 0x2cda,0xc244, 0xc5f1,0x3fbf, 0xb5af,0x0b54

1525 
DCW
 0x2d37,0xc230, 0xc5d5,0x3fc1, 0xb5d7,0x0b23

1526 
DCW
 0x2d93,0xc21d, 0xc5ba,0x3fc4, 0xb600,0x0af1

1527 
DCW
 0x2def,0xc20a, 0xc59f,0x3fc6, 0xb629,0x0ac0

1528 
DCW
 0x2e4b,0xc1f7, 0xc584,0x3fc8, 0xb652,0x0a8e

1529 
DCW
 0x2ea6,0xc1e5, 0xc569,0x3fca, 0xb67c,0x0a5c

1530 
DCW
 0x2f02,0xc1d3, 0xc54e,0x3fcc, 0xb6a5,0x0a2b

1531 
DCW
 0x2f5d,0xc1c1, 0xc533,0x3fce, 0xb6cf,0x09f9

1532 
DCW
 0x2fb7,0xc1b0, 0xc518,0x3fd0, 0xb6f9,0x09c7

1533 
DCW
 0x3012,0xc19f, 0xc4fd,0x3fd2, 0xb723,0x0996

1534 
DCW
 0x306c,0xc18e, 0xc4e2,0x3fd4, 0xb74d,0x0964

1535 
DCW
 0x30c6,0xc17e, 0xc4c7,0x3fd5, 0xb778,0x0932

1536 
DCW
 0x3120,0xc16e, 0xc4ac,0x3fd7, 0xb7a2,0x0901

1537 
DCW
 0x3179,0xc15e, 0xc491,0x3fd9, 0xb7cd,0x08cf

1538 
DCW
 0x31d2,0xc14f, 0xc476,0x3fdb, 0xb7f8,0x089d

1539 
DCW
 0x322b,0xc140, 0xc45c,0x3fdc, 0xb823,0x086b

1540 
DCW
 0x3284,0xc131, 0xc441,0x3fde, 0xb84f,0x0839

1541 
DCW
 0x32dc,0xc123, 0xc426,0x3fe0, 0xb87a,0x0807

1542 
DCW
 0x3334,0xc115, 0xc40c,0x3fe1, 0xb8a6,0x07d6

1543 
DCW
 0x338c,0xc107, 0xc3f1,0x3fe3, 0xb8d1,0x07a4

1544 
DCW
 0x33e4,0xc0fa, 0xc3d6,0x3fe4, 0xb8fd,0x0772

1545 
DCW
 0x343b,0xc0ed, 0xc3bc,0x3fe6, 0xb92a,0x0740

1546 
DCW
 0x3492,0xc0e0, 0xc3a1,0x3fe7, 0xb956,0x070e

1547 
DCW
 0x34e8,0xc0d4, 0xc387,0x3fe8, 0xb982,0x06dc

1548 
DCW
 0x353f,0xc0c8, 0xc36c,0x3fea, 0xb9af,0x06aa

1549 
DCW
 0x3595,0xc0bd, 0xc352,0x3feb, 0xb9dc,0x0678

1550 
DCW
 0x35eb,0xc0b1, 0xc338,0x3fec, 0xba09,0x0646

1551 
DCW
 0x3640,0xc0a6, 0xc31d,0x3fed, 0xba36,0x0614

1552 
DCW
 0x3695,0xc09c, 0xc303,0x3fef, 0xba64,0x05e2

1553 
DCW
 0x36ea,0xc092, 0xc2e9,0x3ff0, 0xba91,0x05b0

1554 
DCW
 0x373f,0xc088, 0xc2cf,0x3ff1, 0xbabf,0x057e

1555 
DCW
 0x3793,0xc07e, 0xc2b4,0x3ff2, 0xbaed,0x054c

1556 
DCW
 0x37e7,0xc075, 0xc29a,0x3ff3, 0xbb1b,0x051a

1557 
DCW
 0x383b,0xc06c, 0xc280,0x3ff4, 0xbb49,0x04e7

1558 
DCW
 0x388e,0xc064, 0xc266,0x3ff5, 0xbb77,0x04b5

1559 
DCW
 0x38e1,0xc05c, 0xc24c,0x3ff6, 0xbba6,0x0483

1560 
DCW
 0x3934,0xc054, 0xc232,0x3ff7, 0xbbd4,0x0451

1561 
DCW
 0x3987,0xc04c, 0xc218,0x3ff7, 0xbc03,0x041f

1562 
DCW
 0x39d9,0xc045, 0xc1fe,0x3ff8, 0xbc32,0x03ed

1563 
DCW
 0x3a2b,0xc03f, 0xc1e4,0x3ff9, 0xbc61,0x03bb

1564 
DCW
 0x3a7c,0xc038, 0xc1cb,0x3ffa, 0xbc91,0x0388

1565 
DCW
 0x3acd,0xc032, 0xc1b1,0x3ffa, 0xbcc0,0x0356

1566 
DCW
 0x3b1e,0xc02c, 0xc197,0x3ffb, 0xbcf0,0x0324

1567 
DCW
 0x3b6f,0xc027, 0xc17d,0x3ffc, 0xbd20,0x02f2

1568 
DCW
 0x3bbf,0xc022, 0xc164,0x3ffc, 0xbd50,0x02c0

1569 
DCW
 0x3c0f,0xc01d, 0xc14a,0x3ffd, 0xbd80,0x028d

1570 
DCW
 0x3c5f,0xc019, 0xc130,0x3ffd, 0xbdb0,0x025b

1571 
DCW
 0x3cae,0xc015, 0xc117,0x3ffe, 0xbde1,0x0229

1572 
DCW
 0x3cfd,0xc011, 0xc0fd,0x3ffe, 0xbe11,0x01f7

1573 
DCW
 0x3d4c,0xc00e, 0xc0e4,0x3ffe, 0xbe42,0x01c4

1574 
DCW
 0x3d9a,0xc00b, 0xc0ca,0x3fff, 0xbe73,0x0192

1575 
DCW
 0x3de8,0xc009, 0xc0b1,0x3fff, 0xbea4,0x0160

1576 
DCW
 0x3e35,0xc006, 0xc097,0x3fff, 0xbed5,0x012e

1577 
DCW
 0x3e83,0xc004, 0xc07e,0x4000, 0xbf07,0x00fb

1578 
DCW
 0x3ed0,0xc003, 0xc065,0x4000, 0xbf38,0x00c9

1579 
DCW
 0x3f1c,0xc002, 0xc04c,0x4000, 0xbf6a,0x0097

1580 
DCW
 0x3f69,0xc001, 0xc032,0x4000, 0xbf9c,0x0065

1581 
DCW
 0x3fb4,0xc000, 0xc019,0x4000, 0xbfce,0x0032

1585 ; 
Com∂ex
 
c⁄jug©e
 
mu…ùly
 
a
=(
xr
+
i
*
xi
)*(
¸
-i*
ci
)

1586 ; 
x
 = 
xr
 + 
i
*
	`xi
 (
two
 16-
bôs
 
∑cked
 
ö
 32-
bô
)

1587 ; 
w
 = 
¸
 + 
i
*
	`ci
 (
two
 16-
bôs
 
∑cked
 
ö
 32-
bô
)

1588 
MACRO


1589 
C_MUL9e
 
$a
, 
$x
, 
$w


1590 
SMULBT
 
t0
, 
$x
, 
$w
 ; 
xr
*
ci


1591 
SMULBB
 
$a
.
_r
, 
$x
, 
$w
 ; 
xr
*
¸


1592 
SMULTB
 
$a
.
_i
, 
$x
, 
$w
 ; 
xi
*
¸


1593 
SMLATT
 
$a
.
_r
, 
$x
, 
$w
, $a._∏; 
xr
*
¸
+
xi
*
ci


1594 
SUB
 
$a
.
_i
, $a._i, 
t0
 ; 
xi
*
¸
-
xr
*
ci


1595 
MEND


1597 ; 
	$f·_16_¨m9e
(*
y
, *
x
, 
N
)

1598 
f·_16_¨m9e


1599 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

1600 
MOV
 
	gt0
, #0 ; 
bô
 
ªvî£d
 
cou¡î


1601 
MVN
 
	gR
, #0
	gx80000000
 ; R=0x7FFFFFFF

1602 
fú°_°age_¨m9e


1603 ; 
fú°
 
°age
 
lﬂd
 
™d
 
bô
 
ªvî£


1604 
ADDS
 
	gt1
, 
	gx
, 
	gt0
, 
	gLSL
#2 ;Å1=&
x
[
t0
] 
™d
 
˛ór
 
ˇºy


1605 
C_LDR
 
x0
, 
	gt1
, 
N


1606 
C_LDR
 
	gx2
, 
	gt1
, 
N


1607 
C_LDR
 
	gx1
, 
	gt1
, 
N


1608 
C_LDR
 
	gx3
, 
	gt1
, 
N


1609 
	gC_FFT4
 0

1610 
C_STR
 
	gx0
, 
	gy
, #4

1611 
C_STR
 
	gx1
, 
	gy
, #4

1612 
C_STR
 
	gx2
, 
	gy
, #4

1613 
C_STR
 
	gy3
, 
	gy
, #4

1614 ; 
bô
 
ªvî£d
 
ö¸emít
 
modulo
 (
N
/4)

1615 
RSC
 
	gt0
,Å0, 
	gN
, 
	gLSR
 #2 ;Å0 = (
N
/4)-
t0
-1

1616 
CLZ
 
t1
, 
	gt0
 ; 
föd
 
	gÀadög
 1

1617 
EORS
 
	gt0
,Å0, 
	gR
, 
ASR
 
	gt1
 ; 
toggÀ
 
bôs
 
bñow
 
	gÀadög
 1

1618 
BNE
 
	gfú°_°age_¨m9e
 ; 
lo›
 
cou¡
 
n⁄
 
	gzîo


1619 ; 
föished
 
the
 
fú°
 
°age


1620 
SUB
 
	gx
, 
	gy
, 
	gN
, 
	gLSL
 #2 ; x = 
w‹kög
 
buf„r


1621 
MOV
 
R
, #16

1622 
MOVS
 
	gS
, 
	gN
, 
	gLSR
#4

1623 
LDMEQFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

1624 
ADR
 
	gc
, 
f·_èbÀ_¨m9e


1625 
	g√xt_°age_¨m9e


1626 ; 
	gS
 = 
the
 
numbî
 
of
 
blocks


1627 ; 
	gR
 = 
the
 
numbî
 
of
 
ßm∂es
 
ö
 
óch
 
block


1628 
STMFD
 
•
!, {
	gx
, 
	gS
}

1629 
ADD
 
	gt0
, 
	gR
, R, 
	gLSL
#1

1630 
ADD
 
	gx
, x, 
t0


1631 
SUB
 
	gS
, S, #1<<16

1632 
√xt_block_¨m9e


1633 
ADD
 
	gS
, S, 
	gR
, 
	gLSL
#(16-2)

1634 
	g√xt_buâîÊy_¨m9e


1635 ; 
	gS
=((
numbî
 
buâîÊõs
 
À·
-1)<<16)

1636 ; + (
numbî
 
of
 
blocks
 
	gÀ·
)

1637 
LDR
 
	gx2_r
, [
x
], -
	gR
 ; 
∑cked
 
d©a


1638 
LDR
 
	gx2_i
, [
c
], #4 ; 
∑cked
 
c€fficõ¡s


1639 
LDR
 
	gx1_r
, [
x
], -
R


1640 
LDR
 
	gx1_i
, [
c
], #4

1641 
LDR
 
	gx0_r
, [
x
], -
R


1642 
LDR
 
	gx0_i
, [
c
], #4

1643 
C_MUL9e
 
	gx3
, 
	gx2_r
, 
x2_i


1644 
C_MUL9e
 
	gx2
, 
	gx1_r
, 
x1_i


1645 
C_MUL9e
 
	gx1
, 
	gx0_r
, 
x0_i


1646 
C_LDR
 
	gx0
, 
	gx
, #0

1647 
	gC_FFT4
 15 ; 
c€fficõ¡s
 
¨e
 
Q15


1648 
C_STR
 
	gx0
, 
	gx
, 
R


1649 
C_STR
 
	gx1
, 
	gx
, 
R


1650 
C_STR
 
	gx2
, 
	gx
, 
R


1651 
C_STR
 
	gy3
, 
	gx
, #4

1652 
SUBS
 
	gS
, S, #1<<16

1653 
BGE
 
√xt_buâîÊy_¨m9e


1654 
ADD
 
	gt0
, 
	gR
, R, 
	gLSL
#1

1655 
ADD
 
	gx
, x, 
t0


1656 
SUB
 
	gS
, S, #1

1657 
MOVS
 
	gt1
, 
	gS
, 
	gLSL
#16

1658 
SUBNE
 
	gc
, c, 
t0


1659 
BNE
 
√xt_block_¨m9e


1660 
LDMFD
 
	g•
!, {
	gx
, 
	gS
}

1661 
MOV
 
	gR
, R, 
	gLSL
#2 ; 
quadrou∂e
 
block
 
size


1662 
MOVS
 
	gS
, S, 
	gLSR
#2 ; 
qu¨ãr
 
numbî
 
of
 
blocks


1663 
BNE
 
√xt_°age_¨m9e


1664 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

1666 
	gf·_èbÀ_¨m9e


1667 ; 
FFT
 
twiddÀ
 
èbÀ
 
of
 
åùÀts
 
E
(3
t
), E(t), E(2t)

1668 ; 
Whîe
 
E
(
t
)=
cos
—)+
i
*
	$sö
(
t
Ë
©
 
Q15


1669 ; 
N
=16 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

1670 
DCW
 0x7fff,0x0000, 0x7fff,0x0000, 0x7fff,0x0000

1671 
DCW
 0x30fc,0x7642, 0x7642,0x30fc, 0x5a82,0x5a82

1672 
DCW
 0xa57e,0x5a82, 0x5a82,0x5a82, 0x0000,0x7fff

1673 
DCW
 0x89be,0xcf04, 0x30fc,0x7642, 0xa57e,0x5a82

1674 ; 
N
=64 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

1675 
DCW
 0x7fff,0x0000, 0x7fff,0x0000, 0x7fff,0x0000

1676 
DCW
 0x7a7d,0x2528, 0x7f62,0x0c8c, 0x7d8a,0x18f9

1677 
DCW
 0x6a6e,0x471d, 0x7d8a,0x18f9, 0x7642,0x30fc

1678 
DCW
 0x5134,0x62f2, 0x7a7d,0x2528, 0x6a6e,0x471d

1679 
DCW
 0x30fc,0x7642, 0x7642,0x30fc, 0x5a82,0x5a82

1680 
DCW
 0x0c8c,0x7f62, 0x70e3,0x3c57, 0x471d,0x6a6e

1681 
DCW
 0xe707,0x7d8a, 0x6a6e,0x471d, 0x30fc,0x7642

1682 
DCW
 0xc3a9,0x70e3, 0x62f2,0x5134, 0x18f9,0x7d8a

1683 
DCW
 0xa57e,0x5a82, 0x5a82,0x5a82, 0x0000,0x7fff

1684 
DCW
 0x8f1d,0x3c57, 0x5134,0x62f2, 0xe707,0x7d8a

1685 
DCW
 0x8276,0x18f9, 0x471d,0x6a6e, 0xcf04,0x7642

1686 
DCW
 0x809e,0xf374, 0x3c57,0x70e3, 0xb8e3,0x6a6e

1687 
DCW
 0x89be,0xcf04, 0x30fc,0x7642, 0xa57e,0x5a82

1688 
DCW
 0x9d0e,0xaecc, 0x2528,0x7a7d, 0x9592,0x471d

1689 
DCW
 0xb8e3,0x9592, 0x18f9,0x7d8a, 0x89be,0x30fc

1690 
DCW
 0xdad8,0x8583, 0x0c8c,0x7f62, 0x8276,0x18f9

1691 ; 
N
=256 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

1692 
DCW
 0x7fff,0x0000, 0x7fff,0x0000, 0x7fff,0x0000

1693 
DCW
 0x7fa7,0x096b, 0x7ff6,0x0324, 0x7fd9,0x0648

1694 
DCW
 0x7e9d,0x12c8, 0x7fd9,0x0648, 0x7f62,0x0c8c

1695 
DCW
 0x7ce4,0x1c0c, 0x7fa7,0x096b, 0x7e9d,0x12c8

1696 
DCW
 0x7a7d,0x2528, 0x7f62,0x0c8c, 0x7d8a,0x18f9

1697 
DCW
 0x776c,0x2e11, 0x7f0a,0x0fab, 0x7c2a,0x1f1a

1698 
DCW
 0x73b6,0x36ba, 0x7e9d,0x12c8, 0x7a7d,0x2528

1699 
DCW
 0x6f5f,0x3f17, 0x7e1e,0x15e2, 0x7885,0x2b1f

1700 
DCW
 0x6a6e,0x471d, 0x7d8a,0x18f9, 0x7642,0x30fc

1701 
DCW
 0x64e9,0x4ec0, 0x7ce4,0x1c0c, 0x73b6,0x36ba

1702 
DCW
 0x5ed7,0x55f6, 0x7c2a,0x1f1a, 0x70e3,0x3c57

1703 
DCW
 0x5843,0x5cb4, 0x7b5d,0x2224, 0x6dca,0x41ce

1704 
DCW
 0x5134,0x62f2, 0x7a7d,0x2528, 0x6a6e,0x471d

1705 
DCW
 0x49b4,0x68a7, 0x798a,0x2827, 0x66d0,0x4c40

1706 
DCW
 0x41ce,0x6dca, 0x7885,0x2b1f, 0x62f2,0x5134

1707 
DCW
 0x398d,0x7255, 0x776c,0x2e11, 0x5ed7,0x55f6

1708 
DCW
 0x30fc,0x7642, 0x7642,0x30fc, 0x5a82,0x5a82

1709 
DCW
 0x2827,0x798a, 0x7505,0x33df, 0x55f6,0x5ed7

1710 
DCW
 0x1f1a,0x7c2a, 0x73b6,0x36ba, 0x5134,0x62f2

1711 
DCW
 0x15e2,0x7e1e, 0x7255,0x398d, 0x4c40,0x66d0

1712 
DCW
 0x0c8c,0x7f62, 0x70e3,0x3c57, 0x471d,0x6a6e

1713 
DCW
 0x0324,0x7ff6, 0x6f5f,0x3f17, 0x41ce,0x6dca

1714 
DCW
 0xf9b8,0x7fd9, 0x6dca,0x41ce, 0x3c57,0x70e3

1715 
DCW
 0xf055,0x7f0a, 0x6c24,0x447b, 0x36ba,0x73b6

1716 
DCW
 0xe707,0x7d8a, 0x6a6e,0x471d, 0x30fc,0x7642

1717 
DCW
 0xdddc,0x7b5d, 0x68a7,0x49b4, 0x2b1f,0x7885

1718 
DCW
 0xd4e1,0x7885, 0x66d0,0x4c40, 0x2528,0x7a7d

1719 
DCW
 0xcc21,0x7505, 0x64e9,0x4ec0, 0x1f1a,0x7c2a

1720 
DCW
 0xc3a9,0x70e3, 0x62f2,0x5134, 0x18f9,0x7d8a

1721 
DCW
 0xbb85,0x6c24, 0x60ec,0x539b, 0x12c8,0x7e9d

1722 
DCW
 0xb3c0,0x66d0, 0x5ed7,0x55f6, 0x0c8c,0x7f62

1723 
DCW
 0xac65,0x60ec, 0x5cb4,0x5843, 0x0648,0x7fd9

1724 
DCW
 0xa57e,0x5a82, 0x5a82,0x5a82, 0x0000,0x7fff

1725 
DCW
 0x9f14,0x539b, 0x5843,0x5cb4, 0xf9b8,0x7fd9

1726 
DCW
 0x9930,0x4c40, 0x55f6,0x5ed7, 0xf374,0x7f62

1727 
DCW
 0x93dc,0x447b, 0x539b,0x60ec, 0xed38,0x7e9d

1728 
DCW
 0x8f1d,0x3c57, 0x5134,0x62f2, 0xe707,0x7d8a

1729 
DCW
 0x8afb,0x33df, 0x4ec0,0x64e9, 0xe0e6,0x7c2a

1730 
DCW
 0x877b,0x2b1f, 0x4c40,0x66d0, 0xdad8,0x7a7d

1731 
DCW
 0x84a3,0x2224, 0x49b4,0x68a7, 0xd4e1,0x7885

1732 
DCW
 0x8276,0x18f9, 0x471d,0x6a6e, 0xcf04,0x7642

1733 
DCW
 0x80f6,0x0fab, 0x447b,0x6c24, 0xc946,0x73b6

1734 
DCW
 0x8027,0x0648, 0x41ce,0x6dca, 0xc3a9,0x70e3

1735 
DCW
 0x800a,0xfcdc, 0x3f17,0x6f5f, 0xbe32,0x6dca

1736 
DCW
 0x809e,0xf374, 0x3c57,0x70e3, 0xb8e3,0x6a6e

1737 
DCW
 0x81e2,0xea1e, 0x398d,0x7255, 0xb3c0,0x66d0

1738 
DCW
 0x83d6,0xe0e6, 0x36ba,0x73b6, 0xaecc,0x62f2

1739 
DCW
 0x8676,0xd7d9, 0x33df,0x7505, 0xaa0a,0x5ed7

1740 
DCW
 0x89be,0xcf04, 0x30fc,0x7642, 0xa57e,0x5a82

1741 
DCW
 0x8dab,0xc673, 0x2e11,0x776c, 0xa129,0x55f6

1742 
DCW
 0x9236,0xbe32, 0x2b1f,0x7885, 0x9d0e,0x5134

1743 
DCW
 0x9759,0xb64c, 0x2827,0x798a, 0x9930,0x4c40

1744 
DCW
 0x9d0e,0xaecc, 0x2528,0x7a7d, 0x9592,0x471d

1745 
DCW
 0xa34c,0xa7bd, 0x2224,0x7b5d, 0x9236,0x41ce

1746 
DCW
 0xaa0a,0xa129, 0x1f1a,0x7c2a, 0x8f1d,0x3c57

1747 
DCW
 0xb140,0x9b17, 0x1c0c,0x7ce4, 0x8c4a,0x36ba

1748 
DCW
 0xb8e3,0x9592, 0x18f9,0x7d8a, 0x89be,0x30fc

1749 
DCW
 0xc0e9,0x90a1, 0x15e2,0x7e1e, 0x877b,0x2b1f

1750 
DCW
 0xc946,0x8c4a, 0x12c8,0x7e9d, 0x8583,0x2528

1751 
DCW
 0xd1ef,0x8894, 0x0fab,0x7f0a, 0x83d6,0x1f1a

1752 
DCW
 0xdad8,0x8583, 0x0c8c,0x7f62, 0x8276,0x18f9

1753 
DCW
 0xe3f4,0x831c, 0x096b,0x7fa7, 0x8163,0x12c8

1754 
DCW
 0xed38,0x8163, 0x0648,0x7fd9, 0x809e,0x0c8c

1755 
DCW
 0xf695,0x8059, 0x0324,0x7ff6, 0x8027,0x0648

1756 ; 
N
=1024 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

1757 
DCW
 0x7fff,0x0000, 0x7fff,0x0000, 0x7fff,0x0000

1758 
DCW
 0x7ffa,0x025b, 0x7fff,0x00c9, 0x7ffe,0x0192

1759 
DCW
 0x7fea,0x04b6, 0x7ffe,0x0192, 0x7ff6,0x0324

1760 
DCW
 0x7fce,0x0711, 0x7ffa,0x025b, 0x7fea,0x04b6

1761 
DCW
 0x7fa7,0x096b, 0x7ff6,0x0324, 0x7fd9,0x0648

1762 
DCW
 0x7f75,0x0bc4, 0x7ff1,0x03ed, 0x7fc2,0x07d9

1763 
DCW
 0x7f38,0x0e1c, 0x7fea,0x04b6, 0x7fa7,0x096b

1764 
DCW
 0x7ef0,0x1073, 0x7fe2,0x057f, 0x7f87,0x0afb

1765 
DCW
 0x7e9d,0x12c8, 0x7fd9,0x0648, 0x7f62,0x0c8c

1766 
DCW
 0x7e3f,0x151c, 0x7fce,0x0711, 0x7f38,0x0e1c

1767 
DCW
 0x7dd6,0x176e, 0x7fc2,0x07d9, 0x7f0a,0x0fab

1768 
DCW
 0x7d63,0x19be, 0x7fb5,0x08a2, 0x7ed6,0x113a

1769 
DCW
 0x7ce4,0x1c0c, 0x7fa7,0x096b, 0x7e9d,0x12c8

1770 
DCW
 0x7c5a,0x1e57, 0x7f98,0x0a33, 0x7e60,0x1455

1771 
DCW
 0x7bc6,0x209f, 0x7f87,0x0afb, 0x7e1e,0x15e2

1772 
DCW
 0x7b27,0x22e5, 0x7f75,0x0bc4, 0x7dd6,0x176e

1773 
DCW
 0x7a7d,0x2528, 0x7f62,0x0c8c, 0x7d8a,0x18f9

1774 
DCW
 0x79c9,0x2768, 0x7f4e,0x0d54, 0x7d3a,0x1a83

1775 
DCW
 0x790a,0x29a4, 0x7f38,0x0e1c, 0x7ce4,0x1c0c

1776 
DCW
 0x7840,0x2bdc, 0x7f22,0x0ee4, 0x7c89,0x1d93

1777 
DCW
 0x776c,0x2e11, 0x7f0a,0x0fab, 0x7c2a,0x1f1a

1778 
DCW
 0x768e,0x3042, 0x7ef0,0x1073, 0x7bc6,0x209f

1779 
DCW
 0x75a6,0x326e, 0x7ed6,0x113a, 0x7b5d,0x2224

1780 
DCW
 0x74b3,0x3497, 0x7eba,0x1201, 0x7aef,0x23a7

1781 
DCW
 0x73b6,0x36ba, 0x7e9d,0x12c8, 0x7a7d,0x2528

1782 
DCW
 0x72af,0x38d9, 0x7e7f,0x138f, 0x7a06,0x26a8

1783 
DCW
 0x719e,0x3af3, 0x7e60,0x1455, 0x798a,0x2827

1784 
DCW
 0x7083,0x3d08, 0x7e3f,0x151c, 0x790a,0x29a4

1785 
DCW
 0x6f5f,0x3f17, 0x7e1e,0x15e2, 0x7885,0x2b1f

1786 
DCW
 0x6e31,0x4121, 0x7dfb,0x16a8, 0x77fb,0x2c99

1787 
DCW
 0x6cf9,0x4326, 0x7dd6,0x176e, 0x776c,0x2e11

1788 
DCW
 0x6bb8,0x4524, 0x7db1,0x1833, 0x76d9,0x2f87

1789 
DCW
 0x6a6e,0x471d, 0x7d8a,0x18f9, 0x7642,0x30fc

1790 
DCW
 0x691a,0x490f, 0x7d63,0x19be, 0x75a6,0x326e

1791 
DCW
 0x67bd,0x4afb, 0x7d3a,0x1a83, 0x7505,0x33df

1792 
DCW
 0x6657,0x4ce1, 0x7d0f,0x1b47, 0x7460,0x354e

1793 
DCW
 0x64e9,0x4ec0, 0x7ce4,0x1c0c, 0x73b6,0x36ba

1794 
DCW
 0x6371,0x5098, 0x7cb7,0x1cd0, 0x7308,0x3825

1795 
DCW
 0x61f1,0x5269, 0x7c89,0x1d93, 0x7255,0x398d

1796 
DCW
 0x6068,0x5433, 0x7c5a,0x1e57, 0x719e,0x3af3

1797 
DCW
 0x5ed7,0x55f6, 0x7c2a,0x1f1a, 0x70e3,0x3c57

1798 
DCW
 0x5d3e,0x57b1, 0x7bf9,0x1fdd, 0x7023,0x3db8

1799 
DCW
 0x5b9d,0x5964, 0x7bc6,0x209f, 0x6f5f,0x3f17

1800 
DCW
 0x59f4,0x5b10, 0x7b92,0x2162, 0x6e97,0x4074

1801 
DCW
 0x5843,0x5cb4, 0x7b5d,0x2224, 0x6dca,0x41ce

1802 
DCW
 0x568a,0x5e50, 0x7b27,0x22e5, 0x6cf9,0x4326

1803 
DCW
 0x54ca,0x5fe4, 0x7aef,0x23a7, 0x6c24,0x447b

1804 
DCW
 0x5303,0x616f, 0x7ab7,0x2467, 0x6b4b,0x45cd

1805 
DCW
 0x5134,0x62f2, 0x7a7d,0x2528, 0x6a6e,0x471d

1806 
DCW
 0x4f5e,0x646c, 0x7a42,0x25e8, 0x698c,0x486a

1807 
DCW
 0x4d81,0x65de, 0x7a06,0x26a8, 0x68a7,0x49b4

1808 
DCW
 0x4b9e,0x6747, 0x79c9,0x2768, 0x67bd,0x4afb

1809 
DCW
 0x49b4,0x68a7, 0x798a,0x2827, 0x66d0,0x4c40

1810 
DCW
 0x47c4,0x69fd, 0x794a,0x28e5, 0x65de,0x4d81

1811 
DCW
 0x45cd,0x6b4b, 0x790a,0x29a4, 0x64e9,0x4ec0

1812 
DCW
 0x43d1,0x6c8f, 0x78c8,0x2a62, 0x63ef,0x4ffb

1813 
DCW
 0x41ce,0x6dca, 0x7885,0x2b1f, 0x62f2,0x5134

1814 
DCW
 0x3fc6,0x6efb, 0x7840,0x2bdc, 0x61f1,0x5269

1815 
DCW
 0x3db8,0x7023, 0x77fb,0x2c99, 0x60ec,0x539b

1816 
DCW
 0x3ba5,0x7141, 0x77b4,0x2d55, 0x5fe4,0x54ca

1817 
DCW
 0x398d,0x7255, 0x776c,0x2e11, 0x5ed7,0x55f6

1818 
DCW
 0x3770,0x735f, 0x7723,0x2ecc, 0x5dc8,0x571e

1819 
DCW
 0x354e,0x7460, 0x76d9,0x2f87, 0x5cb4,0x5843

1820 
DCW
 0x3327,0x7556, 0x768e,0x3042, 0x5b9d,0x5964

1821 
DCW
 0x30fc,0x7642, 0x7642,0x30fc, 0x5a82,0x5a82

1822 
DCW
 0x2ecc,0x7723, 0x75f4,0x31b5, 0x5964,0x5b9d

1823 
DCW
 0x2c99,0x77fb, 0x75a6,0x326e, 0x5843,0x5cb4

1824 
DCW
 0x2a62,0x78c8, 0x7556,0x3327, 0x571e,0x5dc8

1825 
DCW
 0x2827,0x798a, 0x7505,0x33df, 0x55f6,0x5ed7

1826 
DCW
 0x25e8,0x7a42, 0x74b3,0x3497, 0x54ca,0x5fe4

1827 
DCW
 0x23a7,0x7aef, 0x7460,0x354e, 0x539b,0x60ec

1828 
DCW
 0x2162,0x7b92, 0x740b,0x3604, 0x5269,0x61f1

1829 
DCW
 0x1f1a,0x7c2a, 0x73b6,0x36ba, 0x5134,0x62f2

1830 
DCW
 0x1cd0,0x7cb7, 0x735f,0x3770, 0x4ffb,0x63ef

1831 
DCW
 0x1a83,0x7d3a, 0x7308,0x3825, 0x4ec0,0x64e9

1832 
DCW
 0x1833,0x7db1, 0x72af,0x38d9, 0x4d81,0x65de

1833 
DCW
 0x15e2,0x7e1e, 0x7255,0x398d, 0x4c40,0x66d0

1834 
DCW
 0x138f,0x7e7f, 0x71fa,0x3a40, 0x4afb,0x67bd

1835 
DCW
 0x113a,0x7ed6, 0x719e,0x3af3, 0x49b4,0x68a7

1836 
DCW
 0x0ee4,0x7f22, 0x7141,0x3ba5, 0x486a,0x698c

1837 
DCW
 0x0c8c,0x7f62, 0x70e3,0x3c57, 0x471d,0x6a6e

1838 
DCW
 0x0a33,0x7f98, 0x7083,0x3d08, 0x45cd,0x6b4b

1839 
DCW
 0x07d9,0x7fc2, 0x7023,0x3db8, 0x447b,0x6c24

1840 
DCW
 0x057f,0x7fe2, 0x6fc2,0x3e68, 0x4326,0x6cf9

1841 
DCW
 0x0324,0x7ff6, 0x6f5f,0x3f17, 0x41ce,0x6dca

1842 
DCW
 0x00c9,0x7fff, 0x6efb,0x3fc6, 0x4074,0x6e97

1843 
DCW
 0xfe6e,0x7ffe, 0x6e97,0x4074, 0x3f17,0x6f5f

1844 
DCW
 0xfc13,0x7ff1, 0x6e31,0x4121, 0x3db8,0x7023

1845 
DCW
 0xf9b8,0x7fd9, 0x6dca,0x41ce, 0x3c57,0x70e3

1846 
DCW
 0xf75e,0x7fb5, 0x6d62,0x427a, 0x3af3,0x719e

1847 
DCW
 0xf505,0x7f87, 0x6cf9,0x4326, 0x398d,0x7255

1848 
DCW
 0xf2ac,0x7f4e, 0x6c8f,0x43d1, 0x3825,0x7308

1849 
DCW
 0xf055,0x7f0a, 0x6c24,0x447b, 0x36ba,0x73b6

1850 
DCW
 0xedff,0x7eba, 0x6bb8,0x4524, 0x354e,0x7460

1851 
DCW
 0xebab,0x7e60, 0x6b4b,0x45cd, 0x33df,0x7505

1852 
DCW
 0xe958,0x7dfb, 0x6add,0x4675, 0x326e,0x75a6

1853 
DCW
 0xe707,0x7d8a, 0x6a6e,0x471d, 0x30fc,0x7642

1854 
DCW
 0xe4b9,0x7d0f, 0x69fd,0x47c4, 0x2f87,0x76d9

1855 
DCW
 0xe26d,0x7c89, 0x698c,0x486a, 0x2e11,0x776c

1856 
DCW
 0xe023,0x7bf9, 0x691a,0x490f, 0x2c99,0x77fb

1857 
DCW
 0xdddc,0x7b5d, 0x68a7,0x49b4, 0x2b1f,0x7885

1858 
DCW
 0xdb99,0x7ab7, 0x6832,0x4a58, 0x29a4,0x790a

1859 
DCW
 0xd958,0x7a06, 0x67bd,0x4afb, 0x2827,0x798a

1860 
DCW
 0xd71b,0x794a, 0x6747,0x4b9e, 0x26a8,0x7a06

1861 
DCW
 0xd4e1,0x7885, 0x66d0,0x4c40, 0x2528,0x7a7d

1862 
DCW
 0xd2ab,0x77b4, 0x6657,0x4ce1, 0x23a7,0x7aef

1863 
DCW
 0xd079,0x76d9, 0x65de,0x4d81, 0x2224,0x7b5d

1864 
DCW
 0xce4b,0x75f4, 0x6564,0x4e21, 0x209f,0x7bc6

1865 
DCW
 0xcc21,0x7505, 0x64e9,0x4ec0, 0x1f1a,0x7c2a

1866 
DCW
 0xc9fc,0x740b, 0x646c,0x4f5e, 0x1d93,0x7c89

1867 
DCW
 0xc7db,0x7308, 0x63ef,0x4ffb, 0x1c0c,0x7ce4

1868 
DCW
 0xc5c0,0x71fa, 0x6371,0x5098, 0x1a83,0x7d3a

1869 
DCW
 0xc3a9,0x70e3, 0x62f2,0x5134, 0x18f9,0x7d8a

1870 
DCW
 0xc198,0x6fc2, 0x6272,0x51cf, 0x176e,0x7dd6

1871 
DCW
 0xbf8c,0x6e97, 0x61f1,0x5269, 0x15e2,0x7e1e

1872 
DCW
 0xbd86,0x6d62, 0x616f,0x5303, 0x1455,0x7e60

1873 
DCW
 0xbb85,0x6c24, 0x60ec,0x539b, 0x12c8,0x7e9d

1874 
DCW
 0xb98b,0x6add, 0x6068,0x5433, 0x113a,0x7ed6

1875 
DCW
 0xb796,0x698c, 0x5fe4,0x54ca, 0x0fab,0x7f0a

1876 
DCW
 0xb5a8,0x6832, 0x5f5e,0x5560, 0x0e1c,0x7f38

1877 
DCW
 0xb3c0,0x66d0, 0x5ed7,0x55f6, 0x0c8c,0x7f62

1878 
DCW
 0xb1df,0x6564, 0x5e50,0x568a, 0x0afb,0x7f87

1879 
DCW
 0xb005,0x63ef, 0x5dc8,0x571e, 0x096b,0x7fa7

1880 
DCW
 0xae31,0x6272, 0x5d3e,0x57b1, 0x07d9,0x7fc2

1881 
DCW
 0xac65,0x60ec, 0x5cb4,0x5843, 0x0648,0x7fd9

1882 
DCW
 0xaaa0,0x5f5e, 0x5c29,0x58d4, 0x04b6,0x7fea

1883 
DCW
 0xa8e2,0x5dc8, 0x5b9d,0x5964, 0x0324,0x7ff6

1884 
DCW
 0xa72c,0x5c29, 0x5b10,0x59f4, 0x0192,0x7ffe

1885 
DCW
 0xa57e,0x5a82, 0x5a82,0x5a82, 0x0000,0x7fff

1886 
DCW
 0xa3d7,0x58d4, 0x59f4,0x5b10, 0xfe6e,0x7ffe

1887 
DCW
 0xa238,0x571e, 0x5964,0x5b9d, 0xfcdc,0x7ff6

1888 
DCW
 0xa0a2,0x5560, 0x58d4,0x5c29, 0xfb4a,0x7fea

1889 
DCW
 0x9f14,0x539b, 0x5843,0x5cb4, 0xf9b8,0x7fd9

1890 
DCW
 0x9d8e,0x51cf, 0x57b1,0x5d3e, 0xf827,0x7fc2

1891 
DCW
 0x9c11,0x4ffb, 0x571e,0x5dc8, 0xf695,0x7fa7

1892 
DCW
 0x9a9c,0x4e21, 0x568a,0x5e50, 0xf505,0x7f87

1893 
DCW
 0x9930,0x4c40, 0x55f6,0x5ed7, 0xf374,0x7f62

1894 
DCW
 0x97ce,0x4a58, 0x5560,0x5f5e, 0xf1e4,0x7f38

1895 
DCW
 0x9674,0x486a, 0x54ca,0x5fe4, 0xf055,0x7f0a

1896 
DCW
 0x9523,0x4675, 0x5433,0x6068, 0xeec6,0x7ed6

1897 
DCW
 0x93dc,0x447b, 0x539b,0x60ec, 0xed38,0x7e9d

1898 
DCW
 0x929e,0x427a, 0x5303,0x616f, 0xebab,0x7e60

1899 
DCW
 0x9169,0x4074, 0x5269,0x61f1, 0xea1e,0x7e1e

1900 
DCW
 0x903e,0x3e68, 0x51cf,0x6272, 0xe892,0x7dd6

1901 
DCW
 0x8f1d,0x3c57, 0x5134,0x62f2, 0xe707,0x7d8a

1902 
DCW
 0x8e06,0x3a40, 0x5098,0x6371, 0xe57d,0x7d3a

1903 
DCW
 0x8cf8,0x3825, 0x4ffb,0x63ef, 0xe3f4,0x7ce4

1904 
DCW
 0x8bf5,0x3604, 0x4f5e,0x646c, 0xe26d,0x7c89

1905 
DCW
 0x8afb,0x33df, 0x4ec0,0x64e9, 0xe0e6,0x7c2a

1906 
DCW
 0x8a0c,0x31b5, 0x4e21,0x6564, 0xdf61,0x7bc6

1907 
DCW
 0x8927,0x2f87, 0x4d81,0x65de, 0xdddc,0x7b5d

1908 
DCW
 0x884c,0x2d55, 0x4ce1,0x6657, 0xdc59,0x7aef

1909 
DCW
 0x877b,0x2b1f, 0x4c40,0x66d0, 0xdad8,0x7a7d

1910 
DCW
 0x86b6,0x28e5, 0x4b9e,0x6747, 0xd958,0x7a06

1911 
DCW
 0x85fa,0x26a8, 0x4afb,0x67bd, 0xd7d9,0x798a

1912 
DCW
 0x8549,0x2467, 0x4a58,0x6832, 0xd65c,0x790a

1913 
DCW
 0x84a3,0x2224, 0x49b4,0x68a7, 0xd4e1,0x7885

1914 
DCW
 0x8407,0x1fdd, 0x490f,0x691a, 0xd367,0x77fb

1915 
DCW
 0x8377,0x1d93, 0x486a,0x698c, 0xd1ef,0x776c

1916 
DCW
 0x82f1,0x1b47, 0x47c4,0x69fd, 0xd079,0x76d9

1917 
DCW
 0x8276,0x18f9, 0x471d,0x6a6e, 0xcf04,0x7642

1918 
DCW
 0x8205,0x16a8, 0x4675,0x6add, 0xcd92,0x75a6

1919 
DCW
 0x81a0,0x1455, 0x45cd,0x6b4b, 0xcc21,0x7505

1920 
DCW
 0x8146,0x1201, 0x4524,0x6bb8, 0xcab2,0x7460

1921 
DCW
 0x80f6,0x0fab, 0x447b,0x6c24, 0xc946,0x73b6

1922 
DCW
 0x80b2,0x0d54, 0x43d1,0x6c8f, 0xc7db,0x7308

1923 
DCW
 0x8079,0x0afb, 0x4326,0x6cf9, 0xc673,0x7255

1924 
DCW
 0x804b,0x08a2, 0x427a,0x6d62, 0xc50d,0x719e

1925 
DCW
 0x8027,0x0648, 0x41ce,0x6dca, 0xc3a9,0x70e3

1926 
DCW
 0x800f,0x03ed, 0x4121,0x6e31, 0xc248,0x7023

1927 
DCW
 0x8002,0x0192, 0x4074,0x6e97, 0xc0e9,0x6f5f

1928 
DCW
 0x8001,0xff37, 0x3fc6,0x6efb, 0xbf8c,0x6e97

1929 
DCW
 0x800a,0xfcdc, 0x3f17,0x6f5f, 0xbe32,0x6dca

1930 
DCW
 0x801e,0xfa81, 0x3e68,0x6fc2, 0xbcda,0x6cf9

1931 
DCW
 0x803e,0xf827, 0x3db8,0x7023, 0xbb85,0x6c24

1932 
DCW
 0x8068,0xf5cd, 0x3d08,0x7083, 0xba33,0x6b4b

1933 
DCW
 0x809e,0xf374, 0x3c57,0x70e3, 0xb8e3,0x6a6e

1934 
DCW
 0x80de,0xf11c, 0x3ba5,0x7141, 0xb796,0x698c

1935 
DCW
 0x812a,0xeec6, 0x3af3,0x719e, 0xb64c,0x68a7

1936 
DCW
 0x8181,0xec71, 0x3a40,0x71fa, 0xb505,0x67bd

1937 
DCW
 0x81e2,0xea1e, 0x398d,0x7255, 0xb3c0,0x66d0

1938 
DCW
 0x824f,0xe7cd, 0x38d9,0x72af, 0xb27f,0x65de

1939 
DCW
 0x82c6,0xe57d, 0x3825,0x7308, 0xb140,0x64e9

1940 
DCW
 0x8349,0xe330, 0x3770,0x735f, 0xb005,0x63ef

1941 
DCW
 0x83d6,0xe0e6, 0x36ba,0x73b6, 0xaecc,0x62f2

1942 
DCW
 0x846e,0xde9e, 0x3604,0x740b, 0xad97,0x61f1

1943 
DCW
 0x8511,0xdc59, 0x354e,0x7460, 0xac65,0x60ec

1944 
DCW
 0x85be,0xda18, 0x3497,0x74b3, 0xab36,0x5fe4

1945 
DCW
 0x8676,0xd7d9, 0x33df,0x7505, 0xaa0a,0x5ed7

1946 
DCW
 0x8738,0xd59e, 0x3327,0x7556, 0xa8e2,0x5dc8

1947 
DCW
 0x8805,0xd367, 0x326e,0x75a6, 0xa7bd,0x5cb4

1948 
DCW
 0x88dd,0xd134, 0x31b5,0x75f4, 0xa69c,0x5b9d

1949 
DCW
 0x89be,0xcf04, 0x30fc,0x7642, 0xa57e,0x5a82

1950 
DCW
 0x8aaa,0xccd9, 0x3042,0x768e, 0xa463,0x5964

1951 
DCW
 0x8ba0,0xcab2, 0x2f87,0x76d9, 0xa34c,0x5843

1952 
DCW
 0x8ca1,0xc890, 0x2ecc,0x7723, 0xa238,0x571e

1953 
DCW
 0x8dab,0xc673, 0x2e11,0x776c, 0xa129,0x55f6

1954 
DCW
 0x8ebf,0xc45b, 0x2d55,0x77b4, 0xa01c,0x54ca

1955 
DCW
 0x8fdd,0xc248, 0x2c99,0x77fb, 0x9f14,0x539b

1956 
DCW
 0x9105,0xc03a, 0x2bdc,0x7840, 0x9e0f,0x5269

1957 
DCW
 0x9236,0xbe32, 0x2b1f,0x7885, 0x9d0e,0x5134

1958 
DCW
 0x9371,0xbc2f, 0x2a62,0x78c8, 0x9c11,0x4ffb

1959 
DCW
 0x94b5,0xba33, 0x29a4,0x790a, 0x9b17,0x4ec0

1960 
DCW
 0x9603,0xb83c, 0x28e5,0x794a, 0x9a22,0x4d81

1961 
DCW
 0x9759,0xb64c, 0x2827,0x798a, 0x9930,0x4c40

1962 
DCW
 0x98b9,0xb462, 0x2768,0x79c9, 0x9843,0x4afb

1963 
DCW
 0x9a22,0xb27f, 0x26a8,0x7a06, 0x9759,0x49b4

1964 
DCW
 0x9b94,0xb0a2, 0x25e8,0x7a42, 0x9674,0x486a

1965 
DCW
 0x9d0e,0xaecc, 0x2528,0x7a7d, 0x9592,0x471d

1966 
DCW
 0x9e91,0xacfd, 0x2467,0x7ab7, 0x94b5,0x45cd

1967 
DCW
 0xa01c,0xab36, 0x23a7,0x7aef, 0x93dc,0x447b

1968 
DCW
 0xa1b0,0xa976, 0x22e5,0x7b27, 0x9307,0x4326

1969 
DCW
 0xa34c,0xa7bd, 0x2224,0x7b5d, 0x9236,0x41ce

1970 
DCW
 0xa4f0,0xa60c, 0x2162,0x7b92, 0x9169,0x4074

1971 
DCW
 0xa69c,0xa463, 0x209f,0x7bc6, 0x90a1,0x3f17

1972 
DCW
 0xa84f,0xa2c2, 0x1fdd,0x7bf9, 0x8fdd,0x3db8

1973 
DCW
 0xaa0a,0xa129, 0x1f1a,0x7c2a, 0x8f1d,0x3c57

1974 
DCW
 0xabcd,0x9f98, 0x1e57,0x7c5a, 0x8e62,0x3af3

1975 
DCW
 0xad97,0x9e0f, 0x1d93,0x7c89, 0x8dab,0x398d

1976 
DCW
 0xaf68,0x9c8f, 0x1cd0,0x7cb7, 0x8cf8,0x3825

1977 
DCW
 0xb140,0x9b17, 0x1c0c,0x7ce4, 0x8c4a,0x36ba

1978 
DCW
 0xb31f,0x99a9, 0x1b47,0x7d0f, 0x8ba0,0x354e

1979 
DCW
 0xb505,0x9843, 0x1a83,0x7d3a, 0x8afb,0x33df

1980 
DCW
 0xb6f1,0x96e6, 0x19be,0x7d63, 0x8a5a,0x326e

1981 
DCW
 0xb8e3,0x9592, 0x18f9,0x7d8a, 0x89be,0x30fc

1982 
DCW
 0xbadc,0x9448, 0x1833,0x7db1, 0x8927,0x2f87

1983 
DCW
 0xbcda,0x9307, 0x176e,0x7dd6, 0x8894,0x2e11

1984 
DCW
 0xbedf,0x91cf, 0x16a8,0x7dfb, 0x8805,0x2c99

1985 
DCW
 0xc0e9,0x90a1, 0x15e2,0x7e1e, 0x877b,0x2b1f

1986 
DCW
 0xc2f8,0x8f7d, 0x151c,0x7e3f, 0x86f6,0x29a4

1987 
DCW
 0xc50d,0x8e62, 0x1455,0x7e60, 0x8676,0x2827

1988 
DCW
 0xc727,0x8d51, 0x138f,0x7e7f, 0x85fa,0x26a8

1989 
DCW
 0xc946,0x8c4a, 0x12c8,0x7e9d, 0x8583,0x2528

1990 
DCW
 0xcb69,0x8b4d, 0x1201,0x7eba, 0x8511,0x23a7

1991 
DCW
 0xcd92,0x8a5a, 0x113a,0x7ed6, 0x84a3,0x2224

1992 
DCW
 0xcfbe,0x8972, 0x1073,0x7ef0, 0x843a,0x209f

1993 
DCW
 0xd1ef,0x8894, 0x0fab,0x7f0a, 0x83d6,0x1f1a

1994 
DCW
 0xd424,0x87c0, 0x0ee4,0x7f22, 0x8377,0x1d93

1995 
DCW
 0xd65c,0x86f6, 0x0e1c,0x7f38, 0x831c,0x1c0c

1996 
DCW
 0xd898,0x8637, 0x0d54,0x7f4e, 0x82c6,0x1a83

1997 
DCW
 0xdad8,0x8583, 0x0c8c,0x7f62, 0x8276,0x18f9

1998 
DCW
 0xdd1b,0x84d9, 0x0bc4,0x7f75, 0x822a,0x176e

1999 
DCW
 0xdf61,0x843a, 0x0afb,0x7f87, 0x81e2,0x15e2

2000 
DCW
 0xe1a9,0x83a6, 0x0a33,0x7f98, 0x81a0,0x1455

2001 
DCW
 0xe3f4,0x831c, 0x096b,0x7fa7, 0x8163,0x12c8

2002 
DCW
 0xe642,0x829d, 0x08a2,0x7fb5, 0x812a,0x113a

2003 
DCW
 0xe892,0x822a, 0x07d9,0x7fc2, 0x80f6,0x0fab

2004 
DCW
 0xeae4,0x81c1, 0x0711,0x7fce, 0x80c8,0x0e1c

2005 
DCW
 0xed38,0x8163, 0x0648,0x7fd9, 0x809e,0x0c8c

2006 
DCW
 0xef8d,0x8110, 0x057f,0x7fe2, 0x8079,0x0afb

2007 
DCW
 0xf1e4,0x80c8, 0x04b6,0x7fea, 0x8059,0x096b

2008 
DCW
 0xf43c,0x808b, 0x03ed,0x7ff1, 0x803e,0x07d9

2009 
DCW
 0xf695,0x8059, 0x0324,0x7ff6, 0x8027,0x0648

2010 
DCW
 0xf8ef,0x8032, 0x025b,0x7ffa, 0x8016,0x04b6

2011 
DCW
 0xfb4a,0x8016, 0x0192,0x7ffe, 0x800a,0x0324

2012 
DCW
 0xfda5,0x8006, 0x00c9,0x7fff, 0x8002,0x0192

2013 ; 
N
=4096 
t
=2*
PI
*
k
/N k=0,1,2,..,N/4-1

2014 
DCW
 0x7fff,0x0000, 0x7fff,0x0000, 0x7fff,0x0000

2015 
DCW
 0x7fff,0x0097, 0x7fff,0x0032, 0x7fff,0x0065

2016 
DCW
 0x7fff,0x012e, 0x7fff,0x0065, 0x7fff,0x00c9

2017 
DCW
 0x7ffd,0x01c4, 0x7fff,0x0097, 0x7fff,0x012e

2018 
DCW
 0x7ffa,0x025b, 0x7fff,0x00c9, 0x7ffe,0x0192

2019 
DCW
 0x7ff7,0x02f2, 0x7fff,0x00fb, 0x7ffc,0x01f7

2020 
DCW
 0x7ff4,0x0389, 0x7fff,0x012e, 0x7ffa,0x025b

2021 
DCW
 0x7fef,0x041f, 0x7ffe,0x0160, 0x7ff8,0x02c0

2022 
DCW
 0x7fea,0x04b6, 0x7ffe,0x0192, 0x7ff6,0x0324

2023 
DCW
 0x7fe4,0x054d, 0x7ffd,0x01c4, 0x7ff4,0x0389

2024 
DCW
 0x7fdd,0x05e3, 0x7ffc,0x01f7, 0x7ff1,0x03ed

2025 
DCW
 0x7fd6,0x067a, 0x7ffb,0x0229, 0x7fed,0x0452

2026 
DCW
 0x7fce,0x0711, 0x7ffa,0x025b, 0x7fea,0x04b6

2027 
DCW
 0x7fc5,0x07a7, 0x7ff9,0x028d, 0x7fe6,0x051b

2028 
DCW
 0x7fbc,0x083e, 0x7ff8,0x02c0, 0x7fe2,0x057f

2029 
DCW
 0x7fb2,0x08d4, 0x7ff7,0x02f2, 0x7fdd,0x05e3

2030 
DCW
 0x7fa7,0x096b, 0x7ff6,0x0324, 0x7fd9,0x0648

2031 
DCW
 0x7f9c,0x0a01, 0x7ff5,0x0356, 0x7fd3,0x06ac

2032 
DCW
 0x7f90,0x0a97, 0x7ff4,0x0389, 0x7fce,0x0711

2033 
DCW
 0x7f83,0x0b2d, 0x7ff2,0x03bb, 0x7fc8,0x0775

2034 
DCW
 0x7f75,0x0bc4, 0x7ff1,0x03ed, 0x7fc2,0x07d9

2035 
DCW
 0x7f67,0x0c5a, 0x7fef,0x041f, 0x7fbc,0x083e

2036 
DCW
 0x7f58,0x0cf0, 0x7fed,0x0452, 0x7fb5,0x08a2

2037 
DCW
 0x7f49,0x0d86, 0x7fec,0x0484, 0x7fae,0x0906

2038 
DCW
 0x7f38,0x0e1c, 0x7fea,0x04b6, 0x7fa7,0x096b

2039 
DCW
 0x7f27,0x0eb2, 0x7fe8,0x04e8, 0x7fa0,0x09cf

2040 
DCW
 0x7f16,0x0f47, 0x7fe6,0x051b, 0x7f98,0x0a33

2041 
DCW
 0x7f03,0x0fdd, 0x7fe4,0x054d, 0x7f90,0x0a97

2042 
DCW
 0x7ef0,0x1073, 0x7fe2,0x057f, 0x7f87,0x0afb

2043 
DCW
 0x7edd,0x1108, 0x7fe0,0x05b1, 0x7f7e,0x0b60

2044 
DCW
 0x7ec8,0x119e, 0x7fdd,0x05e3, 0x7f75,0x0bc4

2045 
DCW
 0x7eb3,0x1233, 0x7fdb,0x0616, 0x7f6c,0x0c28

2046 
DCW
 0x7e9d,0x12c8, 0x7fd9,0x0648, 0x7f62,0x0c8c

2047 
DCW
 0x7e87,0x135d, 0x7fd6,0x067a, 0x7f58,0x0cf0

2048 
DCW
 0x7e70,0x13f2, 0x7fd3,0x06ac, 0x7f4e,0x0d54

2049 
DCW
 0x7e58,0x1487, 0x7fd1,0x06de, 0x7f43,0x0db8

2050 
DCW
 0x7e3f,0x151c, 0x7fce,0x0711, 0x7f38,0x0e1c

2051 
DCW
 0x7e26,0x15b1, 0x7fcb,0x0743, 0x7f2d,0x0e80

2052 
DCW
 0x7e0c,0x1645, 0x7fc8,0x0775, 0x7f22,0x0ee4

2053 
DCW
 0x7df2,0x16da, 0x7fc5,0x07a7, 0x7f16,0x0f47

2054 
DCW
 0x7dd6,0x176e, 0x7fc2,0x07d9, 0x7f0a,0x0fab

2055 
DCW
 0x7dba,0x1802, 0x7fbf,0x080c, 0x7efd,0x100f

2056 
DCW
 0x7d9e,0x1896, 0x7fbc,0x083e, 0x7ef0,0x1073

2057 
DCW
 0x7d81,0x192a, 0x7fb9,0x0870, 0x7ee3,0x10d6

2058 
DCW
 0x7d63,0x19be, 0x7fb5,0x08a2, 0x7ed6,0x113a

2059 
DCW
 0x7d44,0x1a51, 0x7fb2,0x08d4, 0x7ec8,0x119e

2060 
DCW
 0x7d25,0x1ae5, 0x7fae,0x0906, 0x7eba,0x1201

2061 
DCW
 0x7d05,0x1b78, 0x7fab,0x0938, 0x7eac,0x1265

2062 
DCW
 0x7ce4,0x1c0c, 0x7fa7,0x096b, 0x7e9d,0x12c8

2063 
DCW
 0x7cc2,0x1c9f, 0x7fa3,0x099d, 0x7e8e,0x132b

2064 
DCW
 0x7ca0,0x1d31, 0x7fa0,0x09cf, 0x7e7f,0x138f

2065 
DCW
 0x7c7e,0x1dc4, 0x7f9c,0x0a01, 0x7e70,0x13f2

2066 
DCW
 0x7c5a,0x1e57, 0x7f98,0x0a33, 0x7e60,0x1455

2067 
DCW
 0x7c36,0x1ee9, 0x7f94,0x0a65, 0x7e50,0x14b9

2068 
DCW
 0x7c11,0x1f7b, 0x7f90,0x0a97, 0x7e3f,0x151c

2069 
DCW
 0x7bec,0x200e, 0x7f8b,0x0ac9, 0x7e2f,0x157f

2070 
DCW
 0x7bc6,0x209f, 0x7f87,0x0afb, 0x7e1e,0x15e2

2071 
DCW
 0x7b9f,0x2131, 0x7f83,0x0b2d, 0x7e0c,0x1645

2072 
DCW
 0x7b78,0x21c3, 0x7f7e,0x0b60, 0x7dfb,0x16a8

2073 
DCW
 0x7b50,0x2254, 0x7f7a,0x0b92, 0x7de9,0x170b

2074 
DCW
 0x7b27,0x22e5, 0x7f75,0x0bc4, 0x7dd6,0x176e

2075 
DCW
 0x7afd,0x2376, 0x7f71,0x0bf6, 0x7dc4,0x17d1

2076 
DCW
 0x7ad3,0x2407, 0x7f6c,0x0c28, 0x7db1,0x1833

2077 
DCW
 0x7aa8,0x2498, 0x7f67,0x0c5a, 0x7d9e,0x1896

2078 
DCW
 0x7a7d,0x2528, 0x7f62,0x0c8c, 0x7d8a,0x18f9

2079 
DCW
 0x7a51,0x25b8, 0x7f5d,0x0cbe, 0x7d77,0x195b

2080 
DCW
 0x7a24,0x2648, 0x7f58,0x0cf0, 0x7d63,0x19be

2081 
DCW
 0x79f7,0x26d8, 0x7f53,0x0d22, 0x7d4e,0x1a20

2082 
DCW
 0x79c9,0x2768, 0x7f4e,0x0d54, 0x7d3a,0x1a83

2083 
DCW
 0x799a,0x27f7, 0x7f49,0x0d86, 0x7d25,0x1ae5

2084 
DCW
 0x796a,0x2886, 0x7f43,0x0db8, 0x7d0f,0x1b47

2085 
DCW
 0x793a,0x2915, 0x7f3e,0x0dea, 0x7cfa,0x1ba9

2086 
DCW
 0x790a,0x29a4, 0x7f38,0x0e1c, 0x7ce4,0x1c0c

2087 
DCW
 0x78d8,0x2a32, 0x7f33,0x0e4e, 0x7cce,0x1c6e

2088 
DCW
 0x78a6,0x2ac1, 0x7f2d,0x0e80, 0x7cb7,0x1cd0

2089 
DCW
 0x7874,0x2b4f, 0x7f27,0x0eb2, 0x7ca0,0x1d31

2090 
DCW
 0x7840,0x2bdc, 0x7f22,0x0ee4, 0x7c89,0x1d93

2091 
DCW
 0x780c,0x2c6a, 0x7f1c,0x0f15, 0x7c72,0x1df5

2092 
DCW
 0x77d8,0x2cf7, 0x7f16,0x0f47, 0x7c5a,0x1e57

2093 
DCW
 0x77a2,0x2d84, 0x7f10,0x0f79, 0x7c42,0x1eb8

2094 
DCW
 0x776c,0x2e11, 0x7f0a,0x0fab, 0x7c2a,0x1f1a

2095 
DCW
 0x7736,0x2e9e, 0x7f03,0x0fdd, 0x7c11,0x1f7b

2096 
DCW
 0x76fe,0x2f2a, 0x7efd,0x100f, 0x7bf9,0x1fdd

2097 
DCW
 0x76c7,0x2fb6, 0x7ef7,0x1041, 0x7bdf,0x203e

2098 
DCW
 0x768e,0x3042, 0x7ef0,0x1073, 0x7bc6,0x209f

2099 
DCW
 0x7655,0x30cd, 0x7eea,0x10a4, 0x7bac,0x2101

2100 
DCW
 0x761b,0x3159, 0x7ee3,0x10d6, 0x7b92,0x2162

2101 
DCW
 0x75e1,0x31e4, 0x7edd,0x1108, 0x7b78,0x21c3

2102 
DCW
 0x75a6,0x326e, 0x7ed6,0x113a, 0x7b5d,0x2224

2103 
DCW
 0x756a,0x32f9, 0x7ecf,0x116c, 0x7b42,0x2284

2104 
DCW
 0x752d,0x3383, 0x7ec8,0x119e, 0x7b27,0x22e5

2105 
DCW
 0x74f0,0x340d, 0x7ec1,0x11cf, 0x7b0b,0x2346

2106 
DCW
 0x74b3,0x3497, 0x7eba,0x1201, 0x7aef,0x23a7

2107 
DCW
 0x7475,0x3520, 0x7eb3,0x1233, 0x7ad3,0x2407

2108 
DCW
 0x7436,0x35a9, 0x7eac,0x1265, 0x7ab7,0x2467

2109 
DCW
 0x73f6,0x3632, 0x7ea5,0x1296, 0x7a9a,0x24c8

2110 
DCW
 0x73b6,0x36ba, 0x7e9d,0x12c8, 0x7a7d,0x2528

2111 
DCW
 0x7375,0x3742, 0x7e96,0x12fa, 0x7a60,0x2588

2112 
DCW
 0x7334,0x37ca, 0x7e8e,0x132b, 0x7a42,0x25e8

2113 
DCW
 0x72f2,0x3852, 0x7e87,0x135d, 0x7a24,0x2648

2114 
DCW
 0x72af,0x38d9, 0x7e7f,0x138f, 0x7a06,0x26a8

2115 
DCW
 0x726c,0x3960, 0x7e78,0x13c1, 0x79e7,0x2708

2116 
DCW
 0x7228,0x39e7, 0x7e70,0x13f2, 0x79c9,0x2768

2117 
DCW
 0x71e3,0x3a6d, 0x7e68,0x1424, 0x79aa,0x27c7

2118 
DCW
 0x719e,0x3af3, 0x7e60,0x1455, 0x798a,0x2827

2119 
DCW
 0x7158,0x3b79, 0x7e58,0x1487, 0x796a,0x2886

2120 
DCW
 0x7112,0x3bfe, 0x7e50,0x14b9, 0x794a,0x28e5

2121 
DCW
 0x70cb,0x3c83, 0x7e48,0x14ea, 0x792a,0x2945

2122 
DCW
 0x7083,0x3d08, 0x7e3f,0x151c, 0x790a,0x29a4

2123 
DCW
 0x703b,0x3d8c, 0x7e37,0x154d, 0x78e9,0x2a03

2124 
DCW
 0x6ff2,0x3e10, 0x7e2f,0x157f, 0x78c8,0x2a62

2125 
DCW
 0x6fa9,0x3e94, 0x7e26,0x15b1, 0x78a6,0x2ac1

2126 
DCW
 0x6f5f,0x3f17, 0x7e1e,0x15e2, 0x7885,0x2b1f

2127 
DCW
 0x6f14,0x3f9a, 0x7e15,0x1614, 0x7863,0x2b7e

2128 
DCW
 0x6ec9,0x401d, 0x7e0c,0x1645, 0x7840,0x2bdc

2129 
DCW
 0x6e7d,0x409f, 0x7e03,0x1677, 0x781e,0x2c3b

2130 
DCW
 0x6e31,0x4121, 0x7dfb,0x16a8, 0x77fb,0x2c99

2131 
DCW
 0x6de4,0x41a3, 0x7df2,0x16da, 0x77d8,0x2cf7

2132 
DCW
 0x6d96,0x4224, 0x7de9,0x170b, 0x77b4,0x2d55

2133 
DCW
 0x6d48,0x42a5, 0x7de0,0x173c, 0x7790,0x2db3

2134 
DCW
 0x6cf9,0x4326, 0x7dd6,0x176e, 0x776c,0x2e11

2135 
DCW
 0x6caa,0x43a6, 0x7dcd,0x179f, 0x7748,0x2e6f

2136 
DCW
 0x6c5a,0x4426, 0x7dc4,0x17d1, 0x7723,0x2ecc

2137 
DCW
 0x6c09,0x44a5, 0x7dba,0x1802, 0x76fe,0x2f2a

2138 
DCW
 0x6bb8,0x4524, 0x7db1,0x1833, 0x76d9,0x2f87

2139 
DCW
 0x6b66,0x45a3, 0x7da7,0x1865, 0x76b4,0x2fe5

2140 
DCW
 0x6b14,0x4621, 0x7d9e,0x1896, 0x768e,0x3042

2141 
DCW
 0x6ac1,0x469f, 0x7d94,0x18c7, 0x7668,0x309f

2142 
DCW
 0x6a6e,0x471d, 0x7d8a,0x18f9, 0x7642,0x30fc

2143 
DCW
 0x6a1a,0x479a, 0x7d81,0x192a, 0x761b,0x3159

2144 
DCW
 0x69c5,0x4817, 0x7d77,0x195b, 0x75f4,0x31b5

2145 
DCW
 0x6970,0x4893, 0x7d6d,0x198d, 0x75cd,0x3212

2146 
DCW
 0x691a,0x490f, 0x7d63,0x19be, 0x75a6,0x326e

2147 
DCW
 0x68c4,0x498b, 0x7d58,0x19ef, 0x757e,0x32cb

2148 
DCW
 0x686d,0x4a06, 0x7d4e,0x1a20, 0x7556,0x3327

2149 
DCW
 0x6815,0x4a81, 0x7d44,0x1a51, 0x752d,0x3383

2150 
DCW
 0x67bd,0x4afb, 0x7d3a,0x1a83, 0x7505,0x33df

2151 
DCW
 0x6764,0x4b75, 0x7d2f,0x1ab4, 0x74dc,0x343b

2152 
DCW
 0x670b,0x4bef, 0x7d25,0x1ae5, 0x74b3,0x3497

2153 
DCW
 0x66b2,0x4c68, 0x7d1a,0x1b16, 0x7489,0x34f2

2154 
DCW
 0x6657,0x4ce1, 0x7d0f,0x1b47, 0x7460,0x354e

2155 
DCW
 0x65fc,0x4d59, 0x7d05,0x1b78, 0x7436,0x35a9

2156 
DCW
 0x65a1,0x4dd1, 0x7cfa,0x1ba9, 0x740b,0x3604

2157 
DCW
 0x6545,0x4e49, 0x7cef,0x1bda, 0x73e1,0x365f

2158 
DCW
 0x64e9,0x4ec0, 0x7ce4,0x1c0c, 0x73b6,0x36ba

2159 
DCW
 0x648b,0x4f37, 0x7cd9,0x1c3d, 0x738b,0x3715

2160 
DCW
 0x642e,0x4fad, 0x7cce,0x1c6e, 0x735f,0x3770

2161 
DCW
 0x63d0,0x5023, 0x7cc2,0x1c9f, 0x7334,0x37ca

2162 
DCW
 0x6371,0x5098, 0x7cb7,0x1cd0, 0x7308,0x3825

2163 
DCW
 0x6312,0x510d, 0x7cac,0x1d01, 0x72dc,0x387f

2164 
DCW
 0x62b2,0x5181, 0x7ca0,0x1d31, 0x72af,0x38d9

2165 
DCW
 0x6252,0x51f5, 0x7c95,0x1d62, 0x7282,0x3933

2166 
DCW
 0x61f1,0x5269, 0x7c89,0x1d93, 0x7255,0x398d

2167 
DCW
 0x6190,0x52dc, 0x7c7e,0x1dc4, 0x7228,0x39e7

2168 
DCW
 0x612e,0x534f, 0x7c72,0x1df5, 0x71fa,0x3a40

2169 
DCW
 0x60cb,0x53c1, 0x7c66,0x1e26, 0x71cc,0x3a9a

2170 
DCW
 0x6068,0x5433, 0x7c5a,0x1e57, 0x719e,0x3af3

2171 
DCW
 0x6005,0x54a4, 0x7c4e,0x1e88, 0x7170,0x3b4c

2172 
DCW
 0x5fa1,0x5515, 0x7c42,0x1eb8, 0x7141,0x3ba5

2173 
DCW
 0x5f3c,0x5586, 0x7c36,0x1ee9, 0x7112,0x3bfe

2174 
DCW
 0x5ed7,0x55f6, 0x7c2a,0x1f1a, 0x70e3,0x3c57

2175 
DCW
 0x5e72,0x5665, 0x7c1e,0x1f4b, 0x70b3,0x3caf

2176 
DCW
 0x5e0c,0x56d4, 0x7c11,0x1f7b, 0x7083,0x3d08

2177 
DCW
 0x5da5,0x5743, 0x7c05,0x1fac, 0x7053,0x3d60

2178 
DCW
 0x5d3e,0x57b1, 0x7bf9,0x1fdd, 0x7023,0x3db8

2179 
DCW
 0x5cd7,0x581e, 0x7bec,0x200e, 0x6ff2,0x3e10

2180 
DCW
 0x5c6f,0x588c, 0x7bdf,0x203e, 0x6fc2,0x3e68

2181 
DCW
 0x5c06,0x58f8, 0x7bd3,0x206f, 0x6f90,0x3ec0

2182 
DCW
 0x5b9d,0x5964, 0x7bc6,0x209f, 0x6f5f,0x3f17

2183 
DCW
 0x5b34,0x59d0, 0x7bb9,0x20d0, 0x6f2d,0x3f6f

2184 
DCW
 0x5ac9,0x5a3b, 0x7bac,0x2101, 0x6efb,0x3fc6

2185 
DCW
 0x5a5f,0x5aa6, 0x7b9f,0x2131, 0x6ec9,0x401d

2186 
DCW
 0x59f4,0x5b10, 0x7b92,0x2162, 0x6e97,0x4074

2187 
DCW
 0x5988,0x5b7a, 0x7b85,0x2192, 0x6e64,0x40cb

2188 
DCW
 0x591c,0x5be3, 0x7b78,0x21c3, 0x6e31,0x4121

2189 
DCW
 0x58b0,0x5c4c, 0x7b6a,0x21f3, 0x6dfe,0x4178

2190 
DCW
 0x5843,0x5cb4, 0x7b5d,0x2224, 0x6dca,0x41ce

2191 
DCW
 0x57d5,0x5d1c, 0x7b50,0x2254, 0x6d96,0x4224

2192 
DCW
 0x5767,0x5d83, 0x7b42,0x2284, 0x6d62,0x427a

2193 
DCW
 0x56f9,0x5dea, 0x7b34,0x22b5, 0x6d2e,0x42d0

2194 
DCW
 0x568a,0x5e50, 0x7b27,0x22e5, 0x6cf9,0x4326

2195 
DCW
 0x561b,0x5eb6, 0x7b19,0x2316, 0x6cc4,0x437b

2196 
DCW
 0x55ab,0x5f1b, 0x7b0b,0x2346, 0x6c8f,0x43d1

2197 
DCW
 0x553b,0x5f80, 0x7afd,0x2376, 0x6c5a,0x4426

2198 
DCW
 0x54ca,0x5fe4, 0x7aef,0x23a7, 0x6c24,0x447b

2199 
DCW
 0x5459,0x6047, 0x7ae1,0x23d7, 0x6bee,0x44d0

2200 
DCW
 0x53e7,0x60aa, 0x7ad3,0x2407, 0x6bb8,0x4524

2201 
DCW
 0x5375,0x610d, 0x7ac5,0x2437, 0x6b82,0x4579

2202 
DCW
 0x5303,0x616f, 0x7ab7,0x2467, 0x6b4b,0x45cd

2203 
DCW
 0x5290,0x61d1, 0x7aa8,0x2498, 0x6b14,0x4621

2204 
DCW
 0x521c,0x6232, 0x7a9a,0x24c8, 0x6add,0x4675

2205 
DCW
 0x51a8,0x6292, 0x7a8c,0x24f8, 0x6aa5,0x46c9

2206 
DCW
 0x5134,0x62f2, 0x7a7d,0x2528, 0x6a6e,0x471d

2207 
DCW
 0x50bf,0x6351, 0x7a6e,0x2558, 0x6a36,0x4770

2208 
DCW
 0x504a,0x63b0, 0x7a60,0x2588, 0x69fd,0x47c4

2209 
DCW
 0x4fd4,0x640f, 0x7a51,0x25b8, 0x69c5,0x4817

2210 
DCW
 0x4f5e,0x646c, 0x7a42,0x25e8, 0x698c,0x486a

2211 
DCW
 0x4ee8,0x64ca, 0x7a33,0x2618, 0x6953,0x48bd

2212 
DCW
 0x4e71,0x6526, 0x7a24,0x2648, 0x691a,0x490f

2213 
DCW
 0x4df9,0x6582, 0x7a15,0x2678, 0x68e0,0x4962

2214 
DCW
 0x4d81,0x65de, 0x7a06,0x26a8, 0x68a7,0x49b4

2215 
DCW
 0x4d09,0x6639, 0x79f7,0x26d8, 0x686d,0x4a06

2216 
DCW
 0x4c91,0x6693, 0x79e7,0x2708, 0x6832,0x4a58

2217 
DCW
 0x4c17,0x66ed, 0x79d8,0x2738, 0x67f8,0x4aaa

2218 
DCW
 0x4b9e,0x6747, 0x79c9,0x2768, 0x67bd,0x4afb

2219 
DCW
 0x4b24,0x67a0, 0x79b9,0x2797, 0x6782,0x4b4d

2220 
DCW
 0x4aaa,0x67f8, 0x79aa,0x27c7, 0x6747,0x4b9e

2221 
DCW
 0x4a2f,0x6850, 0x799a,0x27f7, 0x670b,0x4bef

2222 
DCW
 0x49b4,0x68a7, 0x798a,0x2827, 0x66d0,0x4c40

2223 
DCW
 0x4939,0x68fd, 0x797a,0x2856, 0x6693,0x4c91

2224 
DCW
 0x48bd,0x6953, 0x796a,0x2886, 0x6657,0x4ce1

2225 
DCW
 0x4840,0x69a9, 0x795b,0x28b6, 0x661b,0x4d31

2226 
DCW
 0x47c4,0x69fd, 0x794a,0x28e5, 0x65de,0x4d81

2227 
DCW
 0x4747,0x6a52, 0x793a,0x2915, 0x65a1,0x4dd1

2228 
DCW
 0x46c9,0x6aa5, 0x792a,0x2945, 0x6564,0x4e21

2229 
DCW
 0x464b,0x6af8, 0x791a,0x2974, 0x6526,0x4e71

2230 
DCW
 0x45cd,0x6b4b, 0x790a,0x29a4, 0x64e9,0x4ec0

2231 
DCW
 0x454f,0x6b9d, 0x78f9,0x29d3, 0x64ab,0x4f0f

2232 
DCW
 0x44d0,0x6bee, 0x78e9,0x2a03, 0x646c,0x4f5e

2233 
DCW
 0x4450,0x6c3f, 0x78d8,0x2a32, 0x642e,0x4fad

2234 
DCW
 0x43d1,0x6c8f, 0x78c8,0x2a62, 0x63ef,0x4ffb

2235 
DCW
 0x4351,0x6cdf, 0x78b7,0x2a91, 0x63b0,0x504a

2236 
DCW
 0x42d0,0x6d2e, 0x78a6,0x2ac1, 0x6371,0x5098

2237 
DCW
 0x424f,0x6d7c, 0x7895,0x2af0, 0x6332,0x50e6

2238 
DCW
 0x41ce,0x6dca, 0x7885,0x2b1f, 0x62f2,0x5134

2239 
DCW
 0x414d,0x6e17, 0x7874,0x2b4f, 0x62b2,0x5181

2240 
DCW
 0x40cb,0x6e64, 0x7863,0x2b7e, 0x6272,0x51cf

2241 
DCW
 0x4048,0x6eb0, 0x7851,0x2bad, 0x6232,0x521c

2242 
DCW
 0x3fc6,0x6efb, 0x7840,0x2bdc, 0x61f1,0x5269

2243 
DCW
 0x3f43,0x6f46, 0x782f,0x2c0c, 0x61b0,0x52b6

2244 
DCW
 0x3ec0,0x6f90, 0x781e,0x2c3b, 0x616f,0x5303

2245 
DCW
 0x3e3c,0x6fda, 0x780c,0x2c6a, 0x612e,0x534f

2246 
DCW
 0x3db8,0x7023, 0x77fb,0x2c99, 0x60ec,0x539b

2247 
DCW
 0x3d34,0x706b, 0x77e9,0x2cc8, 0x60aa,0x53e7

2248 
DCW
 0x3caf,0x70b3, 0x77d8,0x2cf7, 0x6068,0x5433

2249 
DCW
 0x3c2a,0x70fa, 0x77c6,0x2d26, 0x6026,0x547f

2250 
DCW
 0x3ba5,0x7141, 0x77b4,0x2d55, 0x5fe4,0x54ca

2251 
DCW
 0x3b20,0x7187, 0x77a2,0x2d84, 0x5fa1,0x5515

2252 
DCW
 0x3a9a,0x71cc, 0x7790,0x2db3, 0x5f5e,0x5560

2253 
DCW
 0x3a13,0x7211, 0x777e,0x2de2, 0x5f1b,0x55ab

2254 
DCW
 0x398d,0x7255, 0x776c,0x2e11, 0x5ed7,0x55f6

2255 
DCW
 0x3906,0x7299, 0x775a,0x2e40, 0x5e94,0x5640

2256 
DCW
 0x387f,0x72dc, 0x7748,0x2e6f, 0x5e50,0x568a

2257 
DCW
 0x37f7,0x731e, 0x7736,0x2e9e, 0x5e0c,0x56d4

2258 
DCW
 0x3770,0x735f, 0x7723,0x2ecc, 0x5dc8,0x571e

2259 
DCW
 0x36e8,0x73a0, 0x7711,0x2efb, 0x5d83,0x5767

2260 
DCW
 0x365f,0x73e1, 0x76fe,0x2f2a, 0x5d3e,0x57b1

2261 
DCW
 0x35d7,0x7421, 0x76ec,0x2f59, 0x5cf9,0x57fa

2262 
DCW
 0x354e,0x7460, 0x76d9,0x2f87, 0x5cb4,0x5843

2263 
DCW
 0x34c4,0x749e, 0x76c7,0x2fb6, 0x5c6f,0x588c

2264 
DCW
 0x343b,0x74dc, 0x76b4,0x2fe5, 0x5c29,0x58d4

2265 
DCW
 0x33b1,0x7519, 0x76a1,0x3013, 0x5be3,0x591c

2266 
DCW
 0x3327,0x7556, 0x768e,0x3042, 0x5b9d,0x5964

2267 
DCW
 0x329d,0x7592, 0x767b,0x3070, 0x5b57,0x59ac

2268 
DCW
 0x3212,0x75cd, 0x7668,0x309f, 0x5b10,0x59f4

2269 
DCW
 0x3187,0x7608, 0x7655,0x30cd, 0x5ac9,0x5a3b

2270 
DCW
 0x30fc,0x7642, 0x7642,0x30fc, 0x5a82,0x5a82

2271 
DCW
 0x3070,0x767b, 0x762e,0x312a, 0x5a3b,0x5ac9

2272 
DCW
 0x2fe5,0x76b4, 0x761b,0x3159, 0x59f4,0x5b10

2273 
DCW
 0x2f59,0x76ec, 0x7608,0x3187, 0x59ac,0x5b57

2274 
DCW
 0x2ecc,0x7723, 0x75f4,0x31b5, 0x5964,0x5b9d

2275 
DCW
 0x2e40,0x775a, 0x75e1,0x31e4, 0x591c,0x5be3

2276 
DCW
 0x2db3,0x7790, 0x75cd,0x3212, 0x58d4,0x5c29

2277 
DCW
 0x2d26,0x77c6, 0x75b9,0x3240, 0x588c,0x5c6f

2278 
DCW
 0x2c99,0x77fb, 0x75a6,0x326e, 0x5843,0x5cb4

2279 
DCW
 0x2c0c,0x782f, 0x7592,0x329d, 0x57fa,0x5cf9

2280 
DCW
 0x2b7e,0x7863, 0x757e,0x32cb, 0x57b1,0x5d3e

2281 
DCW
 0x2af0,0x7895, 0x756a,0x32f9, 0x5767,0x5d83

2282 
DCW
 0x2a62,0x78c8, 0x7556,0x3327, 0x571e,0x5dc8

2283 
DCW
 0x29d3,0x78f9, 0x7542,0x3355, 0x56d4,0x5e0c

2284 
DCW
 0x2945,0x792a, 0x752d,0x3383, 0x568a,0x5e50

2285 
DCW
 0x28b6,0x795b, 0x7519,0x33b1, 0x5640,0x5e94

2286 
DCW
 0x2827,0x798a, 0x7505,0x33df, 0x55f6,0x5ed7

2287 
DCW
 0x2797,0x79b9, 0x74f0,0x340d, 0x55ab,0x5f1b

2288 
DCW
 0x2708,0x79e7, 0x74dc,0x343b, 0x5560,0x5f5e

2289 
DCW
 0x2678,0x7a15, 0x74c7,0x3469, 0x5515,0x5fa1

2290 
DCW
 0x25e8,0x7a42, 0x74b3,0x3497, 0x54ca,0x5fe4

2291 
DCW
 0x2558,0x7a6e, 0x749e,0x34c4, 0x547f,0x6026

2292 
DCW
 0x24c8,0x7a9a, 0x7489,0x34f2, 0x5433,0x6068

2293 
DCW
 0x2437,0x7ac5, 0x7475,0x3520, 0x53e7,0x60aa

2294 
DCW
 0x23a7,0x7aef, 0x7460,0x354e, 0x539b,0x60ec

2295 
DCW
 0x2316,0x7b19, 0x744b,0x357b, 0x534f,0x612e

2296 
DCW
 0x2284,0x7b42, 0x7436,0x35a9, 0x5303,0x616f

2297 
DCW
 0x21f3,0x7b6a, 0x7421,0x35d7, 0x52b6,0x61b0

2298 
DCW
 0x2162,0x7b92, 0x740b,0x3604, 0x5269,0x61f1

2299 
DCW
 0x20d0,0x7bb9, 0x73f6,0x3632, 0x521c,0x6232

2300 
DCW
 0x203e,0x7bdf, 0x73e1,0x365f, 0x51cf,0x6272

2301 
DCW
 0x1fac,0x7c05, 0x73cb,0x368d, 0x5181,0x62b2

2302 
DCW
 0x1f1a,0x7c2a, 0x73b6,0x36ba, 0x5134,0x62f2

2303 
DCW
 0x1e88,0x7c4e, 0x73a0,0x36e8, 0x50e6,0x6332

2304 
DCW
 0x1df5,0x7c72, 0x738b,0x3715, 0x5098,0x6371

2305 
DCW
 0x1d62,0x7c95, 0x7375,0x3742, 0x504a,0x63b0

2306 
DCW
 0x1cd0,0x7cb7, 0x735f,0x3770, 0x4ffb,0x63ef

2307 
DCW
 0x1c3d,0x7cd9, 0x734a,0x379d, 0x4fad,0x642e

2308 
DCW
 0x1ba9,0x7cfa, 0x7334,0x37ca, 0x4f5e,0x646c

2309 
DCW
 0x1b16,0x7d1a, 0x731e,0x37f7, 0x4f0f,0x64ab

2310 
DCW
 0x1a83,0x7d3a, 0x7308,0x3825, 0x4ec0,0x64e9

2311 
DCW
 0x19ef,0x7d58, 0x72f2,0x3852, 0x4e71,0x6526

2312 
DCW
 0x195b,0x7d77, 0x72dc,0x387f, 0x4e21,0x6564

2313 
DCW
 0x18c7,0x7d94, 0x72c5,0x38ac, 0x4dd1,0x65a1

2314 
DCW
 0x1833,0x7db1, 0x72af,0x38d9, 0x4d81,0x65de

2315 
DCW
 0x179f,0x7dcd, 0x7299,0x3906, 0x4d31,0x661b

2316 
DCW
 0x170b,0x7de9, 0x7282,0x3933, 0x4ce1,0x6657

2317 
DCW
 0x1677,0x7e03, 0x726c,0x3960, 0x4c91,0x6693

2318 
DCW
 0x15e2,0x7e1e, 0x7255,0x398d, 0x4c40,0x66d0

2319 
DCW
 0x154d,0x7e37, 0x723f,0x39ba, 0x4bef,0x670b

2320 
DCW
 0x14b9,0x7e50, 0x7228,0x39e7, 0x4b9e,0x6747

2321 
DCW
 0x1424,0x7e68, 0x7211,0x3a13, 0x4b4d,0x6782

2322 
DCW
 0x138f,0x7e7f, 0x71fa,0x3a40, 0x4afb,0x67bd

2323 
DCW
 0x12fa,0x7e96, 0x71e3,0x3a6d, 0x4aaa,0x67f8

2324 
DCW
 0x1265,0x7eac, 0x71cc,0x3a9a, 0x4a58,0x6832

2325 
DCW
 0x11cf,0x7ec1, 0x71b5,0x3ac6, 0x4a06,0x686d

2326 
DCW
 0x113a,0x7ed6, 0x719e,0x3af3, 0x49b4,0x68a7

2327 
DCW
 0x10a4,0x7eea, 0x7187,0x3b20, 0x4962,0x68e0

2328 
DCW
 0x100f,0x7efd, 0x7170,0x3b4c, 0x490f,0x691a

2329 
DCW
 0x0f79,0x7f10, 0x7158,0x3b79, 0x48bd,0x6953

2330 
DCW
 0x0ee4,0x7f22, 0x7141,0x3ba5, 0x486a,0x698c

2331 
DCW
 0x0e4e,0x7f33, 0x712a,0x3bd2, 0x4817,0x69c5

2332 
DCW
 0x0db8,0x7f43, 0x7112,0x3bfe, 0x47c4,0x69fd

2333 
DCW
 0x0d22,0x7f53, 0x70fa,0x3c2a, 0x4770,0x6a36

2334 
DCW
 0x0c8c,0x7f62, 0x70e3,0x3c57, 0x471d,0x6a6e

2335 
DCW
 0x0bf6,0x7f71, 0x70cb,0x3c83, 0x46c9,0x6aa5

2336 
DCW
 0x0b60,0x7f7e, 0x70b3,0x3caf, 0x4675,0x6add

2337 
DCW
 0x0ac9,0x7f8b, 0x709b,0x3cdc, 0x4621,0x6b14

2338 
DCW
 0x0a33,0x7f98, 0x7083,0x3d08, 0x45cd,0x6b4b

2339 
DCW
 0x099d,0x7fa3, 0x706b,0x3d34, 0x4579,0x6b82

2340 
DCW
 0x0906,0x7fae, 0x7053,0x3d60, 0x4524,0x6bb8

2341 
DCW
 0x0870,0x7fb9, 0x703b,0x3d8c, 0x44d0,0x6bee

2342 
DCW
 0x07d9,0x7fc2, 0x7023,0x3db8, 0x447b,0x6c24

2343 
DCW
 0x0743,0x7fcb, 0x700b,0x3de4, 0x4426,0x6c5a

2344 
DCW
 0x06ac,0x7fd3, 0x6ff2,0x3e10, 0x43d1,0x6c8f

2345 
DCW
 0x0616,0x7fdb, 0x6fda,0x3e3c, 0x437b,0x6cc4

2346 
DCW
 0x057f,0x7fe2, 0x6fc2,0x3e68, 0x4326,0x6cf9

2347 
DCW
 0x04e8,0x7fe8, 0x6fa9,0x3e94, 0x42d0,0x6d2e

2348 
DCW
 0x0452,0x7fed, 0x6f90,0x3ec0, 0x427a,0x6d62

2349 
DCW
 0x03bb,0x7ff2, 0x6f78,0x3eec, 0x4224,0x6d96

2350 
DCW
 0x0324,0x7ff6, 0x6f5f,0x3f17, 0x41ce,0x6dca

2351 
DCW
 0x028d,0x7ff9, 0x6f46,0x3f43, 0x4178,0x6dfe

2352 
DCW
 0x01f7,0x7ffc, 0x6f2d,0x3f6f, 0x4121,0x6e31

2353 
DCW
 0x0160,0x7ffe, 0x6f14,0x3f9a, 0x40cb,0x6e64

2354 
DCW
 0x00c9,0x7fff, 0x6efb,0x3fc6, 0x4074,0x6e97

2355 
DCW
 0x0032,0x7fff, 0x6ee2,0x3ff1, 0x401d,0x6ec9

2356 
DCW
 0xff9b,0x7fff, 0x6ec9,0x401d, 0x3fc6,0x6efb

2357 
DCW
 0xff05,0x7fff, 0x6eb0,0x4048, 0x3f6f,0x6f2d

2358 
DCW
 0xfe6e,0x7ffe, 0x6e97,0x4074, 0x3f17,0x6f5f

2359 
DCW
 0xfdd7,0x7ffb, 0x6e7d,0x409f, 0x3ec0,0x6f90

2360 
DCW
 0xfd40,0x7ff8, 0x6e64,0x40cb, 0x3e68,0x6fc2

2361 
DCW
 0xfcaa,0x7ff5, 0x6e4a,0x40f6, 0x3e10,0x6ff2

2362 
DCW
 0xfc13,0x7ff1, 0x6e31,0x4121, 0x3db8,0x7023

2363 
DCW
 0xfb7c,0x7fec, 0x6e17,0x414d, 0x3d60,0x7053

2364 
DCW
 0xfae5,0x7fe6, 0x6dfe,0x4178, 0x3d08,0x7083

2365 
DCW
 0xfa4f,0x7fe0, 0x6de4,0x41a3, 0x3caf,0x70b3

2366 
DCW
 0xf9b8,0x7fd9, 0x6dca,0x41ce, 0x3c57,0x70e3

2367 
DCW
 0xf922,0x7fd1, 0x6db0,0x41f9, 0x3bfe,0x7112

2368 
DCW
 0xf88b,0x7fc8, 0x6d96,0x4224, 0x3ba5,0x7141

2369 
DCW
 0xf7f4,0x7fbf, 0x6d7c,0x424f, 0x3b4c,0x7170

2370 
DCW
 0xf75e,0x7fb5, 0x6d62,0x427a, 0x3af3,0x719e

2371 
DCW
 0xf6c8,0x7fab, 0x6d48,0x42a5, 0x3a9a,0x71cc

2372 
DCW
 0xf631,0x7fa0, 0x6d2e,0x42d0, 0x3a40,0x71fa

2373 
DCW
 0xf59b,0x7f94, 0x6d14,0x42fb, 0x39e7,0x7228

2374 
DCW
 0xf505,0x7f87, 0x6cf9,0x4326, 0x398d,0x7255

2375 
DCW
 0xf46e,0x7f7a, 0x6cdf,0x4351, 0x3933,0x7282

2376 
DCW
 0xf3d8,0x7f6c, 0x6cc4,0x437b, 0x38d9,0x72af

2377 
DCW
 0xf342,0x7f5d, 0x6caa,0x43a6, 0x387f,0x72dc

2378 
DCW
 0xf2ac,0x7f4e, 0x6c8f,0x43d1, 0x3825,0x7308

2379 
DCW
 0xf216,0x7f3e, 0x6c75,0x43fb, 0x37ca,0x7334

2380 
DCW
 0xf180,0x7f2d, 0x6c5a,0x4426, 0x3770,0x735f

2381 
DCW
 0xf0eb,0x7f1c, 0x6c3f,0x4450, 0x3715,0x738b

2382 
DCW
 0xf055,0x7f0a, 0x6c24,0x447b, 0x36ba,0x73b6

2383 
DCW
 0xefbf,0x7ef7, 0x6c09,0x44a5, 0x365f,0x73e1

2384 
DCW
 0xef2a,0x7ee3, 0x6bee,0x44d0, 0x3604,0x740b

2385 
DCW
 0xee94,0x7ecf, 0x6bd3,0x44fa, 0x35a9,0x7436

2386 
DCW
 0xedff,0x7eba, 0x6bb8,0x4524, 0x354e,0x7460

2387 
DCW
 0xed6a,0x7ea5, 0x6b9d,0x454f, 0x34f2,0x7489

2388 
DCW
 0xecd5,0x7e8e, 0x6b82,0x4579, 0x3497,0x74b3

2389 
DCW
 0xec3f,0x7e78, 0x6b66,0x45a3, 0x343b,0x74dc

2390 
DCW
 0xebab,0x7e60, 0x6b4b,0x45cd, 0x33df,0x7505

2391 
DCW
 0xeb16,0x7e48, 0x6b30,0x45f7, 0x3383,0x752d

2392 
DCW
 0xea81,0x7e2f, 0x6b14,0x4621, 0x3327,0x7556

2393 
DCW
 0xe9ec,0x7e15, 0x6af8,0x464b, 0x32cb,0x757e

2394 
DCW
 0xe958,0x7dfb, 0x6add,0x4675, 0x326e,0x75a6

2395 
DCW
 0xe8c4,0x7de0, 0x6ac1,0x469f, 0x3212,0x75cd

2396 
DCW
 0xe82f,0x7dc4, 0x6aa5,0x46c9, 0x31b5,0x75f4

2397 
DCW
 0xe79b,0x7da7, 0x6a89,0x46f3, 0x3159,0x761b

2398 
DCW
 0xe707,0x7d8a, 0x6a6e,0x471d, 0x30fc,0x7642

2399 
DCW
 0xe673,0x7d6d, 0x6a52,0x4747, 0x309f,0x7668

2400 
DCW
 0xe5e0,0x7d4e, 0x6a36,0x4770, 0x3042,0x768e

2401 
DCW
 0xe54c,0x7d2f, 0x6a1a,0x479a, 0x2fe5,0x76b4

2402 
DCW
 0xe4b9,0x7d0f, 0x69fd,0x47c4, 0x2f87,0x76d9

2403 
DCW
 0xe426,0x7cef, 0x69e1,0x47ed, 0x2f2a,0x76fe

2404 
DCW
 0xe392,0x7cce, 0x69c5,0x4817, 0x2ecc,0x7723

2405 
DCW
 0xe2ff,0x7cac, 0x69a9,0x4840, 0x2e6f,0x7748

2406 
DCW
 0xe26d,0x7c89, 0x698c,0x486a, 0x2e11,0x776c

2407 
DCW
 0xe1da,0x7c66, 0x6970,0x4893, 0x2db3,0x7790

2408 
DCW
 0xe148,0x7c42, 0x6953,0x48bd, 0x2d55,0x77b4

2409 
DCW
 0xe0b5,0x7c1e, 0x6937,0x48e6, 0x2cf7,0x77d8

2410 
DCW
 0xe023,0x7bf9, 0x691a,0x490f, 0x2c99,0x77fb

2411 
DCW
 0xdf91,0x7bd3, 0x68fd,0x4939, 0x2c3b,0x781e

2412 
DCW
 0xdeff,0x7bac, 0x68e0,0x4962, 0x2bdc,0x7840

2413 
DCW
 0xde6e,0x7b85, 0x68c4,0x498b, 0x2b7e,0x7863

2414 
DCW
 0xdddc,0x7b5d, 0x68a7,0x49b4, 0x2b1f,0x7885

2415 
DCW
 0xdd4b,0x7b34, 0x688a,0x49dd, 0x2ac1,0x78a6

2416 
DCW
 0xdcba,0x7b0b, 0x686d,0x4a06, 0x2a62,0x78c8

2417 
DCW
 0xdc29,0x7ae1, 0x6850,0x4a2f, 0x2a03,0x78e9

2418 
DCW
 0xdb99,0x7ab7, 0x6832,0x4a58, 0x29a4,0x790a

2419 
DCW
 0xdb08,0x7a8c, 0x6815,0x4a81, 0x2945,0x792a

2420 
DCW
 0xda78,0x7a60, 0x67f8,0x4aaa, 0x28e5,0x794a

2421 
DCW
 0xd9e8,0x7a33, 0x67da,0x4ad3, 0x2886,0x796a

2422 
DCW
 0xd958,0x7a06, 0x67bd,0x4afb, 0x2827,0x798a

2423 
DCW
 0xd8c8,0x79d8, 0x67a0,0x4b24, 0x27c7,0x79aa

2424 
DCW
 0xd839,0x79aa, 0x6782,0x4b4d, 0x2768,0x79c9

2425 
DCW
 0xd7aa,0x797a, 0x6764,0x4b75, 0x2708,0x79e7

2426 
DCW
 0xd71b,0x794a, 0x6747,0x4b9e, 0x26a8,0x7a06

2427 
DCW
 0xd68c,0x791a, 0x6729,0x4bc7, 0x2648,0x7a24

2428 
DCW
 0xd5fd,0x78e9, 0x670b,0x4bef, 0x25e8,0x7a42

2429 
DCW
 0xd56f,0x78b7, 0x66ed,0x4c17, 0x2588,0x7a60

2430 
DCW
 0xd4e1,0x7885, 0x66d0,0x4c40, 0x2528,0x7a7d

2431 
DCW
 0xd453,0x7851, 0x66b2,0x4c68, 0x24c8,0x7a9a

2432 
DCW
 0xd3c5,0x781e, 0x6693,0x4c91, 0x2467,0x7ab7

2433 
DCW
 0xd338,0x77e9, 0x6675,0x4cb9, 0x2407,0x7ad3

2434 
DCW
 0xd2ab,0x77b4, 0x6657,0x4ce1, 0x23a7,0x7aef

2435 
DCW
 0xd21e,0x777e, 0x6639,0x4d09, 0x2346,0x7b0b

2436 
DCW
 0xd191,0x7748, 0x661b,0x4d31, 0x22e5,0x7b27

2437 
DCW
 0xd105,0x7711, 0x65fc,0x4d59, 0x2284,0x7b42

2438 
DCW
 0xd079,0x76d9, 0x65de,0x4d81, 0x2224,0x7b5d

2439 
DCW
 0xcfed,0x76a1, 0x65c0,0x4da9, 0x21c3,0x7b78

2440 
DCW
 0xcf61,0x7668, 0x65a1,0x4dd1, 0x2162,0x7b92

2441 
DCW
 0xced6,0x762e, 0x6582,0x4df9, 0x2101,0x7bac

2442 
DCW
 0xce4b,0x75f4, 0x6564,0x4e21, 0x209f,0x7bc6

2443 
DCW
 0xcdc0,0x75b9, 0x6545,0x4e49, 0x203e,0x7bdf

2444 
DCW
 0xcd35,0x757e, 0x6526,0x4e71, 0x1fdd,0x7bf9

2445 
DCW
 0xccab,0x7542, 0x6507,0x4e98, 0x1f7b,0x7c11

2446 
DCW
 0xcc21,0x7505, 0x64e9,0x4ec0, 0x1f1a,0x7c2a

2447 
DCW
 0xcb97,0x74c7, 0x64ca,0x4ee8, 0x1eb8,0x7c42

2448 
DCW
 0xcb0e,0x7489, 0x64ab,0x4f0f, 0x1e57,0x7c5a

2449 
DCW
 0xca85,0x744b, 0x648b,0x4f37, 0x1df5,0x7c72

2450 
DCW
 0xc9fc,0x740b, 0x646c,0x4f5e, 0x1d93,0x7c89

2451 
DCW
 0xc973,0x73cb, 0x644d,0x4f85, 0x1d31,0x7ca0

2452 
DCW
 0xc8eb,0x738b, 0x642e,0x4fad, 0x1cd0,0x7cb7

2453 
DCW
 0xc863,0x734a, 0x640f,0x4fd4, 0x1c6e,0x7cce

2454 
DCW
 0xc7db,0x7308, 0x63ef,0x4ffb, 0x1c0c,0x7ce4

2455 
DCW
 0xc754,0x72c5, 0x63d0,0x5023, 0x1ba9,0x7cfa

2456 
DCW
 0xc6cd,0x7282, 0x63b0,0x504a, 0x1b47,0x7d0f

2457 
DCW
 0xc646,0x723f, 0x6391,0x5071, 0x1ae5,0x7d25

2458 
DCW
 0xc5c0,0x71fa, 0x6371,0x5098, 0x1a83,0x7d3a

2459 
DCW
 0xc53a,0x71b5, 0x6351,0x50bf, 0x1a20,0x7d4e

2460 
DCW
 0xc4b4,0x7170, 0x6332,0x50e6, 0x19be,0x7d63

2461 
DCW
 0xc42e,0x712a, 0x6312,0x510d, 0x195b,0x7d77

2462 
DCW
 0xc3a9,0x70e3, 0x62f2,0x5134, 0x18f9,0x7d8a

2463 
DCW
 0xc324,0x709b, 0x62d2,0x515b, 0x1896,0x7d9e

2464 
DCW
 0xc2a0,0x7053, 0x62b2,0x5181, 0x1833,0x7db1

2465 
DCW
 0xc21c,0x700b, 0x6292,0x51a8, 0x17d1,0x7dc4

2466 
DCW
 0xc198,0x6fc2, 0x6272,0x51cf, 0x176e,0x7dd6

2467 
DCW
 0xc114,0x6f78, 0x6252,0x51f5, 0x170b,0x7de9

2468 
DCW
 0xc091,0x6f2d, 0x6232,0x521c, 0x16a8,0x7dfb

2469 
DCW
 0xc00f,0x6ee2, 0x6211,0x5243, 0x1645,0x7e0c

2470 
DCW
 0xbf8c,0x6e97, 0x61f1,0x5269, 0x15e2,0x7e1e

2471 
DCW
 0xbf0a,0x6e4a, 0x61d1,0x5290, 0x157f,0x7e2f

2472 
DCW
 0xbe88,0x6dfe, 0x61b0,0x52b6, 0x151c,0x7e3f

2473 
DCW
 0xbe07,0x6db0, 0x6190,0x52dc, 0x14b9,0x7e50

2474 
DCW
 0xbd86,0x6d62, 0x616f,0x5303, 0x1455,0x7e60

2475 
DCW
 0xbd05,0x6d14, 0x614e,0x5329, 0x13f2,0x7e70

2476 
DCW
 0xbc85,0x6cc4, 0x612e,0x534f, 0x138f,0x7e7f

2477 
DCW
 0xbc05,0x6c75, 0x610d,0x5375, 0x132b,0x7e8e

2478 
DCW
 0xbb85,0x6c24, 0x60ec,0x539b, 0x12c8,0x7e9d

2479 
DCW
 0xbb06,0x6bd3, 0x60cb,0x53c1, 0x1265,0x7eac

2480 
DCW
 0xba87,0x6b82, 0x60aa,0x53e7, 0x1201,0x7eba

2481 
DCW
 0xba09,0x6b30, 0x6089,0x540d, 0x119e,0x7ec8

2482 
DCW
 0xb98b,0x6add, 0x6068,0x5433, 0x113a,0x7ed6

2483 
DCW
 0xb90d,0x6a89, 0x6047,0x5459, 0x10d6,0x7ee3

2484 
DCW
 0xb890,0x6a36, 0x6026,0x547f, 0x1073,0x7ef0

2485 
DCW
 0xb813,0x69e1, 0x6005,0x54a4, 0x100f,0x7efd

2486 
DCW
 0xb796,0x698c, 0x5fe4,0x54ca, 0x0fab,0x7f0a

2487 
DCW
 0xb71a,0x6937, 0x5fc2,0x54f0, 0x0f47,0x7f16

2488 
DCW
 0xb69e,0x68e0, 0x5fa1,0x5515, 0x0ee4,0x7f22

2489 
DCW
 0xb623,0x688a, 0x5f80,0x553b, 0x0e80,0x7f2d

2490 
DCW
 0xb5a8,0x6832, 0x5f5e,0x5560, 0x0e1c,0x7f38

2491 
DCW
 0xb52d,0x67da, 0x5f3c,0x5586, 0x0db8,0x7f43

2492 
DCW
 0xb4b3,0x6782, 0x5f1b,0x55ab, 0x0d54,0x7f4e

2493 
DCW
 0xb439,0x6729, 0x5ef9,0x55d0, 0x0cf0,0x7f58

2494 
DCW
 0xb3c0,0x66d0, 0x5ed7,0x55f6, 0x0c8c,0x7f62

2495 
DCW
 0xb347,0x6675, 0x5eb6,0x561b, 0x0c28,0x7f6c

2496 
DCW
 0xb2cf,0x661b, 0x5e94,0x5640, 0x0bc4,0x7f75

2497 
DCW
 0xb257,0x65c0, 0x5e72,0x5665, 0x0b60,0x7f7e

2498 
DCW
 0xb1df,0x6564, 0x5e50,0x568a, 0x0afb,0x7f87

2499 
DCW
 0xb168,0x6507, 0x5e2e,0x56af, 0x0a97,0x7f90

2500 
DCW
 0xb0f1,0x64ab, 0x5e0c,0x56d4, 0x0a33,0x7f98

2501 
DCW
 0xb07b,0x644d, 0x5dea,0x56f9, 0x09cf,0x7fa0

2502 
DCW
 0xb005,0x63ef, 0x5dc8,0x571e, 0x096b,0x7fa7

2503 
DCW
 0xaf8f,0x6391, 0x5da5,0x5743, 0x0906,0x7fae

2504 
DCW
 0xaf1a,0x6332, 0x5d83,0x5767, 0x08a2,0x7fb5

2505 
DCW
 0xaea5,0x62d2, 0x5d61,0x578c, 0x083e,0x7fbc

2506 
DCW
 0xae31,0x6272, 0x5d3e,0x57b1, 0x07d9,0x7fc2

2507 
DCW
 0xadbd,0x6211, 0x5d1c,0x57d5, 0x0775,0x7fc8

2508 
DCW
 0xad4a,0x61b0, 0x5cf9,0x57fa, 0x0711,0x7fce

2509 
DCW
 0xacd7,0x614e, 0x5cd7,0x581e, 0x06ac,0x7fd3

2510 
DCW
 0xac65,0x60ec, 0x5cb4,0x5843, 0x0648,0x7fd9

2511 
DCW
 0xabf3,0x6089, 0x5c91,0x5867, 0x05e3,0x7fdd

2512 
DCW
 0xab81,0x6026, 0x5c6f,0x588c, 0x057f,0x7fe2

2513 
DCW
 0xab10,0x5fc2, 0x5c4c,0x58b0, 0x051b,0x7fe6

2514 
DCW
 0xaaa0,0x5f5e, 0x5c29,0x58d4, 0x04b6,0x7fea

2515 
DCW
 0xaa30,0x5ef9, 0x5c06,0x58f8, 0x0452,0x7fed

2516 
DCW
 0xa9c0,0x5e94, 0x5be3,0x591c, 0x03ed,0x7ff1

2517 
DCW
 0xa951,0x5e2e, 0x5bc0,0x5940, 0x0389,0x7ff4

2518 
DCW
 0xa8e2,0x5dc8, 0x5b9d,0x5964, 0x0324,0x7ff6

2519 
DCW
 0xa874,0x5d61, 0x5b7a,0x5988, 0x02c0,0x7ff8

2520 
DCW
 0xa806,0x5cf9, 0x5b57,0x59ac, 0x025b,0x7ffa

2521 
DCW
 0xa799,0x5c91, 0x5b34,0x59d0, 0x01f7,0x7ffc

2522 
DCW
 0xa72c,0x5c29, 0x5b10,0x59f4, 0x0192,0x7ffe

2523 
DCW
 0xa6c0,0x5bc0, 0x5aed,0x5a18, 0x012e,0x7fff

2524 
DCW
 0xa654,0x5b57, 0x5ac9,0x5a3b, 0x00c9,0x7fff

2525 
DCW
 0xa5e8,0x5aed, 0x5aa6,0x5a5f, 0x0065,0x7fff

2526 
DCW
 0xa57e,0x5a82, 0x5a82,0x5a82, 0x0000,0x7fff

2527 
DCW
 0xa513,0x5a18, 0x5a5f,0x5aa6, 0xff9b,0x7fff

2528 
DCW
 0xa4a9,0x59ac, 0x5a3b,0x5ac9, 0xff37,0x7fff

2529 
DCW
 0xa440,0x5940, 0x5a18,0x5aed, 0xfed2,0x7fff

2530 
DCW
 0xa3d7,0x58d4, 0x59f4,0x5b10, 0xfe6e,0x7ffe

2531 
DCW
 0xa36f,0x5867, 0x59d0,0x5b34, 0xfe09,0x7ffc

2532 
DCW
 0xa307,0x57fa, 0x59ac,0x5b57, 0xfda5,0x7ffa

2533 
DCW
 0xa29f,0x578c, 0x5988,0x5b7a, 0xfd40,0x7ff8

2534 
DCW
 0xa238,0x571e, 0x5964,0x5b9d, 0xfcdc,0x7ff6

2535 
DCW
 0xa1d2,0x56af, 0x5940,0x5bc0, 0xfc77,0x7ff4

2536 
DCW
 0xa16c,0x5640, 0x591c,0x5be3, 0xfc13,0x7ff1

2537 
DCW
 0xa107,0x55d0, 0x58f8,0x5c06, 0xfbae,0x7fed

2538 
DCW
 0xa0a2,0x5560, 0x58d4,0x5c29, 0xfb4a,0x7fea

2539 
DCW
 0xa03e,0x54f0, 0x58b0,0x5c4c, 0xfae5,0x7fe6

2540 
DCW
 0x9fda,0x547f, 0x588c,0x5c6f, 0xfa81,0x7fe2

2541 
DCW
 0x9f77,0x540d, 0x5867,0x5c91, 0xfa1d,0x7fdd

2542 
DCW
 0x9f14,0x539b, 0x5843,0x5cb4, 0xf9b8,0x7fd9

2543 
DCW
 0x9eb2,0x5329, 0x581e,0x5cd7, 0xf954,0x7fd3

2544 
DCW
 0x9e50,0x52b6, 0x57fa,0x5cf9, 0xf8ef,0x7fce

2545 
DCW
 0x9def,0x5243, 0x57d5,0x5d1c, 0xf88b,0x7fc8

2546 
DCW
 0x9d8e,0x51cf, 0x57b1,0x5d3e, 0xf827,0x7fc2

2547 
DCW
 0x9d2e,0x515b, 0x578c,0x5d61, 0xf7c2,0x7fbc

2548 
DCW
 0x9cce,0x50e6, 0x5767,0x5d83, 0xf75e,0x7fb5

2549 
DCW
 0x9c6f,0x5071, 0x5743,0x5da5, 0xf6fa,0x7fae

2550 
DCW
 0x9c11,0x4ffb, 0x571e,0x5dc8, 0xf695,0x7fa7

2551 
DCW
 0x9bb3,0x4f85, 0x56f9,0x5dea, 0xf631,0x7fa0

2552 
DCW
 0x9b55,0x4f0f, 0x56d4,0x5e0c, 0xf5cd,0x7f98

2553 
DCW
 0x9af9,0x4e98, 0x56af,0x5e2e, 0xf569,0x7f90

2554 
DCW
 0x9a9c,0x4e21, 0x568a,0x5e50, 0xf505,0x7f87

2555 
DCW
 0x9a40,0x4da9, 0x5665,0x5e72, 0xf4a0,0x7f7e

2556 
DCW
 0x99e5,0x4d31, 0x5640,0x5e94, 0xf43c,0x7f75

2557 
DCW
 0x998b,0x4cb9, 0x561b,0x5eb6, 0xf3d8,0x7f6c

2558 
DCW
 0x9930,0x4c40, 0x55f6,0x5ed7, 0xf374,0x7f62

2559 
DCW
 0x98d7,0x4bc7, 0x55d0,0x5ef9, 0xf310,0x7f58

2560 
DCW
 0x987e,0x4b4d, 0x55ab,0x5f1b, 0xf2ac,0x7f4e

2561 
DCW
 0x9826,0x4ad3, 0x5586,0x5f3c, 0xf248,0x7f43

2562 
DCW
 0x97ce,0x4a58, 0x5560,0x5f5e, 0xf1e4,0x7f38

2563 
DCW
 0x9776,0x49dd, 0x553b,0x5f80, 0xf180,0x7f2d

2564 
DCW
 0x9720,0x4962, 0x5515,0x5fa1, 0xf11c,0x7f22

2565 
DCW
 0x96c9,0x48e6, 0x54f0,0x5fc2, 0xf0b9,0x7f16

2566 
DCW
 0x9674,0x486a, 0x54ca,0x5fe4, 0xf055,0x7f0a

2567 
DCW
 0x961f,0x47ed, 0x54a4,0x6005, 0xeff1,0x7efd

2568 
DCW
 0x95ca,0x4770, 0x547f,0x6026, 0xef8d,0x7ef0

2569 
DCW
 0x9577,0x46f3, 0x5459,0x6047, 0xef2a,0x7ee3

2570 
DCW
 0x9523,0x4675, 0x5433,0x6068, 0xeec6,0x7ed6

2571 
DCW
 0x94d0,0x45f7, 0x540d,0x6089, 0xee62,0x7ec8

2572 
DCW
 0x947e,0x4579, 0x53e7,0x60aa, 0xedff,0x7eba

2573 
DCW
 0x942d,0x44fa, 0x53c1,0x60cb, 0xed9b,0x7eac

2574 
DCW
 0x93dc,0x447b, 0x539b,0x60ec, 0xed38,0x7e9d

2575 
DCW
 0x938b,0x43fb, 0x5375,0x610d, 0xecd5,0x7e8e

2576 
DCW
 0x933c,0x437b, 0x534f,0x612e, 0xec71,0x7e7f

2577 
DCW
 0x92ec,0x42fb, 0x5329,0x614e, 0xec0e,0x7e70

2578 
DCW
 0x929e,0x427a, 0x5303,0x616f, 0xebab,0x7e60

2579 
DCW
 0x9250,0x41f9, 0x52dc,0x6190, 0xeb47,0x7e50

2580 
DCW
 0x9202,0x4178, 0x52b6,0x61b0, 0xeae4,0x7e3f

2581 
DCW
 0x91b6,0x40f6, 0x5290,0x61d1, 0xea81,0x7e2f

2582 
DCW
 0x9169,0x4074, 0x5269,0x61f1, 0xea1e,0x7e1e

2583 
DCW
 0x911e,0x3ff1, 0x5243,0x6211, 0xe9bb,0x7e0c

2584 
DCW
 0x90d3,0x3f6f, 0x521c,0x6232, 0xe958,0x7dfb

2585 
DCW
 0x9088,0x3eec, 0x51f5,0x6252, 0xe8f5,0x7de9

2586 
DCW
 0x903e,0x3e68, 0x51cf,0x6272, 0xe892,0x7dd6

2587 
DCW
 0x8ff5,0x3de4, 0x51a8,0x6292, 0xe82f,0x7dc4

2588 
DCW
 0x8fad,0x3d60, 0x5181,0x62b2, 0xe7cd,0x7db1

2589 
DCW
 0x8f65,0x3cdc, 0x515b,0x62d2, 0xe76a,0x7d9e

2590 
DCW
 0x8f1d,0x3c57, 0x5134,0x62f2, 0xe707,0x7d8a

2591 
DCW
 0x8ed6,0x3bd2, 0x510d,0x6312, 0xe6a5,0x7d77

2592 
DCW
 0x8e90,0x3b4c, 0x50e6,0x6332, 0xe642,0x7d63

2593 
DCW
 0x8e4b,0x3ac6, 0x50bf,0x6351, 0xe5e0,0x7d4e

2594 
DCW
 0x8e06,0x3a40, 0x5098,0x6371, 0xe57d,0x7d3a

2595 
DCW
 0x8dc1,0x39ba, 0x5071,0x6391, 0xe51b,0x7d25

2596 
DCW
 0x8d7e,0x3933, 0x504a,0x63b0, 0xe4b9,0x7d0f

2597 
DCW
 0x8d3b,0x38ac, 0x5023,0x63d0, 0xe457,0x7cfa

2598 
DCW
 0x8cf8,0x3825, 0x4ffb,0x63ef, 0xe3f4,0x7ce4

2599 
DCW
 0x8cb6,0x379d, 0x4fd4,0x640f, 0xe392,0x7cce

2600 
DCW
 0x8c75,0x3715, 0x4fad,0x642e, 0xe330,0x7cb7

2601 
DCW
 0x8c35,0x368d, 0x4f85,0x644d, 0xe2cf,0x7ca0

2602 
DCW
 0x8bf5,0x3604, 0x4f5e,0x646c, 0xe26d,0x7c89

2603 
DCW
 0x8bb5,0x357b, 0x4f37,0x648b, 0xe20b,0x7c72

2604 
DCW
 0x8b77,0x34f2, 0x4f0f,0x64ab, 0xe1a9,0x7c5a

2605 
DCW
 0x8b39,0x3469, 0x4ee8,0x64ca, 0xe148,0x7c42

2606 
DCW
 0x8afb,0x33df, 0x4ec0,0x64e9, 0xe0e6,0x7c2a

2607 
DCW
 0x8abe,0x3355, 0x4e98,0x6507, 0xe085,0x7c11

2608 
DCW
 0x8a82,0x32cb, 0x4e71,0x6526, 0xe023,0x7bf9

2609 
DCW
 0x8a47,0x3240, 0x4e49,0x6545, 0xdfc2,0x7bdf

2610 
DCW
 0x8a0c,0x31b5, 0x4e21,0x6564, 0xdf61,0x7bc6

2611 
DCW
 0x89d2,0x312a, 0x4df9,0x6582, 0xdeff,0x7bac

2612 
DCW
 0x8998,0x309f, 0x4dd1,0x65a1, 0xde9e,0x7b92

2613 
DCW
 0x895f,0x3013, 0x4da9,0x65c0, 0xde3d,0x7b78

2614 
DCW
 0x8927,0x2f87, 0x4d81,0x65de, 0xdddc,0x7b5d

2615 
DCW
 0x88ef,0x2efb, 0x4d59,0x65fc, 0xdd7c,0x7b42

2616 
DCW
 0x88b8,0x2e6f, 0x4d31,0x661b, 0xdd1b,0x7b27

2617 
DCW
 0x8882,0x2de2, 0x4d09,0x6639, 0xdcba,0x7b0b

2618 
DCW
 0x884c,0x2d55, 0x4ce1,0x6657, 0xdc59,0x7aef

2619 
DCW
 0x8817,0x2cc8, 0x4cb9,0x6675, 0xdbf9,0x7ad3

2620 
DCW
 0x87e2,0x2c3b, 0x4c91,0x6693, 0xdb99,0x7ab7

2621 
DCW
 0x87af,0x2bad, 0x4c68,0x66b2, 0xdb38,0x7a9a

2622 
DCW
 0x877b,0x2b1f, 0x4c40,0x66d0, 0xdad8,0x7a7d

2623 
DCW
 0x8749,0x2a91, 0x4c17,0x66ed, 0xda78,0x7a60

2624 
DCW
 0x8717,0x2a03, 0x4bef,0x670b, 0xda18,0x7a42

2625 
DCW
 0x86e6,0x2974, 0x4bc7,0x6729, 0xd9b8,0x7a24

2626 
DCW
 0x86b6,0x28e5, 0x4b9e,0x6747, 0xd958,0x7a06

2627 
DCW
 0x8686,0x2856, 0x4b75,0x6764, 0xd8f8,0x79e7

2628 
DCW
 0x8656,0x27c7, 0x4b4d,0x6782, 0xd898,0x79c9

2629 
DCW
 0x8628,0x2738, 0x4b24,0x67a0, 0xd839,0x79aa

2630 
DCW
 0x85fa,0x26a8, 0x4afb,0x67bd, 0xd7d9,0x798a

2631 
DCW
 0x85cd,0x2618, 0x4ad3,0x67da, 0xd77a,0x796a

2632 
DCW
 0x85a0,0x2588, 0x4aaa,0x67f8, 0xd71b,0x794a

2633 
DCW
 0x8574,0x24f8, 0x4a81,0x6815, 0xd6bb,0x792a

2634 
DCW
 0x8549,0x2467, 0x4a58,0x6832, 0xd65c,0x790a

2635 
DCW
 0x851f,0x23d7, 0x4a2f,0x6850, 0xd5fd,0x78e9

2636 
DCW
 0x84f5,0x2346, 0x4a06,0x686d, 0xd59e,0x78c8

2637 
DCW
 0x84cc,0x22b5, 0x49dd,0x688a, 0xd53f,0x78a6

2638 
DCW
 0x84a3,0x2224, 0x49b4,0x68a7, 0xd4e1,0x7885

2639 
DCW
 0x847b,0x2192, 0x498b,0x68c4, 0xd482,0x7863

2640 
DCW
 0x8454,0x2101, 0x4962,0x68e0, 0xd424,0x7840

2641 
DCW
 0x842d,0x206f, 0x4939,0x68fd, 0xd3c5,0x781e

2642 
DCW
 0x8407,0x1fdd, 0x490f,0x691a, 0xd367,0x77fb

2643 
DCW
 0x83e2,0x1f4b, 0x48e6,0x6937, 0xd309,0x77d8

2644 
DCW
 0x83be,0x1eb8, 0x48bd,0x6953, 0xd2ab,0x77b4

2645 
DCW
 0x839a,0x1e26, 0x4893,0x6970, 0xd24d,0x7790

2646 
DCW
 0x8377,0x1d93, 0x486a,0x698c, 0xd1ef,0x776c

2647 
DCW
 0x8354,0x1d01, 0x4840,0x69a9, 0xd191,0x7748

2648 
DCW
 0x8332,0x1c6e, 0x4817,0x69c5, 0xd134,0x7723

2649 
DCW
 0x8311,0x1bda, 0x47ed,0x69e1, 0xd0d6,0x76fe

2650 
DCW
 0x82f1,0x1b47, 0x47c4,0x69fd, 0xd079,0x76d9

2651 
DCW
 0x82d1,0x1ab4, 0x479a,0x6a1a, 0xd01b,0x76b4

2652 
DCW
 0x82b2,0x1a20, 0x4770,0x6a36, 0xcfbe,0x768e

2653 
DCW
 0x8293,0x198d, 0x4747,0x6a52, 0xcf61,0x7668

2654 
DCW
 0x8276,0x18f9, 0x471d,0x6a6e, 0xcf04,0x7642

2655 
DCW
 0x8259,0x1865, 0x46f3,0x6a89, 0xcea7,0x761b

2656 
DCW
 0x823c,0x17d1, 0x46c9,0x6aa5, 0xce4b,0x75f4

2657 
DCW
 0x8220,0x173c, 0x469f,0x6ac1, 0xcdee,0x75cd

2658 
DCW
 0x8205,0x16a8, 0x4675,0x6add, 0xcd92,0x75a6

2659 
DCW
 0x81eb,0x1614, 0x464b,0x6af8, 0xcd35,0x757e

2660 
DCW
 0x81d1,0x157f, 0x4621,0x6b14, 0xccd9,0x7556

2661 
DCW
 0x81b8,0x14ea, 0x45f7,0x6b30, 0xcc7d,0x752d

2662 
DCW
 0x81a0,0x1455, 0x45cd,0x6b4b, 0xcc21,0x7505

2663 
DCW
 0x8188,0x13c1, 0x45a3,0x6b66, 0xcbc5,0x74dc

2664 
DCW
 0x8172,0x132b, 0x4579,0x6b82, 0xcb69,0x74b3

2665 
DCW
 0x815b,0x1296, 0x454f,0x6b9d, 0xcb0e,0x7489

2666 
DCW
 0x8146,0x1201, 0x4524,0x6bb8, 0xcab2,0x7460

2667 
DCW
 0x8131,0x116c, 0x44fa,0x6bd3, 0xca57,0x7436

2668 
DCW
 0x811d,0x10d6, 0x44d0,0x6bee, 0xc9fc,0x740b

2669 
DCW
 0x8109,0x1041, 0x44a5,0x6c09, 0xc9a1,0x73e1

2670 
DCW
 0x80f6,0x0fab, 0x447b,0x6c24, 0xc946,0x73b6

2671 
DCW
 0x80e4,0x0f15, 0x4450,0x6c3f, 0xc8eb,0x738b

2672 
DCW
 0x80d3,0x0e80, 0x4426,0x6c5a, 0xc890,0x735f

2673 
DCW
 0x80c2,0x0dea, 0x43fb,0x6c75, 0xc836,0x7334

2674 
DCW
 0x80b2,0x0d54, 0x43d1,0x6c8f, 0xc7db,0x7308

2675 
DCW
 0x80a3,0x0cbe, 0x43a6,0x6caa, 0xc781,0x72dc

2676 
DCW
 0x8094,0x0c28, 0x437b,0x6cc4, 0xc727,0x72af

2677 
DCW
 0x8086,0x0b92, 0x4351,0x6cdf, 0xc6cd,0x7282

2678 
DCW
 0x8079,0x0afb, 0x4326,0x6cf9, 0xc673,0x7255

2679 
DCW
 0x806c,0x0a65, 0x42fb,0x6d14, 0xc619,0x7228

2680 
DCW
 0x8060,0x09cf, 0x42d0,0x6d2e, 0xc5c0,0x71fa

2681 
DCW
 0x8055,0x0938, 0x42a5,0x6d48, 0xc566,0x71cc

2682 
DCW
 0x804b,0x08a2, 0x427a,0x6d62, 0xc50d,0x719e

2683 
DCW
 0x8041,0x080c, 0x424f,0x6d7c, 0xc4b4,0x7170

2684 
DCW
 0x8038,0x0775, 0x4224,0x6d96, 0xc45b,0x7141

2685 
DCW
 0x802f,0x06de, 0x41f9,0x6db0, 0xc402,0x7112

2686 
DCW
 0x8027,0x0648, 0x41ce,0x6dca, 0xc3a9,0x70e3

2687 
DCW
 0x8020,0x05b1, 0x41a3,0x6de4, 0xc351,0x70b3

2688 
DCW
 0x801a,0x051b, 0x4178,0x6dfe, 0xc2f8,0x7083

2689 
DCW
 0x8014,0x0484, 0x414d,0x6e17, 0xc2a0,0x7053

2690 
DCW
 0x800f,0x03ed, 0x4121,0x6e31, 0xc248,0x7023

2691 
DCW
 0x800b,0x0356, 0x40f6,0x6e4a, 0xc1f0,0x6ff2

2692 
DCW
 0x8008,0x02c0, 0x40cb,0x6e64, 0xc198,0x6fc2

2693 
DCW
 0x8005,0x0229, 0x409f,0x6e7d, 0xc140,0x6f90

2694 
DCW
 0x8002,0x0192, 0x4074,0x6e97, 0xc0e9,0x6f5f

2695 
DCW
 0x8001,0x00fb, 0x4048,0x6eb0, 0xc091,0x6f2d

2696 
DCW
 0x8000,0x0065, 0x401d,0x6ec9, 0xc03a,0x6efb

2697 
DCW
 0x8000,0xffce, 0x3ff1,0x6ee2, 0xbfe3,0x6ec9

2698 
DCW
 0x8001,0xff37, 0x3fc6,0x6efb, 0xbf8c,0x6e97

2699 
DCW
 0x8002,0xfea0, 0x3f9a,0x6f14, 0xbf35,0x6e64

2700 
DCW
 0x8004,0xfe09, 0x3f6f,0x6f2d, 0xbedf,0x6e31

2701 
DCW
 0x8007,0xfd73, 0x3f43,0x6f46, 0xbe88,0x6dfe

2702 
DCW
 0x800a,0xfcdc, 0x3f17,0x6f5f, 0xbe32,0x6dca

2703 
DCW
 0x800e,0xfc45, 0x3eec,0x6f78, 0xbddc,0x6d96

2704 
DCW
 0x8013,0xfbae, 0x3ec0,0x6f90, 0xbd86,0x6d62

2705 
DCW
 0x8018,0xfb18, 0x3e94,0x6fa9, 0xbd30,0x6d2e

2706 
DCW
 0x801e,0xfa81, 0x3e68,0x6fc2, 0xbcda,0x6cf9

2707 
DCW
 0x8025,0xf9ea, 0x3e3c,0x6fda, 0xbc85,0x6cc4

2708 
DCW
 0x802d,0xf954, 0x3e10,0x6ff2, 0xbc2f,0x6c8f

2709 
DCW
 0x8035,0xf8bd, 0x3de4,0x700b, 0xbbda,0x6c5a

2710 
DCW
 0x803e,0xf827, 0x3db8,0x7023, 0xbb85,0x6c24

2711 
DCW
 0x8047,0xf790, 0x3d8c,0x703b, 0xbb30,0x6bee

2712 
DCW
 0x8052,0xf6fa, 0x3d60,0x7053, 0xbadc,0x6bb8

2713 
DCW
 0x805d,0xf663, 0x3d34,0x706b, 0xba87,0x6b82

2714 
DCW
 0x8068,0xf5cd, 0x3d08,0x7083, 0xba33,0x6b4b

2715 
DCW
 0x8075,0xf537, 0x3cdc,0x709b, 0xb9df,0x6b14

2716 
DCW
 0x8082,0xf4a0, 0x3caf,0x70b3, 0xb98b,0x6add

2717 
DCW
 0x808f,0xf40a, 0x3c83,0x70cb, 0xb937,0x6aa5

2718 
DCW
 0x809e,0xf374, 0x3c57,0x70e3, 0xb8e3,0x6a6e

2719 
DCW
 0x80ad,0xf2de, 0x3c2a,0x70fa, 0xb890,0x6a36

2720 
DCW
 0x80bd,0xf248, 0x3bfe,0x7112, 0xb83c,0x69fd

2721 
DCW
 0x80cd,0xf1b2, 0x3bd2,0x712a, 0xb7e9,0x69c5

2722 
DCW
 0x80de,0xf11c, 0x3ba5,0x7141, 0xb796,0x698c

2723 
DCW
 0x80f0,0xf087, 0x3b79,0x7158, 0xb743,0x6953

2724 
DCW
 0x8103,0xeff1, 0x3b4c,0x7170, 0xb6f1,0x691a

2725 
DCW
 0x8116,0xef5c, 0x3b20,0x7187, 0xb69e,0x68e0

2726 
DCW
 0x812a,0xeec6, 0x3af3,0x719e, 0xb64c,0x68a7

2727 
DCW
 0x813f,0xee31, 0x3ac6,0x71b5, 0xb5fa,0x686d

2728 
DCW
 0x8154,0xed9b, 0x3a9a,0x71cc, 0xb5a8,0x6832

2729 
DCW
 0x816a,0xed06, 0x3a6d,0x71e3, 0xb556,0x67f8

2730 
DCW
 0x8181,0xec71, 0x3a40,0x71fa, 0xb505,0x67bd

2731 
DCW
 0x8198,0xebdc, 0x3a13,0x7211, 0xb4b3,0x6782

2732 
DCW
 0x81b0,0xeb47, 0x39e7,0x7228, 0xb462,0x6747

2733 
DCW
 0x81c9,0xeab3, 0x39ba,0x723f, 0xb411,0x670b

2734 
DCW
 0x81e2,0xea1e, 0x398d,0x7255, 0xb3c0,0x66d0

2735 
DCW
 0x81fd,0xe989, 0x3960,0x726c, 0xb36f,0x6693

2736 
DCW
 0x8217,0xe8f5, 0x3933,0x7282, 0xb31f,0x6657

2737 
DCW
 0x8233,0xe861, 0x3906,0x7299, 0xb2cf,0x661b

2738 
DCW
 0x824f,0xe7cd, 0x38d9,0x72af, 0xb27f,0x65de

2739 
DCW
 0x826c,0xe739, 0x38ac,0x72c5, 0xb22f,0x65a1

2740 
DCW
 0x8289,0xe6a5, 0x387f,0x72dc, 0xb1df,0x6564

2741 
DCW
 0x82a8,0xe611, 0x3852,0x72f2, 0xb18f,0x6526

2742 
DCW
 0x82c6,0xe57d, 0x3825,0x7308, 0xb140,0x64e9

2743 
DCW
 0x82e6,0xe4ea, 0x37f7,0x731e, 0xb0f1,0x64ab

2744 
DCW
 0x8306,0xe457, 0x37ca,0x7334, 0xb0a2,0x646c

2745 
DCW
 0x8327,0xe3c3, 0x379d,0x734a, 0xb053,0x642e

2746 
DCW
 0x8349,0xe330, 0x3770,0x735f, 0xb005,0x63ef

2747 
DCW
 0x836b,0xe29e, 0x3742,0x7375, 0xafb6,0x63b0

2748 
DCW
 0x838e,0xe20b, 0x3715,0x738b, 0xaf68,0x6371

2749 
DCW
 0x83b2,0xe178, 0x36e8,0x73a0, 0xaf1a,0x6332

2750 
DCW
 0x83d6,0xe0e6, 0x36ba,0x73b6, 0xaecc,0x62f2

2751 
DCW
 0x83fb,0xe054, 0x368d,0x73cb, 0xae7f,0x62b2

2752 
DCW
 0x8421,0xdfc2, 0x365f,0x73e1, 0xae31,0x6272

2753 
DCW
 0x8447,0xdf30, 0x3632,0x73f6, 0xade4,0x6232

2754 
DCW
 0x846e,0xde9e, 0x3604,0x740b, 0xad97,0x61f1

2755 
DCW
 0x8496,0xde0d, 0x35d7,0x7421, 0xad4a,0x61b0

2756 
DCW
 0x84be,0xdd7c, 0x35a9,0x7436, 0xacfd,0x616f

2757 
DCW
 0x84e7,0xdcea, 0x357b,0x744b, 0xacb1,0x612e

2758 
DCW
 0x8511,0xdc59, 0x354e,0x7460, 0xac65,0x60ec

2759 
DCW
 0x853b,0xdbc9, 0x3520,0x7475, 0xac19,0x60aa

2760 
DCW
 0x8566,0xdb38, 0x34f2,0x7489, 0xabcd,0x6068

2761 
DCW
 0x8592,0xdaa8, 0x34c4,0x749e, 0xab81,0x6026

2762 
DCW
 0x85be,0xda18, 0x3497,0x74b3, 0xab36,0x5fe4

2763 
DCW
 0x85eb,0xd988, 0x3469,0x74c7, 0xaaeb,0x5fa1

2764 
DCW
 0x8619,0xd8f8, 0x343b,0x74dc, 0xaaa0,0x5f5e

2765 
DCW
 0x8647,0xd869, 0x340d,0x74f0, 0xaa55,0x5f1b

2766 
DCW
 0x8676,0xd7d9, 0x33df,0x7505, 0xaa0a,0x5ed7

2767 
DCW
 0x86a5,0xd74a, 0x33b1,0x7519, 0xa9c0,0x5e94

2768 
DCW
 0x86d6,0xd6bb, 0x3383,0x752d, 0xa976,0x5e50

2769 
DCW
 0x8707,0xd62d, 0x3355,0x7542, 0xa92c,0x5e0c

2770 
DCW
 0x8738,0xd59e, 0x3327,0x7556, 0xa8e2,0x5dc8

2771 
DCW
 0x876b,0xd510, 0x32f9,0x756a, 0xa899,0x5d83

2772 
DCW
 0x879d,0xd482, 0x32cb,0x757e, 0xa84f,0x5d3e

2773 
DCW
 0x87d1,0xd3f4, 0x329d,0x7592, 0xa806,0x5cf9

2774 
DCW
 0x8805,0xd367, 0x326e,0x75a6, 0xa7bd,0x5cb4

2775 
DCW
 0x883a,0xd2da, 0x3240,0x75b9, 0xa774,0x5c6f

2776 
DCW
 0x8870,0xd24d, 0x3212,0x75cd, 0xa72c,0x5c29

2777 
DCW
 0x88a6,0xd1c0, 0x31e4,0x75e1, 0xa6e4,0x5be3

2778 
DCW
 0x88dd,0xd134, 0x31b5,0x75f4, 0xa69c,0x5b9d

2779 
DCW
 0x8914,0xd0a7, 0x3187,0x7608, 0xa654,0x5b57

2780 
DCW
 0x894c,0xd01b, 0x3159,0x761b, 0xa60c,0x5b10

2781 
DCW
 0x8985,0xcf90, 0x312a,0x762e, 0xa5c5,0x5ac9

2782 
DCW
 0x89be,0xcf04, 0x30fc,0x7642, 0xa57e,0x5a82

2783 
DCW
 0x89f8,0xce79, 0x30cd,0x7655, 0xa537,0x5a3b

2784 
DCW
 0x8a33,0xcdee, 0x309f,0x7668, 0xa4f0,0x59f4

2785 
DCW
 0x8a6e,0xcd63, 0x3070,0x767b, 0xa4a9,0x59ac

2786 
DCW
 0x8aaa,0xccd9, 0x3042,0x768e, 0xa463,0x5964

2787 
DCW
 0x8ae7,0xcc4f, 0x3013,0x76a1, 0xa41d,0x591c

2788 
DCW
 0x8b24,0xcbc5, 0x2fe5,0x76b4, 0xa3d7,0x58d4

2789 
DCW
 0x8b62,0xcb3c, 0x2fb6,0x76c7, 0xa391,0x588c

2790 
DCW
 0x8ba0,0xcab2, 0x2f87,0x76d9, 0xa34c,0x5843

2791 
DCW
 0x8bdf,0xca29, 0x2f59,0x76ec, 0xa307,0x57fa

2792 
DCW
 0x8c1f,0xc9a1, 0x2f2a,0x76fe, 0xa2c2,0x57b1

2793 
DCW
 0x8c60,0xc918, 0x2efb,0x7711, 0xa27d,0x5767

2794 
DCW
 0x8ca1,0xc890, 0x2ecc,0x7723, 0xa238,0x571e

2795 
DCW
 0x8ce2,0xc809, 0x2e9e,0x7736, 0xa1f4,0x56d4

2796 
DCW
 0x8d24,0xc781, 0x2e6f,0x7748, 0xa1b0,0x568a

2797 
DCW
 0x8d67,0xc6fa, 0x2e40,0x775a, 0xa16c,0x5640

2798 
DCW
 0x8dab,0xc673, 0x2e11,0x776c, 0xa129,0x55f6

2799 
DCW
 0x8def,0xc5ed, 0x2de2,0x777e, 0xa0e5,0x55ab

2800 
DCW
 0x8e34,0xc566, 0x2db3,0x7790, 0xa0a2,0x5560

2801 
DCW
 0x8e79,0xc4e0, 0x2d84,0x77a2, 0xa05f,0x5515

2802 
DCW
 0x8ebf,0xc45b, 0x2d55,0x77b4, 0xa01c,0x54ca

2803 
DCW
 0x8f06,0xc3d6, 0x2d26,0x77c6, 0x9fda,0x547f

2804 
DCW
 0x8f4d,0xc351, 0x2cf7,0x77d8, 0x9f98,0x5433

2805 
DCW
 0x8f95,0xc2cc, 0x2cc8,0x77e9, 0x9f56,0x53e7

2806 
DCW
 0x8fdd,0xc248, 0x2c99,0x77fb, 0x9f14,0x539b

2807 
DCW
 0x9026,0xc1c4, 0x2c6a,0x780c, 0x9ed2,0x534f

2808 
DCW
 0x9070,0xc140, 0x2c3b,0x781e, 0x9e91,0x5303

2809 
DCW
 0x90ba,0xc0bd, 0x2c0c,0x782f, 0x9e50,0x52b6

2810 
DCW
 0x9105,0xc03a, 0x2bdc,0x7840, 0x9e0f,0x5269

2811 
DCW
 0x9150,0xbfb8, 0x2bad,0x7851, 0x9dce,0x521c

2812 
DCW
 0x919c,0xbf35, 0x2b7e,0x7863, 0x9d8e,0x51cf

2813 
DCW
 0x91e9,0xbeb3, 0x2b4f,0x7874, 0x9d4e,0x5181

2814 
DCW
 0x9236,0xbe32, 0x2b1f,0x7885, 0x9d0e,0x5134

2815 
DCW
 0x9284,0xbdb1, 0x2af0,0x7895, 0x9cce,0x50e6

2816 
DCW
 0x92d2,0xbd30, 0x2ac1,0x78a6, 0x9c8f,0x5098

2817 
DCW
 0x9321,0xbcaf, 0x2a91,0x78b7, 0x9c50,0x504a

2818 
DCW
 0x9371,0xbc2f, 0x2a62,0x78c8, 0x9c11,0x4ffb

2819 
DCW
 0x93c1,0xbbb0, 0x2a32,0x78d8, 0x9bd2,0x4fad

2820 
DCW
 0x9412,0xbb30, 0x2a03,0x78e9, 0x9b94,0x4f5e

2821 
DCW
 0x9463,0xbab1, 0x29d3,0x78f9, 0x9b55,0x4f0f

2822 
DCW
 0x94b5,0xba33, 0x29a4,0x790a, 0x9b17,0x4ec0

2823 
DCW
 0x9508,0xb9b5, 0x2974,0x791a, 0x9ada,0x4e71

2824 
DCW
 0x955b,0xb937, 0x2945,0x792a, 0x9a9c,0x4e21

2825 
DCW
 0x95ae,0xb8b9, 0x2915,0x793a, 0x9a5f,0x4dd1

2826 
DCW
 0x9603,0xb83c, 0x28e5,0x794a, 0x9a22,0x4d81

2827 
DCW
 0x9657,0xb7c0, 0x28b6,0x795b, 0x99e5,0x4d31

2828 
DCW
 0x96ad,0xb743, 0x2886,0x796a, 0x99a9,0x4ce1

2829 
DCW
 0x9703,0xb6c7, 0x2856,0x797a, 0x996d,0x4c91

2830 
DCW
 0x9759,0xb64c, 0x2827,0x798a, 0x9930,0x4c40

2831 
DCW
 0x97b0,0xb5d1, 0x27f7,0x799a, 0x98f5,0x4bef

2832 
DCW
 0x9808,0xb556, 0x27c7,0x79aa, 0x98b9,0x4b9e

2833 
DCW
 0x9860,0xb4dc, 0x2797,0x79b9, 0x987e,0x4b4d

2834 
DCW
 0x98b9,0xb462, 0x2768,0x79c9, 0x9843,0x4afb

2835 
DCW
 0x9913,0xb3e9, 0x2738,0x79d8, 0x9808,0x4aaa

2836 
DCW
 0x996d,0xb36f, 0x2708,0x79e7, 0x97ce,0x4a58

2837 
DCW
 0x99c7,0xb2f7, 0x26d8,0x79f7, 0x9793,0x4a06

2838 
DCW
 0x9a22,0xb27f, 0x26a8,0x7a06, 0x9759,0x49b4

2839 
DCW
 0x9a7e,0xb207, 0x2678,0x7a15, 0x9720,0x4962

2840 
DCW
 0x9ada,0xb18f, 0x2648,0x7a24, 0x96e6,0x490f

2841 
DCW
 0x9b36,0xb118, 0x2618,0x7a33, 0x96ad,0x48bd

2842 
DCW
 0x9b94,0xb0a2, 0x25e8,0x7a42, 0x9674,0x486a

2843 
DCW
 0x9bf1,0xb02c, 0x25b8,0x7a51, 0x963b,0x4817

2844 
DCW
 0x9c50,0xafb6, 0x2588,0x7a60, 0x9603,0x47c4

2845 
DCW
 0x9caf,0xaf41, 0x2558,0x7a6e, 0x95ca,0x4770

2846 
DCW
 0x9d0e,0xaecc, 0x2528,0x7a7d, 0x9592,0x471d

2847 
DCW
 0x9d6e,0xae58, 0x24f8,0x7a8c, 0x955b,0x46c9

2848 
DCW
 0x9dce,0xade4, 0x24c8,0x7a9a, 0x9523,0x4675

2849 
DCW
 0x9e2f,0xad70, 0x2498,0x7aa8, 0x94ec,0x4621

2850 
DCW
 0x9e91,0xacfd, 0x2467,0x7ab7, 0x94b5,0x45cd

2851 
DCW
 0x9ef3,0xac8b, 0x2437,0x7ac5, 0x947e,0x4579

2852 
DCW
 0x9f56,0xac19, 0x2407,0x7ad3, 0x9448,0x4524

2853 
DCW
 0x9fb9,0xaba7, 0x23d7,0x7ae1, 0x9412,0x44d0

2854 
DCW
 0xa01c,0xab36, 0x23a7,0x7aef, 0x93dc,0x447b

2855 
DCW
 0xa080,0xaac5, 0x2376,0x7afd, 0x93a6,0x4426

2856 
DCW
 0xa0e5,0xaa55, 0x2346,0x7b0b, 0x9371,0x43d1

2857 
DCW
 0xa14a,0xa9e5, 0x2316,0x7b19, 0x933c,0x437b

2858 
DCW
 0xa1b0,0xa976, 0x22e5,0x7b27, 0x9307,0x4326

2859 
DCW
 0xa216,0xa907, 0x22b5,0x7b34, 0x92d2,0x42d0

2860 
DCW
 0xa27d,0xa899, 0x2284,0x7b42, 0x929e,0x427a

2861 
DCW
 0xa2e4,0xa82b, 0x2254,0x7b50, 0x926a,0x4224

2862 
DCW
 0xa34c,0xa7bd, 0x2224,0x7b5d, 0x9236,0x41ce

2863 
DCW
 0xa3b4,0xa750, 0x21f3,0x7b6a, 0x9202,0x4178

2864 
DCW
 0xa41d,0xa6e4, 0x21c3,0x7b78, 0x91cf,0x4121

2865 
DCW
 0xa486,0xa678, 0x2192,0x7b85, 0x919c,0x40cb

2866 
DCW
 0xa4f0,0xa60c, 0x2162,0x7b92, 0x9169,0x4074

2867 
DCW
 0xa55a,0xa5a1, 0x2131,0x7b9f, 0x9137,0x401d

2868 
DCW
 0xa5c5,0xa537, 0x2101,0x7bac, 0x9105,0x3fc6

2869 
DCW
 0xa630,0xa4cc, 0x20d0,0x7bb9, 0x90d3,0x3f6f

2870 
DCW
 0xa69c,0xa463, 0x209f,0x7bc6, 0x90a1,0x3f17

2871 
DCW
 0xa708,0xa3fa, 0x206f,0x7bd3, 0x9070,0x3ec0

2872 
DCW
 0xa774,0xa391, 0x203e,0x7bdf, 0x903e,0x3e68

2873 
DCW
 0xa7e2,0xa329, 0x200e,0x7bec, 0x900e,0x3e10

2874 
DCW
 0xa84f,0xa2c2, 0x1fdd,0x7bf9, 0x8fdd,0x3db8

2875 
DCW
 0xa8bd,0xa25b, 0x1fac,0x7c05, 0x8fad,0x3d60

2876 
DCW
 0xa92c,0xa1f4, 0x1f7b,0x7c11, 0x8f7d,0x3d08

2877 
DCW
 0xa99b,0xa18e, 0x1f4b,0x7c1e, 0x8f4d,0x3caf

2878 
DCW
 0xaa0a,0xa129, 0x1f1a,0x7c2a, 0x8f1d,0x3c57

2879 
DCW
 0xaa7a,0xa0c4, 0x1ee9,0x7c36, 0x8eee,0x3bfe

2880 
DCW
 0xaaeb,0xa05f, 0x1eb8,0x7c42, 0x8ebf,0x3ba5

2881 
DCW
 0xab5c,0x9ffb, 0x1e88,0x7c4e, 0x8e90,0x3b4c

2882 
DCW
 0xabcd,0x9f98, 0x1e57,0x7c5a, 0x8e62,0x3af3

2883 
DCW
 0xac3f,0x9f35, 0x1e26,0x7c66, 0x8e34,0x3a9a

2884 
DCW
 0xacb1,0x9ed2, 0x1df5,0x7c72, 0x8e06,0x3a40

2885 
DCW
 0xad24,0x9e70, 0x1dc4,0x7c7e, 0x8dd8,0x39e7

2886 
DCW
 0xad97,0x9e0f, 0x1d93,0x7c89, 0x8dab,0x398d

2887 
DCW
 0xae0b,0x9dae, 0x1d62,0x7c95, 0x8d7e,0x3933

2888 
DCW
 0xae7f,0x9d4e, 0x1d31,0x7ca0, 0x8d51,0x38d9

2889 
DCW
 0xaef3,0x9cee, 0x1d01,0x7cac, 0x8d24,0x387f

2890 
DCW
 0xaf68,0x9c8f, 0x1cd0,0x7cb7, 0x8cf8,0x3825

2891 
DCW
 0xafdd,0x9c30, 0x1c9f,0x7cc2, 0x8ccc,0x37ca

2892 
DCW
 0xb053,0x9bd2, 0x1c6e,0x7cce, 0x8ca1,0x3770

2893 
DCW
 0xb0c9,0x9b75, 0x1c3d,0x7cd9, 0x8c75,0x3715

2894 
DCW
 0xb140,0x9b17, 0x1c0c,0x7ce4, 0x8c4a,0x36ba

2895 
DCW
 0xb1b7,0x9abb, 0x1bda,0x7cef, 0x8c1f,0x365f

2896 
DCW
 0xb22f,0x9a5f, 0x1ba9,0x7cfa, 0x8bf5,0x3604

2897 
DCW
 0xb2a7,0x9a04, 0x1b78,0x7d05, 0x8bca,0x35a9

2898 
DCW
 0xb31f,0x99a9, 0x1b47,0x7d0f, 0x8ba0,0x354e

2899 
DCW
 0xb398,0x994e, 0x1b16,0x7d1a, 0x8b77,0x34f2

2900 
DCW
 0xb411,0x98f5, 0x1ae5,0x7d25, 0x8b4d,0x3497

2901 
DCW
 0xb48b,0x989c, 0x1ab4,0x7d2f, 0x8b24,0x343b

2902 
DCW
 0xb505,0x9843, 0x1a83,0x7d3a, 0x8afb,0x33df

2903 
DCW
 0xb57f,0x97eb, 0x1a51,0x7d44, 0x8ad3,0x3383

2904 
DCW
 0xb5fa,0x9793, 0x1a20,0x7d4e, 0x8aaa,0x3327

2905 
DCW
 0xb675,0x973c, 0x19ef,0x7d58, 0x8a82,0x32cb

2906 
DCW
 0xb6f1,0x96e6, 0x19be,0x7d63, 0x8a5a,0x326e

2907 
DCW
 0xb76d,0x9690, 0x198d,0x7d6d, 0x8a33,0x3212

2908 
DCW
 0xb7e9,0x963b, 0x195b,0x7d77, 0x8a0c,0x31b5

2909 
DCW
 0xb866,0x95e6, 0x192a,0x7d81, 0x89e5,0x3159

2910 
DCW
 0xb8e3,0x9592, 0x18f9,0x7d8a, 0x89be,0x30fc

2911 
DCW
 0xb961,0x953f, 0x18c7,0x7d94, 0x8998,0x309f

2912 
DCW
 0xb9df,0x94ec, 0x1896,0x7d9e, 0x8972,0x3042

2913 
DCW
 0xba5d,0x949a, 0x1865,0x7da7, 0x894c,0x2fe5

2914 
DCW
 0xbadc,0x9448, 0x1833,0x7db1, 0x8927,0x2f87

2915 
DCW
 0xbb5b,0x93f7, 0x1802,0x7dba, 0x8902,0x2f2a

2916 
DCW
 0xbbda,0x93a6, 0x17d1,0x7dc4, 0x88dd,0x2ecc

2917 
DCW
 0xbc5a,0x9356, 0x179f,0x7dcd, 0x88b8,0x2e6f

2918 
DCW
 0xbcda,0x9307, 0x176e,0x7dd6, 0x8894,0x2e11

2919 
DCW
 0xbd5b,0x92b8, 0x173c,0x7de0, 0x8870,0x2db3

2920 
DCW
 0xbddc,0x926a, 0x170b,0x7de9, 0x884c,0x2d55

2921 
DCW
 0xbe5d,0x921c, 0x16da,0x7df2, 0x8828,0x2cf7

2922 
DCW
 0xbedf,0x91cf, 0x16a8,0x7dfb, 0x8805,0x2c99

2923 
DCW
 0xbf61,0x9183, 0x1677,0x7e03, 0x87e2,0x2c3b

2924 
DCW
 0xbfe3,0x9137, 0x1645,0x7e0c, 0x87c0,0x2bdc

2925 
DCW
 0xc066,0x90ec, 0x1614,0x7e15, 0x879d,0x2b7e

2926 
DCW
 0xc0e9,0x90a1, 0x15e2,0x7e1e, 0x877b,0x2b1f

2927 
DCW
 0xc16c,0x9057, 0x15b1,0x7e26, 0x875a,0x2ac1

2928 
DCW
 0xc1f0,0x900e, 0x157f,0x7e2f, 0x8738,0x2a62

2929 
DCW
 0xc274,0x8fc5, 0x154d,0x7e37, 0x8717,0x2a03

2930 
DCW
 0xc2f8,0x8f7d, 0x151c,0x7e3f, 0x86f6,0x29a4

2931 
DCW
 0xc37d,0x8f35, 0x14ea,0x7e48, 0x86d6,0x2945

2932 
DCW
 0xc402,0x8eee, 0x14b9,0x7e50, 0x86b6,0x28e5

2933 
DCW
 0xc487,0x8ea8, 0x1487,0x7e58, 0x8696,0x2886

2934 
DCW
 0xc50d,0x8e62, 0x1455,0x7e60, 0x8676,0x2827

2935 
DCW
 0xc593,0x8e1d, 0x1424,0x7e68, 0x8656,0x27c7

2936 
DCW
 0xc619,0x8dd8, 0x13f2,0x7e70, 0x8637,0x2768

2937 
DCW
 0xc6a0,0x8d94, 0x13c1,0x7e78, 0x8619,0x2708

2938 
DCW
 0xc727,0x8d51, 0x138f,0x7e7f, 0x85fa,0x26a8

2939 
DCW
 0xc7ae,0x8d0e, 0x135d,0x7e87, 0x85dc,0x2648

2940 
DCW
 0xc836,0x8ccc, 0x132b,0x7e8e, 0x85be,0x25e8

2941 
DCW
 0xc8be,0x8c8b, 0x12fa,0x7e96, 0x85a0,0x2588

2942 
DCW
 0xc946,0x8c4a, 0x12c8,0x7e9d, 0x8583,0x2528

2943 
DCW
 0xc9ce,0x8c0a, 0x1296,0x7ea5, 0x8566,0x24c8

2944 
DCW
 0xca57,0x8bca, 0x1265,0x7eac, 0x8549,0x2467

2945 
DCW
 0xcae0,0x8b8b, 0x1233,0x7eb3, 0x852d,0x2407

2946 
DCW
 0xcb69,0x8b4d, 0x1201,0x7eba, 0x8511,0x23a7

2947 
DCW
 0xcbf3,0x8b10, 0x11cf,0x7ec1, 0x84f5,0x2346

2948 
DCW
 0xcc7d,0x8ad3, 0x119e,0x7ec8, 0x84d9,0x22e5

2949 
DCW
 0xcd07,0x8a96, 0x116c,0x7ecf, 0x84be,0x2284

2950 
DCW
 0xcd92,0x8a5a, 0x113a,0x7ed6, 0x84a3,0x2224

2951 
DCW
 0xce1c,0x8a1f, 0x1108,0x7edd, 0x8488,0x21c3

2952 
DCW
 0xcea7,0x89e5, 0x10d6,0x7ee3, 0x846e,0x2162

2953 
DCW
 0xcf33,0x89ab, 0x10a4,0x7eea, 0x8454,0x2101

2954 
DCW
 0xcfbe,0x8972, 0x1073,0x7ef0, 0x843a,0x209f

2955 
DCW
 0xd04a,0x8939, 0x1041,0x7ef7, 0x8421,0x203e

2956 
DCW
 0xd0d6,0x8902, 0x100f,0x7efd, 0x8407,0x1fdd

2957 
DCW
 0xd162,0x88ca, 0x0fdd,0x7f03, 0x83ef,0x1f7b

2958 
DCW
 0xd1ef,0x8894, 0x0fab,0x7f0a, 0x83d6,0x1f1a

2959 
DCW
 0xd27c,0x885e, 0x0f79,0x7f10, 0x83be,0x1eb8

2960 
DCW
 0xd309,0x8828, 0x0f47,0x7f16, 0x83a6,0x1e57

2961 
DCW
 0xd396,0x87f4, 0x0f15,0x7f1c, 0x838e,0x1df5

2962 
DCW
 0xd424,0x87c0, 0x0ee4,0x7f22, 0x8377,0x1d93

2963 
DCW
 0xd4b1,0x878c, 0x0eb2,0x7f27, 0x8360,0x1d31

2964 
DCW
 0xd53f,0x875a, 0x0e80,0x7f2d, 0x8349,0x1cd0

2965 
DCW
 0xd5ce,0x8728, 0x0e4e,0x7f33, 0x8332,0x1c6e

2966 
DCW
 0xd65c,0x86f6, 0x0e1c,0x7f38, 0x831c,0x1c0c

2967 
DCW
 0xd6eb,0x86c6, 0x0dea,0x7f3e, 0x8306,0x1ba9

2968 
DCW
 0xd77a,0x8696, 0x0db8,0x7f43, 0x82f1,0x1b47

2969 
DCW
 0xd809,0x8666, 0x0d86,0x7f49, 0x82db,0x1ae5

2970 
DCW
 0xd898,0x8637, 0x0d54,0x7f4e, 0x82c6,0x1a83

2971 
DCW
 0xd928,0x8609, 0x0d22,0x7f53, 0x82b2,0x1a20

2972 
DCW
 0xd9b8,0x85dc, 0x0cf0,0x7f58, 0x829d,0x19be

2973 
DCW
 0xda48,0x85af, 0x0cbe,0x7f5d, 0x8289,0x195b

2974 
DCW
 0xdad8,0x8583, 0x0c8c,0x7f62, 0x8276,0x18f9

2975 
DCW
 0xdb68,0x8558, 0x0c5a,0x7f67, 0x8262,0x1896

2976 
DCW
 0xdbf9,0x852d, 0x0c28,0x7f6c, 0x824f,0x1833

2977 
DCW
 0xdc8a,0x8503, 0x0bf6,0x7f71, 0x823c,0x17d1

2978 
DCW
 0xdd1b,0x84d9, 0x0bc4,0x7f75, 0x822a,0x176e

2979 
DCW
 0xddac,0x84b0, 0x0b92,0x7f7a, 0x8217,0x170b

2980 
DCW
 0xde3d,0x8488, 0x0b60,0x7f7e, 0x8205,0x16a8

2981 
DCW
 0xdecf,0x8461, 0x0b2d,0x7f83, 0x81f4,0x1645

2982 
DCW
 0xdf61,0x843a, 0x0afb,0x7f87, 0x81e2,0x15e2

2983 
DCW
 0xdff2,0x8414, 0x0ac9,0x7f8b, 0x81d1,0x157f

2984 
DCW
 0xe085,0x83ef, 0x0a97,0x7f90, 0x81c1,0x151c

2985 
DCW
 0xe117,0x83ca, 0x0a65,0x7f94, 0x81b0,0x14b9

2986 
DCW
 0xe1a9,0x83a6, 0x0a33,0x7f98, 0x81a0,0x1455

2987 
DCW
 0xe23c,0x8382, 0x0a01,0x7f9c, 0x8190,0x13f2

2988 
DCW
 0xe2cf,0x8360, 0x09cf,0x7fa0, 0x8181,0x138f

2989 
DCW
 0xe361,0x833e, 0x099d,0x7fa3, 0x8172,0x132b

2990 
DCW
 0xe3f4,0x831c, 0x096b,0x7fa7, 0x8163,0x12c8

2991 
DCW
 0xe488,0x82fb, 0x0938,0x7fab, 0x8154,0x1265

2992 
DCW
 0xe51b,0x82db, 0x0906,0x7fae, 0x8146,0x1201

2993 
DCW
 0xe5af,0x82bc, 0x08d4,0x7fb2, 0x8138,0x119e

2994 
DCW
 0xe642,0x829d, 0x08a2,0x7fb5, 0x812a,0x113a

2995 
DCW
 0xe6d6,0x827f, 0x0870,0x7fb9, 0x811d,0x10d6

2996 
DCW
 0xe76a,0x8262, 0x083e,0x7fbc, 0x8110,0x1073

2997 
DCW
 0xe7fe,0x8246, 0x080c,0x7fbf, 0x8103,0x100f

2998 
DCW
 0xe892,0x822a, 0x07d9,0x7fc2, 0x80f6,0x0fab

2999 
DCW
 0xe926,0x820e, 0x07a7,0x7fc5, 0x80ea,0x0f47

3000 
DCW
 0xe9bb,0x81f4, 0x0775,0x7fc8, 0x80de,0x0ee4

3001 
DCW
 0xea4f,0x81da, 0x0743,0x7fcb, 0x80d3,0x0e80

3002 
DCW
 0xeae4,0x81c1, 0x0711,0x7fce, 0x80c8,0x0e1c

3003 
DCW
 0xeb79,0x81a8, 0x06de,0x7fd1, 0x80bd,0x0db8

3004 
DCW
 0xec0e,0x8190, 0x06ac,0x7fd3, 0x80b2,0x0d54

3005 
DCW
 0xeca3,0x8179, 0x067a,0x7fd6, 0x80a8,0x0cf0

3006 
DCW
 0xed38,0x8163, 0x0648,0x7fd9, 0x809e,0x0c8c

3007 
DCW
 0xedcd,0x814d, 0x0616,0x7fdb, 0x8094,0x0c28

3008 
DCW
 0xee62,0x8138, 0x05e3,0x7fdd, 0x808b,0x0bc4

3009 
DCW
 0xeef8,0x8123, 0x05b1,0x7fe0, 0x8082,0x0b60

3010 
DCW
 0xef8d,0x8110, 0x057f,0x7fe2, 0x8079,0x0afb

3011 
DCW
 0xf023,0x80fd, 0x054d,0x7fe4, 0x8070,0x0a97

3012 
DCW
 0xf0b9,0x80ea, 0x051b,0x7fe6, 0x8068,0x0a33

3013 
DCW
 0xf14e,0x80d9, 0x04e8,0x7fe8, 0x8060,0x09cf

3014 
DCW
 0xf1e4,0x80c8, 0x04b6,0x7fea, 0x8059,0x096b

3015 
DCW
 0xf27a,0x80b7, 0x0484,0x7fec, 0x8052,0x0906

3016 
DCW
 0xf310,0x80a8, 0x0452,0x7fed, 0x804b,0x08a2

3017 
DCW
 0xf3a6,0x8099, 0x041f,0x7fef, 0x8044,0x083e

3018 
DCW
 0xf43c,0x808b, 0x03ed,0x7ff1, 0x803e,0x07d9

3019 
DCW
 0xf4d3,0x807d, 0x03bb,0x7ff2, 0x8038,0x0775

3020 
DCW
 0xf569,0x8070, 0x0389,0x7ff4, 0x8032,0x0711

3021 
DCW
 0xf5ff,0x8064, 0x0356,0x7ff5, 0x802d,0x06ac

3022 
DCW
 0xf695,0x8059, 0x0324,0x7ff6, 0x8027,0x0648

3023 
DCW
 0xf72c,0x804e, 0x02f2,0x7ff7, 0x8023,0x05e3

3024 
DCW
 0xf7c2,0x8044, 0x02c0,0x7ff8, 0x801e,0x057f

3025 
DCW
 0xf859,0x803b, 0x028d,0x7ff9, 0x801a,0x051b

3026 
DCW
 0xf8ef,0x8032, 0x025b,0x7ffa, 0x8016,0x04b6

3027 
DCW
 0xf986,0x802a, 0x0229,0x7ffb, 0x8013,0x0452

3028 
DCW
 0xfa1d,0x8023, 0x01f7,0x7ffc, 0x800f,0x03ed

3029 
DCW
 0xfab3,0x801c, 0x01c4,0x7ffd, 0x800c,0x0389

3030 
DCW
 0xfb4a,0x8016, 0x0192,0x7ffe, 0x800a,0x0324

3031 
DCW
 0xfbe1,0x8011, 0x0160,0x7ffe, 0x8008,0x02c0

3032 
DCW
 0xfc77,0x800c, 0x012e,0x7fff, 0x8006,0x025b

3033 
DCW
 0xfd0e,0x8009, 0x00fb,0x7fff, 0x8004,0x01f7

3034 
DCW
 0xfda5,0x8006, 0x00c9,0x7fff, 0x8002,0x0192

3035 
DCW
 0xfe3c,0x8003, 0x0097,0x7fff, 0x8001,0x012e

3036 
DCW
 0xfed2,0x8001, 0x0065,0x7fff, 0x8001,0x00c9

3037 
DCW
 0xff69,0x8000, 0x0032,0x7fff, 0x8000,0x0065

3039 
END


	@/home/jkr555/arm/guide/ch08_dsp/fir.s

47 
AREA
 
	gch08_3
, 
	gCODE
, 
READONLY


49 
EXPORT
 
fú_16by16_¨m7m


50 
EXPORT
 
fú_16by16_¨m9m


51 
EXPORT
 
fú_16by16_¨m9e


52 
EXPORT
 
fú_32by16_¨m9e


53 
EXPORT
 
	gfú_32by32


57 
a
 
	gRN
 0 ; 
¨øy
 
ouçut
 
ßm∂es
 
	ga
[]

58 
x
 
	gRN
 1 ; 
¨øy
 
of
 
öput
 
ßm∂es
 
	gx
[]

59 
c
 
	gRN
 2 ; 
¨øy
 
of
 
c€fficõ¡s
 
	gc
[]

60 
N
 
	gRN
 3 ; 
numbî
 
of
 
	$ouçuts
 (
a
 
mu…ùÀ
 
of
 4)

61 
M
 
RN
 4 ; 
numbî
 
of
 
	$c€fficõ¡s
 (
a
 
mu…ùÀ
 
of
 3)

62 
c_0
 
RN
 3 ; 
c€fficõ¡
 
ªgi°îs


63 
c_1
 
RN
 12

64 
c_2
 
RN
 14

65 
x_0
 
RN
 5 ; 
d©a
 
ªgi°îs


66 
x_1
 
RN
 6

67 
x_2
 
RN
 7

68 
a_0
 
RN
 8 ; 
ouçut
 
accumuœt‹s


69 
a_1
 
RN
 9

70 
a_2
 
RN
 10

71 
a_3
 
RN
 11

73 ; 
fú_16by16_¨m7m


74 ; (*
a
,

75 ; *
x
,

76 ; såu˘ { *
c
; 
M
; } *c,

77 ; 
N
)

78 
fú_16by16_¨m7m


79 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

80 
LDMIA
 
	gc
, {c, 
	gM
} ; 
lﬂd
 
c€fficõ¡
 
¨øy
 
™d
 
Àngth


81 
√xt_ßm∂e_¨m7m


82 
STMFD
 
	g•
!, {
	gN
, 
	gM
}

83 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
, 
	gx_2
}

84 
MOV
 
	ga_0
, #0 ; 
zîo
 
accumuœt‹s


85 
MOV
 
	ga_1
, #0

86 
MOV
 
	ga_2
, #0

87 
MOV
 
	ga_3
, #0

88 
	g√xt_èp_¨m7m


89 ; 
≥rf‹m
 
√xt
 
block
 
	gof
 4x3=12 
èps


90 
LDMIA
 
c
!, {
	gc_0
, 
	gc_1
, 
	gc_2
}

91 
MLA
 
	ga_0
, 
	gx_0
, 
	gc_0
, 
a_0


92 
MLA
 
	ga_0
, 
	gx_1
, 
	gc_1
, 
a_0


93 
MLA
 
	ga_0
, 
	gx_2
, 
	gc_2
, 
a_0


94 
MLA
 
	ga_1
, 
	gx_1
, 
	gc_0
, 
a_1


95 
MLA
 
	ga_1
, 
	gx_2
, 
	gc_1
, 
a_1


96 
MLA
 
	ga_2
, 
	gx_2
, 
	gc_0
, 
a_2


97 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
, 
	gx_2
}

98 
MLA
 
	ga_1
, 
	gx_0
, 
	gc_2
, 
a_1


99 
MLA
 
	ga_2
, 
	gx_0
, 
	gc_1
, 
a_2


100 
MLA
 
	ga_2
, 
	gx_1
, 
	gc_2
, 
a_2


101 
MLA
 
	ga_3
, 
	gx_0
, 
	gc_0
, 
a_3


102 
MLA
 
	ga_3
, 
	gx_1
, 
	gc_1
, 
a_3


103 
MLA
 
	ga_3
, 
	gx_2
, 
	gc_2
, 
a_3


104 
SUBS
 
	gM
, M, #3 ; 
	g¥o˚s£d
 3 
c€ffi˚¡s


105 
BGT
 
√xt_èp_¨m7m


106 
LDMFD
 
	g•
!, {
	gN
, 
	gM
}

107 
STMIA
 
	ga
!, {
	ga_0
, 
	ga_1
, 
	ga_2
, 
	ga_3
}

108 
SUB
 
	gc
, c, 
	gM
, 
	gLSL
#2 ; 
ª°‹e
 
c€fficõ¡
 
poöãr


109 
SUB
 
	gx
, x, 
	gM
, 
	gLSL
#2 ; 
ª°‹e
 
d©a
 
poöãr


110 
ADD
 
	gx
, x, #(4-3)*4 ; 
adv™˚
 
d©a
 
poöãr


111 
SUBS
 
	gN
, N, #4 ; 
fûãªd
 
four
 
ßm∂es


112 
BGT
 
√xt_ßm∂e_¨m7m


113 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

117 
a
 
	gRN
 0 ; 
¨øy
 
ouçut
 
ßm∂es
 
	ga
[]

118 
x
 
	gRN
 1 ; 
¨øy
 
of
 
öput
 
ßm∂es
 
	gx
[]

119 
c
 
	gRN
 2 ; 
¨øy
 
of
 
c€fficõ¡s
 
	gc
[]

120 
N
 
	gRN
 3 ; 
numbî
 
of
 
	$ouçuts
 (
a
 
mu…ùÀ
 
of
 4)

121 
M
 
RN
 4 ; 
numbî
 
of
 
	$c€fficõ¡s
 (
a
 
mu…ùÀ
 
of
 4)

122 
c_0
 
RN
 3 ; 
c€fficõ¡
 
ªgi°îs


123 
c_1
 
RN
 12

124 
x_0
 
RN
 5 ; 
d©a
 
ªgi°îs


125 
x_1
 
RN
 6

126 
x_2
 
RN
 7

127 
x_3
 
RN
 14

128 
a_0
 
RN
 8 ; 
ouçut
 
accumuœt‹s


129 
a_1
 
RN
 9

130 
a_2
 
RN
 10

131 
a_3
 
RN
 11

133 ; 
fú_16by16_¨m9m


134 ; (*
a
,

135 ; *
x
,

136 ; såu˘ { *
c
; 
M
; } *c,

137 ; 
N
)

138 
fú_16by16_¨m9m


139 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

140 
LDMIA
 
	gc
, {c, 
	gM
}

141 
√xt_ßm∂e_¨m9m


142 
STMFD
 
	g•
!, {
	gN
, 
	gM
}

143 
LDRSH
 
	gx_0
, [
x
], #2

144 
LDRSH
 
	gx_1
, [
x
], #2

145 
LDRSH
 
	gx_2
, [
x
], #2

146 
LDRSH
 
	gx_3
, [
x
], #2

147 
MOV
 
	ga_0
, #0

148 
MOV
 
	ga_1
, #0

149 
MOV
 
	ga_2
, #0

150 
MOV
 
	ga_3
, #0

151 
	g√xt_èp_¨m9m


152 ; 
≥rf‹m
 
√xt
 
block
 
	gof
 4x4=16 
èps


153 
LDRSH
 
c_0
, [
c
], #2

154 
LDRSH
 
	gc_1
, [
c
], #2

155 
SUBS
 
	gM
, M, #4

156 
MLA
 
	ga_0
, 
	gx_0
, 
	gc_0
, 
a_0


157 
LDRSH
 
	gx_0
, [
x
], #2

158 
MLA
 
	ga_1
, 
	gx_1
, 
	gc_0
, 
a_1


159 
MLA
 
	ga_2
, 
	gx_2
, 
	gc_0
, 
a_2


160 
MLA
 
	ga_3
, 
	gx_3
, 
	gc_0
, 
a_3


161 
LDRSH
 
	gc_0
, [
c
], #2

162 
MLA
 
	ga_0
, 
	gx_1
, 
	gc_1
, 
a_0


163 
LDRSH
 
	gx_1
, [
x
], #2

164 
MLA
 
	ga_1
, 
	gx_2
, 
	gc_1
, 
a_1


165 
MLA
 
	ga_2
, 
	gx_3
, 
	gc_1
, 
a_2


166 
MLA
 
	ga_3
, 
	gx_0
, 
	gc_1
, 
a_3


167 
LDRSH
 
	gc_1
, [
c
], #2

168 
MLA
 
	ga_0
, 
	gx_2
, 
	gc_0
, 
a_0


169 
LDRSH
 
	gx_2
, [
x
], #2

170 
MLA
 
	ga_1
, 
	gx_3
, 
	gc_0
, 
a_1


171 
MLA
 
	ga_2
, 
	gx_0
, 
	gc_0
, 
a_2


172 
MLA
 
	ga_3
, 
	gx_1
, 
	gc_0
, 
a_3


173 
MLA
 
	ga_0
, 
	gx_3
, 
	gc_1
, 
a_0


174 
LDRSH
 
	gx_3
, [
x
], #2

175 
MLA
 
	ga_1
, 
	gx_0
, 
	gc_1
, 
a_1


176 
MLA
 
	ga_2
, 
	gx_1
, 
	gc_1
, 
a_2


177 
MLA
 
	ga_3
, 
	gx_2
, 
	gc_1
, 
a_3


178 
BGT
 
√xt_èp_¨m9m


179 
LDMFD
 
	g•
!, {
	gN
, 
	gM
}

180 
STMIA
 
	ga
!, {
	ga_0
, 
	ga_1
, 
	ga_2
, 
	ga_3
}

181 
SUB
 
	gc
, c, 
	gM
, 
	gLSL
#1 ; 
ª°‹e
 
c€fficõ¡
 
poöãr


182 
SUB
 
	gx
, x, 
	gM
, 
	gLSL
#1 ; 
adv™˚
 
d©a
 
poöãr


183 
SUBS
 
	gN
, N, #4 ; 
fûãªd
 
four
 
ßm∂es


184 
BGT
 
√xt_ßm∂e_¨m9m


185 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

189 
a
 
	gRN
 0 ; 
¨øy
 
ouçut
 
ßm∂es
 
	ga
[]

190 
x
 
	gRN
 1 ; 
¨øy
 
of
 
öput
 
ßm∂es
 
	gx
[] (32-
bô
 
	gÆig√d
)

191 
c
 
	gRN
 2 ; 
¨øy
 
of
 
c€fficõ¡s
 
	gc
[] (32-
bô
 
	gÆig√d
)

192 
N
 
	gRN
 3 ; 
numbî
 
of
 
	$ouçuts
 (
a
 
mu…ùÀ
 
of
 6)

193 
M
 
RN
 4 ; 
numbî
 
of
 
	$c€fficõ¡s
 (
a
 
mu…ùÀ
 
of
 6)

194 
c_10
 
RN
 0 ; 
c€fficõ¡
 
∑ús


195 
c_32
 
RN
 3

196 
x_10
 
RN
 5 ; 
ßm∂e
 
∑ús


197 
x_32
 
RN
 6

198 
x_54
 
RN
 7

199 
a_0
 
RN
 8 ; 
ouçut
 
accumuœt‹s


200 
a_1
 
RN
 9

201 
a_2
 
RN
 10

202 
a_3
 
RN
 11

203 
a_4
 
RN
 12

204 
a_5
 
RN
 14

206 ; 
fú_16by16_¨m9e


207 ; (*
a
,

208 ; *
x
,

209 ; såu˘ { *
c
; 
M
; } *c,

210 ; 
N
)

211 
fú_16by16_¨m9e


212 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

213 
LDMIA
 
	gc
, {c, 
	gM
}

214 
√xt_ßm∂e_¨m9e


215 
STMFD
 
	g•
!, {
	ga
, 
	gN
, 
	gM
}

216 
LDMIA
 
	gx
!, {
	gx_10
, 
	gx_32
, 
	gx_54
} ; 
¥ñﬂd
 
six
 
ßm∂es


217 
MOV
 
	ga_0
, #0 ; 
zîo
 
accumuœt‹s


218 
MOV
 
	ga_1
, #0

219 
MOV
 
	ga_2
, #0

220 
MOV
 
	ga_3
, #0

221 
MOV
 
	ga_4
, #0

222 
MOV
 
	ga_5
, #0

223 
	g√xt_èp_¨m9e


224 ; 
≥rf‹m
 
√xt
 
block
 
	gof
 6x6=36 
èps


225 
LDMIA
 
c
!, {
	gc_10
, 
	gc_32
} ; 
lﬂd
 
four
 
c€fficõ¡s


226 
SUBS
 
	gM
, M, #6

227 
SMLABB
 
	ga_0
, 
	gx_10
, 
	gc_10
, 
a_0


228 
SMLATB
 
	ga_1
, 
	gx_10
, 
	gc_10
, 
a_1


229 
SMLABB
 
	ga_2
, 
	gx_32
, 
	gc_10
, 
a_2


230 
SMLATB
 
	ga_3
, 
	gx_32
, 
	gc_10
, 
a_3


231 
SMLABB
 
	ga_4
, 
	gx_54
, 
	gc_10
, 
a_4


232 
SMLATB
 
	ga_5
, 
	gx_54
, 
	gc_10
, 
a_5


233 
SMLATT
 
	ga_0
, 
	gx_10
, 
	gc_10
, 
a_0


234 
LDR
 
	gx_10
, [
x
], #4 ; 
lﬂd
 
two
 
c€fficõ¡s


235 
SMLABT
 
	ga_1
, 
	gx_32
, 
	gc_10
, 
a_1


236 
SMLATT
 
	ga_2
, 
	gx_32
, 
	gc_10
, 
a_2


237 
SMLABT
 
	ga_3
, 
	gx_54
, 
	gc_10
, 
a_3


238 
SMLATT
 
	ga_4
, 
	gx_54
, 
	gc_10
, 
a_4


239 
SMLABT
 
	ga_5
, 
	gx_10
, 
	gc_10
, 
a_5


240 
LDR
 
	gc_10
, [
c
], #4

241 
SMLABB
 
	ga_0
, 
	gx_32
, 
	gc_32
, 
a_0


242 
SMLATB
 
	ga_1
, 
	gx_32
, 
	gc_32
, 
a_1


243 
SMLABB
 
	ga_2
, 
	gx_54
, 
	gc_32
, 
a_2


244 
SMLATB
 
	ga_3
, 
	gx_54
, 
	gc_32
, 
a_3


245 
SMLABB
 
	ga_4
, 
	gx_10
, 
	gc_32
, 
a_4


246 
SMLATB
 
	ga_5
, 
	gx_10
, 
	gc_32
, 
a_5


247 
SMLATT
 
	ga_0
, 
	gx_32
, 
	gc_32
, 
a_0


248 
LDR
 
	gx_32
, [
x
], #4

249 
SMLABT
 
	ga_1
, 
	gx_54
, 
	gc_32
, 
a_1


250 
SMLATT
 
	ga_2
, 
	gx_54
, 
	gc_32
, 
a_2


251 
SMLABT
 
	ga_3
, 
	gx_10
, 
	gc_32
, 
a_3


252 
SMLATT
 
	ga_4
, 
	gx_10
, 
	gc_32
, 
a_4


253 
SMLABT
 
	ga_5
, 
	gx_32
, 
	gc_32
, 
a_5


254 
SMLABB
 
	ga_0
, 
	gx_54
, 
	gc_10
, 
a_0


255 
SMLATB
 
	ga_1
, 
	gx_54
, 
	gc_10
, 
a_1


256 
SMLABB
 
	ga_2
, 
	gx_10
, 
	gc_10
, 
a_2


257 
SMLATB
 
	ga_3
, 
	gx_10
, 
	gc_10
, 
a_3


258 
SMLABB
 
	ga_4
, 
	gx_32
, 
	gc_10
, 
a_4


259 
SMLATB
 
	ga_5
, 
	gx_32
, 
	gc_10
, 
a_5


260 
SMLATT
 
	ga_0
, 
	gx_54
, 
	gc_10
, 
a_0


261 
LDR
 
	gx_54
, [
x
], #4

262 
SMLABT
 
	ga_1
, 
	gx_10
, 
	gc_10
, 
a_1


263 
SMLATT
 
	ga_2
, 
	gx_10
, 
	gc_10
, 
a_2


264 
SMLABT
 
	ga_3
, 
	gx_32
, 
	gc_10
, 
a_3


265 
SMLATT
 
	ga_4
, 
	gx_32
, 
	gc_10
, 
a_4


266 
SMLABT
 
	ga_5
, 
	gx_54
, 
	gc_10
, 
a_5


267 
BGT
 
√xt_èp_¨m9e


268 
LDMFD
 
	g•
!, {
	ga
, 
	gN
, 
	gM
}

269 
STMIA
 
	ga
!, {
	ga_0
, 
	ga_1
, 
	ga_2
, 
	ga_3
, 
	ga_4
, 
	ga_5
}

270 
SUB
 
	gc
, c, 
	gM
, 
	gLSL
#1 ; 
ª°‹e
 
c€fficõ¡
 
poöãr


271 
SUB
 
	gx
, x, 
	gM
, 
	gLSL
#1 ; 
adv™˚
 
d©a
 
poöãr


272 
SUBS
 
	gN
, N, #6

273 
BGT
 
√xt_ßm∂e_¨m9e


274 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

278 
a
 
	gRN
 0 ; 
¨øy
 
ouçut
 
ßm∂es
 
	ga
[]

279 
x
 
	gRN
 1 ; 
¨øy
 
of
 
öput
 
ßm∂es
 
	gx
[]

280 
c
 
	gRN
 2 ; 
¨øy
 
of
 
c€fficõ¡s
 
	gc
[] (32-
bô
 
	gÆig√d
)

281 
N
 
	gRN
 3 ; 
numbî
 
of
 
	$ouçuts
 (
a
 
mu…ùÀ
 
of
 5)

282 
M
 
RN
 4 ; 
numbî
 
of
 
	$c€fficõ¡s
 (
a
 
mu…ùÀ
 
of
 4)

283 
c_10
 
RN
 0 ; 
c€fficõ¡
 
∑ú


284 
c_32
 
RN
 3

285 
x_0
 
RN
 5 ; 
öput
 
ßm∂es


286 
x_1
 
RN
 6

287 
x_2
 
RN
 7

288 
x_3
 
RN
 14

289 
a_0
 
RN
 8 ; 
ouçut
 
accumuœt‹s


290 
a_1
 
RN
 9

291 
a_2
 
RN
 10

292 
a_3
 
RN
 11

293 
a_4
 
RN
 12

295 ; 
fú_32by16_¨m9e


296 ; (*
a
,

297 ; *
x
,

298 ; såu˘ { *
c
; 
M
; } *c,

299 ; 
N
)

300 
fú_32by16_¨m9e


301 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

302 
LDMIA
 
	gc
, {c, 
	gM
}

303 
√xt_ßm∂e32_¨m9e


304 
STMFD
 
	g•
!, {
	ga
, 
	gN
, 
	gM
}

305 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
, 
	gx_2
, 
	gx_3
}

306 
MOV
 
	ga_0
, #0

307 
MOV
 
	ga_1
, #0

308 
MOV
 
	ga_2
, #0

309 
MOV
 
	ga_3
, #0

310 
MOV
 
	ga_4
, #0

311 
	g√xt_èp32_¨m9e


312 ; 
≥rf‹m
 
√xt
 
block
 
	gof
 5x4=20 
èps


313 
LDMIA
 
c
!, {
	gc_10
, 
	gc_32
}

314 
SUBS
 
	gM
, M, #4

315 
SMLAWB
 
	ga_0
, 
	gx_0
, 
	gc_10
, 
a_0


316 
SMLAWB
 
	ga_1
, 
	gx_1
, 
	gc_10
, 
a_1


317 
SMLAWB
 
	ga_2
, 
	gx_2
, 
	gc_10
, 
a_2


318 
SMLAWB
 
	ga_3
, 
	gx_3
, 
	gc_10
, 
a_3


319 
SMLAWT
 
	ga_0
, 
	gx_1
, 
	gc_10
, 
a_0


320 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
}

321 
SMLAWT
 
	ga_1
, 
	gx_2
, 
	gc_10
, 
a_1


322 
SMLAWT
 
	ga_2
, 
	gx_3
, 
	gc_10
, 
a_2


323 
SMLAWB
 
	ga_0
, 
	gx_2
, 
	gc_32
, 
a_0


324 
SMLAWB
 
	ga_1
, 
	gx_3
, 
	gc_32
, 
a_1


325 
SMLAWT
 
	ga_0
, 
	gx_3
, 
	gc_32
, 
a_0


326 
LDMIA
 
	gx
!, {
	gx_2
, 
	gx_3
}

327 
SMLAWB
 
	ga_4
, 
	gx_0
, 
	gc_10
, 
a_4


328 
SMLAWT
 
	ga_3
, 
	gx_0
, 
	gc_10
, 
a_3


329 
SMLAWT
 
	ga_4
, 
	gx_1
, 
	gc_10
, 
a_4


330 
SMLAWB
 
	ga_2
, 
	gx_0
, 
	gc_32
, 
a_2


331 
SMLAWB
 
	ga_3
, 
	gx_1
, 
	gc_32
, 
a_3


332 
SMLAWB
 
	ga_4
, 
	gx_2
, 
	gc_32
, 
a_4


333 
SMLAWT
 
	ga_1
, 
	gx_0
, 
	gc_32
, 
a_1


334 
SMLAWT
 
	ga_2
, 
	gx_1
, 
	gc_32
, 
a_2


335 
SMLAWT
 
	ga_3
, 
	gx_2
, 
	gc_32
, 
a_3


336 
SMLAWT
 
	ga_4
, 
	gx_3
, 
	gc_32
, 
a_4


337 
BGT
 
√xt_èp32_¨m9e


338 
LDMFD
 
	g•
!, {
	ga
, 
	gN
, 
	gM
}

339 
STMIA
 
	ga
!, {
	ga_0
, 
	ga_1
, 
	ga_2
, 
	ga_3
, 
	ga_4
}

340 
SUB
 
	gc
, c, 
	gM
, 
	gLSL
#1

341 
SUB
 
	gx
, x, 
	gM
, 
	gLSL
#2

342 
ADD
 
	gx
, x, #(5-4)*4

343 
SUBS
 
	gN
, N, #5

344 
BGT
 
√xt_ßm∂e32_¨m9e


345 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

349 
a
 
	gRN
 0 ; 
¨øy
 
ouçut
 
ßm∂es
 
	ga
[]

350 
x
 
	gRN
 1 ; 
¨øy
 
of
 
öput
 
ßm∂es
 
	gx
[]

351 
c
 
	gRN
 2 ; 
¨øy
 
of
 
c€fficõ¡s
 
	gc
[]

352 
N
 
	gRN
 3 ; 
numbî
 
of
 
	$ouçuts
 (
a
 
mu…ùÀ
 
of
 3)

353 
M
 
RN
 4 ; 
numbî
 
of
 
	$c€fficõ¡s
 (
a
 
mu…ùÀ
 
of
 2)

354 
c_0
 
RN
 3 ; 
c€fficõ¡
 
ªgi°îs


355 
c_1
 
RN
 12

356 
x_0
 
RN
 5 ; 
d©a
 
ªgi°îs


357 
x_1
 
RN
 6

358 
a_0l
 
RN
 7 ; 
	$accumuœt‹s
 (
low
 32 
bôs
)

359 
a_0h
 
RN
 8 ; 
	$accumuœt‹s
 (
high
 32 
bôs
)

360 
a_1l
 
RN
 9

361 
a_1h
 
RN
 10

362 
a_2l
 
RN
 11

363 
a_2h
 
RN
 14

365 ; 
fú_32by32


366 ; (*
a
,

367 ; *
x
,

368 ; såu˘ { *
c
; 
M
; } *c,

369 ; 
N
)

370 
fú_32by32


371 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

372 
LDMIA
 
	gc
, {c, 
	gM
}

373 
√xt_ßm∂e32


374 
STMFD
 
	g•
!, {
	gN
, 
	gM
}

375 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
}

376 
MOV
 
	ga_0l
, #0

377 
MOV
 
	ga_0h
, #0

378 
MOV
 
	ga_1l
, #0

379 
MOV
 
	ga_1h
, #0

380 
MOV
 
	ga_2l
, #0

381 
MOV
 
	ga_2h
, #0

382 
	g√xt_èp32


383 ; 
≥rf‹m
 
√xt
 
block
 
	gof
 3x2=6 
èps


384 
LDMIA
 
c
!, {
	gc_0
, 
	gc_1
}

385 
SMLAL
 
	ga_0l
, 
	ga_0h
, 
	gx_0
, 
c_0


386 
SMLAL
 
	ga_1l
, 
	ga_1h
, 
	gx_1
, 
c_0


387 
SMLAL
 
	ga_0l
, 
	ga_0h
, 
	gx_1
, 
c_1


388 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
}

389 
SUBS
 
	gM
, M, #2

390 
SMLAL
 
	ga_2l
, 
	ga_2h
, 
	gx_0
, 
c_0


391 
SMLAL
 
	ga_1l
, 
	ga_1h
, 
	gx_0
, 
c_1


392 
SMLAL
 
	ga_2l
, 
	ga_2h
, 
	gx_1
, 
c_1


393 
BGT
 
√xt_èp32


394 
LDMFD
 
	g•
!, {
	gN
, 
	gM
}

395 
STMIA
 
	ga
!, {
	ga_0l
, 
	ga_0h
, 
	ga_1l
, 
	ga_1h
, 
	ga_2l
, 
	ga_2h
}

396 
SUB
 
	gc
, c, 
	gM
, 
	gLSL
#2

397 
SUB
 
	gx
, x, 
	gM
, 
	gLSL
#2

398 
ADD
 
	gx
, x, #(3-2)*4

399 
SUBS
 
	gN
, N, #3

400 
BGT
 
√xt_ßm∂e32


401 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

403 
	gEND


	@/home/jkr555/arm/guide/ch08_dsp/gen.c

48 
	~<°dio.h
>

49 
	~<°dlib.h
>

50 
	~"ch08ã°.h
"

51 
	~<m©h.h
>

53 c⁄° 
ªÆ
 
	gpi
 = 3.141592653589;

57 
	#ALIGNMENT
 8

	)

59 *
	$my_mÆloc
(
size
)

61 *
p
;

62 
a
;

64 
p
 = 
	`mÆloc
(
size
+
ALIGNMENT
-1);

65 i‡(!
p
)

67 
	`¥ötf
("FaûedÅÿmÆlo¯w‹kög buf„∏o‡sizê%d\n", 
size
);

68 
	`exô
(1);

70 
a
 = ()
p
 & (
ALIGNMENT
-1);

71 i‡(
a
)

74 
p
 = (*)((*Ì+
ALIGNMENT
-
a
);

76  
p
;

77 
	}
}

83 
ªÆ
 *
	$gí_sig«l
(
size
, 
code
)

85 
ªÆ
 *
sig«l
, 
sˇÀ
;

86 
i
;

87 
öt64
 
£ed
 = 0x0123456789abcdefull;

88 
öt64
 
mu…
;

90 
sig«l
 = (
ªÆ
 *)
	`my_mÆloc
(
size
 * (real));

92 i‡(
code
==-1)

95 
sig«l
[0] = 1.0;

96 
i
=1; i<
size
; i++)

98 
sig«l
[
i
] = 0.0;

100  
sig«l
;

104 
mu…
 = 
code
 * 0x89abcdef76543210ull ^ 0xa75bc38291E6D6A5ull;

105 
sˇÀ
 = 1.0/(
ªÆ
)(1ull<<63);

107 
i
=0; i<
size
; i++)

109 
£ed
 = sìd * 
mu…
;

110 
sig«l
[
i
] = (
ªÆ
)
£ed
*
sˇÀ
;

113  
sig«l
;

114 
	}
}

118 
	$‰ì_sig«l
(*
d©a
)

121 ()
d©a
;

123 
	}
}

127 
	$¥öt_sig«l
(*
«me
, 
ªÆ
 *
sig«l
, 
size
)

129 
i
;

131 
i
=0; i<
size
; i++)

133 
	`¥ötf
("%s[%02d]=%lf\n", 
«me
, 
i
, 
sig«l
[i]);

135 
	}
}

139 
öt64
 
	$ªÆ_to_öt
(
ªÆ
 
x
)

142 i‡(
x
>=0) x+=0.5;

143 i‡(
x
<=0) x-=0.5;

144  (
öt64
)
x
;

145 
	}
}

149 *
	$gí_d©a
(
size
, 
f‹m©
 
ty≥
, 
ªÆ
 *
ªf
)

151 *
d©a
;

152 
tsize
;

153 
ªÆ
 
qsˇÀ
;

154 
i
;

156 
tsize
 = 
	`TSIZE
(
ty≥
);

157 
qsˇÀ
 = (
ªÆ
)(1uŒ<<
	`QSHIFT
(
ty≥
));

159 
d©a
 = 
	`my_mÆloc
(
size
*
tsize
+4);

161 
i
=0; i<
size
; i++)

163 
öt64
 
d
;

165 
d
 = 
	`ªÆ_to_öt
(
ªf
[
i
]*
qsˇÀ
);

167 
tsize
)

169 8 : ((
öt8
 *)
d©a
)[
i
] = (öt8)
d
; ;

170 16: ((
öt16
 *)
d©a
)[
i
] = (öt16)
d
; ;

171 32: ((
öt32
 *)
d©a
)[
i
] = (öt32)
d
; ;

172 64: ((
öt64
 *)
d©a
)[
i
] = (öt64)
d
; ;

173 : 
	`¥ötf
("Unknow¿d©®sizê%d\n", 
tsize
);

174 
	`exô
(1);

178  
d©a
;

179 
	}
}

185 
	$com∑ª
(
ªÆ
 *
ªf
, *
d©a
, 
f‹m©
 
ty≥
, 
size
, 
maxîr
)

187 
îr
=0, 
i
;

188 
tsize
;

189 
ªÆ
 
qsˇÀ
;

191 
tsize
 = 
	`TSIZE
(
ty≥
);

192 
qsˇÀ
 = (
ªÆ
)(1uŒ<<
	`QSHIFT
(
ty≥
));

194 
i
=0; i<
size
; i++)

196 
öt64
 
out
, 
ªf_out
, 
d
;

198 
ªf_out
 = 
	`ªÆ_to_öt
(
ªf
[
i
]*
qsˇÀ
);

199 
tsize
)

201 8 : 
out
 = ((
öt8
 *)
d©a
)[
i
]; ;

202 16: 
out
 = ((
öt16
 *)
d©a
)[
i
]; ;

203 32: 
out
 = ((
öt32
 *)
d©a
)[
i
]; ;

204 64: 
out
 = ((
öt64
 *)
d©a
)[
i
]; ;

205 : 
	`¥ötf
("Unknow¿d©®sizê%d\n", 
tsize
);

206 
	`exô
(1);

208 
d
 = 
out
-
ªf_out
;

209 i‡(
d
<0) d=-d;

210 i‡(()
d
>=
maxîr
)

212 
	`¥ötf
("FAIL[%d] : ", 
i
);

213 
	`¥ötf
("%016Œx %016Œx (%016Œx)\n", 
ªf_out
, 
out
, 
d
);

214 
îr
++;

218  
îr
;

219 
	}
}

223 
	$¥öt_d©a
(*
«me
, *
d©a
, 
f‹m©
 
ty≥
, 
size
)

225 
i
;

226 
tsize
;

227 
ªÆ
 
qsˇÀ
;

229 
tsize
 = 
	`TSIZE
(
ty≥
);

230 
qsˇÀ
 = (
ªÆ
)(1uŒ<<
	`QSHIFT
(
ty≥
));

232 
i
=0; i<
size
; i++)

234 
öt64
 
out
;

236 
tsize
)

238 8 : 
out
 = ((
öt8
 *)
d©a
)[
i
]; ;

239 16: 
out
 = ((
öt16
 *)
d©a
)[
i
]; ;

240 32: 
out
 = ((
öt32
 *)
d©a
)[
i
]; ;

241 64: 
out
 = ((
öt64
 *)
d©a
)[
i
]; ;

242 : 
	`¥ötf
("Unknow¿d©®sizê%d\n", 
tsize
);

243 
	`exô
(1);

245 
	`¥ötf
("%s[%02d]=%016Œx (%lf)\n", 
«me
, 
i
, 
out
, (
ªÆ
)out/
qsˇÀ
);

247 
	}
}

249 
	$qc⁄v
(
ªÆ
 
x
, 
q
)

251 
sˇÀ
 = 1<<
q
;

252 
x
 = x*(
ªÆ
)(
sˇÀ
);

253 i‡(
x
>=0) x+=0.5;

254 i‡(
x
>=0x7FFF) x=0x7FFF;

255 i‡(
x
<=0) x-=0.5;

256  ()
x
;

257 
	}
}

259 
	$f·_íåy
(
ªÆ
 
t
, 
¨ch
)

261 
ªÆ
 
c
,
s
;

263 
c
=
	`cos
(
t
);

264 
s
=
	`sö
(
t
);

265 i‡(
¨ch
<=4)

267 
c
=c-
s
;

268 
	`¥ötf
("0x%04x,0x%04x", 
	`qc⁄v
(
c
,14)&0xFFFF, qc⁄v(
s
,14)&0xFFFF);

272 
	`¥ötf
("0x%04x,0x%04x", 
	`qc⁄v
(
c
,15)&0xFFFF, qc⁄v(
s
,15)&0xFFFF);

274 
	}
}

276 
	$gí_f·_èbÀ
(
N
, 
¨ch
)

278 
k
;

279 
ªÆ
 
t
;

282 
	`¥ötf
(" ; N=%dÅ=2*PI*k/N f‹ k=0,1,2,..,N/4-1\n", 
N
);

284 
k
=0; k<
N
/4; k++)

286 
t
 = 2.0*
pi
*(
ªÆ
)
k
/‘ól)
N
;

287 
	`¥ötf
(" DCW ");

288 
	`f·_íåy
(3.0*
t
, 
¨ch
);

289 
	`¥ötf
(", ");

290 
	`f·_íåy
(
t
, 
¨ch
);

291 
	`¥ötf
(", ");

292 
	`f·_íåy
(2.0*
t
, 
¨ch
);

293 
	`¥ötf
("\n");

295 
	}
}

298 
	$gí_f·_èbÀs
(
N
, 
¨ch
)

300 
n
;

302 
	`¥ötf
(" ; FFTÅwiddleÅable ofÅriplets E(3t), E(t), E(2t)\n");

303 i‡(
¨ch
<=4)

305 
	`¥ötf
(" ; Where E(t)=(cos(t)-sin(t))+i*sin(t)át Q14\n");

309 
	`¥ötf
(" ; Where E(t)=cos(t)+i*sin(t)át Q15\n");

312 
n
=16;Ç<=
N
;Ç<<=2)

314 
	`gí_f·_èbÀ
(
n
, 
¨ch
);

316 
	}
}

	@/home/jkr555/arm/guide/ch08_dsp/iir.s

47 
AREA
 
	gch08_4
, 
	gCODE
, 
READONLY


49 
EXPORT
 
iú_q14_¨m7m


50 
EXPORT
 
iú_q14_¨m9m


51 
EXPORT
 
	giú_q14_¨m9e


55 
y
 
	gRN
 0 ; 
addªss
 
ouçut
 
ßm∂es
 
	gy
[]

56 
x
 
	gRN
 1 ; 
addªss
 
of
 
öput
 
ßm∂es
 
	gx
[]

57 
b
 
	gRN
 2 ; 
addªss
 
of
 
biquads


58 
N
 
	gRN
 3 ; 
numbî
 
of
 
ßm∂es
 
to
 
	$fûãr
 (
a
 
mu…ùÀ
 
of
 2)

59 
M
 
RN
 4 ; 
numbî
 
of
 
biquads
 
to
 
≠∂y


60 
x_0
 
RN
 2 ; 
öput
 
ßm∂es


61 
x_1
 
RN
 4

62 
a_1
 
RN
 6 ; 
biquad
 
c€fficõ¡
 -
a
[1] 
©
 
Q14


63 
a_2
 
RN
 7 ; 
biquad
 
c€fficõ¡
 -
a
[2] 
©
 
Q14


64 
b_1
 
RN
 8 ; 
biquad
 
c€fficõ¡
 +
b
[1] 
©
 
Q14


65 
b_2
 
RN
 9 ; 
biquad
 
c€fficõ¡
 +
b
[2] 
©
 
Q14


66 
s_1
 
RN
 10 ; 
s
[
t
-1] 
thí
 s[t-2] (
Æã∫©es
)

67 
s_2
 
RN
 11 ; 
s
[
t
-2] 
thí
 s[t-1] (
Æã∫©es
)

68 
acc0
 
RN
 12 ; 
accumuœt‹s


69 
acc1
 
RN
 14

72 ; 
a1
,
a2
;

73 ; 
b1
,
b2
;

74 ; 
s1
,
s2
;

75 ; } 
	tbiquad
;

77 ; 
iú_q14_¨m7m


78 ; (*
y
,

79 ; *
x
,

80 ; såu˘ { 
biquad
 *
b
; 
M
; } *b,

81 ; 
N
);

82 
iú_q14_¨m7m


83 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

84 
LDMIA
 
	gb
, {b, 
	gM
}

85 
√xt_biquad_¨m7m


86 
LDMIA
 
	gb
!, {
	ga_1
, 
	ga_2
, 
	gb_1
, 
	gb_2
, 
	gs_1
, 
	gs_2
}

87 
STMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

88 
	g√xt_ßm∂e_¨m7m


89 ; 
u£
 
	ga
 2x1 
block
 
IIR


90 
LDMIA
 
	gx
!, {
	gx_0
, 
	gx_1
}

91 ; 
≠∂y
 
biquad
 
to
 
	gßm∂e
 0 (
	gx_0
)

92 
MUL
 
	gacc0
, 
	gs_1
, 
a_1


93 
MLA
 
	gacc0
, 
	gs_2
, 
	ga_2
, 
acc0


94 
MUL
 
	gacc1
, 
	gs_1
, 
b_1


95 
MLA
 
	gacc1
, 
	gs_2
, 
	gb_2
, 
acc1


96 
ADD
 
	gs_2
, 
	gx_0
, 
	gacc0
, 
	gASR
 #14

97 
ADD
 
	gx_0
, 
	gs_2
, 
	gacc1
, 
	gASR
 #14

98 ; 
≠∂y
 
biquad
 
to
 
	gßm∂e
 1 (
	gx_1
)

99 
MUL
 
	gacc0
, 
	gs_2
, 
a_1


100 
MLA
 
	gacc0
, 
	gs_1
, 
	ga_2
, 
acc0


101 
MUL
 
	gacc1
, 
	gs_2
, 
b_1


102 
MLA
 
	gacc1
, 
	gs_1
, 
	gb_2
, 
acc1


103 
ADD
 
	gs_1
, 
	gx_1
, 
	gacc0
, 
	gASR
 #14

104 
ADD
 
	gx_1
, 
	gs_1
, 
	gacc1
, 
	gASR
 #14

105 
STMIA
 
	gy
!, {
	gx_0
, 
	gx_1
}

106 
SUBS
 
	gN
, N, #2

107 
BGT
 
√xt_ßm∂e_¨m7m


108 
LDMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

109 
STMDB
 
	gb
, {
	gs_1
, 
	gs_2
}

110 
SUB
 
	gy
, y, 
	gN
, 
	gLSL
#2

111 
MOV
 
	gx
, 
y


112 
SUBS
 
	gM
, M, #1

113 
BGT
 
√xt_biquad_¨m7m


114 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

118 
y
 
	gRN
 0 ; 
addªss
 
ouçut
 
ßm∂es
 
	gy
[]

119 
x
 
	gRN
 1 ; 
addªss
 
of
 
öput
 
ßm∂es
 
	gx
[]

120 
b
 
	gRN
 2 ; 
addªss
 
of
 
biquads


121 
N
 
	gRN
 3 ; 
numbî
 
of
 
ßm∂es
 
to
 
	$fûãr
 (
a
 
mu…ùÀ
 
of
 2)

122 
M
 
RN
 4 ; 
numbî
 
of
 
biquads
 
to
 
≠∂y


123 
x_0
 
RN
 2 ; 
öput
 
ßm∂es


124 
x_1
 
RN
 4

125 
round
 
RN
 5 ; 
roundög
 
	`vÆue
 (1<<13)

126 
a_1
 
RN
 6 ; 
biquad
 
c€fficõ¡
 -
a
[1] 
©
 
Q14


127 
a_2
 
RN
 7 ; 
biquad
 
c€fficõ¡
 -
a
[2] 
©
 
Q14


128 
b_1
 
RN
 8 ; 
biquad
 
c€fficõ¡
 +
b
[1] 
©
 
Q14


129 
b_2
 
RN
 9 ; 
biquad
 
c€fficõ¡
 +
b
[2] 
©
 
Q14


130 
s_1
 
RN
 10 ; 
s
[
t
-1] 
thí
 s[t-2] (
Æã∫©es
)

131 
s_2
 
RN
 11 ; 
s
[
t
-2] 
thí
 s[t-1] (
Æã∫©es
)

132 
acc0
 
RN
 12 ; 
accumuœt‹s


133 
acc1
 
RN
 14

136 ; 
a1
,
a2
;

137 ; 
b1
,
b2
;

138 ; 
s1
,
s2
;

139 ; } 
	tbiquad
;

141 ; 
iú_q14_¨m9m


142 ; (*
y
,

143 ; *
x
,

144 ; såu˘ { 
biquad
 *
b
; 
M
; } *b,

145 ; 
N
);

146 
iú_q14_¨m9m


147 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

148 
LDMIA
 
	gb
, {b, 
	gM
}

149 
MOV
 
	ground
, #1<<13

150 
iú_√xt_biquad


151 
LDRSH
 
	ga_1
, [
b
], #2

152 
LDRSH
 
	ga_2
, [
b
], #2

153 
LDRSH
 
	gb_1
, [
b
], #2

154 
LDRSH
 
	gb_2
, [
b
], #2

155 
LDRSH
 
	gs_1
, [
b
], #2

156 
LDRSH
 
	gs_2
, [
b
], #2

157 
STMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

158 
	giú_ö√r_lo›


159 ; 
u£
 
	ga
 2x1 
block
 
	gIIR


160 ; 
≠∂y
 
biquad
 
to
 
x_0


161 
MLA
 
	gacc0
, 
	gs_1
, 
	ga_1
, 
round


162 
LDRSH
 
	gx_0
, [
x
], #2

163 
MLA
 
	gacc0
, 
	gs_2
, 
	ga_2
, 
acc0


164 
MLA
 
	gacc1
, 
	gs_1
, 
	gb_1
, 
round


165 
MLA
 
	gacc1
, 
	gs_2
, 
	gb_2
, 
acc1


166 
ADD
 
	gs_2
, 
	gx_0
, 
	gacc0
, 
	gASR
 #14

167 
ADD
 
	gx_0
, 
	gs_2
, 
	gacc1
, 
	gASR
 #14

168 
STRH
 
	gx_0
, [
y
], #2

169 ; 
≠∂y
 
biquad
 
to
 
x_1


170 
MLA
 
	gacc0
, 
	gs_2
, 
	ga_1
, 
round


171 
LDRSH
 
	gx_1
, [
x
], #2

172 
MLA
 
	gacc0
, 
	gs_1
, 
	ga_2
, 
acc0


173 
MLA
 
	gacc1
, 
	gs_2
, 
	gb_1
, 
round


174 
MLA
 
	gacc1
, 
	gs_1
, 
	gb_2
, 
acc1


175 
ADD
 
	gs_1
, 
	gx_1
, 
	gacc0
, 
	gASR
 #14

176 
ADD
 
	gx_1
, 
	gs_1
, 
	gacc1
, 
	gASR
 #14

177 
STRH
 
	gx_1
, [
y
], #2

178 
SUBS
 
	gN
, N, #2

179 
BGT
 
iú_ö√r_lo›


180 
LDMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

181 
STRH
 
	gs_1
, [
b
, #-4]

182 
STRH
 
	gs_2
, [
b
, #-2]

183 
SUB
 
	gy
, y, 
	gN
, 
	gLSL
#1

184 
MOV
 
	gx
, 
y


185 
SUBS
 
	gM
, M, #1

186 
BGT
 
iú_√xt_biquad


187 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

191 
y
 
	gRN
 0 ; 
addªss
 
ouçut
 
ßm∂es
 
	gy
[]

192 
x
 
	gRN
 1 ; 
addªss
 
of
 
öput
 
ßm∂es
 
	gx
[]

193 
b
 
	gRN
 2 ; 
addªss
 
of
 
biquads
 (32-
bô
 
Æig√d
)

194 
N
 
	gRN
 3 ; 
numbî
 
of
 
ßm∂es
 
to
 
	$fûãr
 (
a
 
mu…ùÀ
 
of
 2)

195 
M
 
RN
 4 ; 
numbî
 
of
 
biquads
 
to
 
	$≠∂y
 (
a
 
mu…ùÀ
 
of
 2)

196 
x_0
 
RN
 2 ; 
öput
 
ßm∂es


197 
x_1
 
RN
 4

198 
s_0
 
RN
 5 ; 
√w
 
°©e


199 
b0_a21
 
RN
 6 ; 
biquad
 0, 
∑cked
 -
a
[2], -a[1]

200 
b0_b21
 
RN
 7 ; 
biquad
 0, 
∑cked
 +
b
[2], +b[1]

201 
b0_s_1
 
RN
 8 ; 
biquad
 0, 
s
[
t
-1]

202 
b0_s_2
 
RN
 9 ; 
biquad
 0, 
s
[
t
-2]

203 
b1_a21
 
RN
 10 ; 
biquad
 1, 
∑cked
 -
a
[2], -a[1]

204 
b1_b21
 
RN
 11 ; 
biquad
 1, 
∑cked
 +
b
[2], +b[1]

205 
b1_s_1
 
RN
 12 ; 
biquad
 1, 
s
[
t
-1]

206 
b1_s_2
 
RN
 14 ; 
biquad
 1, 
s
[
t
-2]

209 ; 
a1
,
a2
;

210 ; 
b1
,
b2
;

211 ; 
s1
,
s2
;

212 ; } 
	tbiquad
;

214 ; 
iú_q14_¨m9e


215 ; (*
y
,

216 ; *
x
,

217 ; såu˘ { 
biquad
 *
b
; 
M
; } *b,

218 ; 
N
);

219 
iú_q14_¨m9e


220 
STMFD
 
•
!, {
r4
-
r11
, 
Ã
}

221 
LDMIA
 
	gb
, {b, 
	gM
}

222 
√xt_biquad_¨m9e


223 
LDMIA
 
	gb
!, {
	gb0_a21
, 
	gb0_b21
}

224 
LDRSH
 
	gb0_s_1
, [
b
], #2

225 
LDRSH
 
	gb0_s_2
, [
b
], #2

226 
LDMIA
 
	gb
!, {
	gb1_a21
, 
	gb1_b21
}

227 
LDRSH
 
	gb1_s_1
, [
b
], #2

228 
LDRSH
 
	gb1_s_2
, [
b
], #2

229 
STMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

230 
	g√xt_ßm∂e_¨m9e


231 ; 
u£
 
	ga
 2x2 
block
 
IIR


232 
LDRSH
 
	gx_0
, [
x
], #2

233 
LDRSH
 
	gx_1
, [
x
], #2

234 
SUBS
 
	gN
, N, #2

235 
MOV
 
	gx_0
, x_0, 
	gLSL
 #14

236 
MOV
 
	gx_1
, x_1, 
	gLSL
 #14

237 ; 
≠∂y
 
	gbiquad
 0 
to
 
	gßm∂e
 0

238 
SMLABB
 
	gx_0
, 
	gb0_s_1
, 
	gb0_a21
, 
x_0


239 
SMLABT
 
	gs_0
, 
	gb0_s_2
, 
	gb0_a21
, 
x_0


240 
SMLABB
 
	gx_0
, 
	gb0_s_1
, 
	gb0_b21
, 
s_0


241 
SMLABT
 
	gx_0
, 
	gb0_s_2
, 
	gb0_b21
, 
x_0


242 
MOV
 
	gb0_s_2
, 
	gs_0
, 
	gASR
 #14

243 ; 
≠∂y
 
	gbiquad
 0 
to
 
	gßm∂e
 1

244 
SMLABB
 
	gx_1
, 
	gb0_s_2
, 
	gb0_a21
, 
x_1


245 
SMLABT
 
	gs_0
, 
	gb0_s_1
, 
	gb0_a21
, 
x_1


246 
SMLABB
 
	gx_1
, 
	gb0_s_2
, 
	gb0_b21
, 
s_0


247 
SMLABT
 
	gx_1
, 
	gb0_s_1
, 
	gb0_b21
, 
x_1


248 
MOV
 
	gb0_s_1
, 
	gs_0
, 
	gASR
 #14

249 ; 
≠∂y
 
	gbiquad
 1 
to
 
	gßm∂e
 0

250 
SMLABB
 
	gx_0
, 
	gb1_s_1
, 
	gb1_a21
, 
x_0


251 
SMLABT
 
	gs_0
, 
	gb1_s_2
, 
	gb1_a21
, 
x_0


252 
SMLABB
 
	gx_0
, 
	gb1_s_1
, 
	gb1_b21
, 
s_0


253 
SMLABT
 
	gx_0
, 
	gb1_s_2
, 
	gb1_b21
, 
x_0


254 
MOV
 
	gb1_s_2
, 
	gs_0
, 
	gASR
 #14

255 ; 
≠∂y
 
	gbiquad
 1 
to
 
	gßm∂e
 1

256 
SMLABB
 
	gx_1
, 
	gb1_s_2
, 
	gb1_a21
, 
x_1


257 
SMLABT
 
	gs_0
, 
	gb1_s_1
, 
	gb1_a21
, 
x_1


258 
SMLABB
 
	gx_1
, 
	gb1_s_2
, 
	gb1_b21
, 
s_0


259 
SMLABT
 
	gx_1
, 
	gb1_s_1
, 
	gb1_b21
, 
x_1


260 
MOV
 
	gb1_s_1
, 
	gs_0
, 
	gASR
 #14

261 
MOV
 
	gx_0
, x_0, 
	gASR
 #14

262 
MOV
 
	gx_1
, x_1, 
	gASR
 #14

263 
STRH
 
	gx_0
, [
y
], #2

264 
STRH
 
	gx_1
, [
y
], #2

265 
BGT
 
√xt_ßm∂e_¨m9e


266 
LDMFD
 
	g•
!, {
	gb
, 
	gN
, 
	gM
}

267 
STRH
 
	gb0_s_1
, [
b
, #-12-4]

268 
STRH
 
	gb0_s_2
, [
b
, #-12-2]

269 
STRH
 
	gb1_s_1
, [
b
, #-4]

270 
STRH
 
	gb1_s_2
, [
b
, #-2]

271 
SUB
 
	gy
, y, 
	gN
, 
	gLSL
#1

272 
MOV
 
	gx
, 
y


273 
SUBS
 
	gM
, M, #2

274 
BGT
 
√xt_biquad_¨m9e


275 
LDMFD
 
	g•
!, {
	gr4
-
	gr11
, 
	gpc
}

277 
	gEND


	@/home/jkr555/arm/guide/ch08_dsp/ref_dsp.c

48 
	~"ch08ã°.h
"

49 
	~<m©h.h
>

51 c⁄° 
ªÆ
 
	gpi
 = 3.141592653589;

53 
ªÆ
 
	$ªf_dŸ
(
ªÆ
 *
ßmps
,Ñó»*
c€fs
, 
nSamps
)

55 
ªÆ
 
acc
=0;

57  ; 
nSamps
!=0;ÇSamps--)

59 
acc
 +(*
ßmps
++Ë* (*
c€fs
++);

62  
acc
;

63 
	}
}

65 
	$ªf_fú
(
ªÆ
 *
a
,Ñó»*
x
, 
rC€fs
 *
c€fs
, 
N
)

67 
ªÆ
 *
c
 = 
c€fs
->c;

68 
M
 = 
c€fs
->M;

69 
i
;

73 
ªÆ
 
acc
 = 0;

75 
i
=0; i<
M
; i++)

77 
acc
 +
x
[
i
] * 
c
[i];

80 *
a
++ = 
acc
;

81 
x
++;

83 } --
N
);

84 
	}
}

86 
	$ªf_iú
(
ªÆ
 *
y
,Ñó»*
x
, 
rBiquads
 *
b
, 
N
)

88 
i
, 
M
 = 
b
->M;

89 
ªÆ
 
acc
, *
biquad
;

94 
biquad
 = 
b
->b;

95 
acc
 = *
x
++;

97 
i
=0; i<
M
; i++)

99 
ªÆ
 
a1
,
a2
,
b1
,
b2
,
s0
,
s1
,
s2
;

102 
a1
 = *
biquad
++;

103 
a2
 = *
biquad
++;

104 
b1
 = *
biquad
++;

105 
b2
 = *
biquad
++;

106 
s1
 = 
biquad
[0];

107 
s2
 = 
biquad
[1];

109 
s0
 = 
acc
 + 
s1
*
a1
 + 
s2
*
a2
;

110 
acc
 = 
s0
 + 
s1
*
b1
 + 
s2
*
b2
;

112 *
biquad
++ = 
s0
;

113 *
biquad
++ = 
s1
;

115 *
y
++ = 
acc
;

116 } --
N
);

117 
	}
}

121 
	$ªf_bô_ªvî£
(
com∂ex
 *
y
, com∂ex *
x
, 
N
)

123 
i
,
j
,
k
;

125 
i
=0, 
j
=0; i<
N
; i++)

127 
y
[
i
] = 
x
[
j
];

130 
k
=
N
>>1;

131 
j
 & 
k
)

133 
j
 = j^
k
;

134 
k
 >>= 1;

136 
j
 = j^
k
;

138 
	}
}

140 
__ölöe
 
com∂ex
 
	$C_MUL
(
com∂ex
 
b
, com∂ex 
c
)

142 
com∂ex
 
a
;

143 
a
.
ª
 = 
b
.ª*
c
.ª - b.
im
*c.im;

144 
a
.
im
 = 
b
.
ª
*
c
.im + b.im*c.re;

145  
a
;

146 
	}
}

148 
__ölöe
 
com∂ex
 
	$C_ADD
(
com∂ex
 
b
, com∂ex 
c
)

150 
com∂ex
 
a
;

151 
a
.
ª
 = 
b
.ª + 
c
.re;

152 
a
.
im
 = 
b
.im + 
c
.im;

153  
a
;

154 
	}
}

156 
__ölöe
 
com∂ex
 
	$C_SUB
(
com∂ex
 
b
, com∂ex 
c
)

158 
com∂ex
 
a
;

159 
a
.
ª
 = 
b
.ª - 
c
.re;

160 
a
.
im
 = 
b
.im - 
c
.im;

161  
a
;

162 
	}
}

164 
__ölöe
 
com∂ex
 
	$C_HALVE
(
com∂ex
 
b
)

166 
com∂ex
 
a
;

167 
a
.
ª
 = 
b
.re/2.0;

168 
a
.
im
 = 
b
.im/2.0;

169  
a
;

170 
	}
}

177 
	$ªf_powîs_èbÀ
(
com∂ex
 *
èbÀ
, com∂ex 
w
, 
N
)

179 
i
;

181 
èbÀ
[0].
ª
 = 1.0;

182 
èbÀ
[0].
im
 = 0.0;

184 
i
=1; i<
N
; i++)

186 
èbÀ
[
i
] = 
	`C_MUL
—abÀ[i-1], 
w
);

188 
	}
}

196 
	$ªf_f·_°age
(
com∂ex
 *
y
, com∂ex *
èbÀ
, 
R
, 
S
)

198 
i
,
j
;

199 
com∂ex
 
x0
,
x1
,
xx
,
z
;

201 
i
=0; i<
R
/2; i++)

203 
z
 = 
èbÀ
[
i
*
S
];

205 
j
=0; j<
S
; j++)

207 
x0
 = 
y
[
j
*
R
+
i
];

208 
x1
 = 
y
[
j
*
R
+
i
+R/2];

209 
xx
 = 
	`C_MUL
(
x1
, 
z
);

210 
x1
 = 
	`C_SUB
(
x0
, 
xx
);

211 
x0
 = 
	`C_ADD
(x0, 
xx
);

212 
y
[
j
*
R
+
i
] =
	`C_HALVE
(
x0
);

213 
y
[
j
*
R
+
i
+R/2]=
	`C_HALVE
(
x1
);

216 
	}
}

220 
	$ªf_f·
(
com∂ex
 *
y
, com∂ex *
x
, 
N
)

222 
com∂ex
 
w
, *
èbÀ
;

223 
R
,
S
;

226 
èbÀ
 = (
com∂ex
*)
	`my_mÆloc
(
N
*(complex)/2);

227 
w
.
ª
 = 
	`cos
(-2.0*
pi
/(
ªÆ
)
N
);

228 
w
.
im
 = 
	`sö
(-2.0*
pi
/(
ªÆ
)
N
);

229 
	`ªf_powîs_èbÀ
(
èbÀ
, 
w
, 
N
/2);

232 
	`ªf_bô_ªvî£
(
y
, 
x
, 
N
);

235 
R
=2, 
S
=
N
/2; S!=0; S>>=1, R<<=1)

237 
	`ªf_f·_°age
(
y
, 
èbÀ
, 
R
, 
S
);

239 
	}
}

	@/home/jkr555/arm/guide/ch09_excpts/src/nih9_9.s

65 
EXPORT
 
√°edI¡îru±H™dÀr


67 
Maskmd
 
	gEQU
 0x1‡; 
¥o˚ss‹
 
mode
 
mask


68 
SVC32md
 
	gEQU
 0x13 ; 
SVC
 
mode


69 
I_Bô
 
	gEQU
 0x80 ; 
IRQ
 
bô


71 
FRAME_R0
 
	gEQU
 0x00

72 
FRAME_R1
 
EQU
 
	gFRAME_R0
+4

73 
FRAME_R2
 
EQU
 
	gFRAME_R1
+4

74 
FRAME_R3
 
EQU
 
	gFRAME_R2
+4

75 
FRAME_R4
 
EQU
 
	gFRAME_R3
+4

76 
FRAME_R5
 
EQU
 
	gFRAME_R4
+4

77 
FRAME_R6
 
EQU
 
	gFRAME_R5
+4

78 
FRAME_R7
 
EQU
 
	gFRAME_R6
+4

79 
FRAME_R8
 
EQU
 
	gFRAME_R7
+4

80 
FRAME_R9
 
EQU
 
	gFRAME_R8
+4

81 
FRAME_R10
 
EQU
 
	gFRAME_R9
+4

82 
FRAME_R11
 
EQU
 
	gFRAME_R10
+4

83 
FRAME_R12
 
EQU
 
	gFRAME_R11
+4

84 
FRAME_PSR
 
EQU
 
	gFRAME_R12
+4

85 
FRAME_LR
 
EQU
 
	gFRAME_PSR
+4

86 
FRAME_PC
 
EQU
 
	gFRAME_LR
+4

87 
FRAME_SIZE
 
EQU
 
	gFRAME_PC
+4

89 
AREA
 
	gnih9_9
,
	gCODE
,
ªad⁄ly


91 
	g√°edI¡îru±H™dÀr
 ; 
ö°ru˘i⁄
 
	g°©e
 : 
commít


92 
SUB
 
r14
,
	gr14
,#4 ; 2 :

93 
STMDB
 
r13
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} ; 2 : 
ßve
 
c⁄ãxt


94 ; <
ö£π
 
code
 
	ghîe
>

95 
BL
 
	gªad_RescheduÀFœg
 ; 3 : 
m‹e
 
¥o˚ssög


96 
CMP
 
r0
,#0 ; 3 : 
¥o˚ssög
?

97 
LDMNEIA
 
r13
!,{
	gr0
-
	gr3
,
	gr12
,
	gpc
}^ ; 4 : 
thí
 

98 
MRS
 
r2
,
	gSPSR
 ; 5 : 
c›y
 
SPSR_úq


99 
MOV
 
r0
,
	gr13
 ; 5 : 
c›y
 
r13_úq


100 
ADD
 
r13
,
	gr13
,#6*4 ; 5 : 
ª£t
 
°ack


101 
MRS
 
r1
,
	gCPSR
 ; 6 : 
c›y
 
CPSR


102 
BIC
 
r1
,
	gr1
,#Maskmd ; 6 :

103 
ORR
 
r1
,
	gr1
,#SVC32md ; 6 :

104 
MSR
 
CPSR_c
,
	gr1
 ; 6 : 
ch™ge
 
SVC
 
mode


105 
SUB
 
r13
,
	gr13
,#FRAME_SIZE-
	gFRAME_R4
 ; 7 : 
make
 
°ack
 
•a˚


106 
STMIA
 
r13
,{
	gr4
-
	gr11
} ; 7 : 
ßve
 
r4
-
r11


107 
LDMIA
 
r0
,{
	gr4
-
	gr9
} ; 7 : 
r4
-
r9
 
IRQ
 
°ack


108 
BIC
 
r1
,
	gr1
,#I_Bit ; 8 :

109 
MSR
 
CPSR_c
,
	gr1
 ; 8 : 
íabÀ
 

110 
STMDB
 
r13
!,{
	gr4
-
	gr7
} ; 9 : 
ßve
 
r4
-
r7
 
SVC


111 
STR
 
r2
,[
r13
,#FRAME_PSR] ; 9 : 
ßve
 
PSR


112 
STR
 
r8
,[
r13
,#FRAME_R12] ; 9 : 
ßve
 
r12


113 
STR
 
r9
,[
r13
,#FRAME_PC] ; 9 : 
ßve
 
pc


114 
STR
 
r14
,[
r13
,#FRAME_LR] ; 9 : 
ßve
 
Ã


115 ; <
ö£π
 
code
 
	ghîe
>

116 
LDMIA
 
	gr13
!,{
	gr0
-
	gr12
,
	gr14
} ; 11 : 
ª°‹e
 
c⁄ãxt


117 
MSR
 
SPSR_cxsf
,
	gr14
 ; 11 : 
ª°‹e
 
SPSR


118 
LDMIA
 
r13
!,{
	gr14
,
	gpc
}^ ; 11 : 

121 
ªad_RescheduÀFœg


122 ; <
im∂emít
 
your
 
own
 
ªscheduÀ
 
Êag
 
code
 
	ghîe
>

123 
MOV
 
	gr0
,#0 ; 
m‹e
 
¥o˚ssög


124 
MOV
 
	gpc
,
	gr14
 ; 

126 
	gEND


	@/home/jkr555/arm/guide/ch09_excpts/src/pdih9_13.s

65 
EXPORT
 
¥i‹ôizedDúe˘I¡îru±H™dÀr


67 
I_Bô
 
	gEQU
 0x80

69 
PRIORITY_0
 
	gEQU
 2 ; 
Comms
 
Rx


70 
PRIORITY_1
 
	gEQU
 1 ; 
Comms
 
Tx


71 
PRIORITY_2
 
	gEQU
 0 ; 
	gTimî
 1

72 
PRIORITY_3
 
	gEQU
 3 ; 
	gTimî
 2

74 
BINARY_0
 
	gEQU
 1<<
	gPRIORITY_0
 ; 1<<2 0x00000004

75 
BINARY_1
 
	gEQU
 1<<
	gPRIORITY_1
 ; 1<<1 0x00000002

76 
BINARY_2
 
	gEQU
 1<<
	gPRIORITY_2
 ; 1<<0 0x00000001

77 
BINARY_3
 
	gEQU
 1<<
	gPRIORITY_3
 ; 1<<3 0x00000008

79 
MASK_3
 
EQU
 
BINARY_3


80 
MASK_2
 
EQU
 
	gMASK_3
+
BINARY_2


81 
MASK_1
 
EQU
 
	gMASK_2
+
BINARY_1


82 
MASK_0
 
EQU
 
	gMASK_1
+
BINARY_0


84 
ic_Ba£
 
	gEQU
 0x80000000

85 
IRQSètus
 
	gEQU
 0x0

86 
IRQRawSètus
 
	gEQU
 0x4

87 
IRQE«bÀ
 
	gEQU
 0x8

88 
IRQE«bÀSë
 
	gEQU
 0x8

89 
IRQE«bÀCÀ¨
 
	gEQU
 0xc

91 
bô_timî1
 
	gEQU
 0

92 
bô_commtx
 
	gEQU
 1

93 
bô_commrx
 
	gEQU
 2

94 
bô_timî2
 
	gEQU
 3

96 
AREA
 
	gpdih
,
	gCODE
,
ªad⁄ly


98 
	g¥i‹ôizedDúe˘I¡îru±H™dÀr
 ; 
ö°ru˘i⁄
 
commít


99 
SUB
 
	gr14
,Ñ14, #4 ; 
	gr14_úq
-=4

100 
STMFD
 
r13
!, {
	gr14
} ; 
ßve
 
r14_úq


101 
MRS
 
	gr14
, 
	gSPSR
 ; 
c›y
 
•§_úq


102 
STMFD
 
	gr13
!,{
	gr10
,
	gr11
,
	gr12
,
	gr14
} ; 
ßve
 
c⁄ãxt


103 
LDR
 
	gr14
, =
ic_Ba£
 ; 
¸é
 
addr


104 
LDR
 
	gr10
, [
r14
, #IRQSètus] ; 
lﬂd
 
IRQ
 
°©us


105 
ADR
 
	gr12
, 
	gi§_èbÀ
 ; 
obèö
 
ISR
 
èbÀ
 
addr


106 
TST
 
	gr10
, #BINARY_0 ; 
CommRx


107 
LDRNE
 
	gpc
, [
r12
,#PRIORITY_0<<2] ; 
thí
 
jump
 
CommRx
 
ISR


108 
TST
 
	gr10
, #BINARY_1 ; 
CommTx


109 
LDRNE
 
	gpc
, [
r12
,#PRIORITY_1<<2] ; 
thí
 
jump
 
CommTx
 
ISR


110 
TST
 
	gr10
, #BINARY_2 ; 
Timî1


111 
LDRNE
 
	gpc
, [
r12
,#PRIORITY_2<<2] ; 
thí
 
jump
 
Timî1
 
ISR


112 
TST
 
	gr10
, #BINARY_3 ; 
Timî2


113 
LDRNE
 
	gpc
, [
r12
,#PRIORITY_3<<2] ; 
thí
 
jump
 
Timî2
 
ISR


114 
B
 
	g£rvi˚_n⁄e
 ; 
ˇ±uª
 
•urious
 
öts


116 
i§_èbÀ


117 
DCD
 
	g£rvi˚_timî1
 ; 
timî1
 
ISR


118 
DCD
 
	g£rvi˚_commtx
 ; 
commtx
 
ISR


119 
DCD
 
	g£rvi˚_commrx
 ; 
commrx
 
ISR


120 
DCD
 
	g£rvi˚_timî2
 ; 
timî2
 
ISR


122 
¥i‹ôy_masks


123 
DCD
 
	gMASK_2
 ; 
¥i‹ôy
 
	gmask
 2

124 
DCD
 
	gMASK_1
 ; 
¥i‹ôy
 
	gmask
 1

125 
DCD
 
	gMASK_0
 ; 
¥i‹ôy
 
	gmask
 0

126 
DCD
 
	gMASK_3
 ; 
¥i‹ôy
 
	gmask
 3

128 
£rvi˚_timî1


129 
MOV
 
	gr11
, #bô_timî1 ; 
c›y
 
bô_timî1


130 
LDR
 
	gr14
, =
ic_Ba£
 ; 
˘æ
 
addr


131 
LDR
 
	gr12
, [
r14
,#IRQE«bÀ] ; 
IRQ
 
íabÀ
 

132 
ADR
 
	gr10
, 
	g¥i‹ôy_masks
 ; 
obèö
 
¥i‹ôy
 
addr


133 
LDR
 
	gr10
, [
r10
,
r11
,
LSL
#2] ; 
lﬂd
 
¥i‹ôy
 
mask


134 
AND
 
	gr12
,Ñ12, 
	gr10
 ; AND 
íabÀ
 
ªg


135 
STR
 
	gr12
, [
r14
,#IRQE«bÀCÀ¨] ; 
˛ór
 
öts


136 
MRS
 
	gr14
, 
	gCPSR
 ; 
c›y
 
CPSR


137 
BIC
 
	gr14
,Ñ14, #I_Bô ; 
˛ór
 
	gI
-
bô


138 
MSR
 
	gCPSR_c
, 
	gr14
 ; 
íabÀ
 
	gIRQ


140 ; <
ö£π
 
	gcode
>

142 
LDMFD
 
	gr13
!,{
	gr10
,
	gr11
,
	gr12
,
	gr14
}

143 
MSR
 
	gSPSR_cf
, 
r14


144 
LDMFD
 
	gr13
!, {
	gpc
}^

146 
	g£rvi˚_timî2


147 ; <
ö£π
 
routöe
 
	ghîe
>

149 
	g£rvi˚_commrx


150 ; <
ö£π
 
routöe
 
	ghîe
>

152 
	g£rvi˚_commtx


153 ; <
ö£π
 
routöe
 
	ghîe
>

155 
£rvi˚_n⁄e


156 
B
 
£rvi˚_n⁄e


	@/home/jkr555/arm/guide/ch09_excpts/src/pgrp9_14.s

65 
EXPORT
 
¥i‹ôizedGrou≥dI¡îru±H™dÀr


67 
I_Bô
 
	gEQU
 0x80

69 
PRIORITY_0
 
	gEQU
 2 ; 
Comms
 
Rx


70 
PRIORITY_1
 
	gEQU
 1 ; 
Comms
 
Tx


71 
PRIORITY_2
 
	gEQU
 0 ; 
	gTimî
 1

72 
PRIORITY_3
 
	gEQU
 3 ; 
	gTimî
 2

74 
BINARY_0
 
	gEQU
 1<<
	gPRIORITY_0
 ; 1<<2 0x00000004

75 
BINARY_1
 
	gEQU
 1<<
	gPRIORITY_1
 ; 1<<1 0x00000002

76 
BINARY_2
 
	gEQU
 1<<
	gPRIORITY_2
 ; 1<<0 0x00000001

77 
BINARY_3
 
	gEQU
 1<<
	gPRIORITY_3
 ; 1<<3 0x00000008

79 
MASK_3
 
EQU
 
BINARY_3


80 
MASK_2
 
EQU
 
	gMASK_3
+
BINARY_2


81 
MASK_1
 
EQU
 
	gMASK_2
+
BINARY_1


82 
MASK_0
 
EQU
 
	gMASK_1
+
BINARY_0


84 
ic_Ba£
 
	gEQU
 0x80000000

85 
IRQSètus
 
	gEQU
 0x0

86 
IRQRawSètus
 
	gEQU
 0x4

87 
IRQE«bÀ
 
	gEQU
 0x8

88 
IRQE«bÀSë
 
	gEQU
 0x8

89 
IRQE«bÀCÀ¨
 
	gEQU
 0xc

91 
bô_timî0
 
	gEQU
 0

92 
bô_commtx
 
	gEQU
 1

93 
bô_commrx
 
	gEQU
 2

94 
bô_timî1
 
	gEQU
 3

96 
GROUP_0
 
EQU
 
	gBINARY_0
|
BINARY_3


97 
GROUP_1
 
EQU
 
	gBINARY_1
|
BINARY_2


99 
GMASK_1
 
EQU
 
GROUP_1


100 
GMASK_0
 
EQU
 
	gGMASK_1
+
GROUP_0


102 
MASK_TIMER1
 
EQU
 
GMASK_0


103 
MASK_COMMTX
 
EQU
 
GMASK_1


104 
MASK_COMMRX
 
EQU
 
GMASK_1


105 
MASK_TIMER2
 
EQU
 
GMASK_0


107 
AREA
 
	gpgΩ
,
	gCODE
,
ªad⁄ly


109 
¥i‹ôizedGrou≥dI¡îru±H™dÀr


110 
SUB
 
	gr14
,Ñ14,#4 ; 
	gr14_úq
-=4

111 
STMFD
 
r13
!, {
	gr14
} ; 
ßve
 
r14_úq


112 
MRS
 
	gr14
, 
	gSPSR
 ; 
c›y
 
•§_úq


113 
STMFD
 
	gr13
!, {
	gr10
,
	gr11
,
	gr12
,
	gr14
} ; 
ßve
 
c⁄ãxt


114 
LDR
 
	gr14
, =
ic_Ba£
 ; 
˘æ
 
addr


115 
LDR
 
	gr10
, [
r14
, #IRQSètus] ; 
lﬂd
 
IRQ
 
°©us


116 
ANDS
 
	gr11
, 
	gr10
, #GROUP_0 ; 
bñ⁄g
 
to
 
GROUP_0


117 
ANDEQS
 
	gr11
, 
	gr10
, #GROUP_1 ; 
bñ⁄g
 
to
 
GROUP_1


118 
AND
 
	gr10
, 
	gr11
, #0
	gxf
 ; 
Mask
 
off
 
	gt›
 24-
bô


119 
ADR
 
	gr11
, 
	glowe°_signifiˇ¡_bô
 ; 
lﬂd
 
LSB
 
addr


120 
LDRB
 
	gr11
, [
r11
, 
r10
] ; 
lﬂd
 
byã


121 
B
 
	gdißbÀ_lowî_¥i‹ôy
 ; 
jump
 
to
 
routöe


123 
	glowe°_signifiˇ¡_bô


124 ; 0 1 2 3 4 5 6 7 8 9 
a
 
b
 
c
 
d
 
e
 
f


125 
	gDCB
 0xff,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0

127 
dißbÀ_lowî_¥i‹ôy


128 
CMP
 
	gr11
, #0
	gxff
 ; 
unknown


129 
BEQ
 
	gunknown_c⁄dôi⁄
 ; 
thí
 
jump


130 
LDR
 
	gr12
, [
r14
, #IRQE«bÀ] ; 
lﬂd
 
IRQ
 
íabÀ
 
ªg


131 
ADR
 
	gr10
, 
	g¥i‹ôy_mask
 ; 
lﬂd
 
¥i‹ôy
 
addr


132 
LDR
 
	gr10
, [
r10
, 
r11
, 
LSL
 #2] ; 
	gmem32
[r10+r11<<2]

133 
AND
 
	gr12
,Ñ12, 
	gr10
 ; AND 
íabÀ
 
ªg


134 
STR
 
	gr12
, [
r14
,#IRQE«bÀCÀ¨] ; 
˛ór
 
√w
 
öts


135 
MRS
 
	gr14
, 
	gCPSR
 ; 
c›y
 
CPSR


136 
BIC
 
	gr14
,Ñ14, #I_Bô ; 
˛ór
 
	gI
-
bô


137 
MSR
 
	gCPSR_c
, 
	gr14
 ; 
íabÀ
 
IRQ
 
öts


138 
LDR
 
	gpc
, [
pc
, 
r11
, 
LSL
 #2] ; 
jump
 
to
 
™
 
ISR


139 
NOP


140 
DCD
 
	g£rvi˚_timî1
 ; 
timî0
 
ISR


141 
DCD
 
	g£rvi˚_commtx
 ; 
commtx
 
ISR


142 
DCD
 
	g£rvi˚_commrx
 ; 
commrx
 
ISR


143 
DCD
 
	g£rvi˚_timî2
 ; 
timî1
 
ISR


145 
¥i‹ôy_mask


146 
DCD
 
	gMASK_TIMER1
 ; 
mask
 
	gGROUP
 0

147 
DCD
 
	gMASK_COMMTX
 ; 
mask
 
	gGROUP
 1

148 
DCD
 
	gMASK_COMMRX
 ; 
mask
 
	gGROUP
 1

149 
DCD
 
	gMASK_TIMER2
 ; 
mask
 
	gGROUP
 0

152 
	g£rvi˚_commrx


153 ; <
ö£π
 
	gcode
>

154 
	g£rvi˚_commtx


155 ; <
ö£π
 
	gcode
>

156 
	g£rvi˚_timî2


157 ; <
ö£π
 
	gcode
>

158 
	g£rvi˚_timî1


160 ; <
ö£π
 
	gcode
>

162 
LDMFD
 
	gr13
!,{
	gr10
,
	gr11
,
	gr12
,
	gr14
}

163 
MSR
 
	gSPSR_cf
, 
r14


164 
LDMFD
 
	gr13
!, {
	gpc
}^

166 
unknown_c⁄dôi⁄


167 
B
 
unknown_c⁄dôi⁄


	@/home/jkr555/arm/guide/ch09_excpts/src/psih9_11.s

65 
EXPORT
 
¥i‹ôizedSim∂eI¡îru±H™dÀr


67 
I_Bô
 
	gEQU
 0x80

69 
PRIORITY_0
 
	gEQU
 2 ; 
Comms
 
Rx


70 
PRIORITY_1
 
	gEQU
 1 ; 
Comms
 
Tx


71 
PRIORITY_2
 
	gEQU
 0 ; 
	gTimî
 1

72 
PRIORITY_3
 
	gEQU
 3 ; 
	gTimî
 2

74 
BINARY_0
 
	gEQU
 1<<
	gPRIORITY_0
 ; 1<<2 0x00000004

75 
BINARY_1
 
	gEQU
 1<<
	gPRIORITY_1
 ; 1<<1 0x00000002

76 
BINARY_2
 
	gEQU
 1<<
	gPRIORITY_2
 ; 1<<0 0x00000001

77 
BINARY_3
 
	gEQU
 1<<
	gPRIORITY_3
 ; 1<<3 0x00000008

79 
MASK_3
 
EQU
 
BINARY_3


80 
MASK_2
 
EQU
 
	gMASK_3
+
BINARY_2


81 
MASK_1
 
EQU
 
	gMASK_2
+
BINARY_1


82 
MASK_0
 
EQU
 
	gMASK_1
+
BINARY_0


84 
ic_Ba£
 
	gEQU
 0x80000000

85 
IRQSètus
 
	gEQU
 0x0

86 
IRQRawSètus
 
	gEQU
 0x4

87 
IRQE«bÀ
 
	gEQU
 0x8

88 
IRQE«bÀSë
 
	gEQU
 0x8

89 
IRQE«bÀCÀ¨
 
	gEQU
 0xc

91 
AREA
 
	gpsih
,
	gCODE
,
ªad⁄ly


93 
	g¥i‹ôizedSim∂eI¡îru±H™dÀr
 ; 
ö°ru˘i⁄
 
	g°©e
 : 
commít


94 
SUB
 
r14
, 
	gr14
, #4 ; 2 : 
r14_úq
 -= 4

95 
STMFD
 
r13
!, {
	gr14
} ; 2 : 
ßve
 
r14_úq


96 
MRS
 
r14
, 
	gSPSR
 ; 2 : 
c›y
 
•§_úq


97 
STMFD
 
r13
!, {
	gr10
,
	gr11
,
	gr12
,
	gr14
} ; 2 : 
ßve
 
c⁄ãxt


98 
LDR
 
r14
, =
ic_Ba£
 ; 3 : 
¸é
 
addr


99 
MOV
 
r11
, #PRIORITY_3 ; 3 :  
¥i‹ôy


100 
LDR
 
r10
, [
r14
, #IRQSètus] ; 3 : 
lﬂd
 
IRQ
 
°©us


101 
TST
 
r10
, #BINARY_3 ; 4 : 
Timî
 2

102 
MOVNE
 
r11
, #PRIORITY_3 ; 4 : 
thí
 
	$P3
(
lo
)

103 
TST
 
r10
, #BINARY_2 ; 4 : 
Timî
 1

104 
MOVNE
 
r11
, #PRIORITY_2 ; 4 : 
thí
 
P2


105 
TST
 
r10
, #BINARY_1 ; 4 : 
Comm
 
Tx


106 
MOVNE
 
r11
, #PRIORITY_1 ; 4 : 
thí
 
P1


107 
TST
 
r10
, #BINARY_0 ; 4 : 
Comm
 
Rx


108 
MOVNE
 
r11
, #PRIORITY_0 ; 4 : 
thí
 
	$P0
(
hi
)

109 
LDR
 
r12
, [
r14
,#IRQE«bÀ] ; 4 : 
IRQE«bÀ
 
ªg


110 
ADR
 
r10
, 
¥i‹ôy_masks
 ; 4 : 
mask
 
addªss


111 
LDR
 
r10
, [r10,
r11
,
LSL
 #2] ; 4 : 
¥i‹ôy
 
vÆue


112 
AND
 
r12
,Ñ12,
r10
 ; 4 : AND 
íabÀ
 
ªg


113 
STR
 
r12
, [
r14
,#IRQE«bÀCÀ¨] ; 4 : 
˛ór
 
öts


114 
MRS
 
r14
, 
CPSR
 ; 4 : 
c›y
 CPSR

115 
BIC
 
r14
,Ñ14, #I_Bô ; 4 : 
˛ór
 
I
-
bô


116 
MSR
 
CPSR_c
, 
r14
 ; 4 : 
íabÀ
 
IRQ
 
öts


117 
LDR
 
pc
, [pc, 
r11
, 
LSL
#2] ; 5 : 
jump
 
to
 
™
 
ISR


118 
NOP
 ;

119 
DCD
 
£rvi˚_timî1
 ; 
timî0
 
ISR


120 
DCD
 
£rvi˚_commtx
 ; 
commtx
 
ISR


121 
DCD
 
£rvi˚_commrx
 ; 
commrx
 
ISR


122 
DCD
 
£rvi˚_timî2
 ; 
timî1
 
ISR


124 
¥i‹ôy_masks


125 
DCD
 
MASK_2
 ; 
¥i‹ôy
 
mask
 2

126 
DCD
 
MASK_1
 ; 
¥i‹ôy
 
mask
 1

127 
DCD
 
MASK_0
 ; 
¥i‹ôy
 
mask
 0

128 
DCD
 
MASK_3
 ; 
¥i‹ôy
 
mask
 3

131 
£rvi˚_commrx


132 ; <
ö£π
 
code
>

133 
£rvi˚_commtx


134 ; <
ö£π
 
code
>

135 
£rvi˚_timî2


136 ; <
ö£π
 
code
>

137 
£rvi˚_timî1


138 
STMFD
 
r13
!, {
r0
-
r9
} ; 6 : savêc⁄ãxt

139 ; <
ö£π
 
	gcode
>

140 
LDMFD
 
	gr13
!, {
	gr0
-
	gr10
} ; 7 : 
ª°‹e
 
c⁄ãxt


141 
MRS
 
r11
, 
	gCPSR
 ; 8 : 
c›y
 
˝§


142 
ORR
 
r11
, 
	gr11
, #I_Bô ; 8 : 
£t
 
I
-
bô


143 
MSR
 
CPSR_c
, 
	gr11
 ; 8 : 
dißbÀ
 
IRQ


144 
LDR
 
r11
, =
ic_Ba£
 ; 8 : 
˘æ
 
addr


145 
STR
 
r12
, [
r11
, #IRQE«bÀSë] ; 8 : 
íabÀ
 
öts


146 
LDMFD
 
r13
!, {
	gr11
, 
	gr12
, 
	gr14
} ; 9 : 
ª°‹e
 
c⁄ãxt


147 
MSR
 
SPSR_cxsf
, 
	gr14
 ; 9 : 
£t
 
•§


148 
LDMFD
 
r13
!, {
	gpc
}^ ; 9 : 

	@/home/jkr555/arm/guide/ch09_excpts/src/pstd9_12.s

65 
EXPORT
 
¥i‹ôizedSènd¨dI¡îru±H™dÀr


67 
I_Bô
 
	gEQU
 0x80

69 
PRIORITY_0
 
	gEQU
 2 ; 
Comms
 
Rx


70 
PRIORITY_1
 
	gEQU
 1 ; 
Comms
 
Tx


71 
PRIORITY_2
 
	gEQU
 0 ; 
	gTimî
 1

72 
PRIORITY_3
 
	gEQU
 3 ; 
	gTimî
 2

74 
BINARY_0
 
	gEQU
 1<<
	gPRIORITY_0
 ; 1<<2 0x00000004

75 
BINARY_1
 
	gEQU
 1<<
	gPRIORITY_1
 ; 1<<1 0x00000002

76 
BINARY_2
 
	gEQU
 1<<
	gPRIORITY_2
 ; 1<<0 0x00000001

77 
BINARY_3
 
	gEQU
 1<<
	gPRIORITY_3
 ; 1<<3 0x00000008

79 
MASK_3
 
EQU
 
BINARY_3


80 
MASK_2
 
EQU
 
	gMASK_3
+
BINARY_2


81 
MASK_1
 
EQU
 
	gMASK_2
+
BINARY_1


82 
MASK_0
 
EQU
 
	gMASK_1
+
BINARY_0


84 
ic_Ba£
 
	gEQU
 0x80000000

85 
IRQSètus
 
	gEQU
 0x0

86 
IRQRawSètus
 
	gEQU
 0x4

87 
IRQE«bÀ
 
	gEQU
 0x8

88 
IRQE«bÀSë
 
	gEQU
 0x8

89 
IRQE«bÀCÀ¨
 
	gEQU
 0xc

91 
AREA
 
	gp°d
,
	gCODE
,
ªad⁄ly


93 
	g¥i‹ôizedSènd¨dI¡îru±H™dÀr
 ; 
ö°ru˘i⁄
 
	g°©e
 : 
commít


94 
SUB
 
r14
, 
	gr14
, #4 ; 2 : 
r14_úq
 -= 4

95 
STMFD
 
r13
!, {
	gr14
} ; 2 : 
ßve
 
r14_úq


96 
MRS
 
r14
, 
	gSPSR
 ; 2 : 
c›y
 
•§_úq


97 
STMFD
 
r13
!,{
	gr10
,
	gr11
,
	gr12
,
	gr14
} ; 2 : 
ßve
 
c⁄ãxt


98 
LDR
 
r14
, =
ic_Ba£
 ; 3 : 
¸é
 
addr


99 
LDR
 
r10
, [
r14
, #IRQSètus] ; 3 : 
lﬂd
 
IRQ
 
°©us


100 
MOV
 
r11
, 
	gpc
 ; 4 : 
c›y
 
pc


101 
TST
 
r10
, #BINARY_0 ; 5 : 
CommRx


102 
BLNE
 
dißbÀ_lowî
 ; 5 : 
thí
 
bønch


103 
TST
 
r10
, #BINARY_1 ; 5 : 
CommTx


104 
BLNE
 
dißbÀ_lowî
 ; 5 : 
thí
 
bønch


105 
TST
 
r10
, #BINARY_2 ; 5 : 
Timî1


106 
BLNE
 
dißbÀ_lowî
 ; 5 : 
thí
 
bønch


107 
TST
 
r10
, #BINARY_3 ; 5 : 
Timî2


108 
BLNE
 
dißbÀ_lowî
 ; 5 : 
thí
 
bønch


109 
dißbÀ_lowî


110 
SUB
 
r11
, 
	gr14
, 
	gr11
 ; 5 :Ñ11=
r14
-
c›y
 
of
 
pc


111 
LDR
 
r12
,=
¥i‹ôy_èbÀ
 ; 5 : 
¥i‹ôy
 
tbl
 
addr


112 
LDRB
 
r11
,[
r12
,r11,
LSR
 #3] ; 5 : 
mem8
[
tbl
+(r11>>3)]

113 
ADR
 
r10
, 
	g¥i‹ôy_masks
 ; 5 : 
¥i‹ôy
 
mask
 
addr


114 
LDR
 
r10
, [r10,
r11
,
LSL
 #2] ; 5 : 
lﬂd
 
¥i‹ôy
 
mask


115 
LDR
 
r14
, =
ic_Ba£
 ; 6 : 
¸é
 
addr


116 
LDR
 
r12
, [
r14
,#IRQE«bÀ] ; 6 : 
IRQ
 
íabÀ
 
ªg


117 
AND
 
r12
, 
	gr12
, 
	gr10
 ; 6 : AND 
íabÀ
 
ªg


118 
STR
 
r12
, [
r14
,#IRQE«bÀCÀ¨] ; 6 : 
íabÀ
 
√w
 
öts


119 
MRS
 
r14
, 
	gCPSR
 ; 7 : 
c›y
 
CPSR


120 
BIC
 
r14
, 
	gr14
, #I_Bô ; 7 : 
˛ór
 
I
-
bô


121 
MSR
 
CPSR_c
, 
	gr14
 ; 7 : 
íabÀ
 
IRQ


122 
LDR
 
pc
, [pc, 
r11
, 
LSL
#2] ; 8 : 
jump
 
to
 
™
 
ISR


123 
NOP
 ;

124 
DCD
 
	g£rvi˚_timî1
 ; 
timî0
 
ISR


125 
DCD
 
	g£rvi˚_commtx
 ; 
commtx
 
ISR


126 
DCD
 
	g£rvi˚_commrx
 ; 
commrx
 
ISR


127 
DCD
 
	g£rvi˚_timî2
 ; 
timî1
 
ISR


129 
¥i‹ôy_masks


130 
DCD
 
	gMASK_2
 ; 
¥i‹ôy
 
	gmask
 2

131 
DCD
 
	gMASK_1
 ; 
¥i‹ôy
 
	gmask
 1

132 
DCD
 
	gMASK_0
 ; 
¥i‹ôy
 
	gmask
 0

133 
DCD
 
	gMASK_3
 ; 
¥i‹ôy
 
	gmask
 3

135 
¥i‹ôy_èbÀ


136 
DCB
 
	gPRIORITY_0
 ; 
	g¥i‹ôy
 0

137 
DCB
 
	gPRIORITY_1
 ; 
	g¥i‹ôy
 1

138 
DCB
 
	gPRIORITY_2
 ; 
	g¥i‹ôy
 2

139 
DCB
 
	gPRIORITY_3
 ; 
	g¥i‹ôy
 3

140 
ALIGN


142 
	g£rvi˚_commrx


143 ; <
ö£π
 
	gcode
>

144 
	g£rvi˚_commtx


145 ; <
ö£π
 
	gcode
>

146 
	g£rvi˚_timî2


147 ; <
ö£π
 
	gcode
>

148 
£rvi˚_timî1


149 
STMFD
 
	gr13
!, {
	gr0
-
	gr9
} ; 6 : 
ßve
 
c⁄ãxt


150 ; <
ö£π
 
	gcode
>

151 
LDMFD
 
	gr13
!, {
	gr0
-
	gr10
} ; 7 : 
ª°‹e
 
c⁄ãxt


152 
MRS
 
r11
, 
	gCPSR
 ; 8 : 
c›y
 
CPSR


153 
ORR
 
r11
, 
	gr11
, #I_Bô ; 8 : 
£t
 
I
-
bô


154 
MSR
 
CPSR_c
, 
	gr11
 ; 8 : 
dißbÀ
 
IRQ


155 
LDR
 
r11
, =
ic_Ba£
 ; 8 : 
˘æ
 
addr


156 
STR
 
r12
, [
r11
, #IRQE«bÀSë] ; 8 : 
íabÀ
 
öts


157 
LDMFD
 
r13
!, {
	gr11
, 
	gr12
, 
	gr14
} ; 9 : 
ª°‹e
 
c⁄ãxt


158 
MSR
 
SPSR_cf
, 
	gr14
 ; 9 : 
£t
 SPSR_cf

159 
LDMFD
 
r13
!, {
	gpc
}^ ; 9 : 

	@/home/jkr555/arm/guide/ch09_excpts/src/rih9_10.s

65 
EXPORT
 
ªíå™tI¡îru±H™dÀr


68 
IRQ_R0
 
	gEQU
 0

69 
IRQ_SPSR
 
	gEQU
 4

70 
IRQ_R14
 
	gEQU
 8

72 
Maskmd
 
	gEQU
 0x1‡; 
Mask
 
mode


73 
SVC32md
 
	gEQU
 0x13 ; 
SVC
 
mode


74 
I_Bô
 
	gEQU
 0x80 ; 
IRQ
 
bô


76 
ic_Ba£
 
	gEQU
 0x80000000

77 
IRQSètus
 
	gEQU
 0x0

78 
IRQRawSètus
 
	gEQU
 0x4

79 
IRQE«bÀ
 
	gEQU
 0x8

80 
IRQE«bÀSë
 
	gEQU
 0x8

81 
IRQE«bÀCÀ¨
 
	gEQU
 0xc

83 
AREA
 
	grih9_10
,
	gCODE
,
ªad⁄ly


85 
	gªíå™tI¡îru±H™dÀr
 ; 
ö°ru˘i⁄
 
	g°©e
 : 
commít


86 
SUB
 
r14
, 
	gr14
, #4 ; 2 : 
r14_úq
-=4

87 
STR
 
r14
, [
r13
, #IRQ_R14] ; 2 : 
ßve
 
r14_úq


88 
MRS
 
r14
, 
	gSPSR
 ; 2 : 
c›y
 
SPSR


89 
STR
 
r14
, [
r13
, #IRQ_SPSR] ; 2 : 
ßve
 
SPSR


90 
STR
 
r0
, [
r13
, #IRQ_R0] ; 2 : 
ßve
Ñ0

91 
MOV
 
r0
, 
	gr13
 ; 2 : 
c›y
 
r13_úq


92 
MRS
 
r14
, 
	gCPSR
 ; 3 : 
c›y
 
CPSR


93 
BIC
 
r14
, 
	gr14
, #Maskmd ; 3 :

94 
ORR
 
r14
, 
	gr14
, #SVC32md ; 3 :

95 
MSR
 
CPSR_c
, 
	gr14
 ; 3 : 
íãr
 
SVC
 
mode


96 
STR
 
r14
, [
r13
, #-8]! ; 4 : 
ßve
Ñ14

97 
LDR
 
r14
, [
r0
, #IRQ_R14] ; 4 : 
r14_svc
=
r14_úq


98 
STR
 
r14
, [
r13
, #4] ; 4 : 
ßve
 
r14_úq


99 
LDR
 
r14
, [
r0
, #IRQ_SPSR] ; 4 : 
r14_svc
=
SPSR_úq


100 
LDR
 
r0
, [r0, #IRQ_R0] ; 4 : 
ª°‹e
Ñ0

101 
STMDB
 
r13
!, {
	gr0
-
	gr3
,
	gr8
,
	gr12
,
	gr14
} ; 4 : 
ßve
 
c⁄ãxt


102 
LDR
 
r14
, =
ic_Ba£
 ; 5 : 
¸é
 
addªss


103 
LDR
 
r8
, [
r14
, #IRQSètus] ; 5 : 
gë
 
°©us


104 
STR
 
r8
, [
r14
, #IRQE«bÀCÀ¨] ; 5 : 
˛ór
 
öãºu±s


105 
MRS
 
r14
, 
	gCPSR
 ; 6 : 
r14_svc
=
CPSR


106 
BIC
 
r14
, 
	gr14
, #I_Bit ; 6 :

107 
MSR
 
CPSR_c
, 
	gr14
 ; 6 : 
˛ór
 
IRQ
 

108 
BL
 
¥o˚ss_I¡îru±
 ; 7 : 
ˇŒ
 
ISR


109 
LDR
 
r14
, =
ic_Ba£
 ; 9 : 
˘æ
 
addªss


110 
STR
 
r8
, [
r14
, #IRQE«bÀSë] ; 9 : 
íabÀ
 
öts


111 
BL
 
ªad_RescheduÀFœg
 ; 9 : 
m‹e
 
¥o˚ssög


112 
CMP
 
r0
, #0 ; 8 : 
¥o˚ssög


113 
LDMNEIA
 
r13
!, {
	gr0
-
	gr3
,
	gr8
,
	gr12
,
	gr14
} ; 8 : 
thí
 
lﬂd
 
c⁄ãxt


114 
MSRNE
 
SPSR_cxsf
, 
	gr14
 ; 8 : 
upd©e
 
SPSR


115 
LDMNEIA
 
r13
!, {
	gr14
, 
	gpc
}^ ; 8 : 

116 
LDMIA
 
r13
!, {
	gr0
-
	gr3
, 
	gr8
} ; 10 : 
lﬂd
 
ªg


117 
STMDB
 
r13
!, {
	gr0
-
	gr11
} ; 10 : 
ßve
 
c⁄ãxt


118 
BL
 
c⁄töue_Sîvicög
 ; 11 :  
£rvi˚


119 
LDMIA
 
r13
!, {
	gr0
-
	gr12
, 
	gr14
} ; 12 : 
ª°‹e
 
c⁄ãxt


120 
MSR
 
SPSR_cxsf
, 
	gr14
 ; 12 : 
upd©e
 
SPSR


121 
LDMIA
 
r13
!, {
	gr14
, 
	gpc
}^ ; 12 : 

123 
ªad_RescheduÀFœg


124 ; <
im∂emít
 
your
 
own
 
ªscheduÀ
 
Êag
 
code
 
	ghîe
>

125 
MOV
 
	gr0
,#0 ; 
m‹e
 
¥o˚ssög


126 
MOV
 
	gpc
,
	gr14
 ; 

128 
	g¥o˚ss_I¡îru±


129 ; <
ö£π
 
	gcode
>

130 
MOV
 
	gpc
,
	gr14
 ; 

132 
	gc⁄töue_Sîvicög


133 ; <
ö£π
 
	gcode
>

134 
MOV
 
	gpc
,
	gr14
 ; 

136 
	gEND


	@/home/jkr555/arm/guide/ch09_excpts/src/tbench.s

68 ; 
	gIMPORT


71 
IMPORT
 
√°edI¡îru±H™dÀr


72 
IMPORT
 
ªíå™tI¡îru±H™dÀr


73 
IMPORT
 
¥i‹ôizedSim∂eI¡îru±H™dÀr


74 
IMPORT
 
¥i‹ôizedSènd¨dI¡îru±H™dÀr


75 
IMPORT
 
¥i‹ôizedDúe˘I¡îru±H™dÀr


76 
IMPORT
 
¥i‹ôizedGrou≥dI¡îru±H™dÀr


77 
IMPORT
 
	gve˘‹Sîvi˚Routöe


80 ; 
	gMACROS
/
	gDEFINES


83 
Maskmd
 
	gEQU
 0x1‡; 
Mask
 
mode


84 
SVC32md
 
	gEQU
 0x13 ; 
SVC
 
mode


85 
I_Bô
 
	gEQU
 0x80 ; 
IRQ
 
bô


86 
SEMIHOSTING
 
	gEQU
 0x123456 ; 
£miho°ög
 
SWI


87 
SYS_WRITE0
 
	gEQU
 0x04 ; 
£miho°ög
 
°rög
 
ouçut


88 
MAXNUMTESTS
 
	gEQU
 7 ; 
numbî
 
of
 
	gã°s


91 ; 
	gCODE


94 
AREA
 
	gã°bích
,
	gCODE
,
READWRITE


95 
	gENTRY


96 ; -- 
öôülize
 
a
 
mock
 
USER
 
ívú⁄mít


97 
öô


98 
BL
 
	göôU£rEnvú⁄mít
 ; 
öôülize
 
U£r
 
	gªgi°îs


99 ; -- 
ouçut
 
ã°
 
b™√r


100 
begö


101 
LDR
 
	gr1
,=
°rB™√r
 ;Ñ1 = @strBanner

102 
BL
 
¥ötTe°
 ; 
¥öt
 
B™√r


103 
MOV
 
	gr1
,#1 ; 
ª£t
Ñ1 = 1

104 
B
 
°¨tTe°
 ; 
bønch
 
to
 
°¨t
 
ã°


105 
°¨tTe°


106 
LDR
 
	gr0
,
	g√xtTe°
 ;Ñ0 = 
√xtTe°


107 
m‹eTe°s


108 
LDR
 
r1
,[
pc
,
r0
,
LSL
#2] ; 
lﬂd
 
addªss
 
of
 
the
 
ã°
 
°rög


109 
B
 
	g¥ötAndTe°
 ; 
¥öt
 
™d
 
ã°
 
the
 
öãºu±
 
h™dÀr


110 
DCD
 
	g°rTe°1
 ; 
√°ed
 
öãºu±
 
h™dÀr


111 
DCD
 
	g°rTe°2
 ; 
ªíå™t
 
öãºu±
 
h™dÀr


112 
DCD
 
	g°rTe°3
 ; 
¥i‹ôized
 
sim∂e
 
öãºu±
 
h™dÀr


113 
DCD
 
	g°rTe°4
 ; 
¥i‹ôized
 
°™d¨d
 
öãºu±
 
h™dÀr


114 
DCD
 
	g°rTe°5
 ; 
¥i‹ôized
 
dúe˘
 
öãºu±
 
h™dÀr


115 
DCD
 
	g°rTe°6
 ; 
¥i‹ôized
 
grou≥d
 
öãºu±
 
h™dÀr


116 
DCD
 
	g°rTe°7
 ; 
ve˘‹
 
£rvi˚
 
	groutöe


117 ; -- 
¥öt
 
ã°
 
™d
 
run


118 
¥ötAndTe°


119 
BL
 
	g¥ötTe°
 ; 
ouçut
 
ã°
 
°rög


120 
BL
 
	g£tUpMode
 ; 
£t
 
IRQ
 
mode


121 
BL
 
	g£tUpMockI¡îru±C⁄åﬁÀr
 ; 
£tup
 
the
 
mock
 
˙ål


122 
ADR
 
	gr14
,
	gvîify
+4 ; 
bønch
 
vîify
 
routöe


123 
ã°I¡îru±H™dÀr


124 
LDR
 
	gr0
,
	g√xtTe°
 ;Ñ0 = 
ã°
 
numbî


125 
LDR
 
pc
,[pc,
r0
,
LSL
#2] ; 
jump
 
to
 
a
 
öãºu±
 
h™dÀr


126 
NOP


127 
DCD
 
√°edI¡îru±H™dÀr


128 
DCD
 
ªíå™tI¡îru±H™dÀr


129 
DCD
 
¥i‹ôizedSim∂eI¡îru±H™dÀr


130 
DCD
 
¥i‹ôizedSènd¨dI¡îru±H™dÀr


131 
DCD
 
¥i‹ôizedDúe˘I¡îru±H™dÀr


132 
DCD
 
¥i‹ôizedGrou≥dI¡îru±H™dÀr


133 
DCD
 
	gve˘‹Sîvi˚Routöe


134 ; -- 
vîify
 
öãºu±
 
h™dÀr
 
	gha¢
't corruptedÑegistersánd IRQ stack 

135 
vîify


136 
BL
 
	gvîifyRegi°îs
 ; 
vîify
 
ªgi°îs


137 
LDR
 
	gr0
,
	g√xtTe°
 ;Ñ0 = 
ã°
 
numbî


138 
ADD
 
r0
,
	gr0
,#1 ; 
ö¸emít
 
ã°
 
numbî


139 
ADR
 
	gr1
,
	g√xtTe°
 ;Ñ1 = @
√xtTe°


140 
STR
 
r0
,[
r1
] ; 
°‹e
 
ã°
 
numbî


141 
CMP
 
	gr0
,#MAXNUMTESTS ; r0<
MAXNUMTESTS


142 
BLT
 
	gm‹eTe°s
 ; 
thí
 
bønch
 
to
 
m‹eTe°


143 
B
 
	gcom∂ëeTe°
 ; 
com∂ëed
 
ã°s


144 
√xtTe°


145 
	gDCD
 0x0 ; 
°‹e
 
√xt
 
ã°


146 
com∂ëeTe°


147 
LDR
 
	gr1
,=
°rCom∂ëeTe°
 ;Ñ1 = 
°rög


148 
BL
 
¥ötTe°
 ; 
¥öt
 
ã°
 
°rög


149 
∑s£d


150 
B
 
	g∑s£d
 ; 
öföôe
 
	glo›


153 ; * 
	gROUTINES


156 ; 
£tUpMockI¡îru±C⁄åﬁÀr
 ();

157 ; 
	gPOST
: 
mem32
[0x80000000] = 0x00000001

158 ; 
	gPOST
: 
r13_úq
 = 0x9000

160 
£tUpMockI¡îru±C⁄åﬁÀr


161 
LDR
 
	gr0
,=0x80000000 ; 
	gic_Ba£
 = @0x80000000

162 
MOV
 
r13
,#1 ; 
£t
Ñ13 
to
 
show
 
⁄e
 
öãºu±


163 
STR
 
	gr13
,[
r0
] ; 0x80000000=1

164 
MOV
 
r13
,#0
	gx9000
 ; 
	gr13_úq
=0x9000

165 
MOV
 
pc
,
	gÃ
 ; 

167 ; 
vîifyRegi°îs
 ();

168 ; 
	gPOST
: 
ouçuts
 
PASS
 | 
FAIL


170 
vîifyRegi°îs


171 
CMP
 
	gr1
,#1 ; r1!=1

172 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

173 
CMP
 
	gr2
,#2 ; r2!=2

174 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

175 
CMP
 
	gr3
,#3 ; r3!=3

176 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

177 
CMP
 
	gr4
,#4 ; r4!=4

178 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

179 
CMP
 
	gr5
,#5 ; r5!=5

180 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

181 
CMP
 
	gr6
,#6 ; r6!=6

182 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

183 
CMP
 
	gr7
,#7 ; r7!=7

184 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

185 
CMP
 
	gr8
,#8 ; r8!=8

186 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

187 
CMP
 
	gr9
,#9 ; r9!=9

188 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

189 
CMP
 
	gr10
,#10 ; r10!=10

190 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

191 
CMP
 
	gr11
,#11 ; r11!=11

192 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

193 
CMP
 
	gr12
,#12 ; r12!=12

194 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

195 
MRS
 
	gr1
,
	gCPSR
 ; 
c›y
 
CPSR
 
to
 
r1


196 
BIC
 
	gr1
,r1,#Maskmd ; 
mask
 
the
 
mode


197 
ORR
 
	gr1
,r1,#0
	gx12
 ; 
	gCPSR
=
IFt_IRQ


198 
MSR
 
CPSR_cxsf
,
	gr1
 ; 
ch™ge
 
to
 
IRQ
 
mode


199 
CMP
 
	gr13
,#0
	gx9000
 ; 
	gr13_u§
!=0x9000

200 
BNE
 
ã°Faûed
 ; 
thí
ÅestFailed

201 
MRS
 
	gr1
,
	gCPSR
 ; 
c›y
 
CPSR
 
to
 
r1


202 
BIC
 
	gr1
,r1,#Maskmd ; 
mask
 
the
 
mode


203 
ORR
 
	gr1
,r1,#0
	gx1f
 ; 
	gCPSR
=
i·_SYS


204 
MSR
 
CPSR_cxsf
,
	gr1
 ; 
ch™ge
 
to
 
SYSTEM
 
mode


205 
ã°Pas£d


206 
MOV
 
	gr0
,#SYS_WRITE0 ;Ñ0=
	$SYS_WRITE0
 (0x4)

207 
LDR
 
r1
,=
°rPas£d
 ;Ñ1 = @strPassed

208 
SWI
 0x123456 ; 
£miho°ög
 SWI

209 
B
  ; 
jump
 
to
 

210 
ã°Faûed


211 
MOV
 
r0
,#SYS_WRITE0 ;Ñ0=
	$SYS_WRITE0
 (0x4)

212 
LDR
 
r1
,=
°rFaûed
 ;Ñ1 = @strFailed

213 
SWI
 0x123456 ; 
£miho°ög
 SWI

215 
MOV
 
r1
,#1 ; 
ª£t
Ñ1=1

216 
MOV
 
pc
,
Ã
 ; 

218 ; 
	`£tUpMode
 ();

219 ; 
POST
: 
CPSR
 = 
IFt_IRQ
 
SPSR
 = 
i·_SYSTEM


220 
£tUpMode


221 
MOV
 
r0
,
Ã
 ; 
c›y
 
the
 
lök
 
öto
Ñ0

222 
MRS
 
r1
,
CPSR
 ; 
c›y
 CPSR 
to
Ñ1

223 
BIC
 
r1
,r1,#Maskmd ; 
mask
 
the
 
mode


224 
ORR
 
r1
,r1,#0
x12
|
I_Bô
 ; 
c›y
 
of
 
CPSR
 = 
i·_IRQ


225 
MSR
 
CPSR_cxsf
,
r1
 ; 
ch™ge
 
to
 
IRQ
 
mode


226 
MRS
 
r1
,
SPSR
 ; 
c›y
 SPSR 
to
Ñ1

227 
BIC
 
r1
,r1,#Maskmd ; 
mask
 
the
 
mode


228 
ORR
 
r1
,r1,#0
x1f
 ; 
SPSR_IRQ
 = 
i·_SYS


229 
MSR
 
SPSR_cxsf
,
r1
 ; 
ch™ge
 
SPSR
 
to
 
SYSTEM
 
mode


230 
MOV
 
r1
,#1 ; 
ª£t
Ñ1=1

231 
MOV
 
pc
,
r0
 ; 

233 ; 
	`¥ötTe°
 (
r1
-
addªss
 
of
 
°rög
);

234 ; 
POST
: 
ouçut
 
zîo
 
ãrmö©ed
 
°rög
 
ö
 
poöãd
 
to
 
by
 
r1


235 
¥ötTe°


236 
MOV
 
r0
,#SYS_WRITE0

237 
SWI
 0x123456

238 
MOV
 
r1
,#1

239 
MOV
 
pc
,
Ã


240 ; 
	`öôU£rEnvú⁄mít
 ();

241 ; 
POST
: 
r
<
n
>
_u§
 =Ç 
whîe
Ç=1 
to
 12

242 ; 
POST
: (
nŸe
 
U£r
 
™d
 
Sy°em
 
mode
 
ªgi°îs
 
¨e
 
the
 
ßme
)

243 
öôU£rEnvú⁄mít


244 ; -- 
ch™ge
 
to
 
Sy°em
 
mode


245 
MOV
 
r0
,
Ã


246 
MRS
 
r1
,
CPSR
 ; 
c›y
 CPSR 
to
Ñ1

247 
BIC
 
r1
,r1,#Maskmd ; 
mask
 
the
 
mode


248 
ORR
 
r1
,r1,#0
x1f
 ; 
CPSR
 = 
i·_SYS


249 
MSR
 
CPSR_cxsf
,
r1
 ; 
ch™ge
 
to
 
SYSTEM
 
mode


250 ; -- 
£t
-
up
 
vÆues


251 
MOV
 
r1
,#1 ;Ñ1 = 1

252 
MOV
 
r2
,#2 ;Ñ2 = 3

253 
MOV
 
r3
,#3 ;Ñ3 = 3

254 
MOV
 
r4
,#4 ;Ñ4 = 4

255 
MOV
 
r5
,#5 ;Ñ5 = 5

256 
MOV
 
r6
,#6 ;Ñ6 = 6

257 
MOV
 
r7
,#7 ;Ñ7 = 7

258 
MOV
 
r8
,#8 ;Ñ8 = 8

259 
MOV
 
r9
,#9 ;Ñ9 = 9

260 
MOV
 
r10
,#10 ;Ñ10 = 10

261 
MOV
 
r11
,#11 ;Ñ11 = 11

262 
MOV
 
r12
,#12 ;Ñ12 = 12

263 
MOV
 
pc
,
r0
 ; 

266 ; 
DATA


269 
°rB™√r


270 
DCB
 "Basi¯C⁄fidí˚ Te°\n\n",0 ; 
b™√r
 
°rög


271 
ALIGN


272 
°rCom∂ëeTe°


273 
DCB
 "\n\nCom∂ëê!!!\n",0 ; 
°rög
 
to
 
show
 
com∂ëi⁄


274 
ALIGN


275 
°rPas£d


276 
DCB
 "PASSED \n",0 ; 
°rög
 "PASSED"

277 
ALIGN


278 
°rFaûed


279 
DCB
 "FAILED \n",0 ; 
°rög
 "FAILED"

280 
ALIGN


281 
°rTe°1


282 
DCB
 "Test[1] : Nested interrupt handler - ",0

283 
ALIGN


284 
°rTe°2


285 
DCB
 "Test[2] : Reentrant interrupt handler - ",0

286 
ALIGN


287 
°rTe°3


288 
DCB
 "Test[3] : Prioritized simple interrupt handler - ",0

289 
ALIGN


290 
°rTe°4


291 
DCB
 "Test[4] : Prioritized standard interrupt handler - ",0

292 
ALIGN


293 
°rTe°5


294 
DCB
 "Test[5] : Prioritized direct interrupt handler - ",0

295 
ALIGN


296 
°rTe°6


297 
DCB
 "Test[6] : Prioritized grouped interrupt handler - ",0

298 
ALIGN


299 
°rTe°7


300 
DCB
 "Test[7] : Vector interrupt handler - ",0

301 
ALIGN


303 
END


	@/home/jkr555/arm/guide/ch09_excpts/src/vic.s

65 
EXPORT
 
ve˘‹Sîvi˚Routöe


67 
INTON
 
	gEQU
 0x0000 ; 
íabÀ
 
öãºu±s


68 
SYS32md
 
	gEQU
 0x1‡; ***??? 
sy°em
 
mode


69 
IRQ32md
 
	gEQU
 0x12 ; 
sy°em
 
mode


70 
I_Bô
 
	gEQU
 0x80

71 
VICBa£Addr
 
	gEQU
 0xfffff000 ; 
ba£
 
addªss
 
of
 
VIC
 
c⁄åﬁÀr


72 
VICVe˘‹Addr
 
EQU
 
	gVICBa£Addr
+0x30 ; 
i§
 
addªss
 
of
 
öãru±


74 
Maskmd
 
	gEQU
 0x1‡; 
¥o˚ss‹
 
mode
 
mask


75 
SVC32md
 
	gEQU
 0x13 ; 
SVC
 
mode


77 
AREA
 
	gvic
,
	gCODE
,
ªad⁄ly


79 
ve˘‹Sîvi˚Routöe


80 
SUB
 
	gr14
,r14,#4 ;Ñ14-=4

81 
STMFD
 
r13
!, {
	gr0
-
	gr3
,
	gr12
,
	gr14
} ; 
ßve
 
c⁄ãxt


82 
MRS
 
	gr12
, 
	g•§
 ; 
c›y
 
•§


83 
STMFD
 
	gr13
!,{
	gr12
} ; 
ßve
 
•§


84 
MSR
 
	g˝§_c
, #INTON|
	gSYS32md
 ; cp§_c=
i·_sy°em


85 ; <
ö£π
 
	gcode
>

86 
MSR
 
	g˝§_c
, #I_Bô|
	gIRQ32md
 ; cp§_c=
I·_úq


87 
LDMFD
 
r13
!, {
	gr12
} ; 
ª°‹e
 
	$r12
 (
•§_úq
)

88 
MSR
 
•§_cxsf
, 
r12
 ; 
ª°‹e
 
•§


89 
LDR
 
r1
,=
VICVe˘‹Addr
 ; 
lﬂd
 
Ve˘‹Addªss


90 
STR
 
r0
, [
r1
] ; 
öf‹m
 
VIC
 
öãºu±
 
£rvi˚d


91 
LDMFD
 
r13
!, {
r0
-
r3
,
r12
,
pc
}^ ; 

	@/home/jkr555/arm/guide/ch10_firm/Sand/build/src/sand.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
S™d°⁄e


53 ; * 
Deföes


56 ; -- 
Sîül
 
Communiˇti⁄
 -----------------------------------------------------

58 
SYSCFG
 
EQU
 0x03FF0000

59 
EXTDBWTH
 
	`EQU
 (
SYSCFG
 + 0x3010)

60 
ROMCON1
 
	`EQU
 (
SYSCFG
 + 0x3018)

61 
INTMOD
 
	`EQU
 (
SYSCFG
 + 0x4000)

62 
INTPND
 
	`EQU
 (
SYSCFG
 + 0x4004)

63 
INTMSK
 
	`EQU
 (
SYSCFG
 + 0x4008)

64 
TMOD
 
	`EQU
 (
SYSCFG
 + 0x6000)

65 
TDATA0
 
	`EQU
 (
SYSCFG
 + 0x6004)

66 
TDATA1
 
	`EQU
 (
SYSCFG
 + 0x6008)

67 
IOPMOD
 
	`EQU
 (
SYSCFG
 + 0x5000)

68 
IOPCON
 
	`EQU
 (
SYSCFG
 + 0x5004)

69 
IOPDATA
 
	`EQU
 (
SYSCFG
 + 0x5008)

70 
UART0_BASE
 
	`EQU
 (
SYSCFG
 + 0xD000)

71 
UART1_BASE
 
	`EQU
 (
SYSCFG
 + 0xE000)

73 ; 
Sîül
 
£âögs
.......................

75 
ULCON
 
EQU
 0x00

76 
UCON
 
EQU
 0x04

77 
USTAT
 
EQU
 0x08

78 
UTXBUF
 
EQU
 0x0C

79 
URXBUF
 
EQU
 0x10

80 
UBRDIV
 
EQU
 0x14

82 ; 
Löe
 
c⁄åﬁ
 
bôs
............

84 
ULCR8bôs
 
	$EQU
 (3)

85 
ULCRS1St›Bô
 
	$EQU
 (0)

86 
ULCRNoP¨ôy
 
	`EQU
 (0)

88 ; 
UART
 
C⁄åﬁ
 
Regi°î
 
bôs
............

90 
UCRRxM
 
	$EQU
 (1)

91 
UCRRxSI
 
	`EQU
 (1<<2)

92 
UCRTxM
 
	`EQU
 (1<<3)

93 
UCRLPB
 
	`EQU
 (1<<7)

95 ; 
UART
 
Sètus
 
Regi°î
 
bôs


97 
USROvîrun
 
	`EQU
 (1<<0)

98 
USRP¨ôy
 
	`EQU
 (1<<1)

99 
USRFømög
 
	`EQU
 (1<<2)

100 
USRBªak
 
	`EQU
 (1<<3)

101 
USRDTR
 
	`EQU
 (1<<4)

102 
USRRxD©a
 
	`EQU
 (1<<5)

103 
USRTxHﬁdEm±y
 
	`EQU
 (1<<6)

104 
USRTxEm±y
 
	`EQU
 (1<<7)

106 ;  
baud
 
øã
 
vÆue
 ............

108 
BAUD_9600
 
	`EQU
 (162<<4)

110 ; -- 
mem‹y
 
ªm≠
 -------------------------------------------------------------

112 
fMCLK_MHz
 
EQU
 50000000 ; 50
MHz
, 
KS32C50100
 

113 
MHz
 
EQU
 1000000

114 
fMCLK
 
	`EQU
 (
fMCLK_MHz
/
MHz
)

116 ; -- 
EXTDBWTH
 : 
Mem‹y
 
Bus
 
Width
 ...............................

118 
DSR0
 
EQU
 2:
SHL
:0 ; 
ROM0
 
Fœsh
 0 : 
DißbÀ


119 ; 1 : 
Byã


120 ; 2 : 
HÆf
-
W‹d


121 ; 3 : 
W‹d


122 
DSR1
 
EQU
 3:
SHL
:2 ; 
ROM1
 
SRAM


123 
DSR2
 
EQU
 3:
SHL
:4 ; 
ROM2
 
SRAM


124 
DSR3
 
EQU
 0:
SHL
:6 ; 
ROM3


125 
DSR4
 
EQU
 0:
SHL
:8 ; 
ROM4


126 
DSR5
 
EQU
 0:
SHL
:10 ; 
ROM5


127 
DSD0
 
EQU
 0:
SHL
:12 ; 
DRAM0


128 
DSD1
 
EQU
 0:
SHL
:14 ; 
DRAM1


129 
DSD2
 
EQU
 0:
SHL
:16 ; 
DRAM2


130 
DSD3
 
EQU
 0:
SHL
:18 ; 
DRAM3


131 
DSX0
 
EQU
 0:
SHL
:20 ; 
EXTIO0


132 
DSX1
 
EQU
 0:
SHL
:22 ; 
EXTIO1


133 
DSX2
 
EQU
 0:
SHL
:24 ; 
EXTIO2


134 
DSX3
 
EQU
 0:
SHL
:26 ; 
EXTIO3


136 
rEXTDBWTH
 
EQU
 
DSR0
+
DSR1
+
DSR2
+
DSR3
+
DSR4
+
DSR5
+
DSD0
+
DSD1
+
DSD2
+
DSD3
+
DSX0
+
DSX1
+
DSX2
+
DSX3


138 ; -- 
ROMCON0
 : 
ROM
 
B™k0
 
C⁄åﬁ
 ..............................

140 
ROMBa£På0
 
EQU
 0x180:
SHL
:10 ;=0x1800000

141 
ROMEndPå0
 
EQU
 0x188:
SHL
:20 ;=0x1880000

142 
PMC0
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


143 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

144 
rT∑0
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

145 ; 0x2=3C
y˛e
, 0x3=4Cycle

146 
rTacc0
 
	`EQU
 (0x3:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


147 ; 0x2=3C
y˛e
, 0x3=4Cycle

148 ; 0x4=5C
y˛e
, 0x5=6Cycle

149 ; 0x6=7C
y˛e
, 0x7=
Re£rved


150 
rROMCON0
 
EQU
 
ROMEndPå0
+
ROMBa£På0
+
rTacc0
+
rT∑0
+
PMC0


152 ; -- 
ROMCON1
 : 
ROM
 
B™k1
 
C⁄åﬁ
 .............................

154 
ROMBa£På1
 
EQU
 0x000:
SHL
:10 ;=0x0000000

155 
ROMEndPå1
 
EQU
 0x004:
SHL
:20 ;=0x0040000

156 
PMC1
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


157 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

158 
rT∑1
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

159 ; 0x2=3C
y˛e
, 0x3=4Cycle

160 
rTacc1
 
	`EQU
 (0x1:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


161 ; 0x2=3C
y˛e
, 0x3=4Cycle

162 ; 0x4=5C
y˛e
, 0x5=6Cycle

163 ; 0x6=7C
y˛e
, 0x7=
Re£rved


164 
rROMCON1
 
EQU
 
ROMEndPå1
+
ROMBa£På1
+
rTacc1
+
rT∑1
+
PMC1


166 ; -- 
ROMCON2
 : 
ROM
 
B™k2
 
C⁄åﬁ
 ...........................

168 
ROMBa£På2
 
EQU
 0x004:
SHL
:10 ;=0x0040000

169 
ROMEndPå2
 
EQU
 0x008:
SHL
:20 ;=0x0080000

170 
PMC2
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


171 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

172 
rT∑2
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

173 ; 0x2=3C
y˛e
, 0x3=4Cycle

174 
rTacc2
 
	`EQU
 (0x1:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


175 ; 0x2=3C
y˛e
, 0x3=4Cycle

176 ; 0x4=5C
y˛e
, 0x5=6Cycle

177 ; 0x6=7C
y˛e
, 0x7=
Re£rved


178 
rROMCON2
 
EQU
 
ROMEndPå2
+
ROMBa£På2
+
rTacc2
+
rT∑2
+
PMC2


181 ; -- 
ROMCON3
 : 
ROM
 
B™k3
 
C⁄åﬁ
 ...........................

183 
ROMBa£På3
 
EQU
 0x060:
SHL
:10 ;=0x0600000

184 
ROMEndPå3
 
EQU
 0x080:
SHL
:20 ;=0x0800000

185 
PMC3
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


186 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

187 
rT∑3
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

188 ; 0x2=3C
y˛e
, 0x3=4Cycle

189 
rTacc3
 
	`EQU
 (0x2:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


190 ; 0x2=3C
y˛e
, 0x3=4Cycle

191 ; 0x4=5C
y˛e
, 0x5=6Cycle

192 ; 0x6=7C
y˛e
, 0x7=
Re£rved


193 
rROMCON3
 
EQU
 
ROMEndPå3
+
ROMBa£På3
+
rTacc3
+
rT∑3
+
PMC3


195 ; -- 
ROMCON4
 : 
ROM
 
B™k4
 
C⁄åﬁ
 ...........................

197 
ROMBa£På4
 
EQU
 0x080:
SHL
:10 ;=0x0800000

198 
ROMEndPå4
 
EQU
 0x0A0:
SHL
:20 ;=0x0A00000

199 
PMC4
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


200 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

201 
rT∑4
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

202 ; 0x2=3C
y˛e
, 0x3=4Cycle

203 
rTacc4
 
	`EQU
 (0x4:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


204 ; 0x2=3C
y˛e
, 0x3=4Cycle

205 ; 0x4=5C
y˛e
, 0x5=6Cycle

206 ; 0x6=7C
y˛e
, 0x7=
Re£rved


207 
rROMCON4
 
EQU
 
ROMEndPå4
+
ROMBa£På4
+
rTacc4
+
rT∑4
+
PMC4


209 ; -- 
ROMCON5
 : 
ROM
 
B™k5
 
C⁄åﬁ
 ...........................

211 
ROMBa£På5
 
EQU
 0x0A0:
SHL
:10 ;=0x0A00000

212 
ROMEndPå5
 
EQU
 0x0C0:
SHL
:20 ;=0x0C00000

213 
PMC5
 
EQU
 0x0 ; 0x0=
N‹mÆ
 
ROM
, 0x1=4
W‹d
 
Page


214 ; 0x2=8
W‹d
 
Page
, 0x3=16Word Page

215 
rT∑5
 
	`EQU
 (0x0:
SHL
:2Ë; 0x0=5C
y˛e
, 0x1=2Cycle

216 ; 0x2=3C
y˛e
, 0x3=4Cycle

217 
rTacc5
 
	`EQU
 (0x4:
SHL
:4Ë; 0x0=
DißbÀ
, 0x1=2C
y˛e


218 ; 0x2=3C
y˛e
, 0x3=4Cycle

219 ; 0x4=5C
y˛e
, 0x5=6Cycle

220 ; 0x6=7C
y˛e
, 0x7=
Re£rved


221 
rROMCON5
 
EQU
 
ROMEndPå5
+
ROMBa£På5
+
rTacc5
+
rT∑5
+
PMC5


223 ; -- 
DRAMCON0
 : 
RAM
 
B™k0
 
c⁄åﬁ
 ..........................

225 
rDRAMCON0
 
EQU
 0

226 
rSDRAMCON0
 
EQU
 0

228 ; -- 
DRAMCON1
 : 
RAM
 
B™k1
 
c⁄åﬁ
 ..........................

230 
rDRAMCON1
 
EQU
 0

231 
rSDRAMCON1
 
EQU
 0

233 ; -- 
DRAMCON2
 : 
RAM
 
B™k2
 
c⁄åﬁ
 ..........................

235 
rDRAMCON2
 
EQU
 0

236 
rSDRAMCON2
 
EQU
 0

238 ; -- 
DRAMCON3
 : 
RAM
 
B™k3
 
c⁄åﬁ
 ..........................

240 
rDRAMCON3
 
EQU
 0

241 
rSDRAMCON3
 
EQU
 0

244 ; -- 
REFEXTCON
 : 
Exã∫Æ
 
I
/
O
 & 
Mem‹y
 
Re‰esh
 
cy˛e
 
C⁄åﬁ
 
Regi°î
..

246 
RefCy˛e
 
EQU
 16 ;
Unô
 [
us
], 1
k
 
ª‰esh
 16
ms


247 ;
RefCy˛e
 
EQU
 8 ;
Unô
 [
us
], 1
k
 
ª‰esh
 16
ms


248 
CASSëupTime
 
EQU
 0 ;0=1c
y˛e
, 1=2cycle

249 
CASHﬁdTime
 
EQU
 0 ;0=1c
y˛e
, 1=2cycle, 2=3cycle,

250 ;3=4c
y˛e
, 4=5cycle,

251 
RefCy˛eVÆue
 
	`EQU
 ((2048+1-(
RefCy˛e
*
fMCLK
)):
SHL
:21)

252 
Tc§
 
	`EQU
 (
CASSëupTime
:
SHL
:20Ë; 1c
y˛e


253 
Tcs
 
	$EQU
 (
CASHﬁdTime
:
SHL
:17)

254 
ExtIOBa£
 
EQU
 0x18360 ; 
Re‰esh
 
íabÀ
, 
VSF
=1

256 
rREFEXTCON
 
EQU
 
RefCy˛eVÆue
+
Tc§
+
Tcs
+
ExtIOBa£


260 ;
SRefCy˛e
 
EQU
 16 ;
Unô
 [
us
], 4
k
 
ª‰esh
 64
ms


261 
SRefCy˛e
 
EQU
 8 ;
Unô
 [
us
], 4
k
 
ª‰esh
 64
ms


262 
ROWcy˛eTime
 
EQU
 3 ;0=1c
y˛e
, 1=2cycle, 2=3cycle,

263 ;3=4c
y˛e
, 4=5cycle,

264 
SRefCy˛eVÆue
 
	`EQU
 ((2048+1-(
SRefCy˛e
*
fMCLK
)):
SHL
:21)

265 
STrc
 
	$EQU
 (
ROWcy˛eTime
:
SHL
:17)

266 
rSREFEXTCON
 
EQU
 
SRefCy˛eVÆue
+
STrc
+
ExtIOBa£


270 
AREA
 
°¨t
,
CODE
,
READONLY


272 
ENTRY


273 ; 
executi⁄
 
begös
 
wôh
 
a
 
ª£t
 
Ex˚±i⁄


274 ; 
°¨t_ßnd°⁄e
 
is
 
loˇãd
 
©
 
addªsss
 0x00000000

275 
°¨t_ßnd°⁄e


276 
B
 
ßnd°⁄e_öô1


277 
B
 
ex_undef


278 
B
 
ex_swi


279 
B
 
ex_∑bt


280 
B
 
ex_dabt


281 
NOP


282 
B
 
öt_úq


283 
B
 
öt_fiq


285 ; -- 
Dummy
 
Ex˚±i⁄
 
H™dÀrs


287 ; -- 
ex˚±i⁄
 
Routöe
 : 
Undeföed


289 
ex_undef
 
B
Éx_undef

291 ; -- 
ex˚±i⁄
 
Routöe
 : 
SWI


293 
ex_swi
 
B
Éx_swi

295 ; -- 
ex˚±i⁄
 
Routöe
 : 
D©a
 
Ab‹t


297 
ex_dabt
 
B
Éx_dabt

299 ; -- 
ex˚±i⁄
 
Routöe
 : 
Pª„tch
 
Ab‹t


301 
ex_∑bt
 
B
Éx_pabt

303 ; -- 
öãºu±
 
Routöe
 : 
IRQ


305 
öt_úq
 
B
 int_irq

307 ; -- 
öãºu±
 
Routöe
 : 
FIQ


309 
öt_fiq
 
B
 int_fiq

314 ; * 
S™d°⁄e
 
öôülize
 1

316 ; * 
Fú°
 
pha£
 
of
 
öôüliz©i⁄
 
is
 
brokí
 
öto
 2 
£˘i⁄s
.

318 ; * 
Se˘i⁄
 1 - 
öôülizes
 
the
 
SYSTEM
 
of
Åhe

319 ; * 
mi¸oc⁄åﬁÀr


321 ; * 
Se˘i⁄
 2 - 
Ælows
 
the
 
£gmít
 
di•œy
 
to
 
be
 
u£d
.

322 ; * 
Inôüliz©i⁄
 
is
 
com∂ëe
 
whí
 
the
 0 
≠≥¨s


323 ; * 
⁄
 
the
 
di•œy
.

327 ; -- 
loˇl
 
£âögs


329 
SEG_MASK
 
	$EQU
 (0x1fc00)

330 
nSEG_MASK
 
EQU
 ~
SEG_MASK


332 
ßnd°⁄e_öô1


334 ; -- 
Se˘i⁄
 1 : 
Pœ˚
 
the
 
SYSTEM
 
to
 
addªss
 0x3ff00000. 
DißbÀ


335 ; -- 
bŸh
 
the
 
ˇche
 
™d
 
wrôe
-
buf„r
 
⁄
Åhê
mi¸oc⁄åﬁÀr
.

337 
LDR
 
r3
, =
SYSCFG


338 
LDR
 
r4
, =0x03FFFFA0

339 
STR
 
r4
, [
r3
]

341 ; -- 
Se˘i⁄
 2 : 
Inôülize
 
the
 
h¨dw¨e
 
to
 
u£
Åhê
£gmít
 
di•œy
.

343 
LDR
 
r2
, =
SEG_MASK


344 
LDR
 
r3
, =
IOPMOD


345 
LDR
 
r4
, [
r3
]

346 
ORR
 
r4
,Ñ4, 
r2


347 
STR
 
r4
, [
r3
]

349 
LDR
 
r3
, =
IOPDATA


350 
LDR
 
r4
, [
r3
]

351 
ORR
 
r4
,Ñ4, 
r2


352 
STR
 
r4
, [
r3
]

354 
LDR
 
r2
,=
nSEG_MASK


356 ; -- 
To
 
show
 
h¨dw¨e
 
is
 
c⁄figuªd
 
c‹ª˘ly
 
di•œy
 0 
⁄


357 ; -- 
the
 
£gmít
 
di•œy
.

359 
LDR
 
r5
,
d©a_dis0


360 
BL
 
_e7t_£tSegmítDi•œy


362 ; -- 
C⁄töue
 
to
 
the
 
√xt
 
°age


364 
B
 
ßnd°⁄e_mem‹y


366 ; -- 
D©a
 
Se˘i⁄


368 
d©a_dis0


369 
DCD
 0x00017c00

373 ; * 
Rem≠
 
mem‹y
. 
Fú°
 
ch™ge
 
the
 
£gmít
 
di•œy
 
to
 
show
 1 
™d
 
thí


374 ; * 
°¨t
 
to
 
öôülize
 
mem‹y
.

376 ; * 
ROM
 -> 0x01800000-0x01880000

377 ; * 
SRAM
 
B™k
 1 -> 0x00000000->0x00040000

378 ; * 
SRAM
 
B™k
 2 -> 0x00040000->0x00080000

382 
ßnd°⁄e_mem‹y


384 ; -- 
Së
 
£gmít
 
di•œy
 
to
 
show
 1

386 
LDR
 
r5
,
d©a_dis1


387 
BL
 
_e7t_£tSegmítDi•œy


389 ; -- 
c⁄figuª
 
the
 
mem‹y


391 
B
 
ßnd°⁄e_mem‹ycode


393 ; * 
D©a
 
Se˘i⁄
 
£gmít
 
di•œy


395 
d©a_dis1
 
DCD
 0x00001800

397 
ßnd°⁄e_mem‹ycode


399 ; -- 
Code
 
öôülizög
 
mem‹y
.

400 ; -- 
This
 
code
 
m≠s
 
the
 
ª£t
 
ROM
 
away
 
‰om
 
addªss
 
zîo
. 
It
 
is


401 ; -- 
assummed
 
th©
 
b™k
 1 
c⁄åﬁ
 
is
 
£t
 
to
 0x60 
up
 
⁄


402 ; -- 
powîup


404 
LDR
 
•
,=0x3fec000

406 
LDR
 
r3
, =
ROMCON1


407 
LDR
 
r3
, [r3]

408 
CMP
 
r3
, #0
x0060


410 ; -- 
Eº‹
 
h™dÀr
 
should
 
be
 
∂a˚d
 
hîe


412 
MRS
 
r3
, 
˝§


413 
BIC
 
r3
,Ñ3, #0
x1F


414 
ORR
 
r3
,Ñ3, #0
xD3


415 
MSR
 
˝§_fc
, 
r3


417 ; -- 
C⁄figuª
 
the
 
Sy°em
 
M™gî
 
to
 
ªm≠
 
ÊashROM


418 ; -- 
The
 
Mem‹y
 
B™k
 
C⁄åﬁ
 
Regi°îs
 
mu°
 
be
 
£t
 
usög
 
°‹e


419 ; -- 
mu…pûes
. 
Së
 
up
 
a
 
°ack
 
ö
 
öã∫Æ
 
§am
 
to
 
¥e£rve
 
the


420 ; -- 
‹igöÆ
 
c⁄ã¡s
.

422 
MOV
 
r3
, 
•


423 
LDR
 
•
, =0x03FE2000

424 
STR
 
r3
, [
•
, #-4]! ; 
¥e£rve
 
¥evious
 s∞
⁄


425 ; 
√w
 
°ack
 ...............

426 
STMFD
 
•
!, {
r0
-
r12
,
Ã
}

427 
LDR
 
	gÃ
, =
ßnd°⁄e_öô2


428 
LDR
 
r4
, =0x1800000

429 
ADD
 
Ã
,
	gÃ
,
	gr4


431 ; -- 
Lﬂd
 
ö
 
the
 
èrgë
 
vÆues
 
öto
Åhê
c⁄åﬁ
 
ªgi°îs


433 
ADRL
 
	gr0
, 
mem‹ym≠èbÀ_°r


434 
LDMIA
 
	gr0
, {
	gr1
-
	gr12
}

435 
LDR
 
	gr0
, =
EXTDBWTH


437 ; -- 
ªm≠
 
™d
 
jump
 
to
 
ROM
 
code


439 
STMIA
 
	gr0
, {
	gr1
-
	gr12
}

440 
MOV
 
	gpc
, 
Ã


442 
mem‹ym≠èbÀ_°r


443 
DCD
 
	grEXTDBWTH
 ; 
ROM0
(
HÆf
), 
ROM1
(
W‹d
), ROM1(W‹d), 
ª°
 
DißbÀd


444 
DCD
 
	grROMCON0
 ; 0x1800000 ~ 0x1880000, 
	gRCS0
, 4
	gMbô
, 4c
y˛e


445 
DCD
 
	grROMCON1
 ; 0x0000000 ~ 0x0040000, 
	gRCS1
, 256
	gKB
, 2c
y˛e


446 
DCD
 
	grROMCON2
 ; 0x0040000 ~ 0x0080000, 
	gRCS2
, 256
	gKB
, 2c
y˛e


447 
DCD
 
	grROMCON3
 ;

448 
DCD
 
	grROMCON4
 ;

449 
DCD
 
	grROMCON5
 ;

450 
DCD
 
	grDRAMCON0
 ;

451 
DCD
 
	grDRAMCON1
 ;

452 
DCD
 
	grDRAMCON2
 ;

453 
DCD
 
	grDRAMCON3
 ;

454 
DCD
 
	grREFEXTCON
 ;

456 
	gALIGN


461 ; * 
I¡ülize
 
Communiˇti⁄
 
	gH¨dw¨e


462 ; * 
This
 
code
 
öôülizes
 
the
 
£rül
 
p‹t
 
™d
 
thí
 
ouçuts
 
	ga


463 ; * 
S™d°⁄e
 
b™√r
 
to
 
th©
 
	gp‹t
.

467 
ßnd°⁄e_öô2


469 
LDR
 
	gr5
,
d©a_dis4


470 
BL
 
_e7t_£tSegmítDi•œy


472 
B
 
	gßnd°⁄e_£rülcode


474 ; -- 
D©a
 
Se˘i⁄
 
£gmít
 
di•œy


476 
d©a_dis4
 
	gDCD
 0x00019800

478 
	gßnd°⁄e_£rülcode


480 ; -- 
equivÆít
 
	gto
 *(vﬁ©ûê*Ë(
	gUART0_BASE
 + 
	gUCON
) = 0;

482 
LDR
 
	gr1
, =
UART0_BASE


483 
ADD
 
r1
, 
	gr1
,#UCON

484 
MOV
 
	gr2
, #0

485 
STR
 
	gr2
, [
r1
]

487 ; -- 
equivÆít
 
	gto
 *(vﬁ©ûê*Ë(
	gUART0_BASE
 + 
	gULCON
Ë(
ULCR8bôs
);

489 
LDR
 
	gr1
, =
UART0_BASE


490 
ADD
 
r1
, 
	gr1
,#ULCON

491 
MOV
 
	gr2
, #ULCR8bits

492 
STR
 
	gr2
, [
r1
]

494 ; -- 
equivÆít
 
	gto
 *(vﬁ©ûê*Ë(
	gUART0_BASE
 + 
	gUCON
Ë
UCRRxM
 | 
UCRTxM
;

496 
LDR
 
	gr1
, =
UART0_BASE


497 
ADD
 
r1
, 
	gr1
, #UCON

498 
MOV
 
	gr2
, #(
	gUCRRxM
 | 
	gUCRTxM
)

499 
STR
 
	gr2
, [
r1
]

501 ; -- 
equivÆít
 
	gto
 *(vﬁ©ûê*Ë(
	gUART0_BASE
 + 
	gUBRDIV
Ë
baud
;

503 
LDR
 
	gr1
, =
UART0_BASE


504 
ADD
 
r1
, 
	gr1
, #UBRDIV

505 
MOV
 
	gr2
, #(
	gBAUD_9600
)

506 
STR
 
	gr2
, [
r1
]

508 ; -- 
Pröt
 
B™√r


510 
ADRL
 
	gr0
,
ßnd°⁄e_b™√r


512 
¥öt_lo›


513 
	g¥öt_waô


515 ; -- 
equivÆít
 
to
 
GET_STATUS
(
p
Ë(*(vﬁ©ûê*)((
	gp
Ë+ 
	gUSTAT
))

517 
LDR
 
	gr3
,=
UART0_BASE


518 
ADD
 
r3
,
	gr3
,#USTAT

519 
LDR
 
	gr4
,[
r3
]

521 ; -- 
equivÆít
 
to
 
	$TX_READY
(
s
Ë((sË& 
USRTxHﬁdEm±y
)

523 
MOV
 
r5
, #USRTxHoldEmpty

524 
AND
 
r4
,r4,
r5


525 
CMP
 
r4
,#0

526 
BEQ
 
¥öt_waô


528 ; -- 
equivÆít
 
to
 
PUT
 
	`CHAR
 (*(*)((
p
Ë+ 
UTXBUF
Ë()(
c
))

530 
LDR
 
r3
,=
UART0_BASE


531 
ADD
 
r3
,r3,#UTXBUF

532 
STR
 
r1
,[
r3
]

534 
LDRB
 
r1
,[
r0
]

535 
ADD
 
r0
,r0,#1

536 
CMP
 
r1
,#0

537 
BNE
 
¥öt_lo›


539 
B
 
ßnd°⁄e_lﬂd_™d_boŸ


541 ; -- 
D©a
 
Se˘i⁄
 : 
Text
 
b™√r


543 
ßnd°⁄e_b™√r


544 
DCB
 "\n\r*\n\r"

545 
DCB
 "\n\rSandstone Firmware (0.01)\n\r"

546 
DCB
 "-Ölatform .........É7t\n\r"

547 
DCB
 "- status ...........álive\n\r"

548 
DCB
 "- memory ...........Ñemapped\n\r"

549 
DCB
 "\n\r+ bootingÖayload ...",0

553 ; * 
C›yög
 
™d
 
∑ssög
 
c⁄åﬁ
 
ovî
 
to
 
the
 
Paylﬂd


554 ; * 
This
 
occurs
 
ö
 
two
 
£˘i⁄s
. 
The
 
fú°
 
c›õs
 
the
 
∑ylﬂd
 
to


555 ; * 
addªss
 0x0000000 
™d
 
the
 
£c⁄d
 
£˘i⁄
 
∑ss
 
c⁄åﬁ
 
ovî
 
to


556 ; * 
the
 
∑ylﬂd
 
by
 
upd©ög
Åhê
PC
 
dúe˘ly
.

560 
ALIGN
 4

562 
ßnd°⁄e_lﬂd_™d_boŸ


564 ; -- 
Se˘i⁄
 1 : 
C›y
 
∑ylﬂd
 
to
 
addªss
 0x00000000

566 
MOV
 
r13
,#0

568 
LDR
 
r12
,
∑ylﬂd_°¨t_addªss


569 
LDR
 
r14
,
∑ylﬂd_íd_addªss


571 
block_c›y


572 
LDMIA
 
r12
!,{
r0
-
r11
}

573 
STMIA
 
	gr13
!,{
	gr0
-
	gr11
}

574 
CMP
 
	gr12
,
r14


575 
BLE
 
	gblock_c›y


577 ; -- 
	gSe˘i⁄
 2 : 
Rñögish
 
c⁄åﬁ
 
ovî
 
to
 
the
 
∑ylﬂd


579 
MOV
 
pc
,#0

581 
	gLTORG


583 ; -- 
D©a
 
	gSe˘i⁄
 : 
Paylﬂd
 
öf‹m©i⁄
 
ö£πed
 
©
 
buûd
 
time
.

585 
∑ylﬂd_°¨t_addªss


586 
DCD
 
°¨tAddªss


587 
∑ylﬂd_íd_addªss


588 
DCD
 
ídAddªss


590 ; * -- 
	g_e7t_£tSegmítDi•œy
 ------------------------------------------

592 ; * 
	gDes¸ùti⁄
 : 
£t
 
the
 
£gmít
 
di•œy
 
⁄
Åhê
E7T
 
∂©f‹m


594 ; * 
	gP¨amëîs
 : 
r5
 - 
c⁄èös
 
the
 
√w
 
vÆue
...

595 ; * 
	gRëu∫
 : 
n⁄e
...

596 ; * 
	gNŸes
 : 
n⁄e
...

599 
_e7t_£tSegmítDi•œy


601 
LDR
 
	gr2
,=
nSEG_MASK


602 
LDR
 
r3
,=
IOPDATA


603 
LDR
 
r4
,[
r3
]

604 
AND
 
	gr4
,r4,
r2


605 
STR
 
	gr4
,[
r3
]

606 
LDR
 
	gr5
,
d©a_dis1


607 
ORR
 
	gr4
,r4,
r5


608 
STR
 
	gr4
,[
r3
]

609 
MOV
 
	gpc
,
Ã


611 
°¨tAddªss


612 
	gINCBIN
 ../../
	g∑ylﬂd
/
	g¶os
.
bö


613 
ídAddªss


614 
	gEND


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task1_start.c

72 
	~"../c‹e/muãx.h
"

74 
	~"../hódîs/≠i_ty≥s.h
"

75 
	~"../devi˚s/ddf_io.h
"

76 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

78 
	~"../e7t/evíts/swis.h
"

79 
	~"../hódîs/≠i_devi˚.h
"

81 
	#GREEN1
 0

	)

82 
	#RED
 2

	)

83 
	#ORANGE
 1

	)

84 
	#GREEN2
 3

	)

90 
devi˚_åì°r
 *
	gªd_ho°
;

91 
UID
 
	gæed
;

107 
BOOL
 
	$›íRedLED
()

109 
dñay
;

119 
ªd_ho°
 = 
	`evítIODevi˚O≥n
(&
æed
,
DEVICE_LED_E7T
,
RED
);

135 
æed
)

137 
DEVICE_IN_USE
:

138 
DEVICE_UNKNOWN
:

145  
FALSE
;

148  
TRUE
;

149 
	}
}

161 
	$swôchOnRedLED
()

162 {
	`evítIODevi˚WrôeBô
(
ªd_ho°
,
æed
,(
UINT
)1);
	}
}

174 
	$swôchOffRedLED
()

175 {
	`evítIODevi˚WrôeBô
(
ªd_ho°
,
æed
,(
UINT
)0);
	}
}

188 
	$C_E¡ryTask1
()

190 vﬁ©ûê
dñay
;

192 i‡(
	`›íRedLED
 ()==
TRUE
)

194 
	`swôchOnRedLED
 ();

197 
aWAIT
;

198 
	`swôchOnRedLED
 ();

201 
dñay
=0; delay<0x20ffff; delay++) {}

203 
aSIGNAL
;

204 
	`swôchOffRedLED
 ();

207 
dñay
=0; delay<0x20ffff; delay++) {}

217 
dñay
=0xBEEF0001;

219 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task1_start.h

101 
C_E¡ryTask1
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task2_start.c

72 
	~"../c‹e/muãx.h
"

74 
	~"../hódîs/≠i_ty≥s.h
"

75 
	~"../devi˚s/ddf_io.h
"

76 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

78 
	~"../e7t/evíts/swis.h
"

79 
	~"../hódîs/≠i_devi˚.h
"

81 
	#GREEN1
 0

	)

82 
	#RED
 2

	)

83 
	#ORANGE
 1

	)

84 
	#GREEN2
 3

	)

90 
devi˚_åì°r
 *
	g‹™ge_ho°
;

91 
UID
 
	gﬁed
;

103 
BOOL
 
	$›íOøngeLED
 ()

112 
‹™ge_ho°
 = 
	`evítIODevi˚O≥n
(&
ﬁed
,
DEVICE_LED_E7T
,
ORANGE
);

116 i‡(
‹™ge_ho°
==0Ë{ 
FALSE
;}

120 
ﬁed
)

122 
DEVICE_IN_USE
:

123 
DEVICE_UNKNOWN
:

125  
FALSE
;

128  
TRUE
;

129 
	}
}

141 
	$swôchOnOøngeLED
 ()

142 {
	`evítIODevi˚WrôeBô
(
‹™ge_ho°
,
ﬁed
,(
UINT
)1);
	}
}

154 
	$swôchOffOøngeLED
 ()

155 {
	`evítIODevi˚WrôeBô
(
‹™ge_ho°
,
ﬁed
,(
UINT
)0);
	}
}

169 
	$C_E¡ryTask2
()

171 vﬁ©ûê
dñay
;

173 i‡(
	`›íOøngeLED
 ()==
TRUE
)

177 
bWAIT
;

178 
	`swôchOnOøngeLED
 ();

181 
dñay
=0; delay<0x10ffff; delay++) {}

183 
bSIGNAL
;

184 
	`swôchOffOøngeLED
 ();

187 
dñay
=0; delay<0x10ffff; delay++) {}

197 
dñay
=0xBEEF0002;

199 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task2_start.h

102 
C_E¡ryTask2
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task3_start.c

75 
	~"../c‹e/Æl.h
"

76 
	~"../c‹e/˛i_shñl.h
"

98 
	$b™√r
 ()

100 
	`¥ötToHo°
 ("\n\r");

101 
	`¥ötToHo°
 ("\n\rSimple Little OS (0.09)\n\r");

102 
	`¥ötToHo°
 ("- initialized ...... OK\n\r");

103 
	`¥ötToHo°
 ("-Ñunning on .......É7t \n\r");

104 
	`¥ötToHo°
 ("\n\r");

105 
	`¥ötToHo°
 ("\n\r");

106 
	}
}

121 
	$C_E¡ryTask3
()

123 vﬁ©ûê
dñay
;

133 if(
	`›íHo°
 (
COM0
)==
TRUE
)

135 
	`b™√r
 ();

136 
	`shñl
 ();

146 
	`˛o£Ho°
 ();

150 
dñay
=0xbeef003;

152 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task3_start.h

84 
C_TaskE¡ry3
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/all.h

72 #i‚de‡
_CORE_ALL


74 
	#_CORE_ALL
 1

	)

76 
	~"../hódîs/≠i_ty≥s.h
"

77 
	~"˛i_com.h
"

78 
	~"˛i_ªadlöe.h
"

79 
	~"../devi˚s/ddf_io.h
"

80 
	~<as£π.h
>

81 
	~<time.h
>

85 
	~"../≠ps/èsk1_°¨t.h
"

89 
	~"˛i_com.h
"

93 
	~"../e7t/hódîs/Æl.h
"

94 
	~"../hódîs/≠i_devi˚.h
"

95 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cinit.c

75 
	~"Æl.h
"

76 
	~"../e7t/evíts/evít_öô.h
"

84 
	#DEVICESINIT
 1

	)

85 
	#SERVICESINIT
 2

	)

86 
	#TICKINIT
 3

	)

87 
	#CINITINIT
 4

	)

88 
	#TICKSTART
 5

	)

89 
	#ENTERTASK
 6

	)

91 
	#LOW_LEVEL_INITIALIZATION
 1

	)

92 
	#BOOT_SLOS
 2

	)

104 
	gSTATE
;

120 
	$cöô_öô
()

123 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

135 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

145 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

154 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

155 
	}
}

167 
	$C_E¡ry
()

183 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

193 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

202 
STATE
=
BOOT_SLOS
;

204 
asm
 volatile ("MSR CPSR_c,#0x50");

213 
	`Œåa˚
(
	`C_E¡ryTask1
(),
ENTERTASK
);

223 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_com.c

73 
	~<°d¨g.h
>

75 
	~"Æl.h
"

76 
	~"˛i_£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_readline.c

72 
	~"Æl.h
"

74 
	#START
 ('A'-'@')

	)

75 
	#BACK
 ('B'-'@')

	)

76 
	#ERASE_FWD
 ('D'-'@')

	)

77 
	#END
 ('E'-'@')

	)

78 
	#FORWARD
 ('F'-'@')

	)

79 
	#ERASE
 ('H'-'@')

	)

80 
	#ERASE_EOL
 ('K'-'@')

	)

81 
	#ENTER
 ('M'-'@')

	)

82 
	#REDRAW
 ('R'-'@')

	)

83 
	#ERASE_LINE
 ('U'-'@')

	)

84 
	#ERASE_SOL
 ('W'-'@')

	)

86 
	#BACKSPACE
 ('H'-'@')

	)

87 
	#DELETE
 (0x7f)

	)

88 
	#LF
 ('\n')

	)

89 
	#CR
 ('\r')

	)

90 
	#CTRL_D
 ('D'-'@')

	)

92 
ªadC
();

93 
wrôeC
(
c
);

99 
	$x°æí
 (*
p
)

101 
n
=0;

103 *
p
++!=0Ë
n
++;

105  (
n
);

106 
	}
}

108 
	$x°r˝y
 (*
s
, *
t
)

110 (*
s
++ = *
t
++))

112 
	}
}

114 
	$xmemmove
(*
s
, *
t
,
n
)

116 
n
--Ë*
s
++ = *
t
++;

117 
	}
}

130 
	$back•a˚
 (
n
)

132 
n
--Ë
	`wrôeC
(
BACKSPACE
);

133 
	}
}

146 
	$backup
(*
buf„r
, 
pos
)

148 
	`back•a˚
(
	`x°æí
(&
buf„r
[
pos
]));

149 
	}
}

162 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

164 
c
;

166 
c
 = 
buf„r
[
pos
++];

168 
c
)

170 
	`wrôeC
(
c
);

171 
c
 = 
buf„r
[
pos
++];

173 
	}
}

187 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

189 
c
;

191 
	`wrôeC
(
CR
);

193 
c
 = *
¥om±
++;

195 
c
)

197 
	`wrôeC
(
c
);

198 
c
 = *
¥om±
++;

201 
	`ªdøw_eﬁ
(
buf„r
, 0);

202 
	`backup
(
buf„r
, 
pos
);

203 
	}
}

216 
	$dñëe
 (*
buf„r
, 
pos
)

218 i‡(
buf„r
[
pos
] == 0) ;

220 
	`x°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

221 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

222 
	`wrôeC
(' ');

223 
	`wrôeC
(
BACKSPACE
);

224 
	`backup
(
buf„r
, 
pos
);

227 
	}
}

241 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

243 *
s
 = &
buf„r
[
pos
];

245 
	`xmemmove
(
s
+1, s, 
	`x°æí
(s)+1);

246 
buf„r
[
pos
] = 
c
;

247 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

248 
pos
++;

249 
	`backup
(
buf„r
, 
pos
);

251  
pos
;

252 
	}
}

265 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

267 
pos
 = 0;

268 
c
;

272 
c
=
	`ªadC
();

274 i‡(
c
 =
CR
 || c =
LF
)

276 
buf„r
[
pos
] = 0;

277  
pos
;

280 i‡(
c
 =
CTRL_D
)

282 
buf„r
[0] = 0;

286 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

287 
buf„r
[
pos
++] = 
c
;

289 
	}
}

304 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

306 
i
;

307 
pos
 = 0;

308 
c
;

310 *
buf„r
 = 0;

311 
	`wrôe0
(
¥om±
);

315 
c
 = 
	`ªadC
();

316 i‡(
c
 =
DELETE
Ë¯
ERASE
;

317 i‡(
c
 < ' ')

319 
c
)

321 
START
:

322 
	`back•a˚
(
pos
);

323 
pos
 = 0;

325 
BACK
:

326 i‡(
pos
 > 0)

328 
	`wrôeC
(
BACKSPACE
);

329 
pos
--;

332 
ERASE_FWD
:

333 i‡(
	`x°æí
(
buf„r
) == 0)

335 
	`wrôe0
("*EOF*\r\n");

338 
	`dñëe
(
buf„r
, 
pos
);

340 
END
:

341 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

342 
pos
 = 
	`x°æí
(
buf„r
);

344 
FORWARD
:

345 i‡(
buf„r
[
pos
])

347 
	`wrôeC
(
buf„r
[
pos
]);

348 
pos
++;

351 
ERASE
:

352 i‡(
pos
 > 0)

354 
	`wrôeC
(
BACKSPACE
);

355 
pos
--;

356 
	`dñëe
(
buf„r
, 
pos
);

359 
ENTER
:

360 
	`wrôeC
(
CR
);

361 
	`wrôeC
(
LF
);

362  
	`x°æí
(
buf„r
);

363 
REDRAW
:

364 
	`wrôeC
(
LF
);

365 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

367 
ERASE_LINE
:

368 
	`back•a˚
(
pos
);

369 
i
 = 
pos
 = 
	`x°æí
(
buf„r
);

371 
i
--Ë
	`wrôeC
(' ');

373 
	`back•a˚
(
pos
);

374 
pos
 = 0;

375 
buf„r
[0] = 0;

378 } i‡(
	`x°æí
(
buf„r
Ë< 
maxÀn
)

379 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

381 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_serial.c

72 
	~"../hódîs/≠i_ty≥s.h
"

73 
	~"../devi˚s/ddf_io.h
"

74 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

76 
	~"../e7t/evíts/swis.h
"

77 
	~"../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
(
UINT
 
com
)

109 i‡(
com
>1Ë{ 
FALSE
;}

111 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_E7T
,
com
);

115 i‡(
ho°
==0Ë{ 
FALSE
;}

119 
£rül
)

121 
DEVICE_IN_USE
:

122 
DEVICE_UNKNOWN
:

124  
FALSE
;

127  
TRUE
;

128 
	}
}

140 
	$wrôeCh¨ToHo°
(
c
)

142 
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);

143 
	}
}

155 
	$¥ötToHo°
(*
s
)

157 *
s
!=0)

159 
	`wrôeCh¨ToHo°
 (*
s
++);

161 
	}
}

173 
	$ªadCh¨FromHo°
()

175  ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);

176 
	}
}

189 
	$˛o£Ho°
()

191 i‡(
ho°
==0Ë 
FALSE
;

193  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

194 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_shell.c

71 
	~"Æl.h
"

72 
	~"˛i_ªadlöe.h
"

88 
	$shñl
()

90 
CÆlBack
 
cb
;

91 
Àn
;

95 
Àn
 = 
	`ªadLöe
("e7t: ", 
comm™d_löe
, 255);

96 
cb
 = 
	`CLI
(
comm™d_löe
);

97 } !
cb
);

98 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_shell.h

72 
	~"˛i_£rül.h
"

88 
shñl
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/mutex.c

86 vﬁ©ûê
	g£m≠h‹e
 = 2;

102 
	$muãx_g©ñock
 ()

104 
£maAddr
 = (Ë&
£m≠h‹e
;

106 
asm
 volatile

115 : "r" (
£maAddr
)

117 
	}
}

129 
	$muãx_g©eu∆ock
 ()

131 
£maAddr
 = (Ë&
£m≠h‹e
;

133 
asm
 volatile

139 : "r" (
£maAddr
)

141 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/mutex.h

76 
	#aWAIT
 
£m≠h‹e
==1Ë{} 
	`muãx_g©ñock
();

	)

77 
	#aSIGNAL
 
	`muãx_g©eu∆ock
();

	)

79 
	#bWAIT
 
£m≠h‹e
==1||£m≠h‹e==2Ë{} \

	)

80 
muãx_g©ñock
();

82 
	#bSIGNAL
 
	`muãx_g©eu∆ock
();

	)

88 vﬁ©ûê
£m≠h‹e
;

100 
muãx_g©ñock
 ();

112 
muãx_g©eu∆ock
 ();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/swiapi.c

2 
	~"../e7t/evíts/swis.h
"

3 
	~"../devi˚s/ddf_‰ame.h
"

5 
	#UINT
 

	)

9 
	mr
[4];

10 } 
	tªgi°î°r
;

12 
ªgi°î°r
 
	grs
;

14 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

32 
	$evítIODevi˚Inô
()

34 
ªgi°î°r
 
tmpReg
;

36 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

37 
tmpReg
.
r
[1] = 0;

38 
tmpReg
.
r
[2] = 0;

39 
tmpReg
.
r
[3] = 0;

41 
	`c‹eCÆlSWI
 (&
tmpReg
);

43 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

44 
	}
}

67 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

69 
ªgi°î°r
 
tmpReg
;

71 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

72 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

73 
tmpReg
.
r
[2] = 
b
;

74 
tmpReg
.
r
[3] = 
c
;

76 
	`c‹eCÆlSWI
(&
tmpReg
);

78  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

79 
	}
}

99 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

101 
ªgi°î°r
 
tmpReg
;

103 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

104 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

105 
tmpReg
.
r
[2] = 
b
;

106 
tmpReg
.
r
[3] = 0;

108 
	`c‹eCÆlSWI
(&
tmpReg
);

110  (Ë
tmpReg
.
r
[0];

111 
	}
}

127 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

129 
ªgi°î°r
 
tmpReg
;

131 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

132 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

133 
tmpReg
.
r
[2] = 
b
;

134 
tmpReg
.
r
[3] = 
c
;

136 
	`c‹eCÆlSWI
(&
tmpReg
);

137 
	}
}

152 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

154 
ªgi°î°r
 
tmpReg
;

156 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

157 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

158 
tmpReg
.
r
[2] = 
b
;

159 
tmpReg
.
r
[3] = 0;

161 
	`c‹eCÆlSWI
(&
tmpReg
);

163  (
UINT
Ë
tmpReg
.
r
[0];

164 
	}
}

180 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

182 
ªgi°î°r
 
tmpReg
;

184 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

185 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

186 
tmpReg
.
r
[2] = 
b
;

187 
tmpReg
.
r
[3] = 
c
;

189 
	`c‹eCÆlSWI
(&
tmpReg
);

190 
	}
}

205 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

207 
ªgi°î°r
 
tmpReg
;

209 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

210 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

211 
tmpReg
.
r
[2] = 
b
;

212 
tmpReg
.
r
[3] = 0;

214 
	`c‹eCÆlSWI
(&
tmpReg
);

216  (
UINT
Ë
tmpReg
.
r
[0];

217 
	}
}

232 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

234 
ªgi°î°r
 
tmpReg
;

236 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

237 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

238 
tmpReg
.
r
[2] = 
b
;

239 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

241 
	`c‹eCÆlSWI
(&
tmpReg
);

242 
	}
}

257 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

259 
ªgi°î°r
 
tmpReg
;

261 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

262 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

263 
tmpReg
.
r
[2] = 
b
;

264 
tmpReg
.
r
[3] = 0;

266 
	`c‹eCÆlSWI
(&
tmpReg
);

268  (*)
tmpReg
.
r
[0];

269 
	}
}

271 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

273 
ªgi°î°r
 
tmpReg
;

275 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

276 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

277 
tmpReg
.
r
[2] = 
b
;

278 
tmpReg
.
r
[3] = 0;

280 
	`c‹eCÆlSWI
(&
tmpReg
);

281 
	}
}

295 
	$brögUpF©ÆEº‹
(
UID
 
a
)

297 
ªgi°î°r
 
tmpReg
;

299 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

300 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

301 
tmpReg
.
r
[2] = 0;

302 
tmpReg
.
r
[3] = 0;

304 
	`c‹eCÆlSWI
(&
tmpReg
);

305 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/uid.h

72 
	~"../hódîs/≠i_ty≥s.h
"

78 
	#NONE
 0

	)

102 
UID
 
uid_gíî©e
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/data.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eD©aAb‹tH™dÀr


23 
c‹eD©aAb‹tH™dÀr
:

24 
B
 
c‹eD©aAb‹tH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a
 {

97 
	msize
;

98 *
	md©a
;

99 } 
	tblock_d©a°r
;

109 
	sdevi˚_åì
 {

118 
	m«me
[12];

127 
UID
 
	mdrivî_id
;

137 (*
	möô
) ();

151 
UID
 (*
›í
) (, );

164 (*
	m˛o£
Ë(
	mUID
);

181 (*
	mbyã
Ë(
	mUID
, 
	mBYTE
);

191 (*
	mbô
Ë(
	mUID
, 
	mBYTE
);

201 (*
	mblock
Ë(
	mUID
, 
	mblock_d©a°r
 *);

203 } 
	mwrôe
;

221 
BYTE
 (*
byã
Ë(
	mUID
);

232 
BYTE
 (*
bô
Ë(
	mUID
);

242 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

244 } 
	mªad
;

246 } 
	tdevi˚_åì°r
 ;

248 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_io.c

73 
	~"../e7t/devi˚s/ddf_åì.h
"

89 
	$ioInôülizeDrivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
(
id
);

147 
	}
}

161 
	$ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
(
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
(
id
);

185 
	}
}

199 
	$ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
byã
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
(
id
,
byã
);

204 
	}
}

217 
BYTE
 
	$ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

219 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

221  
d
->
ªad
.
	`byã
(
id
);

222 
	}
}

236 
	$ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

238 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

240 
d
->
wrôe
.
	`block
(
id
,
block
);

241 
	}
}

254 
block_d©a°r
 *
	$ioRódBlock
 (
devi˚_åì°r
 *
d
,
UID
 
id
)

256 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

258  
d
->
ªad
.
	`block
(
id
);

259 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_io.h

72 
	~"ddf_‰ame.h
"

88 
ioInôülizeDrivîs
();

102 
devi˚_åì°r
 *
ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
);

115 
ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

129 
ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

143 
BYTE
 
ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

157 
ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
byã
);

170 
BYTE
 
ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

184 
ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
);

197 
block_d©a°r
 *
ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/ddf_tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"../devi˚s/Àd_drivî.h
"

74 
	~"../devi˚s/£gmít_drivî.h
"

75 
	~"../devi˚s/£rül_drivî.h
"

81 
	~"../devi˚s/ddf_ty≥s.h
"

93 
devi˚_åì°r
 
	gdevi˚s
[] =

103 
DEVICE_LED_E7T
,

104 
Àd_öô
,

105 
Àd_›í
,

106 
Àd_˛o£
,

107 {
Àd_wrôe_bô
},

108 {
Àd_ªad_bô
}

119 
DEVICE_SEGMENT_E7T
,

120 
£gmít_öô
,

121 
£gmít_›í
,

122 
£gmít_˛o£
,

123 {
£gmít_wrôe_byã
},

124 {
£gmít_ªad_byã
}

134 
DEVICE_SERIAL_E7T
,

135 
£rül_öô
,

136 
£rül_›í
,

137 
£rül_˛o£
,

138 {
£rül_wrôe_byã
},

139 {
£rül_ªad_byã
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/ddf_types.h

68 #i‚de‡
_DEVICE_DDF_E7T_TYPES


70 
	#_DEVICE_DDF_E7T_TYPES
 1

	)

72 
	#DEVICE_LED_E7T
 55075

	)

73 
	#DEVICE_SEGMENT_E7T
 55090

	)

74 
	#DEVICE_SERIAL_E7T
 55095

	)

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

84 #i‚de‡
SYSCFG


85 
	#SYSCFG
 0x03ff0000

	)

90 
	#IOPMOD
 (vﬁ©ûê*)(
SYSCFG
 + 0x5000)

	)

91 
	#IOPDATA
 (vﬁ©ûê*)(
SYSCFG
 + 0x5008)

	)

92 
	#LEDBANK
 *
IOPDATA


	)

96 
	#LED_4_ON
 (
LEDBANK
=LEDBANK|0x00000010)

	)

97 
	#LED_3_ON
 (
LEDBANK
=LEDBANK|0x00000020)

	)

98 
	#LED_2_ON
 (
LEDBANK
=LEDBANK|0x00000040)

	)

99 
	#LED_1_ON
 (
LEDBANK
=LEDBANK|0x00000080)

	)

103 
	#LED_4_OFF
 (
LEDBANK
=LEDBANK&~0x00000010)

	)

104 
	#LED_3_OFF
 (
LEDBANK
=LEDBANK&~0x00000020)

	)

105 
	#LED_2_OFF
 (
LEDBANK
=LEDBANK&~0x00000040)

	)

106 
	#LED_1_OFF
 (
LEDBANK
=LEDBANK&~0x00000080)

	)

114 
	mÀd
[4];

115 
	muid
[4];

116 } 
	töã∫Æ_Àd°r
;

122 
öã∫Æ_Àd°r
 
	gdiodes
;

136 
	$Àd_öô
()

138 *
IOPMOD
 = 0xf0;

139 *
IOPDATA
 = 0x50;

143 
LED_4_OFF
;

144 
LED_3_OFF
;

145 
LED_2_OFF
;

146 
LED_1_OFF
;

150 
diodes
.
Àd
 [
GREEN1
] = 
OFF
;

151 
diodes
.
Àd
 [
RED
] = 
OFF
;

152 
diodes
.
Àd
 [
ORANGE
] = 
OFF
;

153 
diodes
.
Àd
 [
GREEN2
] = 
OFF
;

155 
diodes
.
uid
 [
GREEN1
] = 
NONE
;

156 
diodes
.
uid
 [
RED
] = 
NONE
;

157 
diodes
.
uid
 [
ORANGE
] = 
NONE
;

158 
diodes
.
uid
 [
GREEN2
] = 
NONE
;

160 
	}
}

173 
UID
 
	$Àd_›í
(
maj‹
,
mö‹
)

176 i‡(
maj‹
==
DEVICE_LED_E7T
)

178 i‡(
mö‹
 <4)

180 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

182 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

183  
diodes
.
uid
[
mö‹
];

187  
DEVICE_IN_USE
;

192  
DEVICE_UNKNOWN
;

196  
DEVICE_NEXT
;

197 
	}
}

213 
	$Àd_˛o£
(
UID
 
id
)

215 
x
;

217 
x
=0;x<=3;x++)

219 i‡(
diodes
.
uid
[
x
]==
id
)

221 
diodes
.
uid
 [
x
] = 
NONE
;

222  
DEVICE_SUCCESS
;

226  
DEVICE_UNKNOWN
;

227 
	}
}

241 
	$Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
)

243 
x
;

245 
x
=0;x<=3;x++)

247 i‡(
diodes
.
uid
[
x
]==
id
)

249 i‡(
diodes
.
uid
[
x
]!=
NONE
)

251 
Àd_£t
 &= 1;

253 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

255 i‡(
Àd_£t
==
ON
)

257 
x
)

259 
GREEN2
 : 
LED_4_ON
; ;

260 
RED
 : 
LED_2_ON
; ;

261 
ORANGE
 : 
LED_3_ON
; ;

262 
GREEN1
 : 
LED_1_ON
; ;

267 
x
)

269 
GREEN2
 : 
LED_4_OFF
; ;

270 
RED
 : 
LED_2_OFF
; ;

271 
ORANGE
 : 
LED_3_OFF
; ;

272 
GREEN1
 : 
LED_1_OFF
; ;

278 
	}
}

290 
BYTE
 
	$Àd_ªad_bô
(
UID
 
id
)

292 
x
;

294 
x
=0;x<=3;x++)

296 i‡(
diodes
.
uid
[
x
]==
id
)

298 i‡(
diodes
.
uid
[
x
]!=
NONE
)

300  
diodes
.
Àd
 [
x
];

310 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/led_driver.h

69 #i‚de‡
_DEVICE_E7T_LED


71 
	#_DEVICE_E7T_LED
 1

	)

73 
	#DEVICE_LED_E7T
 55075

	)

76 
	#GREEN1
 0

	)

77 
	#RED
 2

	)

78 
	#ORANGE
 1

	)

79 
	#GREEN2
 3

	)

81 
	#ON
 1

	)

82 
	#OFF
 0

	)

96 
Àd_öô
();

109 
UID
 
Àd_›í
(
devi˚
,
Àd
);

123 
Àd_˛o£
(
UID
 
id
);

137 
Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
);

149 
BYTE
 
Àd_ªad_bô
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/segment_driver.c

73 
	~"../../devi˚s/ddf_‰ame.h
"

74 
	~"£gmít_drivî.h
"

76 
	#DEVICE_SEGMENT_E7T
 55090

	)

84 
	#SYSCFG
 0x03ff0000

	)

85 
	#IOPMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x5000))

	)

86 
	#IOPDATA
 ((vﬁ©ûê*)(
SYSCFG
+0x5008))

	)

87 
	#SEG_MASK
 (0x1fc00)

	)

91 
	#SEG_A
 (1<<10)

	)

92 
	#SEG_B
 (1<<11)

	)

93 
	#SEG_C
 (1<<12)

	)

94 
	#SEG_D
 (1<<13)

	)

95 
	#SEG_E
 (1<<14)

	)

96 
	#SEG_F
 (1<<16)

	)

97 
	#SEG_G
 (1<<15)

	)

99 
	#DISP_0
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
)

	)

100 
	#DISP_1
 (
SEG_B
|
SEG_C
)

	)

101 
	#DISP_2
 (
SEG_A
|
SEG_B
|
SEG_D
|
SEG_E
|
SEG_G
)

	)

102 
	#DISP_3
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_G
)

	)

103 
	#DISP_4
 (
SEG_B
|
SEG_C
|
SEG_F
|
SEG_G
)

	)

104 
	#DISP_5
 (
SEG_A
|
SEG_C
|
SEG_D
|
SEG_F
|
SEG_G
)

	)

105 
	#DISP_6
 (
SEG_A
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

106 
	#DISP_7
 (
SEG_A
|
SEG_B
|
SEG_C
)

	)

107 
	#DISP_8
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

108 
	#DISP_9
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_F
|
SEG_G
)

	)

110 
	#DISP_A
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

111 
	#DISP_B
 (
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

112 
	#DISP_C
 (
SEG_A
|
SEG_D
|
SEG_E
|
SEG_F
)

	)

113 
	#DISP_D
 (
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_G
)

	)

114 
	#DISP_E
 (
SEG_A
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

115 
	#DISP_F
 (
SEG_A
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

117 
	#ON
 1

	)

118 
	#OFF
 0

	)

125 
	m£g
;

126 
	muid
;

127 } 
	töã∫Æ_£gmít°r
;

133 
öã∫Æ_£gmít°r
 
	gdi•œy
;

137 
	gnumîic_di•œy
 [16] =

139 
DISP_0
,

140 
DISP_1
,

141 
DISP_2
,

142 
DISP_3
,

143 
DISP_4
,

144 
DISP_5
,

145 
DISP_6
,

146 
DISP_7
,

147 
DISP_8
,

148 
DISP_9
,

149 
DISP_A
,

150 
DISP_B
,

151 
DISP_C
,

152 
DISP_D
,

153 
DISP_E
,

154 
DISP_F


157 
£gmít_£t
 (
BYTE
 
£g
);

171 
	$£gmít_öô
 ()

175 *
IOPMOD
 |
SEG_MASK
;

176 *
IOPDATA
 |
SEG_MASK
;

180 
di•œy
.
uid
 = 
NONE
;

181 
di•œy
.
£g
 = 0;

182 
	`£gmít_£t
 (0);

184 
	}
}

199 
UID
 
	$£gmít_›í
(
maj‹
,
ign‹e
)

202 i‡(
maj‹
==
DEVICE_SEGMENT_E7T
)

204 i‡(
di•œy
.
uid
==
NONE
)

206 
di•œy
.
uid
 = 
	`uid_gíî©e
 ();

207  
di•œy
.
uid
;

211  
DEVICE_IN_USE
;

215  
DEVICE_NEXT
;

216 
	}
}

230 
	$£gmít_˛o£
(
UID
 
id
)

232 i‡(
di•œy
.
uid
==
id
)

234 
di•œy
.
uid
 = 
NONE
;

235  
DEVICE_SUCCESS
;

238  
DEVICE_UNKNOWN
;

239 
	}
}

251 
	$£gmít_£tdi•œy
(
d
)

253 *
IOPDATA
 &~
SEG_MASK
;

254 *
IOPDATA
 |
d
;

255 
	}
}

269 
	$£gmít_£t
(
BYTE
 
£g
)

271 i‡(
£g
 <= 0xf )

272 
	`£gmít_£tdi•œy
(
numîic_di•œy
[
£g
]);

274 
	}
}

288 
	$£gmít_wrôe_byã
(
UID
 
id
,
BYTE
 
£g
)

290 i‡(
di•œy
.
uid
==
id
)

292 
di•œy
.
£g
 = seg;

293 
	`£gmít_£t
 (
£g
);

295 
	}
}

307 
BYTE
 
	$£gmít_ªad_byã
(
UID
 
id
)

309 i‡(
di•œy
.
uid
==
id
)

311  
di•œy
.
£g
;

319 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/segment_driver.h

81 
£gmít_öô
();

94 
UID
 
£gmít_›í
(
devi˚
,
ign‹ed
);

108 
£gmít_˛o£
(
UID
 
id
);

121 
£gmít_wrôe_byã
(
UID
 
id
,
BYTE
 
£gmít
);

133 
BYTE
 
£gmít_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/serial_driver.c

73 
	~"../../devi˚s/ddf_‰ame.h
"

74 
	~"£rül_drivî.h
"

76 
	#DEVICE_SERIAL_E7T
 55095

	)

82 
	#ON
 1

	)

83 
	#OFF
 0

	)

85 
	#SYSCFG
 (0x03ff0000)

	)

86 
	#UART0_BASE
 (
SYSCFG
 + 0xD000)

	)

87 
	#UART1_BASE
 (
SYSCFG
 + 0xE000)

	)

93 
	#ULCON
 0x00

	)

94 
	#UCON
 0x04

	)

95 
	#USTAT
 0x08

	)

96 
	#UTXBUF
 0x0C

	)

97 
	#URXBUF
 0x10

	)

98 
	#UBRDIV
 0x14

	)

104 
	#ULCR8bôs
 (3)

	)

105 
	#ULCRS1St›Bô
 (0)

	)

106 
	#ULCRNoP¨ôy
 (0)

	)

112 
	#UCRRxM
 (1)

	)

113 
	#UCRRxSI
 (1 << 2)

	)

114 
	#UCRTxM
 (1 << 3)

	)

115 
	#UCRLPB
 (1 << 7)

	)

121 
	#USROvîrun
 (1 << 0)

	)

122 
	#USRP¨ôy
 (1 << 1)

	)

123 
	#USRFømög
 (1 << 2)

	)

124 
	#USRBªak
 (1 << 3)

	)

125 
	#USRDTR
 (1 << 4)

	)

126 
	#USRRxD©a
 (1 << 5)

	)

127 
	#USRTxHﬁdEm±y
 (1 << 6)

	)

128 
	#USRTxEm±y
 (1 << 7)

	)

132 
	#BAUD_9600
 (162 << 4)

	)

138 
	#GET_STATUS
(
p
Ë(*(vﬁ©ûê*)(’Ë+ 
USTAT
))

	)

139 
	#RX_DATA
(
s
Ë((sË& 
USRRxD©a
)

	)

140 
	#GET_CHAR
(
p
Ë(*(vﬁ©ûê*)(’Ë+ 
URXBUF
))

	)

141 
	#TX_READY
(
s
Ë((sË& 
USRTxHﬁdEm±y
)

	)

142 
	#PUT_CHAR
(
p
,
c
Ë(*(*)(’Ë+ 
UTXBUF
Ë()(c))

	)

144 
	#COM1
 (1)

	)

145 
	#COM0
 (0)

	)

153 
	mbaudøã
[2];

154 
	muid
[2];

155 } 
	töã∫Æ_£rül°r
;

161 
öã∫Æ_£rül°r
 
	gnode
;

174 
	$öã∫ÆSîülE7TSëup
(
p‹t
, 
baud
)

177 *(vﬁ©ûê*Ë(
p‹t
 + 
UCON
) = 0;

180 *(vﬁ©ûê*Ë(
p‹t
 + 
ULCON
Ë(
ULCR8bôs
);

183 *(vﬁ©ûê*Ë(
p‹t
 + 
UCON
Ë
UCRRxM
 | 
UCRTxM
;

186 *(vﬁ©ûê*Ë(
p‹t
 + 
UBRDIV
Ë
baud
;

187 
	}
}

200 
	$£rül_öô
()

205 
	`öã∫ÆSîülE7TSëup
(
UART0_BASE
,
BAUD_9600
);

208 
	`öã∫ÆSîülE7TSëup
(
UART1_BASE
,
BAUD_9600
);

212 
node
.
baudøã
[0] = 
BAUD_9600
;

213 
node
.
baudøã
[1] = 
BAUD_9600
;

214 
node
.
uid
[
COM0
] = 
NONE
;

215 
node
.
uid
[
COM1
] = 
NONE
;

216 
	}
}

231 
UID
 
	$£rül_›í
(
maj‹
,
com
)

233 i‡(
maj‹
==
DEVICE_SERIAL_E7T
)

235 i‡(
com
==
COM0
 || com==
COM1
)

237 i‡(
node
.
uid
[
com
]!=
NONE
)

239  
DEVICE_IN_USE
;

243 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

244  
node
.
uid
[
com
];

249  
DEVICE_NEXT
;

250 
	}
}

264 
	$£rül_˛o£
(
UID
 
id
)

266 i‡(
node
.
uid
[
COM0
]==
id
)

268 
node
.
uid
[
COM0
] = 
NONE
;

269  
DEVICE_SUCCESS
;

272 i‡(
node
.
uid
[
COM1
]==
id
)

274 
node
.
uid
[
COM1
] = 
NONE
;

275  
DEVICE_SUCCESS
;

278  
DEVICE_UNKNOWN
;

279 
	}
}

294 
	$öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
)

296 
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

298 
	`PUT_CHAR
(
p‹t
,
c
);

299 
	}
}

313 
	$£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
)

316 i‡(
node
.
uid
[
COM0
]==
id
)

318 
	`öã∫Æ_£rül_wrôe
 (
UART0_BASE
,
d©a
);

322 i‡(
node
.
uid
[
COM1
]==
id
)

324 
	`öã∫Æ_£rül_wrôe
 (
UART1_BASE
,
d©a
);

328 
	}
}

340 
BYTE
 
	$öã∫Æ_£rül_ªad
(
p‹t
)

343  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

345  
	`GET_CHAR
(
p‹t
);

346 
	}
}

358 
BYTE
 
	$£rül_ªad_byã
(
UID
 
id
)

360 i‡(
node
.
uid
[
COM0
]==
id
)

362  
	`öã∫Æ_£rül_ªad
 (
UART0_BASE
);

365 i‡(
node
.
uid
[
COM1
]==
id
)

367  
	`öã∫Æ_£rül_ªad
 (
UART1_BASE
);

371 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/serial_driver.h

68 
	#COM1
 (1)

	)

69 
	#COM0
 (0)

	)

82 
£rül_öô
();

97 
UID
 
£rül_›í
(
maj‹
,
com
);

111 
£rül_˛o£
(
UID
 
id
);

126 
öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
);

140 
£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
);

152 
BYTE
 
£rül_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/button_service.c

77 
	~"../../hódîs/≠i_ty≥s.h
"

78 
	~"../../devi˚s/ddf_io.h
"

79 
	~"../devi˚s/ddf_ty≥s.h
"

81 
	~"../devi˚s/Àd_drivî.h
"

83 
	~"swis.h
"

84 
	~"../../hódîs/≠i_devi˚.h
"

86 
	~"../hódîs/ma¸os.h
"

88 
STATE
;

94 
devi˚_åì°r
 *
	gÀdNode
;

95 
UID
 
	gÀdUID
;

107 
	$evítBuâ⁄MaskIrq
(
úq
)

115 *(vﬁ©ûê*)
INTMSK
 |(1<<
úq
);

116 
	}
}

118 
	$evítBuâ⁄UnmaskIrq
(
úq1
,
úq2
)

128 *(vﬁ©ûê*)
INTMSK
 &~((1<<
INT_GLOBAL
)|(1<<
úq1
)|(1<<
úq2
));

129 
	}
}

141 
	$evítBuâ⁄Inô
()

166 *(vﬁ©ûê*)
INTMSK
 &~((1 << 
INT_GLOBAL
) | (1<<10) | (1<<0));

168 *(vﬁ©ûê*)
IOPCON
 |
IO_ENABLE_INT0
;

169 *(vﬁ©ûê*)
IOPCON
 |
IO_ACTIVE_HIGH_INT0
;

170 *(vﬁ©ûê*)
IOPCON
 |
IO_RISING_EDGE_INT0
;

179 
ÀdNode
 = 
	`evítIODevi˚O≥n
(&
ÀdUID
,
DEVICE_LED_E7T
,
GREEN1
);

181 
	}
}

193 
	$evítBuâ⁄Pªs£d
()

195 
BYTE
 
LED1
;

204 
STATE
 = 1;

206 
LED1
 = 
	`evítIODevi˚RódBô
 (
ÀdNode
,
ÀdUID
);

208 i‡(
LED1
==1)

217 
	`evítIODevi˚WrôeBô
 (
ÀdNode
,
ÀdUID
,0);

228 
	`evítIODevi˚WrôeBô
 (
ÀdNode
,
ÀdUID
,1);

231 
STATE
 = 2;

232 
	}
}

244 
	$evítBuâ⁄Sîvi˚
()

254 *(vﬁ©ûê*Ë
INTPND
 &
INT_SW3_MASK
;

263 
	`evítBuâ⁄Pªs£d
();

264 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/button_service.h

82 
evítBuâ⁄Inô
();

94 
evítBuâ⁄Sîvi˚
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/event_init.c

71 
	~"buâ⁄_£rvi˚.h
"

91 
	$evítSîvi˚sInô
()

93 
	`evítBuâ⁄Inô
();

94 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/event_init.h

67 
evítSîvi˚sInô
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/irq_handler.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
h™dÀr
.
s


55 @ * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 @ * 
OS
 : 
SLOS


57 @ * 
Pœtf‹m
 : 
e7t


58 @ * 
Hi°‹y
 :

60 @ * 21 
De˚mbî
 2001 
Andªw
 
N
. 
Sloss


61 @ * - 
°¨ãd
 
w‹kög
 
⁄
 
the
 
h™dÀrs


66 @ * 
EXPORT


69 .
ãxt


70 .
code
 32

71 .
Æign
 0

72 .
globÆ
 
evítsIRQH™dÀr


75 @ * 
IMPORT


78 .
evítTickSîvi˚


79 .
evítBuâ⁄Sîvi˚


80 .
kî√lScheduÀr


83 @ * 
ROUTINES


86 @ -- 
addªss
 
of
 
the
 
IRQ
 
c⁄åﬁÀr
 thê
Samsung
 
KS32C50100
.

88 
INTPND
:

89 .
w‹d
 0x03ff4004 @ 
IRQ
 
c⁄åﬁÀr


91 @ -- 
evíts_úq_h™dÀr
 -------------------------------------------------------

93 @ 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


94 @ 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

97 
evítsIRQH™dÀr
:

99 
SUB
 
r14
,Ñ14, #4

100 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} @ savêc⁄ãxt

101 
LDR
 
	gr0
, 
INTPND


102 
LDR
 
	gr0
, [
r0
] @ 
gë
 
IRQ
 
sour˚


103 
TST
 
	gr0
, #0
x0400


104 
BNE
 
	gevítTickVíìr
 @ 
timî
 
öãºu±


105 
TST
 
	gr0
, #0
x0001


106 
BNE
 
	gevítBuâ⁄Víìr
 @ 
buâ⁄
 
öãºu±


107 
LDMFD
 
	gr13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ @ 
unknown
 
evít
 
ign‹e


109 
	gevítBuâ⁄Víìr
:

111 
BL
 
evítBuâ⁄Sîvi˚


112 
LDMFD
 
r13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ @  
to
 
èsk


114 
	gevítTickVíìr
:

116 
BL
 
evítTickSîvi˚


117 
B
 
kî√lScheduÀr


118 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögUpSëR8fiq
();

98 
brögUpSëR9fiq
();

99 
brögUpSëR10fiq
();

101 
STATE
;

120 
CÆlBack
 
	$evítsSWIH™dÀr
(
swi_numbî
, 
SwiRegs
 *
r
)

122 
swi_numbî
)

129 
SLOS
:

131 
r
->r[0])

144 
BrögUp_Tø˚
:

146 
r
->r[1])

149 
	`brögUpSëR9fiq
 (
r
->r[2]);

153 
	`brögUpSëR10fiq
 (
r
->r[2]);

159 
BrögUp_F©ÆEº‹
:

160 
	`brögUpSëR8fiq
 (
r
->r[1]);

162 
ÁèÀº‹
: fatalerror;

172 
Evít_IODevi˚Inô
:

173 
	`ioInôülizeDrivîs
 ();

174 
r
->r[0] = 1;

175 
r
->r[1] = 2;

185 i‡(
STATE
!=1)

188 
asm
 volatile ("MSR CPSR_c,#0x5f");

191 
r
->r[0])

194 
Evít_IODevi˚O≥n
:

195 
r
->r[0] = (Ë
	`ioO≥nDrivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

198 
Evít_IODevi˚Clo£
:

199 
r
->r[0] = (Ë
	`ioClo£Drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

202 
Evít_IODevi˚WrôeByã
:

203 
	`ioWrôeByã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

206 
Evít_IODevi˚RódByã
:

207 
r
->r[0] = (Ë
	`ioRódByã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

210 
Evít_IODevi˚WrôeBô
:

211 
	`ioWrôeBô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

214 
Evít_IODevi˚RódBô
:

215 
r
->r[0] = (Ë
	`ioRódBô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

218 
Evít_IODevi˚WrôeBlock
:

219 
	`ioWrôeBlock
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

222 
Evít_IODevi˚RódBlock
:

223 
r
->r[0] = (Ë
	`ioRódBlock
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

228 
asm
 volatile ("MSR CPSR_c,#0xD3");

231  
	`ªp‹tOK
();

232 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler.s

1 .
	gfûe
 "swi_handler.c"

2 .
	gãxt


3 .
	gÆign
 2

4 .
globÆ
 
	gevítsSWIH™dÀr


5 .
ty≥
 
	gevítsSWIH™dÀr
, %
fun˘i⁄


6 
	gevítsSWIH™dÀr
:

7 @ 
¨gs
 = 0, 
	g¥ëíd
 = 0, 
	g‰ame
 = 16

8 @ 
‰ame_√eded
 = 1, 
	gu£s_™⁄ymous_¨gs
 = 0

9 
mov
 
ù
, 
•


10 
°mfd
 
	g•
!, {
	gr4
, 
	gÂ
, 
	gù
, 
	gÃ
, 
	gpc
}

11 
sub
 
	gÂ
, 
	gù
, #4

12 
sub
 
	g•
, sp, #16

13 
°r
 
	gr0
, [
Â
, #-20]

14 
°r
 
	gr1
, [
Â
, #-24]

15 
ldr
 
	gr2
, [
Â
, #-20]

16 
mov
 
	gr3
, #5056

17 
add
 
	gr3
,Ñ3, #19

18 
cmp
 
	gr2
, 
r3


19 
	gbeq
 .
L3


20 
	gb
 .
	gL2


21 .
	gL3
:

22 
ldr
 
r3
, [
Â
, #-24]

23 
ldr
 
	gr3
, [
r3
, #0]

24 
°r
 
	gr3
, [
Â
, #-32]

25 
mov
 
	gr3
, #1792

26 
add
 
	gr3
,Ñ3, #1

27 
ldr
 
	gr2
, [
Â
, #-32]

28 
cmp
 
	gr2
, 
r3


29 
	gbeq
 .
L11


30 
mov
 
	gr3
, #1792

31 
add
 
	gr3
,Ñ3, #1

32 
ldr
 
	gr2
, [
Â
, #-32]

33 
cmp
 
	gr2
, 
r3


34 
	gbhi
 .
L28


35 
ldr
 
	gr3
, [
Â
, #-32]

36 
cmp
 
	gr3
, #1792

37 
	gbeq
 .
L5


38 
	gb
 .
	gL14


39 .
	gL28
:

40 
ldr
 
r2
, [
Â
, #-32]

41 
cmp
 
	gr2
, #2048

42 
	gbeq
 .
L13


43 
	gb
 .
	gL14


44 .
	gL5
:

45 
ldr
 
r3
, [
Â
, #-24]

46 
ldr
 
	gr3
, [
r3
, #4]

47 
°r
 
	gr3
, [
Â
, #-28]

48 
ldr
 
	gr3
, [
Â
, #-28]

49 
cmp
 
	gr3
, #123

50 
	gbeq
 .
L7


51 
mov
 
	gr3
, #320

52 
add
 
	gr3
,Ñ3, #1

53 
ldr
 
	gr2
, [
Â
, #-28]

54 
cmp
 
	gr2
, 
r3


55 
	gbeq
 .
L8


56 
	gb
 .
	gL2


57 .
	gL7
:

58 
ldr
 
r3
, [
Â
, #-24]

59 
ldr
 
	gr0
, [
r3
, #8]

60 
bl
 
brögUpSëR9fiq


61 
	gb
 .
	gL2


62 .
	gL8
:

63 
ldr
 
r3
, [
Â
, #-24]

64 
ldr
 
	gr0
, [
r3
, #8]

65 
bl
 
brögUpSëR10fiq


66 
	gb
 .
	gL2


67 .
	gL11
:

68 
ldr
 
r3
, [
Â
, #-24]

69 
ldr
 
	gr0
, [
r3
, #4]

70 
bl
 
	gbrögUpSëR8fiq


71 .
	gL12
:

72 
b
 .
L12


73 .
L13
:

74 
bl
 
ioInôülizeDrivîs


75 
b
 .
L2


76 .
L14
:

77 
ldr
 
r3
, .
L31


78 
ldr
 
	gr3
, [
r3
, #0]

79 
cmp
 
	gr3
, #1

80 
	gbeq
 .
L15


81 
MSR
 
	gCPSR_c
,#0
	gx5f


82 .
	gL15
:

83 
ldr
 
r3
, [
Â
, #-24]

84 
ldr
 
	gr3
, [
r3
, #0]

85 
sub
 
	gr3
,Ñ3, #2048

86 
sub
 
	gr3
,Ñ3, #1

87 
cmp
 
	gr3
, #7

88 
ldæs
 
	gpc
, [
pc
, 
r3
, 
a¶
 #2]

89 
	gb
 .
	gL16


90 .
	gp2Æign
 2

91 .
	gL25
:

92 .
w‹d
 .
L17


93 .
w‹d
 .
L18


94 .
w‹d
 .
L19


95 .
w‹d
 .
L20


96 .
w‹d
 .
L21


97 .
w‹d
 .
L22


98 .
w‹d
 .
L23


99 .
w‹d
 .
L24


100 .
L17
:

101 
ldr
 
r4
, [
Â
, #-24]

102 
ldr
 
	gr3
, [
Â
, #-24]

103 
ldr
 
	gr2
, [
Â
, #-24]

104 
ldr
 
	gù
, [
Â
, #-24]

105 
ldr
 
	gr0
, [
r3
, #4]

106 
ldr
 
	gr1
, [
r2
, #8]

107 
ldr
 
	gr2
, [
ù
, #12]

108 
bl
 
ioO≥nDrivî


109 
°r
 
	gr0
, [
r4
, #0]

110 
	gb
 .
	gL16


111 .
	gL18
:

112 
ldr
 
r4
, [
Â
, #-24]

113 
ldr
 
	gr3
, [
Â
, #-24]

114 
ldr
 
	gr2
, [
Â
, #-24]

115 
ldr
 
	gr0
, [
r3
, #4]

116 
ldr
 
	gr1
, [
r2
, #8]

117 
bl
 
ioClo£Drivî


118 
°r
 
	gr0
, [
r4
, #0]

119 
	gb
 .
	gL16


120 .
	gL19
:

121 
ldr
 
r2
, [
Â
, #-24]

122 
ldr
 
	gr1
, [
Â
, #-24]

123 
ldr
 
	gr3
, [
Â
, #-24]

124 
ldrb
 
	gr3
, [
r3
, #12] @ 
zîo_exãndqisi2


125 
ldr
 
	gr0
, [
r2
, #4]

126 
ldr
 
	gr1
, [
r1
, #8]

127 
mov
 
	gr2
, 
r3


128 
bl
 
ioWrôeByã


129 
	gb
 .
	gL16


130 .
	gL20
:

131 
ldr
 
r4
, [
Â
, #-24]

132 
ldr
 
	gr3
, [
Â
, #-24]

133 
ldr
 
	gr2
, [
Â
, #-24]

134 
ldr
 
	gr0
, [
r3
, #4]

135 
ldr
 
	gr1
, [
r2
, #8]

136 
bl
 
ioRódByã


137 
mov
 
	gr3
, 
r0


138 
™d
 
	gr3
,Ñ3, #255

139 
°r
 
	gr3
, [
r4
, #0]

140 
	gb
 .
	gL16


141 .
	gL21
:

142 
ldr
 
r2
, [
Â
, #-24]

143 
ldr
 
	gr1
, [
Â
, #-24]

144 
ldr
 
	gr3
, [
Â
, #-24]

145 
ldrb
 
	gr3
, [
r3
, #12] @ 
zîo_exãndqisi2


146 
ldr
 
	gr0
, [
r2
, #4]

147 
ldr
 
	gr1
, [
r1
, #8]

148 
mov
 
	gr2
, 
r3


149 
bl
 
ioWrôeBô


150 
	gb
 .
	gL16


151 .
	gL22
:

152 
ldr
 
r4
, [
Â
, #-24]

153 
ldr
 
	gr3
, [
Â
, #-24]

154 
ldr
 
	gr2
, [
Â
, #-24]

155 
ldr
 
	gr0
, [
r3
, #4]

156 
ldr
 
	gr1
, [
r2
, #8]

157 
bl
 
ioRódBô


158 
mov
 
	gr3
, 
r0


159 
™d
 
	gr3
,Ñ3, #255

160 
°r
 
	gr3
, [
r4
, #0]

161 
	gb
 .
	gL16


162 .
	gL23
:

163 
ldr
 
r3
, [
Â
, #-24]

164 
ldr
 
	gr2
, [
Â
, #-24]

165 
ldr
 
	gù
, [
Â
, #-24]

166 
ldr
 
	gr0
, [
r3
, #4]

167 
ldr
 
	gr1
, [
r2
, #8]

168 
ldr
 
	gr2
, [
ù
, #12]

169 
bl
 
ioWrôeBlock


170 
	gb
 .
	gL16


171 .
	gL24
:

172 
ldr
 
r4
, [
Â
, #-24]

173 
ldr
 
	gr3
, [
Â
, #-24]

174 
ldr
 
	gr2
, [
Â
, #-24]

175 
ldr
 
	gr0
, [
r3
, #4]

176 
ldr
 
	gr1
, [
r2
, #8]

177 
bl
 
ioRódBlock


178 
°r
 
	gr0
, [
r4
, #0]

179 .
	gL16
:

180 
MSR
 
CPSR_c
,#0
	gxD3


181 .
	gL2
:

182 
bl
 
ªp‹tOK


183 
mov
 
r3
, 
r0


184 
mov
 
	gr0
, 
r3


185 
ldmó
 
	gÂ
, {
	gr4
, fp, 
	g•
, 
	gpc
}

186 .
	gL32
:

187 .
Æign
 2

188 .
L31
:

189 .
w‹d
 
STATE


190 .
size
 
evítsSWIH™dÀr
, .-
	gevítsSWIH™dÀr


191 .
	gidít
 "GCC: (GNU) 3.3.1"

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler_test.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögUpSëR8fiq
();

98 
brögUpSëR9fiq
();

99 
brögUpSëR10fiq
();

101 
STATE
;

119 
	#TEST1
 100

	)

121 
CÆlBack
 
	$evítsSWIH™dÀr
(
swi_numbî
, 
SwiRegs
 *
r
)

123 
swi_numbî
)

125 
SLOS
:

126 
r
->r[0])

132 
TEST1
:

133 
r
->r[0] = 0x1001;

134 
r
->r[1] = 0x2002;

135 
r
->r[2] = 0x3003;

140  
	`ªp‹tOK
();

141 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/tick_service.c

72 
	~"../hódîs/ma¸os.h
"

74 
	~"../../hódîs/≠i_ty≥s.h
"

86 
UINT
 
	gcou¡down
;

114 
	$evítTickInô
 (
UINT
 
m£c
)

123 *
TMOD
 = 0;

124 *
INTPND
 = 0x00000000;

133 
m£c
)

136 
cou¡down
 = 0x000ffff0;

139 
cou¡down
 = 0x00effff0;

142 
	}
}

159 
	#tIOPDATA
 (vﬁ©ûê*)(
SYSCFG
 + 0x5008)

	)

160 
	#LEDBANK
 *
tIOPDATA


	)

163 
	#LED_4_ON
 
LEDBANK
 |0x00000010

	)

164 
	#LED_4_OFF
 
LEDBANK
 = LEDBANK &~ 0x00000010

	)

166 
	gxLED
 = 0;

169 
	$evítTickSîvi˚
()

174 *
INTPND
 = 1<<10;

175 *
TDATA0
 = 
cou¡down
;

177 i‡(
xLED
==0)

179 
LED_4_ON
;

180 
xLED
=1;

184 
LED_4_OFF
;

185 
xLED
=0;

190 *(vﬁ©ûê*)
INTMSK
 &~((1<<
INT_GLOBAL
)|(1<<10)|(1<<0));

191 
	}
}

203 
	$evítTickSèπ
()

205 *
TDATA0
 = 
cou¡down
;

206 *
TMOD
 |= 0x1;

210 *(vﬁ©ûê*)
INTMSK
 &~((1 << 
INT_GLOBAL
) | (1<<10) | (1<<0));

211 
	}
}

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/tick_service.h

99 
evítTickInô
(
UINT
 
m£c
);

111 
evítTickSîvi˚
();

123 
evítTickSèπ
();

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/headers/all.h

68 #i‚de‡
_HEADERS_E7T_ALL


70 
	#_HEADERS_E7T_ALL
 1

	)

72 
	~"ma¸os.h
"

74 
	~"../devi˚s/£gmít_drivî.h
"

75 
	~"../devi˚s/£rül_drivî.h
"

77 
	~"../evíts/tick_£rvi˚.h
"

78 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/headers/macros.h

70 #i‚de‡
SYSCFG


71 
	#SYSCFG
 0x03ff0000

	)

74 
	#IOPMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x5000))

	)

75 
	#IOPCON
 ((vﬁ©ûê*)(
SYSCFG
+0x5004))

	)

77 #i‚de‡
IOPDATA


78 
	#IOPDATA
 (
SYSCFG
+0x5008)

	)

81 
	#INTPND
 ((vﬁ©ûê*)(
SYSCFG
+0x4004))

	)

82 
	#INTMSK
 ((vﬁ©ûê*)(
SYSCFG
+0x4008))

	)

83 
	#INT_GLOBAL
 (21)

	)

85 
	#INT_SW3_MASK
 (1)

	)

87 
	#IO_ENABLE_INT0
 (1<<4)

	)

88 
	#IO_ACTIVE_HIGH_INT0
 (1<<3)

	)

89 
	#IO_RISING_EDGE_INT0
 (1)

	)

91 
	#TMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x6000))

92 
	#TDATA0
 ((vﬁ©ûê*)(
SYSCFG
+0x6004))

	)

93 
	#TCNT0
 ((vﬁ©ûê*)(
SYSCFG
+0x600c))

	)

95 
	#ENABLE_TIMER0
 (1)

	)

96 
	#DISABLE_TIMER0
 (0)

	)

98 
	#TOGGLE_TIMER0
 (1<<1)

	)

99 
	#INIT0_TIMER0
 (1<<2)

	)

103 
	#IRQVe˘‹
 0x18

	)

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/init.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
öô
.
s


8 @ * 
OS
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 14 
July
 2003 
Andªw
 
N
. 
Sloss


13 @ * - 
£∑øãd
 
the
 
pcbSëUp
 
routöe


17 .
ãxt


18 .
code
 32

19 .
Æign
 0

20 .
globÆ
 
c‹eInôülize


21 .
C_E¡ry


22 .
C_E¡ryTask2


23 .
C_E¡ryTask3


24 .
PCB_PåTask2


25 .
PCB_PåTask3


26 .
PCB_CuºítTask


27 .
pcbSëUp


29 .
c‹eCÆlSWI


31 .
equ
 
IRQ32md
, 0x12

32 .
equ
 
SVC32md
, 0x13

33 .
equ
 
SYS32md
, 0x1f

34 .
equ
 
NoI¡
, 0xc0

36 
c‹eInôülize
:

37 
BL
 
brögUpInôFIQRegi°îs


46 
MOV
 
•
,#0
x80000


47 
MSR
 
CPSR_c
,#NoI¡|
SYS32md


48 
MOV
 
•
,#0
x40000


49 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


50 
MOV
 
•
,#0
x10000


51 
MSR
 
CPSR_c
,#NoI¡|
SVC32md


59 
LDR
 
r0
,=
C_E¡ryTask2


60 
LDR
 
r1
,=
PCB_PåTask2


61 
MOV
 
r2
,#0
x20000


62 
BL
 
pcbSëUp


64 
LDR
 
r0
,=
C_E¡ryTask3


65 
LDR
 
r1
,=
PCB_PåTask3


66 
MOV
 
r2
,#0
x30000


67 
BL
 
pcbSëUp


69 @ -- 
£t
 
the
 
cuºít
 
ID
 
to
 
TASK1
 ...........

71 
LDR
 
r0
, =
PCB_CuºítTask


72 
MOV
 
r1
, #0

73 
STR
 
r1
,[
r0
]

74 
LDR
 
Ã
,=
C_E¡ry


75 
MOV
 
pc
,
Ã


76 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/pcb.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
pcb
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
pcbSëup


22 .
globÆ
 
PCB_CuºítTask


23 .
globÆ
 
PCB_TabÀ


24 .
globÆ
 
PCB_T›OfIRQSèck


25 .
globÆ
 
PCB_PåCuºítTask


26 .
globÆ
 
PCB_PåNextTask


27 .
globÆ
 
PCB_PåTask1


28 .
globÆ
 
PCB_BŸtomTask1


29 .
globÆ
 
PCB_PåTask2


30 .
globÆ
 
PCB_BŸtomTask2


31 .
globÆ
 
PCB_PåTask3


32 .
globÆ
 
PCB_BŸtomTask3


33 .
globÆ
 
pcbSëUp


48 
pcbSëUp
:

49 
STR
 
r0
,[
r1
,#-4]

50 
STR
 
	gr0
,[
r1
,#-64]

51 
STR
 
	gr2
,[
r1
,#-8]

52 
MOV
 
	gr0
,#0
x50


53 
STR
 
	gr0
,[
r1
,#-68]

54 
MOV
 
	gpc
,
Ã


56 
	gPCB_TabÀ
:

57 .
w‹d
 
PCB_PåTask1


58 .
w‹d
 
PCB_PåTask2


59 .
w‹d
 
PCB_PåTask3


61 
PCB_T›OfIRQSèck
:

62 .
w‹d
 0x9000

64 
PCB_PåCuºítTask
:

65 .
w‹d
 0x1

67 
PCB_PåNextTask
:

68 .
w‹d
 0x1

70 
PCB_CuºítTask
:

71 .
w‹d
 0x0

73 
PCB_BŸtomTask1
:

74 .
skù
 68

75 
PCB_PåTask1
:

77 
PCB_BŸtomTask2
:

78 .
skù
 68

79 
PCB_PåTask2
:

81 
PCB_BŸtomTask3
:

82 .
skù
 68

83 
PCB_PåTask3
:

84 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/events/bringup.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
brögup


55 @ * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 @ * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 @ * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 @ * 
OS
 : 
SLOS
 0.09

59 @ * 
Pœtf‹m
 : 
gíîic


64 @ * 
EXPORT


67 .
ãxt


68 .
code
 32

69 .
Æign
 0

70 .
globÆ
 
brögUpSëR8fiq


71 .
globÆ
 
brögUpSëR9fiq


72 .
globÆ
 
brögUpSëR10fiq


73 .
globÆ
 
brögUpInôFIQRegi°îs


75 @ -- 
swôchToFIQMode
 ---------------------------------------------------------

76 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

77 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


78 @ 
Rëu∫
 : 
n⁄e
...

80 
swôchToFIQMode
:

82 
MOV
 
r3
,
Ã


83 
MRS
 
r1
,
CPSR


84 
BIC
 
r1
,r1,#0
x1f


85 
ORR
 
r1
,r1,#0
x11


86 
MSR
 
CPSR_c
,
r1


87 
MOV
 
pc
,
r3


89 @ -- 
swôchToSVCMode
 ---------------------------------------------------------

90 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

91 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


92 @ 
Rëu∫
 : 
n⁄e
...

95 
swôchToSVCMode
:

97 
MOV
 
r3
,
Ã


98 
MRS
 
r1
,
CPSR


99 
BIC
 
r1
,r1,#0
x1f


100 
ORR
 
r1
,r1,#0
x13


101 
MSR
 
CPSR_c
,
r1


102 
MOV
 
pc
,
r3


104 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

105 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

106 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


107 @ 
Rëu∫
 : 
n⁄e
...

109 
brögUpInôFIQRegi°îs
:

111 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


113 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

114 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


115 
MOV
 
r8
,#0 @ 
r8FIQ
=0

116 
MOV
 
r9
,#0 @ 
r9FIQ
=0

117 
MOV
 
r10
,#0 @ 
r10FIQ
=0

118 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


119 
MOV
 
pc
,
r2
 @  
back


121 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

122 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

123 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


124 @ 
Rëu∫
 : 
n⁄e
...

126 
brögUpSëR8fiq
:

128 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


130 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

131 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


132 
MOV
 
r8
,
r0
 @ 
r10_fiq
 =Ñ0

133 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


134 
MOV
 
pc
,
r2
 @  
back


136 @ -- 
brögUpSëR9fiq
 ---------------------------------------------------------

138 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

140 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


141 @ 
Rëu∫
 : 
n⁄e
...

144 
brögUpSëR9fiq
:

146 @ 
r2
 - 
íåy
 
åa˚
 
numbî


148 
MOV
 
r2
,
Ã


149 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


150 
MOV
 
r9
,
r0
 @ 
r9_fiq
 = 
r2


151 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


152 
MOV
 
pc
,
r2
 @  
back


154 @ -- 
brögup_£tR10fiq
 -------------------------------------------------------

156 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

158 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


159 @ 
Rëu∫
 : 
n⁄e
...

162 
brögUpSëR10fiq
:

164 @ 
r2
 - 
exô
 
åa˚
 
numbî


166 
MOV
 
r2
,
Ã


167 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


168 
MOV
 
r10
,
r0
 @ 
r10_fiq
 = 
r2


169 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


170 
MOV
 
pc
,
r2
 @  
back


171 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/events/cpsr.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
˝§


55 @ * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 @ * 
OS
 : 
SLOS
 0.09

57 @ * 
Pœtf‹m
 : 
gíîic


58 @ * 
Hi°‹y
 :

60 @ * 15
th
 
July
 2002 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
a
 
hódî


66 @ * 
EXPORT


69 .
ãxt


70 .
code
 32

71 .
Æign
 0

72 .
globÆ
 
modifyC⁄åﬁCPSR


74 @ -- 
modifyC⁄åﬁCPSR
 --------------------------------------------------------

75 @ 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


76 @ 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


77 @ 
Rëu∫
 : 
n⁄e
...

79 
modifyC⁄åﬁCPSR
:

82 @ 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


83 @ 
°ack
.

84 @ 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

85 @ 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

86 @ 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

87 @ 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

90 
STMFD
 
r13
!,{
r3
}

91 
MOV
 
	gr3
,
r13


92 
ADD
 
	gr13
,r13,#4

93 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

96 @ 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


97 @ 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


100 
MRS
 
	gr1
,
CPSR


101 
BIC
 
	gr1
,r1,#0
xff


102 
ORR
 
	gr1
,r1,
r0


103 
MSR
 
	gCPSR_c
,
	gr1


106 @ 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


107 @ 
Rëu∫
 
to
 
the
 
	gˇŒì


110 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

111 
LDMFD
 
	gr3
,{r3}

112 
MOV
 
	gpc
,
	gÃ


113 .
	gíd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/fiq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
fiq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eFIQH™dÀr


23 
c‹eFIQH™dÀr
:

24 
B
 
c‹eFIQH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_device.h

74 
	~"../e7t/evíts/swis.h
"

96 
evítIODevi˚Inô
();

119 
devi˚_åì°r
 *
evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
);

139 
evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

155 
evítIODevi˚WrôeByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
);

170 
UINT
 
evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
,
UID
 
b
);

186 
evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
,
UID
 
b
,
UINT
 
c
);

201 
UINT
 
evítIODevi˚RódBô
(
devi˚_åì°r
 *,
UID
);

216 
evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *,
UID
,*);

231 *
evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_lldebug.h

71 #i‚de‡
LLDEBUG


72 
	#LLDEBUG
 1

	)

74 
	~"../e7t/evíts/swis.h
"

96 
brögUpTø˚
(
UINT
 
a
, 
UID
 
b
);

110 
brögUpF©ÆEº‹
(
UINT
 
a
);

129 
	#ENTRY
 123

	)

130 
	#EXIT
 321

	)

132 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

133 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

135 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

136 (
	gr
); \

137 
Œåa˚a·î
((
u
))

151 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/irq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
úq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eIRQH™dÀr


22 .
evítsIRQH™dÀr


24 
c‹eIRQH™dÀr
:

25 
B
 
evítsIRQH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/prefetch.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
¥e„tch
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹ePª„tchAb‹tH™dÀr


23 
c‹ePª„tchAb‹tH™dÀr
:

25 
B
 
c‹ePª„tchAb‹tH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/reserved.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eRe£rvedH™dÀr


23 
c‹eRe£rvedH™dÀr
:

24 
B
 
c‹eRe£rvedH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/scheduler.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
scheduÀr
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
PCB_CuºítTask


22 .
globÆ
 
PCB_PåCuºítTask


23 .
globÆ
 
PCB_PåNextTask


24 .
globÆ
 
PCB_TabÀ


25 .
globÆ
 
PCB_T›OfIRQSèck


26 .
globÆ
 
kî√lScheduÀr


28 
kî√lScheduÀr
:

34 
CuºítTask
:

36 
LDR
 
r3
,=
PCB_CuºítTask


37 
LDR
 
r0
,[
r3
]

38 
LDR
 
	gr1
,=
PCB_TabÀ


39 
LDR
 
r1
,[r1,
r0
,
LSL
#2]

40 
LDR
 
	gr2
,=
PCB_PåCuºítTask


41 
STR
 
r1
,[
r2
]

45 
	gNextTask
:

46 
ADD
 
r0
,
	gr0
,#1

47 
CMP
 
	gr0
,#3

48 
MOVEQ
 
	gr0
,#0

49 
STR
 
	gr0
,[
r3
]

50 
LDR
 
	gr1
,=
PCB_TabÀ


51 
LDR
 
r1
,[r1,
r0
,
LSL
#2]

52 
LDR
 
	gr0
,=
PCB_PåNextTask


53 
STR
 
r1
,[
r0
]

64 
	gh™dÀr_c⁄ãxtswôch
:

66 
LDMFD
 
•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
}

67 
LDR
 
	gr13
,=
PCB_PåCuºítTask


68 
LDR
 
r13
,[r13]

69 
SUB
 
	gr13
,r13,#60

70 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^

71 
MRS
 
	gr0
, 
SPSR


72 
STMDB
 
	gr13
,{
	gr0
,
	gr14
}

73 
LDR
 
	gr13
,=
PCB_PåNextTask


74 
LDR
 
r13
,[r13]

75 
SUB
 
	gr13
,r13,#60

76 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
}

77 
MSR
 
	g•§_cxsf
, 
r0


78 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^

79 
LDR
 
	gr13
,=
PCB_T›OfIRQSèck


80 
LDR
 
r13
,[r13]

81 
MOVS
 
	gpc
,
	gr14


82 .
	gíd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/start.s

8 @ * 
	gModuÀ
 : 
°¨t
.
s


9 @ * 
Proje˘
 : 
SLOS


10 @ * 
Vîsi⁄
 : 0.09

11 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 
Hi°‹y
 :

14 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


15 @ * - 
added
 
hódî
 
öf‹m©i⁄


20 @ * 
SLOS
 2002

24 @ * 
IMPORT


27 .
ãxt


28 .
code
 32

29 .
Æign
 0

30 .
globÆ
 
_°¨t
,
	g°¨t
,
_maöCRTSèπup


33 
	g_°¨t
:

34 
°¨t
:

35 
_maöCRTSèπup
:

49 
LDR
 
pc
,
ve˘‹Re£t


50 
LDR
 
	gpc
,
ve˘‹Undeföed


51 
LDR
 
	gpc
,
ve˘‹SWI


52 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


53 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


54 
LDR
 
	gpc
,
ve˘‹Re£rved


55 
LDR
 
	gpc
,
ve˘‹IRQ


56 
LDR
 
	gpc
,
	gve˘‹FIQ


58 @ -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

60 
	g±rPCBTabÀ
:

61 .
w‹d
 
PCB_TabÀ


63 @ -- 
Kî√l
 
Jump
 
èbÀ
 ------------------------------

65 
ve˘‹Re£t
:

66 .
w‹d
 
c‹eInôülize


67 
ve˘‹Undeföed
:

68 .
w‹d
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
:

70 .
w‹d
 
c‹eSWIH™dÀr


71 
ve˘‹Pª„tchAb‹t
:

72 .
w‹d
 
c‹ePª„tchAb‹tH™dÀr


73 
ve˘‹D©aAb‹t
:

74 .
w‹d
 
c‹eD©aAb‹tH™dÀr


75 
ve˘‹Re£rved
:

76 .
w‹d
 
c‹eRe£rvedH™dÀr


77 
ve˘‹IRQ
:

78 .
w‹d
 
c‹eIRQH™dÀr


79 
ve˘‹FIQ
:

80 .
w‹d
 
c‹eFIQH™dÀr


82 .
íd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/swi.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eSWIH™dÀr


22 .
globÆ
 
c‹eCÆlSWI


23 .
evítsSWIH™dÀr


26 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


30 @ 
c‹eCÆlSWI
(
ªgi°î°r
 *
r0
)

33 
c‹eCÆlSWI
:

34 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

35 
MOV
 
r4
,
r0


36 
LDMIA
 
r4
,{
r0
-
r3
}

37 
SWI
 5075

38 
STMIA
 
r4
,{
r0
-
r3
}

39 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

42 @ 
c‹eSWIH™dÀr
()

45 
c‹eSWIH™dÀr
:

46 
STMFD
 
•
!,{
r0
-
r12
,
Ã
}

47 
LDR
 
r10
,[
Ã
,#-4]

48 
BIC
 
r10
,r10,#0
xff000000


49 
MOV
 
r0
,
r10


50 
MOV
 
r1
,
•


51 
MRS
 
r2
,
SPSR


52 
STMFD
 
•
!,{
r2
}

53 
BL
 
evítsSWIH™dÀr
 @ÉvítsSWIH™dÀr(
r0
-
swiNumbî
,
r1
-
poöt
);

54 
LDMFD
 
	g•
!,{
	gr2
}

55 
MSR
 
	gSPSR_cxsf
,
r2


56 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^

57 .
	gíd


	@/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/undef.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
undef
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eUndeföedH™dÀr


24 
c‹eUndeföedH™dÀr
:

25 
B
 
c‹eUndeföedH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task1_start.c

72 
	~"../c‹e/muãx.h
"

74 
	~"../hódîs/≠i_ty≥s.h
"

75 
	~"../devi˚s/ddf_io.h
"

76 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

78 
	~"../e7t/evíts/swis.h
"

79 
	~"../hódîs/≠i_devi˚.h
"

81 
	#GREEN1
 0

	)

82 
	#RED
 2

	)

83 
	#ORANGE
 1

	)

84 
	#GREEN2
 3

	)

90 
devi˚_åì°r
 *
	gªd_ho°
;

91 
UID
 
	gæed
;

107 
BOOL
 
	$›íRedLED
()

118 
ªd_ho°
 = 
	`evítIODevi˚O≥n
(&
æed
,
DEVICE_LED_E7T
,
RED
);

122 i‡(
ªd_ho°
==0Ë{ 
FALSE
;}

126 
æed
)

128 
DEVICE_IN_USE
:

129 
DEVICE_UNKNOWN
:

131  
FALSE
;

134  
TRUE
;

135 
	}
}

147 
	$swôchOnRedLED
()

148 {
	`evítIODevi˚WrôeBô
(
ªd_ho°
,
æed
,(
UINT
)1);
	}
}

160 
	$swôchOffRedLED
()

161 {
	`evítIODevi˚WrôeBô
(
ªd_ho°
,
æed
,(
UINT
)0);
	}
}

174 
	$C_E¡ryTask1
()

176 vﬁ©ûê
dñay
;

178 i‡(
	`›íRedLED
 ()==0)

183 
aWAIT
;

184 
	`swôchOnRedLED
 ();

187 
dñay
=0; delay<0x20ffff; delay++) {}

189 
aSIGNAL
;

190 
	`swôchOffRedLED
 ();

193 
dñay
=0; delay<0x20ffff; delay++) {}

203 
dñay
=0xBEEFBEEF;

205 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task1_start.h

101 
C_E¡ryTask1
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task2_start.c

72 
	~"../c‹e/muãx.h
"

74 
	~"../hódîs/≠i_ty≥s.h
"

75 
	~"../devi˚s/ddf_io.h
"

76 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

78 
	~"../e7t/evíts/swis.h
"

79 
	~"../hódîs/≠i_devi˚.h
"

81 
	#GREEN1
 0

	)

82 
	#RED
 2

	)

83 
	#ORANGE
 1

	)

84 
	#GREEN2
 3

	)

90 
devi˚_åì°r
 *
	g‹™ge_ho°
;

91 
UID
 
	gﬁed
;

103 
BOOL
 
	$›íOøngeLED
 ()

112 
‹™ge_ho°
 = 
	`evítIODevi˚O≥n
(&
ﬁed
,
DEVICE_LED_E7T
,
ORANGE
);

116 i‡(
‹™ge_ho°
==0Ë{ 
FALSE
;}

120 
ﬁed
)

122 
DEVICE_IN_USE
:

123 
DEVICE_UNKNOWN
:

125  
FALSE
;

128  
TRUE
;

129 
	}
}

141 
	$swôchOnOøngeLED
 ()

142 {
	`evítIODevi˚WrôeBô
(
‹™ge_ho°
,
ﬁed
,(
UINT
)1);
	}
}

154 
	$swôchOffOøngeLED
 ()

155 {
	`evítIODevi˚WrôeBô
(
‹™ge_ho°
,
ﬁed
,(
UINT
)0);
	}
}

169 
	$C_E¡ryTask2
()

171 vﬁ©ûê
dñay
;

173 i‡(
	`›íOøngeLED
 ()==0)

177 
bWAIT
;

178 
	`swôchOnOøngeLED
 ();

181 
dñay
=0; delay<0x10ffff; delay++) {}

183 
bSIGNAL
;

184 
	`swôchOffOøngeLED
 ();

187 
dñay
=0; delay<0x10ffff; delay++) {}

197 
dñay
=0xBEEFBEEF;

199 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task2_start.h

102 
C_E¡ryTask2
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task3_start.c

75 
	~"../c‹e/Æl.h
"

76 
	~"../c‹e/˛i_shñl.h
"

98 
	$b™√r
 ()

100 
	`¥ötToHo°
 ("\n\r");

101 
	`¥ötToHo°
 ("\n\rSimple Little OS (0.09)\n\r");

102 
	`¥ötToHo°
 ("- initialized ...... OK\n\r");

103 
	`¥ötToHo°
 ("-Ñunning on .......É7t \n\r");

104 
	`¥ötToHo°
 ("\n\r");

105 
	`¥ötToHo°
 ("\n\r");

106 
	}
}

121 
	$C_E¡ryTask3
()

132 if(
	`›íHo°
 (
COM0
)==
TRUE
)

134 
	`b™√r
 ();

135 
	`shñl
 ();

145 
	`˛o£Ho°
 ();

146 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task3_start.h

84 
C_TaskE¡ry3
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/all.h

72 #i‚de‡
_CORE_ALL


74 
	#_CORE_ALL
 1

	)

76 
	~"../hódîs/≠i_ty≥s.h
"

77 
	~"˛i_com.h
"

78 
	~"˛i_ªadlöe.h
"

79 
	~"../devi˚s/ddf_io.h
"

80 
	~<as£π.h
>

81 
	~<time.h
>

85 
	~"../≠ps/èsk1_°¨t.h
"

89 
	~"˛i_com.h
"

93 
	~"../e7t/hódîs/Æl.h
"

94 
	~"../hódîs/≠i_devi˚.h
"

95 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cinit.c

75 
	~"Æl.h
"

76 
	~"../e7t/evíts/evít_öô.h
"

84 
	#DEVICESINIT
 1

	)

85 
	#SERVICESINIT
 2

	)

86 
	#TICKINIT
 3

	)

87 
	#CINITINIT
 4

	)

88 
	#TICKSTART
 5

	)

89 
	#ENTERTASK
 6

	)

91 
	#LOW_LEVEL_INITIALIZATION
 1

	)

92 
	#BOOT_SLOS
 2

	)

104 
	gSTATE
;

120 
	$cöô_öô
()

123 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

135 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

145 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

154 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

155 
	}
}

167 
	$C_E¡ry
()

183 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

193 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

202 
STATE
=
BOOT_SLOS
;

204 
__asm


206 
MSR
 
CPSR_c
,#0
x50


216 
	`Œåa˚
(
	`C_E¡ryTask1
(),
ENTERTASK
);

226 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_com.c

73 
	~<°d¨g.h
>

75 
	~"Æl.h
"

76 
	~"˛i_£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_readline.c

72 
	~<°rög.h
>

74 
	~"Æl.h
"

76 
	#START
 ('A'-'@')

	)

77 
	#BACK
 ('B'-'@')

	)

78 
	#ERASE_FWD
 ('D'-'@')

	)

79 
	#END
 ('E'-'@')

	)

80 
	#FORWARD
 ('F'-'@')

	)

81 
	#ERASE
 ('H'-'@')

	)

82 
	#ERASE_EOL
 ('K'-'@')

	)

83 
	#ENTER
 ('M'-'@')

	)

84 
	#REDRAW
 ('R'-'@')

	)

85 
	#ERASE_LINE
 ('U'-'@')

	)

86 
	#ERASE_SOL
 ('W'-'@')

	)

88 
	#BACKSPACE
 ('H'-'@')

	)

89 
	#DELETE
 (0x7f)

	)

90 
	#LF
 ('\n')

	)

91 
	#CR
 ('\r')

	)

92 
	#CTRL_D
 ('D'-'@')

	)

94 
ªadC
();

95 
wrôeC
(
c
);

111 
	$back•a˚
 (
n
)

113 
n
--Ë
	`wrôeC
(
BACKSPACE
);

114 
	}
}

127 
	$backup
(*
buf„r
, 
pos
)

129 
	`back•a˚
(
	`°æí
(&
buf„r
[
pos
]));

130 
	}
}

143 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

145 
c
;

147 
c
 = 
buf„r
[
pos
++];

149 
c
)

151 
	`wrôeC
(
c
);

152 
c
 = 
buf„r
[
pos
++];

154 
	}
}

168 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

170 
c
;

172 
	`wrôeC
(
CR
);

174 
c
 = *
¥om±
++;

176 
c
)

178 
	`wrôeC
(
c
);

179 
c
 = *
¥om±
++;

182 
	`ªdøw_eﬁ
(
buf„r
, 0);

183 
	`backup
(
buf„r
, 
pos
);

184 
	}
}

197 
	$dñëe
 (*
buf„r
, 
pos
)

199 i‡(
buf„r
[
pos
] == 0) ;

201 
	`°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

202 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

203 
	`wrôeC
(' ');

204 
	`wrôeC
(
BACKSPACE
);

205 
	`backup
(
buf„r
, 
pos
);

208 
	}
}

222 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

224 *
s
 = &
buf„r
[
pos
];

226 
	`memmove
(
s
+1, s, 
	`°æí
(s)+1);

227 
buf„r
[
pos
] = 
c
;

228 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

229 
pos
++;

230 
	`backup
(
buf„r
, 
pos
);

232  
pos
;

233 
	}
}

246 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

248 
pos
 = 0;

249 
c
;

253 
c
=
	`ªadC
();

255 i‡(
c
 =
CR
 || c =
LF
)

257 
buf„r
[
pos
] = 0;

258  
pos
;

261 i‡(
c
 =
CTRL_D
)

263 
buf„r
[0] = 0;

267 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

268 
buf„r
[
pos
++] = 
c
;

270 
	}
}

285 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

287 
i
;

288 
pos
 = 0;

289 
c
;

291 *
buf„r
 = 0;

292 
	`wrôe0
(
¥om±
);

296 
c
 = 
	`ªadC
();

297 i‡(
c
 =
DELETE
Ë¯
ERASE
;

298 i‡(
c
 < ' ')

300 
c
)

302 
START
:

303 
	`back•a˚
(
pos
);

304 
pos
 = 0;

306 
BACK
:

307 i‡(
pos
 > 0)

309 
	`wrôeC
(
BACKSPACE
);

310 
pos
--;

313 
ERASE_FWD
:

314 i‡(
	`°æí
(
buf„r
) == 0)

316 
	`wrôe0
("*EOF*\r\n");

319 
	`dñëe
(
buf„r
, 
pos
);

321 
END
:

322 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

323 
pos
 = 
	`°æí
(
buf„r
);

325 
FORWARD
:

326 i‡(
buf„r
[
pos
])

328 
	`wrôeC
(
buf„r
[
pos
]);

329 
pos
++;

332 
ERASE
:

333 i‡(
pos
 > 0)

335 
	`wrôeC
(
BACKSPACE
);

336 
pos
--;

337 
	`dñëe
(
buf„r
, 
pos
);

340 
ENTER
:

341 
	`wrôeC
(
CR
);

342 
	`wrôeC
(
LF
);

343  
	`°æí
(
buf„r
);

344 
REDRAW
:

345 
	`wrôeC
(
LF
);

346 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

348 
ERASE_LINE
:

349 
	`back•a˚
(
pos
);

350 
i
 = 
pos
 = 
	`°æí
(
buf„r
);

352 
i
--Ë
	`wrôeC
(' ');

354 
	`back•a˚
(
pos
);

355 
pos
 = 0;

356 
buf„r
[0] = 0;

359 } i‡(
	`°æí
(
buf„r
Ë< 
maxÀn
)

360 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

362 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_serial.c

72 
	~"../hódîs/≠i_ty≥s.h
"

73 
	~"../devi˚s/ddf_io.h
"

74 
	~"../e7t/devi˚s/ddf_ty≥s.h
"

76 
	~"../e7t/evíts/swis.h
"

77 
	~"../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
(
UINT
 
com
)

109 i‡(
com
>1Ë{ 
FALSE
;}

111 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_E7T
,
com
);

115 i‡(
ho°
==0Ë{ 
FALSE
;}

119 
£rül
)

121 
DEVICE_IN_USE
:

122 
DEVICE_UNKNOWN
:

124  
FALSE
;

127  
TRUE
;

128 
	}
}

140 
	$wrôeCh¨ToHo°
(
c
)

142 
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);

143 
	}
}

155 
	$¥ötToHo°
(*
s
)

157 *
s
!=0)

159 
	`wrôeCh¨ToHo°
 (*
s
++);

161 
	}
}

173 
	$ªadCh¨FromHo°
()

175  ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);

176 
	}
}

189 
	$˛o£Ho°
()

191 i‡(
ho°
==0Ë 
FALSE
;

193  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

194 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_shell.c

71 
	~"Æl.h
"

72 
	~"˛i_ªadlöe.h
"

88 
	$shñl
()

90 
CÆlBack
 
cb
;

91 
Àn
;

95 
Àn
 = 
	`ªadLöe
("e7t: ", 
comm™d_löe
, 255);

96 
cb
 = 
	`CLI
(
comm™d_löe
);

97 } !
cb
);

98 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_shell.h

72 
	~"˛i_£rül.h
"

88 
shñl
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/mutex.c

86 vﬁ©ûê
	g£m≠h‹e
 = 2;

102 
	$muãx_g©ñock
 ()

104 
__asm


106 
•ö
:

107 
mov
 
r1
, &
£m≠h‹e


108 
mov
 
r2
, #1

109 
swp
 
r3
,
r2
,[
r1
]

110 
cmp
 
r3
,#1

111 
beq
 
•ö


113 
	}
}

125 
	$muãx_g©eu∆ock
 ()

127 
__asm


129 
mov
 
r1
, &
£m≠h‹e


130 
mov
 
r2
, #0

131 
swp
 
r0
,
r2
,[
r1
]

133 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/mutex.h

76 
	#aWAIT
 
£m≠h‹e
==1Ë{} 
	`muãx_g©ñock
();

	)

77 
	#aSIGNAL
 
	`muãx_g©eu∆ock
();

	)

79 
	#bWAIT
 
£m≠h‹e
==1||£m≠h‹e==2Ë{} \

	)

80 
muãx_g©ñock
();

82 
	#bSIGNAL
 
	`muãx_g©eu∆ock
();

	)

88 vﬁ©ûê
£m≠h‹e
;

100 
muãx_g©ñock
 ();

112 
muãx_g©eu∆ock
 ();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/uid.h

72 
	~"../hódîs/≠i_ty≥s.h
"

78 
	#NONE
 0

	)

102 
UID
 
uid_gíî©e
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/data.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
d©a
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eD©aAb‹tH™dÀr


20 
AREA
 
	gDATAABTSLOS
,
	gCODE
,
READONLY


21 
c‹eD©aAb‹tH™dÀr


23 
B
 
	gc‹eD©aAb‹tH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a
 {

97 
	msize
;

98 *
	md©a
;

99 } 
	tblock_d©a°r
;

109 
	sdevi˚_åì
 {

118 
	m«me
[12];

127 
UID
 
	mdrivî_id
;

137 (*
	möô
) ();

151 
UID
 (*
›í
) (, );

164 (*
	m˛o£
Ë(
	mUID
);

181 (*
	mbyã
Ë(
	mUID
, 
	mBYTE
);

191 (*
	mbô
Ë(
	mUID
, 
	mBYTE
);

201 (*
	mblock
Ë(
	mUID
, 
	mblock_d©a°r
 *);

203 } 
	mwrôe
;

221 
BYTE
 (*
byã
Ë(
	mUID
);

232 
BYTE
 (*
bô
Ë(
	mUID
);

242 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

244 } 
	mªad
;

246 } 
	tdevi˚_åì°r
 ;

248 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_io.c

73 
	~"../e7t/devi˚s/ddf_åì.h
"

89 
	$ioInôülizeDrivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
(
id
);

147 
	}
}

161 
	$ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
(
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
(
id
);

185 
	}
}

199 
	$ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
byã
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
(
id
,
byã
);

204 
	}
}

217 
BYTE
 
	$ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

219 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

221  
d
->
ªad
.
	`byã
(
id
);

222 
	}
}

236 
	$ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

238 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

240 
d
->
wrôe
.
	`block
(
id
,
block
);

241 
	}
}

254 
block_d©a°r
 *
	$ioRódBlock
 (
devi˚_åì°r
 *
d
,
UID
 
id
)

256 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

258  
d
->
ªad
.
	`block
(
id
);

259 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_io.h

72 
	~"ddf_‰ame.h
"

88 
ioInôülizeDrivîs
();

102 
devi˚_åì°r
 *
ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
);

115 
ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

129 
ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

143 
BYTE
 
ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

157 
ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
byã
);

170 
BYTE
 
ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

184 
ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
);

197 
block_d©a°r
 *
ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/ddf_tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"../devi˚s/Àd_drivî.h
"

74 
	~"../devi˚s/£gmít_drivî.h
"

75 
	~"../devi˚s/£rül_drivî.h
"

81 
	~"../devi˚s/ddf_ty≥s.h
"

93 
devi˚_åì°r
 
	gdevi˚s
[] =

103 
DEVICE_LED_E7T
,

104 
Àd_öô
,

105 
Àd_›í
,

106 
Àd_˛o£
,

107 
Àd_wrôe_bô
,

108 
Àd_ªad_bô
,

117 
DEVICE_SEGMENT_E7T
,

118 
£gmít_öô
,

119 
£gmít_›í
,

120 
£gmít_˛o£
,

121 
£gmít_wrôe_byã
,

122 
£gmít_ªad_byã
,

131 
DEVICE_SERIAL_E7T
,

132 
£rül_öô
,

133 
£rül_›í
,

134 
£rül_˛o£
,

135 
£rül_wrôe_byã
,

136 
£rül_ªad_byã
,

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/ddf_types.h

68 #i‚de‡
_DEVICE_DDF_E7T_TYPES


70 
	#_DEVICE_DDF_E7T_TYPES
 1

	)

72 
	#DEVICE_LED_E7T
 55075

	)

73 
	#DEVICE_SEGMENT_E7T
 55090

	)

74 
	#DEVICE_SERIAL_E7T
 55095

	)

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

84 #i‚de‡
SYSCFG


85 
	#SYSCFG
 0x03ff0000

	)

90 
	#IOPMOD
 (vﬁ©ûê*)(
SYSCFG
 + 0x5000)

	)

91 
	#IOPDATA
 (vﬁ©ûê*)(
SYSCFG
 + 0x5008)

	)

92 
	#LEDBANK
 *
IOPDATA


	)

96 
	#LED_4_ON
 (
LEDBANK
=LEDBANK|0x00000010)

	)

97 
	#LED_3_ON
 (
LEDBANK
=LEDBANK|0x00000020)

	)

98 
	#LED_2_ON
 (
LEDBANK
=LEDBANK|0x00000040)

	)

99 
	#LED_1_ON
 (
LEDBANK
=LEDBANK|0x00000080)

	)

103 
	#LED_4_OFF
 (
LEDBANK
=LEDBANK&~0x00000010)

	)

104 
	#LED_3_OFF
 (
LEDBANK
=LEDBANK&~0x00000020)

	)

105 
	#LED_2_OFF
 (
LEDBANK
=LEDBANK&~0x00000040)

	)

106 
	#LED_1_OFF
 (
LEDBANK
=LEDBANK&~0x00000080)

	)

114 
	mÀd
[4];

115 
	muid
[4];

116 } 
	töã∫Æ_Àd°r
;

122 
öã∫Æ_Àd°r
 
	gdiodes
;

136 
	$Àd_öô
()

138 *
IOPMOD
 = 0xf0;

139 *
IOPDATA
 = 0x50;

143 
LED_4_OFF
;

144 
LED_3_OFF
;

145 
LED_2_OFF
;

146 
LED_1_OFF
;

150 
diodes
.
Àd
 [
GREEN1
] = 
OFF
;

151 
diodes
.
Àd
 [
RED
] = 
OFF
;

152 
diodes
.
Àd
 [
ORANGE
] = 
OFF
;

153 
diodes
.
Àd
 [
GREEN2
] = 
OFF
;

155 
diodes
.
uid
 [
GREEN1
] = 
NONE
;

156 
diodes
.
uid
 [
RED
] = 
NONE
;

157 
diodes
.
uid
 [
ORANGE
] = 
NONE
;

158 
diodes
.
uid
 [
GREEN2
] = 
NONE
;

160 
	}
}

173 
UID
 
	$Àd_›í
(
maj‹
,
mö‹
)

176 i‡(
maj‹
==
DEVICE_LED_E7T
)

178 i‡(
mö‹
 <4)

180 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

182 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

183  
diodes
.
uid
[
mö‹
];

187  
DEVICE_IN_USE
;

192  
DEVICE_UNKNOWN
;

196  
DEVICE_NEXT
;

197 
	}
}

213 
	$Àd_˛o£
(
UID
 
id
)

215 
x
;

217 
x
=0;x<=3;x++)

219 i‡(
diodes
.
uid
[
x
]==
id
)

221 
diodes
.
uid
 [
x
] = 
NONE
;

222  
DEVICE_SUCCESS
;

226  
DEVICE_UNKNOWN
;

227 
	}
}

241 
	$Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
)

243 
x
;

245 
x
=0;x<=3;x++)

247 i‡(
diodes
.
uid
[
x
]==
id
)

249 i‡(
diodes
.
uid
[
x
]!=
NONE
)

251 
Àd_£t
 &= 1;

253 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

255 i‡(
Àd_£t
==
ON
)

257 
x
)

259 
GREEN2
 : 
LED_4_ON
; ;

260 
RED
 : 
LED_2_ON
; ;

261 
ORANGE
 : 
LED_3_ON
; ;

262 
GREEN1
 : 
LED_1_ON
; ;

267 
x
)

269 
GREEN2
 : 
LED_4_OFF
; ;

270 
RED
 : 
LED_2_OFF
; ;

271 
ORANGE
 : 
LED_3_OFF
; ;

272 
GREEN1
 : 
LED_1_OFF
; ;

278 
	}
}

290 
BYTE
 
	$Àd_ªad_bô
(
UID
 
id
)

292 
x
;

294 
x
=0;x<=3;x++)

296 i‡(
diodes
.
uid
[
x
]==
id
)

298 i‡(
diodes
.
uid
[
x
]!=
NONE
)

300  
diodes
.
Àd
 [
x
];

310 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/led_driver.h

69 #i‚de‡
_DEVICE_E7T_LED


71 
	#_DEVICE_E7T_LED
 1

	)

73 
	#DEVICE_LED_E7T
 55075

	)

76 
	#GREEN1
 0

	)

77 
	#RED
 2

	)

78 
	#ORANGE
 1

	)

79 
	#GREEN2
 3

	)

81 
	#ON
 1

	)

82 
	#OFF
 0

	)

96 
Àd_öô
();

109 
UID
 
Àd_›í
(
devi˚
,
Àd
);

123 
Àd_˛o£
(
UID
 
id
);

137 
Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
);

149 
BYTE
 
Àd_ªad_bô
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/segment_driver.c

73 
	~"../../devi˚s/ddf_‰ame.h
"

74 
	~"£gmít_drivî.h
"

76 
	#DEVICE_SEGMENT_E7T
 55090

	)

84 
	#SYSCFG
 0x03ff0000

	)

85 
	#IOPMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x5000))

	)

86 
	#IOPDATA
 ((vﬁ©ûê*)(
SYSCFG
+0x5008))

	)

87 
	#SEG_MASK
 (0x1fc00)

	)

91 
	#SEG_A
 (1<<10)

	)

92 
	#SEG_B
 (1<<11)

	)

93 
	#SEG_C
 (1<<12)

	)

94 
	#SEG_D
 (1<<13)

	)

95 
	#SEG_E
 (1<<14)

	)

96 
	#SEG_F
 (1<<16)

	)

97 
	#SEG_G
 (1<<15)

	)

99 
	#DISP_0
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
)

	)

100 
	#DISP_1
 (
SEG_B
|
SEG_C
)

	)

101 
	#DISP_2
 (
SEG_A
|
SEG_B
|
SEG_D
|
SEG_E
|
SEG_G
)

	)

102 
	#DISP_3
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_G
)

	)

103 
	#DISP_4
 (
SEG_B
|
SEG_C
|
SEG_F
|
SEG_G
)

	)

104 
	#DISP_5
 (
SEG_A
|
SEG_C
|
SEG_D
|
SEG_F
|
SEG_G
)

	)

105 
	#DISP_6
 (
SEG_A
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

106 
	#DISP_7
 (
SEG_A
|
SEG_B
|
SEG_C
)

	)

107 
	#DISP_8
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

108 
	#DISP_9
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_D
|
SEG_F
|
SEG_G
)

	)

110 
	#DISP_A
 (
SEG_A
|
SEG_B
|
SEG_C
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

111 
	#DISP_B
 (
SEG_C
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

112 
	#DISP_C
 (
SEG_A
|
SEG_D
|
SEG_E
|
SEG_F
)

	)

113 
	#DISP_D
 (
SEG_B
|
SEG_C
|
SEG_D
|
SEG_E
|
SEG_G
)

	)

114 
	#DISP_E
 (
SEG_A
|
SEG_D
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

115 
	#DISP_F
 (
SEG_A
|
SEG_E
|
SEG_F
|
SEG_G
)

	)

117 
	#ON
 1

	)

118 
	#OFF
 0

	)

125 
	m£g
;

126 
	muid
;

127 } 
	töã∫Æ_£gmít°r
;

133 
öã∫Æ_£gmít°r
 
	gdi•œy
;

137 
	gnumîic_di•œy
 [16] =

139 
DISP_0
,

140 
DISP_1
,

141 
DISP_2
,

142 
DISP_3
,

143 
DISP_4
,

144 
DISP_5
,

145 
DISP_6
,

146 
DISP_7
,

147 
DISP_8
,

148 
DISP_9
,

149 
DISP_A
,

150 
DISP_B
,

151 
DISP_C
,

152 
DISP_D
,

153 
DISP_E
,

154 
DISP_F


157 
£gmít_£t
 (
BYTE
 
£g
);

171 
	$£gmít_öô
 ()

175 *
IOPMOD
 |
SEG_MASK
;

176 *
IOPDATA
 |
SEG_MASK
;

180 
di•œy
.
uid
 = 
NONE
;

181 
di•œy
.
£g
 = 0;

182 
	`£gmít_£t
 (0);

184 
	}
}

199 
UID
 
	$£gmít_›í
(
maj‹
,
ign‹e
)

202 i‡(
maj‹
==
DEVICE_SEGMENT_E7T
)

204 i‡(
di•œy
.
uid
==
NONE
)

206 
di•œy
.
uid
 = 
	`uid_gíî©e
 ();

207  
di•œy
.
uid
;

211  
DEVICE_IN_USE
;

215  
DEVICE_NEXT
;

216 
	}
}

230 
	$£gmít_˛o£
(
UID
 
id
)

232 i‡(
di•œy
.
uid
==
id
)

234 
di•œy
.
uid
 = 
NONE
;

235  
DEVICE_SUCCESS
;

238  
DEVICE_UNKNOWN
;

239 
	}
}

251 
	$£gmít_£tdi•œy
(
d
)

253 *
IOPDATA
 &~
SEG_MASK
;

254 *
IOPDATA
 |
d
;

255 
	}
}

269 
	$£gmít_£t
(
BYTE
 
£g
)

271 i‡(
£g
 <= 0xf )

272 
	`£gmít_£tdi•œy
(
numîic_di•œy
[
£g
]);

274 
	}
}

288 
	$£gmít_wrôe_byã
(
UID
 
id
,
BYTE
 
£g
)

290 i‡(
di•œy
.
uid
==
id
)

292 
di•œy
.
£g
 = seg;

293 
	`£gmít_£t
 (
£g
);

295 
	}
}

307 
BYTE
 
	$£gmít_ªad_byã
(
UID
 
id
)

309 i‡(
di•œy
.
uid
==
id
)

311  
di•œy
.
£g
;

319 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/segment_driver.h

81 
£gmít_öô
();

94 
UID
 
£gmít_›í
(
devi˚
,
ign‹ed
);

108 
£gmít_˛o£
(
UID
 
id
);

121 
£gmít_wrôe_byã
(
UID
 
id
,
BYTE
 
£gmít
);

133 
BYTE
 
£gmít_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/serial_driver.c

73 
	~"../../devi˚s/ddf_‰ame.h
"

74 
	~"£rül_drivî.h
"

76 
	#DEVICE_SERIAL_E7T
 55095

	)

82 
	#ON
 1

	)

83 
	#OFF
 0

	)

85 
	#SYSCFG
 (0x03ff0000)

	)

86 
	#UART0_BASE
 (
SYSCFG
 + 0xD000)

	)

87 
	#UART1_BASE
 (
SYSCFG
 + 0xE000)

	)

93 
	#ULCON
 0x00

	)

94 
	#UCON
 0x04

	)

95 
	#USTAT
 0x08

	)

96 
	#UTXBUF
 0x0C

	)

97 
	#URXBUF
 0x10

	)

98 
	#UBRDIV
 0x14

	)

104 
	#ULCR8bôs
 (3)

	)

105 
	#ULCRS1St›Bô
 (0)

	)

106 
	#ULCRNoP¨ôy
 (0)

	)

112 
	#UCRRxM
 (1)

	)

113 
	#UCRRxSI
 (1 << 2)

	)

114 
	#UCRTxM
 (1 << 3)

	)

115 
	#UCRLPB
 (1 << 7)

	)

121 
	#USROvîrun
 (1 << 0)

	)

122 
	#USRP¨ôy
 (1 << 1)

	)

123 
	#USRFømög
 (1 << 2)

	)

124 
	#USRBªak
 (1 << 3)

	)

125 
	#USRDTR
 (1 << 4)

	)

126 
	#USRRxD©a
 (1 << 5)

	)

127 
	#USRTxHﬁdEm±y
 (1 << 6)

	)

128 
	#USRTxEm±y
 (1 << 7)

	)

132 
	#BAUD_9600
 (162 << 4)

	)

138 
	#GET_STATUS
(
p
Ë(*(vﬁ©ûê*)(’Ë+ 
USTAT
))

	)

139 
	#RX_DATA
(
s
Ë((sË& 
USRRxD©a
)

	)

140 
	#GET_CHAR
(
p
Ë(*(vﬁ©ûê*)(’Ë+ 
URXBUF
))

	)

141 
	#TX_READY
(
s
Ë((sË& 
USRTxHﬁdEm±y
)

	)

142 
	#PUT_CHAR
(
p
,
c
Ë(*(*)(’Ë+ 
UTXBUF
Ë()(c))

	)

144 
	#COM1
 (1)

	)

145 
	#COM0
 (0)

	)

153 
	mbaudøã
[2];

154 
	muid
[2];

155 } 
	töã∫Æ_£rül°r
;

161 
öã∫Æ_£rül°r
 
	gnode
;

174 
	$öã∫ÆSîülE7TSëup
(
p‹t
, 
baud
)

177 *(vﬁ©ûê*Ë(
p‹t
 + 
UCON
) = 0;

180 *(vﬁ©ûê*Ë(
p‹t
 + 
ULCON
Ë(
ULCR8bôs
);

183 *(vﬁ©ûê*Ë(
p‹t
 + 
UCON
Ë
UCRRxM
 | 
UCRTxM
;

186 *(vﬁ©ûê*Ë(
p‹t
 + 
UBRDIV
Ë
baud
;

187 
	}
}

200 
	$£rül_öô
()

205 
	`öã∫ÆSîülE7TSëup
(
UART0_BASE
,
BAUD_9600
);

208 
	`öã∫ÆSîülE7TSëup
(
UART1_BASE
,
BAUD_9600
);

212 
node
.
baudøã
[0] = 
BAUD_9600
;

213 
node
.
baudøã
[1] = 
BAUD_9600
;

214 
node
.
uid
[
COM0
] = 
NONE
;

215 
node
.
uid
[
COM1
] = 
NONE
;

216 
	}
}

231 
UID
 
	$£rül_›í
(
maj‹
,
com
)

233 i‡(
maj‹
==
DEVICE_SERIAL_E7T
)

235 i‡(
com
==
COM0
 || com==
COM1
)

237 i‡(
node
.
uid
[
com
]!=
NONE
)

239  
DEVICE_IN_USE
;

243 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

244  
node
.
uid
[
com
];

249  
DEVICE_NEXT
;

250 
	}
}

264 
	$£rül_˛o£
(
UID
 
id
)

266 i‡(
node
.
uid
[
COM0
]==
id
)

268 
node
.
uid
[
COM0
] = 
NONE
;

269  
DEVICE_SUCCESS
;

272 i‡(
node
.
uid
[
COM1
]==
id
)

274 
node
.
uid
[
COM1
] = 
NONE
;

275  
DEVICE_SUCCESS
;

278  
DEVICE_UNKNOWN
;

279 
	}
}

294 
	$öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
)

296 
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

298 
	`PUT_CHAR
(
p‹t
,
c
);

299 
	}
}

313 
	$£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
)

316 i‡(
node
.
uid
[
COM0
]==
id
)

318 
	`öã∫Æ_£rül_wrôe
 (
UART0_BASE
,
d©a
);

322 i‡(
node
.
uid
[
COM1
]==
id
)

324 
	`öã∫Æ_£rül_wrôe
 (
UART1_BASE
,
d©a
);

328 
	}
}

340 
BYTE
 
	$öã∫Æ_£rül_ªad
(
p‹t
)

343  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

345  
	`GET_CHAR
(
p‹t
);

346 
	}
}

358 
BYTE
 
	$£rül_ªad_byã
(
UID
 
id
)

360 i‡(
node
.
uid
[
COM0
]==
id
)

362  
	`öã∫Æ_£rül_ªad
 (
UART0_BASE
);

365 i‡(
node
.
uid
[
COM1
]==
id
)

367  
	`öã∫Æ_£rül_ªad
 (
UART1_BASE
);

371 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/serial_driver.h

68 
	#COM1
 (1)

	)

69 
	#COM0
 (0)

	)

82 
£rül_öô
();

97 
UID
 
£rül_›í
(
maj‹
,
com
);

111 
£rül_˛o£
(
UID
 
id
);

126 
öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
);

140 
£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
);

152 
BYTE
 
£rül_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/button_service.c

77 
	~"../../hódîs/≠i_ty≥s.h
"

78 
	~"../../devi˚s/ddf_io.h
"

79 
	~"../devi˚s/ddf_ty≥s.h
"

81 
	~"../devi˚s/Àd_drivî.h
"

83 
	~"swis.h
"

84 
	~"../../hódîs/≠i_devi˚.h
"

86 
	~"../hódîs/ma¸os.h
"

88 
STATE
;

94 
devi˚_åì°r
 *
	gÀdNode
;

95 
UID
 
	gÀdUID
;

107 
	$evítBuâ⁄MaskIrq
(
úq
)

115 *(vﬁ©ûê*)
INTMSK
 |(1<<
úq
);

116 
	}
}

118 
	$evítBuâ⁄UnmaskIrq
(
úq1
,
úq2
)

128 *(vﬁ©ûê*)
INTMSK
 &~((1<<
INT_GLOBAL
)|(1<<
úq1
)|(1<<
úq2
));

129 
	}
}

141 
	$evítBuâ⁄Inô
()

166 *(vﬁ©ûê*)
INTMSK
 &~((1 << 
INT_GLOBAL
) | (1<<10) | (1<<0));

168 *(vﬁ©ûê*)
IOPCON
 |
IO_ENABLE_INT0
;

169 *(vﬁ©ûê*)
IOPCON
 |
IO_ACTIVE_HIGH_INT0
;

170 *(vﬁ©ûê*)
IOPCON
 |
IO_RISING_EDGE_INT0
;

179 
ÀdNode
 = 
	`evítIODevi˚O≥n
(&
ÀdUID
,
DEVICE_LED_E7T
,
GREEN1
);

181 
	}
}

193 
	$evítBuâ⁄Pªs£d
()

195 
BYTE
 
LED1
;

204 
STATE
 = 1;

206 
LED1
 = 
	`evítIODevi˚RódBô
 (
ÀdNode
,
ÀdUID
);

208 i‡(
LED1
==1)

217 
	`evítIODevi˚WrôeBô
 (
ÀdNode
,
ÀdUID
,0);

228 
	`evítIODevi˚WrôeBô
 (
ÀdNode
,
ÀdUID
,1);

231 
STATE
 = 2;

232 
	}
}

244 
	$evítBuâ⁄Sîvi˚
()

254 *(vﬁ©ûê*Ë
INTPND
 &
INT_SW3_MASK
;

263 
	`evítBuâ⁄Pªs£d
();

264 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/button_service.h

82 
evítBuâ⁄Inô
();

94 
evítBuâ⁄Sîvi˚
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/event_init.c

71 
	~"buâ⁄_£rvi˚.h
"

91 
	$evítSîvi˚sInô
()

93 
	`evítBuâ⁄Inô
();

94 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/event_init.h

67 
evítSîvi˚sInô
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/irq_handler.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
h™dÀr
.
s


55 ; * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 ; * 
OS
 : 
SLOS


57 ; * 
Pœtf‹m
 : 
e7t


58 ; * 
Hi°‹y
 :

60 ; * 21 
De˚mbî
 2001 
Andªw
 
N
. 
Sloss


61 ; * - 
°¨ãd
 
w‹kög
 
⁄
 
the
 
h™dÀrs


66 ; * 
EXPORT


69 
EXPORT
 
evítsIRQH™dÀr


72 ; * 
IMPORT


75 
IMPORT
 
evítTickSîvi˚


76 
IMPORT
 
evítBuâ⁄Sîvi˚


77 
IMPORT
 
kî√lScheduÀr


80 ; * 
ROUTINES


83 
AREA
 
IRQE7T
,
CODE
,
READONLY


85 ; -- 
addªss
 
of
 
the
 
IRQ
 
c⁄åﬁÀr
 thê
Samsung
 
KS32C50100
.

87 
INTPND
 
DCD
 0x03ff4004 ; 
IRQ
 
c⁄åﬁÀr


89 ; -- 
evíts_úq_h™dÀr
 -------------------------------------------------------

91 ; 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


92 ; 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

95 
evítsIRQH™dÀr


97 
SUB
 
r14
,Ñ14, #4

98 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} ; savêc⁄ãxt

99 
LDR
 
	gr0
, 
INTPND


100 
LDR
 
	gr0
, [
r0
] ; 
gë
 
IRQ
 
sour˚


101 
TST
 
	gr0
, #0
x0400


102 
BNE
 
	gevítTickVíìr
 ; 
timî
 
öãºu±


103 
TST
 
	gr0
, #0
x0001


104 
BNE
 
	gevítBuâ⁄Víìr
 ; 
buâ⁄
 
öãºu±


105 
LDMFD
 
	gr13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ ; 
unknown
 
evít
 
ign‹e


107 
evítBuâ⁄Víìr


109 
BL
 
evítBuâ⁄Sîvi˚


110 
LDMFD
 
	gr13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ ;  
to
 
èsk


112 
evítTickVíìr


114 
BL
 
evítTickSîvi˚


115 
B
 
kî√lScheduÀr


116 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/swi_handler.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögUpSëR8fiq
();

98 
brögUpSëR9fiq
();

99 
brögUpSëR10fiq
();

101 
STATE
;

120 
CÆlBack
 
	$evítsSWIH™dÀr
(
swi_numbî
, 
SwiRegs
 *
r
)

122 
swi_numbî
)

129 
SLOS
:

131 
r
->r[0])

145 
BrögUp_Tø˚
:

147 
r
->r[1])

150 
	`brögUpSëR9fiq
 (
r
->r[2]);

154 
	`brögUpSëR10fiq
 (
r
->r[2]);

160 
BrögUp_F©ÆEº‹
:

161 
	`brögUpSëR8fiq
 (
r
->r[1]);

163 
ÁèÀº‹
: fatalerror;

173 
Evít_IODevi˚Inô
:

174 
	`ioInôülizeDrivîs
 ();

184 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SYSTEM
|
IRQoN
);}

186 
r
->r[0])

189 
Evít_IODevi˚O≥n
:

190 
r
->r[0] = (Ë
	`ioO≥nDrivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

193 
Evít_IODevi˚Clo£
:

194 
r
->r[0] = (Ë
	`ioClo£Drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

197 
Evít_IODevi˚WrôeByã
:

198 
	`ioWrôeByã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

201 
Evít_IODevi˚RódByã
:

202 
r
->r[0] = (Ë
	`ioRódByã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

205 
Evít_IODevi˚WrôeBô
:

206 
	`ioWrôeBô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

209 
Evít_IODevi˚RódBô
:

210 
r
->r[0] = (Ë
	`ioRódBô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

213 
Evít_IODevi˚WrôeBlock
:

214 
	`ioWrôeBlock
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

217 
Evít_IODevi˚RódBlock
:

218 
r
->r[0] = (Ë
	`ioRódBlock
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

223 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SVC
|
IRQoFF
);}

227  
	`ªp‹tOK
();

228 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/tick_service.c

72 
	~"../hódîs/ma¸os.h
"

74 
	~"../../hódîs/≠i_ty≥s.h
"

86 
UINT
 
	gcou¡down
;

114 
	$evítTickInô
 (
UINT
 
m£c
)

123 *
TMOD
 = 0;

124 *
INTPND
 = 0x00000000;

133 
m£c
)

136 
cou¡down
 = 0x000ffff0;

139 
cou¡down
 = 0x00effff0;

142 
	}
}

159 
	$evítTickSîvi˚
()

164 *
INTPND
 = 1<<10;

165 *
TDATA0
 = 
cou¡down
;

169 *(vﬁ©ûê*)
INTMSK
 &~((1<<
INT_GLOBAL
)|(1<<10)|(1<<0));

170 
	}
}

182 
	$evítTickSèπ
()

184 *
TDATA0
 = 
cou¡down
;

185 *
TMOD
 |= 0x1;

189 *(vﬁ©ûê*)
INTMSK
 &~((1 << 
INT_GLOBAL
) | (1<<10) | (1<<0));

190 
	}
}

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/tick_service.h

99 
evítTickInô
(
UINT
 
m£c
);

111 
evítTickSîvi˚
();

123 
evítTickSèπ
();

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/headers/all.h

68 #i‚de‡
_HEADERS_E7T_ALL


70 
	#_HEADERS_E7T_ALL
 1

	)

72 
	~"ma¸os.h
"

74 
	~"../devi˚s/£gmít_drivî.h
"

75 
	~"../devi˚s/£rül_drivî.h
"

77 
	~"../evíts/tick_£rvi˚.h
"

78 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/headers/macros.h

70 #i‚de‡
SYSCFG


71 
	#SYSCFG
 0x03ff0000

	)

74 
	#IOPMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x5000))

	)

75 
	#IOPCON
 ((vﬁ©ûê*)(
SYSCFG
+0x5004))

	)

77 #i‚de‡
IOPDATA


78 
	#IOPDATA
 (
SYSCFG
+0x5008)

	)

81 
	#INTPND
 ((vﬁ©ûê*)(
SYSCFG
+0x4004))

	)

82 
	#INTMSK
 ((vﬁ©ûê*)(
SYSCFG
+0x4008))

	)

83 
	#INT_GLOBAL
 (21)

	)

85 
	#INT_SW3_MASK
 (1)

	)

87 
	#IO_ENABLE_INT0
 (1<<4)

	)

88 
	#IO_ACTIVE_HIGH_INT0
 (1<<3)

	)

89 
	#IO_RISING_EDGE_INT0
 (1)

	)

91 
	#TMOD
 ((vﬁ©ûê*)(
SYSCFG
+0x6000))

92 
	#TDATA0
 ((vﬁ©ûê*)(
SYSCFG
+0x6004))

	)

93 
	#TCNT0
 ((vﬁ©ûê*)(
SYSCFG
+0x600c))

	)

95 
	#ENABLE_TIMER0
 (1)

	)

96 
	#DISABLE_TIMER0
 (0)

	)

98 
	#TOGGLE_TIMER0
 (1<<1)

	)

99 
	#INIT0_TIMER0
 (1<<2)

	)

103 
	#IRQVe˘‹
 0x18

	)

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/init.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
öô
.
s


8 ; * 
	gOS
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


12 ; * 14 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


13 ; * - 
£∑øãd
 
the
 
pcbSëUp
 
	groutöe


18 ; 
	gIMPORT
/
EXPORT
 
key
 
	gfun˘i⁄s


21 
EXPORT
 
c‹eInôülize


23 
IMPORT
 
PCB_PåTask2


24 
IMPORT
 
C_E¡ryTask2


25 
IMPORT
 
PCB_PåTask3


26 
IMPORT
 
C_E¡ryTask3


27 
IMPORT
 
brögUpInôFIQRegi°îs


28 
IMPORT
 
C_E¡ry


29 
IMPORT
 
PCB_CuºítTask


30 
IMPORT
 
	gpcbSëUp


33 ; 
Deföe
 
u£ful
 
	gc⁄°™ts


36 
IRQ32md
 
	gEQU
 0x12

37 
SVC32md
 
	gEQU
 0x13

38 
SYS32md
 
	gEQU
 0x1f

39 
NoI¡
 
	gEQU
 0xc0

41 
AREA
 
	gINITSLOS
,
	gCODE
,
	gREADONLY


44 ; 
Sèπ
 
öôülizög
 
the
 
c‹e
 
	g∑πs


47 
	gc‹eInôülize


50 ; 
Inôülize
 
low
 
Àvñ
 
	gdebug


53 
BL
 
	gbrögUpInôFIQRegi°îs


56 ; 
Sëup
 
°acks
 
	gSVC
,
	gIRQ
,
	gSYS
&
	gUSER


57 ; 
	gMode
 = 
SVC


60 
MOV
 
	g•
,#0
	gx80000
 ; 
öôülizög
 
•
 
to
 
T›OfMem‹y


61 
MSR
 
	gCPSR_c
,#NoI¡|
SYS32md


62 
MOV
 
	g•
,#0
	gx40000
 ; 
	gSYS
/
U£r
 
	gSèck
 = 0x40000

63 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


64 
MOV
 
	g•
,#0
	gx9000
 ; 
IRQ
 
	gSèck
 = 0x9000

65 
MSR
 
CPSR_c
,#NoI¡|
	gSVC32md


68 ; 
Sëup
 
Task
 
Pro˚ss
 
C⁄åﬁ
 
Block
 (
PCB
).

69 ; 
	gMode
 = 
SVC


72 
LDR
 
	gr0
,=
C_E¡ryTask2
 ; 
addr
 
of
 C_EntryTask2

73 
LDR
 
	gr1
,=
PCB_PåTask2


74 
MOV
 
r2
,#0
x10000


75 
BL
 
pcbSëUp


77 
LDR
 
	gr0
,=
C_E¡ryTask3
 ; 
addr
 
of
 C_EntryTask3

78 
LDR
 
	gr1
,=
PCB_PåTask3


79 
MOV
 
r2
,#0
x20000


80 
BL
 
	gpcbSëUp


82 ; -- 
£t
 
the
 
cuºít
 
ID
 
to
 
	gTASK1
 ...........

84 
LDR
 
	gr0
, =
PCB_CuºítTask


85 
MOV
 
r1
, #0

86 
STR
 
	gr1
,[
r0
] ; 
fú°
 
èsk
 
	gID
 = 0

87 
LDR
 
Ã
,=
C_E¡ry


88 
MOV
 
pc
,
	gÃ
 ; 
ˇŒ
 
C_E¡ry


89 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/pcb.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
pcb
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
PCB_CuºítTask


19 
EXPORT
 
PCB_TabÀ


20 
EXPORT
 
PCB_T›OfIRQSèck


21 
EXPORT
 
PCB_PåCuºítTask


22 
EXPORT
 
PCB_PåNextTask


23 
EXPORT
 
PCB_PåTask1


24 
EXPORT
 
PCB_BŸtomTask1


25 
EXPORT
 
PCB_PåTask2


26 
EXPORT
 
PCB_BŸtomTask2


27 
EXPORT
 
PCB_PåTask3


28 
EXPORT
 
PCB_BŸtomTask3


29 
EXPORT
 
	gpcbSëUp


31 ; -- 
	gpcbSëup
 ----------------------------------------------------------------

33 ; 
	gDes¸ùti⁄
 : 
PCB
 
£tup


35 ; 
	gP¨amëîs
 : 
r0
=<
thªad
 
íåy
 
addªss
>

36 ; 
	gr1
=<
PCB
 
Addªss
>

37 ; 
	gr2
=<
°ack
 
off£t
>

38 ; 
	gRëu∫
 : 
£tup
 
PCB


39 ; 
	gNŸes
 :

42 
AREA
 
	gPCBSëUp
,
	gCODE
,
READWRITE


43 
pcbSëUp


44 
STR
 
	gr0
,[
r1
,#-4] ; 
	gPCB
[-4]=
C_TaskE¡ry
<2>

45 
STR
 
r0
,[
r1
,#-64] ; 
	gPCB
[-64]=
C_TaskE¡ry
<2>

46 
SUB
 
r0
,
	g•
,
r2


47 
STR
 
	gr0
,[
r1
,#-8] ; 
	gPCB
[-8]=
•
-<
°ack
 
off£t
>

48 
MOV
 
r0
,#0
x50


49 
STR
 
	gr0
,[
r1
,#-68] ; 
	gPCB
[-68]=
iFt_U£r


50 
MOV
 
pc
,
Ã


52 
AREA
 
	gPCBTabÀ
,
	gDATA
,
READWRITE


53 
PCB_TabÀ


54 
DCD
 
PCB_PåTask1


55 
DCD
 
PCB_PåTask2


56 
DCD
 
PCB_PåTask3


58 
AREA
 
	gPCBIRQ
,
	gDATA
,
READWRITE


59 
PCB_T›OfIRQSèck


60 
	gDCD
 0x9000 ; 
ªÆ
 
vÆue


62 
AREA
 
	gPCBPåCURRENT
,
	gDATA
,
READWRITE


63 
PCB_PåCuºítTask


64 
	gDCD
 0x1

66 
AREA
 
	gPCBPåNEXT
,
	gDATA
,
READWRITE


67 
PCB_PåNextTask


68 
	gDCD
 0x1

70 
AREA
 
	gPCBA˘ive
,
	gDATA
,
READWRITE


71 
PCB_CuºítTask


72 
	gDCD
 0x1

74 
AREA
 
	gPCB1
,
	gDATA
,
READWRITE


75 
	gPCB_BŸtomTask1


77 
PCB_PåTask1


79 
AREA
 
	gPCB2
,
	gDATA
,
READWRITE


80 
	gPCB_BŸtomTask2


82 
PCB_PåTask2


84 
AREA
 
	gPCB3
,
	gDATA
,
READWRITE


85 
	gPCB_BŸtomTask3


87 
PCB_PåTask3


88 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/events/bringup.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
brögup


55 ; * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 ; * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 ; * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 ; * 
OS
 : 
SLOS
 0.09

59 ; * 
Pœtf‹m
 : 
gíîic


64 ; * 
EXPORT


67 
EXPORT
 
brögUpSëR8fiq


68 
EXPORT
 
brögUpSëR9fiq


69 
EXPORT
 
brögUpSëR10fiq


70 
EXPORT
 
brögUpInôFIQRegi°îs


72 
AREA
 
brögup
,
CODE
,
READONLY


74 ; -- 
swôchToFIQMode
 ---------------------------------------------------------

76 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

78 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


79 ; 
Rëu∫
 : 
n⁄e
...

82 
swôchToFIQMode


84 
MOV
 
r3
,
Ã


85 
MRS
 
r1
,
CPSR


86 
BIC
 
r1
,r1,#0
x1f


87 
ORR
 
r1
,r1,#0
x11


88 
MSR
 
CPSR_c
,
r1


89 
MOV
 
pc
,
r3


91 ; -- 
swôchToSVCMode
 ---------------------------------------------------------

93 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

95 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


96 ; 
Rëu∫
 : 
n⁄e
...

99 
swôchToSVCMode


101 
MOV
 
r3
,
Ã


102 
MRS
 
r1
,
CPSR


103 
BIC
 
r1
,r1,#0
x1f


104 
ORR
 
r1
,r1,#0
x13


105 
MSR
 
CPSR_c
,
r1


106 
MOV
 
pc
,
r3


108 ; -- 
brögUpSëR8fiq
 ---------------------------------------------------------

110 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

112 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


113 ; 
Rëu∫
 : 
n⁄e
...

116 
brögUpInôFIQRegi°îs


118 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


120 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

121 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


122 
MOV
 
r8
,#0 ; 
r8FIQ
=0

123 
MOV
 
r9
,#0 ; 
r9FIQ
=0

124 
MOV
 
r10
,#0 ; 
r10FIQ
=0

125 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


126 
MOV
 
pc
,
r2
 ;  
back


128 ; -- 
brögUpSëR8fiq
 ---------------------------------------------------------

130 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

132 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


133 ; 
Rëu∫
 : 
n⁄e
...

136 
brögUpSëR8fiq


138 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


140 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

141 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


142 
MOV
 
r8
,
r0
 ; 
r10_fiq
 =Ñ0

143 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


144 
MOV
 
pc
,
r2
 ;  
back


146 ; -- 
brögUpSëR9fiq
 ---------------------------------------------------------

148 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

150 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


151 ; 
Rëu∫
 : 
n⁄e
...

154 
brögUpSëR9fiq


156 ; 
r2
 - 
íåy
 
åa˚
 
numbî


158 
MOV
 
r2
,
Ã


159 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


160 
MOV
 
r9
,
r0
 ; 
r9_fiq
 = 
r2


161 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


162 
MOV
 
pc
,
r2
 ;  
back


164 ; -- 
brögup_£tR10fiq
 -------------------------------------------------------

166 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

168 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


169 ; 
Rëu∫
 : 
n⁄e
...

172 
brögUpSëR10fiq


174 ; 
r2
 - 
exô
 
åa˚
 
numbî


176 
MOV
 
r2
,
Ã


177 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


178 
MOV
 
r10
,
r0
 ; 
r10_fiq
 = 
r2


179 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


180 
MOV
 
pc
,
r2
 ;  
back


181 
END


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/events/cpsr.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
˝§


55 ; * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 ; * 
OS
 : 
SLOS
 0.09

57 ; * 
Pœtf‹m
 : 
gíîic


58 ; * 
Hi°‹y
 :

60 ; * 15
th
 
July
 2002 
Andªw
 
N
. 
Sloss


61 ; * - 
added
 
a
 
hódî


66 ; * 
EXPORT


69 
EXPORT
 
modifyC⁄åﬁCPSR


71 
AREA
 
˝§
,
CODE
,
READONLY


73 ; -- 
modifyC⁄åﬁCPSR
 --------------------------------------------------------

75 ; 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


77 ; 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


78 ; 
Rëu∫
 : 
n⁄e
...

81 
modifyC⁄åﬁCPSR


84 ; 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


85 ; 
°ack
.

86 ; 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

87 ; 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

88 ; 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

89 ; 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

92 
STMFD
 
r13
!,{
r3
}

93 
MOV
 
	gr3
,
r13


94 
ADD
 
	gr13
,r13,#4

95 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

98 ; 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


99 ; 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


102 
MRS
 
	gr1
,
CPSR


103 
BIC
 
	gr1
,r1,#0
xff


104 
ORR
 
	gr1
,r1,
r0


105 
MSR
 
	gCPSR_c
,
	gr1


108 ; 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


109 ; 
Rëu∫
 
to
 
the
 
	gˇŒì


112 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

113 
LDMFD
 
	gr3
,{r3}

114 
MOV
 
	gpc
,
Ã


115 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/fiq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
fiq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eFIQH™dÀr


20 
AREA
 
	gFIQSLOS
,
	gCODE
,
READONLY


22 
c‹eFIQH™dÀr


23 
B
 
	gc‹eFIQH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_device.h

74 
	~"../e7t/evíts/swis.h
"

96 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Inô
 (
UINT
);

97 
	#evítIODevi˚Inô
(Ë
	`_evítIODevi˚Inô
 (
Evít_IODevi˚Inô
)

	)

120 
	$__swi
 (
SLOS
Ë
devi˚_åì°r
 *
	`_evítIODevi˚O≥n
 (
UINT
,
UID
 *,UINT,UINT);

121 
	#evítIODevi˚O≥n
(
a
,
b
,
c
Ë
_evítIODevi˚O≥n
 \

	)

122 (
Evít_IODevi˚O≥n
,(
a
),(
b
),(
c
))

142 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Clo£
 (
UINT
,
devi˚_åì°r
 *,
UID
);

143 
	#evítIODevi˚Clo£
(
a
,
b
Ë
_evítIODevi˚Clo£
 \

	)

144 (
Evít_IODevi˚Clo£
,(
a
),(
b
))

160 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeByã
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

161 
	#evítIODevi˚WrôeByã
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeByã
 \

	)

162 (
Evít_IODevi˚WrôeByã
,(
a
),(
b
),(
c
))

177 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódByã
 (UINT,
devi˚_åì°r
 *,
UID
);

178 
	#evítIODevi˚RódByã
(
a
,
b
Ë
_evítIODevi˚RódByã
 \

	)

179 (
Evít_IODevi˚RódByã
,(
a
),(
b
))

195 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBô
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

196 
	#evítIODevi˚WrôeBô
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBô
 \

	)

197 (
Evít_IODevi˚WrôeBô
,(
a
),(
b
),(
c
))

212 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódBô
 (UINT,
devi˚_åì°r
 *,
UID
);

213 
	#evítIODevi˚RódBô
(
a
,
b
Ë
_evítIODevi˚RódBô
 \

	)

214 (
Evít_IODevi˚RódBô
,(
a
),(
b
))

229 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
,*);

230 
	#evítIODevi˚WrôeBlock
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBlock
 \

	)

231 (
Evít_IODevi˚WrôeBlock
,(
a
),(
b
),(
c
))

246 
	$__swi
 (
SLOS
Ë* 
	`_evítIODevi˚RódBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
);

247 
	#evítIODevi˚RódBlock
(
a
,
b
Ë
_evítIODevi˚RódBlock
 \

	)

248 (
Evít_IODevi˚RódBlock
,(
a
),(
b
))

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_lldebug.h

71 #i‚de‡
LLDEBUG


72 
	#LLDEBUG
 1

	)

74 
	~"../e7t/evíts/swis.h
"

96 
	$__swi
 (
SLOS
Ë
	`_brögUpTø˚
 (
UINT
,UINT,
UID
);

97 
	#brögUpTø˚
(
a
,
b
Ë
	`_brögUpTø˚
 (
BrögUp_Tø˚
,◊),(b))

	)

111 
	$__swi
 (
SLOS
Ë
	`_brögUpF©ÆEº‹
 (
UINT
,
UID
);

112 
	#brögUpF©ÆEº‹
(
a
Ë
	`_brögUpF©ÆEº‹
 (
BrögUp_F©ÆEº‹
,◊))

	)

131 
	#ENTRY
 123

	)

132 
	#EXIT
 321

	)

134 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

135 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

137 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

138 (
r
); \

139 
	`Œåa˚a·î
((
u
))

153 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/irq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
úq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eIRQH™dÀr


20 
IMPORT
 
evítsIRQH™dÀr


22 
AREA
 
	gIRQSLOS
,
	gCODE
,
READONLY


24 
c‹eIRQH™dÀr


26 
B
 
	gevítsIRQH™dÀr
 ; 
bønch
 
IRQ
 
h™dÀr


28 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/prefetch.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
¥e„tch
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹ePª„tchAb‹tH™dÀr


20 
AREA
 
	gPREFECTABTSLOS
,
	gCODE
,
READONLY


22 
c‹ePª„tchAb‹tH™dÀr


24 
B
 
	gc‹ePª„tchAb‹tH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/reserved.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
ª£rved
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eRe£rvedH™dÀr


20 
AREA
 
	gRESERVEDSLOS
,
	gCODE
,
READONLY


22 
c‹eRe£rvedH™dÀr


23 
B
 
	gc‹eRe£rvedH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/scheduler.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
scheduÀr
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
IMPORT
 
PCB_CuºítTask


19 
IMPORT
 
PCB_PåCuºítTask


20 
IMPORT
 
PCB_PåNextTask


21 
IMPORT
 
PCB_TabÀ


22 
IMPORT
 
PCB_T›OfIRQSèck


24 
EXPORT
 
kî√lScheduÀr


26 
AREA
 
	gSCHEDULER
,
	gCODE
,
READONLY


28 
	gkî√lScheduÀr


31 ; 
Round
 
Robö
 
	gScheduÀr


34 
CuºítTask


36 
LDR
 
	gr3
,=
PCB_CuºítTask


37 
LDR
 
r0
,[
r3
] ; 
	gr0
 = 
Cuºít
 
Task
 
ID


38 
LDR
 
r1
,=
PCB_TabÀ


39 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
addªss
 
of
 
cuºít
 
èsk


40 
LDR
 
r2
,=
PCB_PåCuºítTask


41 
STR
 
r1
,[
r2
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


42 ; ** 
	gPCB_PåCuºítTask
 - 
upd©ed
 
wôh
 
the
 
√w
 
addªss


43 
NextTask


44 
ADD
 
	gr0
,r0,#1 ;Ñ0 = 
Cuºít_Task
+1

45 
CMP
 
r0
,#3

46 
MOVEQ
 
	gr0
,#0 ; r0==
MaxTask
 
thí
 
r0
=0

47 
STR
 
r0
,[
r3
] ; 
ßve
 
√w
 
Task
 
ID


48 
LDR
 
	gr1
,=
PCB_TabÀ


49 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
√w
 
√xt
 
èsk
 
PCB
 
addªss


50 
LDR
 
r0
,=
PCB_PåNextTask


51 
STR
 
r1
,[
r0
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


53 ; ** 
	gPCB_PåCuºítTask
 = 
cuºít
 
PCB


54 ; ** 
	gPCB_PåNextTask
 = 
√xt
 
PCB


55 ; ** 
	gPCB_CuºítTask
 = 
√w
 
TASK_ID


58 ; 
C⁄ãxt
 
	gSwôch


61 
h™dÀr_c⁄ãxtswôch


63 
LDMFD
 
	g•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} ; 
ª°‹e
 
ªmaöög
 
ªgi°îs


64 
LDR
 
	gr13
,=
PCB_PåCuºítTask


65 
LDR
 
r13
,[r13]

66 
SUB
 
	gr13
,r13,#60 ;Ñ13->
cuºít
 
PCB


67 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
ßve
 
U£r
 
ªgs


68 
MRS
 
	gr0
, 
SPSR


69 
STMDB
 
	gr13
,{
	gr0
,
	gr14
} ; 
ßve
 
the
 
ª°


70 
LDR
 
	gr13
,=
PCB_PåNextTask


71 
LDR
 
r13
,[r13]

72 
SUB
 
	gr13
,r13,#60 ;Ñ13->
√xt
 
PCB


73 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
}

74 
MSR
 
	g•§_cxsf
, 
r0


75 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
lﬂd
 
U£r
 
ªgs


76 
LDR
 
	gr13
,=
PCB_T›OfIRQSèck


77 
LDR
 
r13
,[r13] ; 
ª£t
 
IRQ
 
°ack


78 
MOVS
 
	gpc
,
	gr14
 ;  
to
 
√xt
 
èsk


79 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/start.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
°¨t
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


19 ; * 
	gIMPORT


22 
IMPORT
 
c‹eInôülize


23 
IMPORT
 
c‹eUndeföedH™dÀr


24 
IMPORT
 
c‹eSWIH™dÀr


25 
IMPORT
 
c‹ePª„tchAb‹tH™dÀr


26 
IMPORT
 
c‹eD©aAb‹tH™dÀr


27 
IMPORT
 
c‹eRe£rvedH™dÀr


28 
IMPORT
 
c‹eIRQH™dÀr


29 
IMPORT
 
c‹eFIQH™dÀr


30 
IMPORT
 
PCB_TabÀ


32 
AREA
 
	gENTRYSLOS
,
	gCODE
,
	gREADONLY


35 ; * 
	gCODE


38 
	gENTRY


41 ; 
èbÀ
 
	goff£t
 ..........

42 ; 00 - 
	gRe£t


43 ; 04 - 
Undeföed
 
	gö°ru˘i⁄s


44 ; 08 - 
SWI
 
	gö°ru˘i⁄s


45 ; 0C - 
¥e„tch
 
	gab‹t


46 ; 10 - 
D©a
 
	gab‹t


47 ; 14 - 
	gRe£rved


48 ; 18 - 
IRQ
 
	göãºu±s


49 ; 1C - 
FIQ
 
	göãºu±s


52 
LDR
 
	gpc
,
ve˘‹Re£t


53 
LDR
 
	gpc
,
ve˘‹Undeföed


54 
LDR
 
	gpc
,
ve˘‹SWI


55 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


56 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


57 
LDR
 
	gpc
,
ve˘‹Re£rved


58 
LDR
 
	gpc
,
ve˘‹IRQ


59 
LDR
 
	gpc
,
	gve˘‹FIQ


61 ; -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

63 
±rPCBTabÀ
 
DCD
 
	gPCB_TabÀ


65 ; -- 
Kî√l
 
Jump
 
	gèbÀ
 ------------------------------

67 
ve˘‹Re£t
 
DCD
 
c‹eInôülize


68 
ve˘‹Undeföed
 
DCD
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
 
DCD
 
c‹eSWIH™dÀr


70 
ve˘‹Pª„tchAb‹t
 
DCD
 
c‹ePª„tchAb‹tH™dÀr


71 
ve˘‹D©aAb‹t
 
DCD
 
c‹eD©aAb‹tH™dÀr


72 
ve˘‹Re£rved
 
DCD
 
c‹eRe£rvedH™dÀr


73 
ve˘‹IRQ
 
DCD
 
c‹eIRQH™dÀr


74 
ve˘‹FIQ
 
DCD
 
c‹eFIQH™dÀr


76 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/swi.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
swi
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
	gc‹eSWIH™dÀr


21 ; * 
	gIMPORT


24 
IMPORT
 
evítsSWIH™dÀr


26 
AREA
 
	gSWISLOS
, 
	gCODE
, 
	gREADONLY


29 ; * 
kî√l
 
swi
 
h™dÀr
 
	gevít


32 
c‹eSWIH™dÀr


34 
STMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gÃ
} ; 
St‹e
 
ªgi°îs


35 
LDR
 
	gr10
,[
Ã
,#-4] ; 
CÆcuœã
 
addªss
 
of
 
SWI
 
ö°ru˘i⁄


36 
BIC
 
	gr10
,r10,#0
	gxff000000
 ; 
Mask
 
off
 
	gt›
 8 
bôs


37 
MOV
 
	gr1
,
	g•
 ; 
£c⁄d
 
∑ømëî
 
to
 
C
 
	groutöe
...

38 ; 
is
 
poöãr
 
to
 
	gvÆues
.

39 
MRS
 
	gr2
,
	gSPSR
 ; 
move
 
the
 
•§
 
öto
 
gp
 

40 
STMFD
 
	g•
!,{
	gr2
} ; 
°‹e
 
•§
 
⁄to
 
the
 
	g°ack
.

41 ; 
This
 
is
 
⁄ly
 
	gªÆly


42 ; 
√eded
 
ö
 
of
 
√°ed
 
	gSWI
's

43 
BL
 
	gswi_jum±abÀ
 ; 
ˇŒ
 
C
 
routöe
 
to
 
h™dÀ
 
SWI


44 
LDMFD
 
	g•
!,{
	gr2
} ; 
ª°‹e
 
•§
 
‰om
 
°ack
 
öto
 
r2


45 
MSR
 
	gSPSR_cxsf
,
	gr2
 ; 
™d
 
ª°‹e
 
ô
 
öto
 
	g•§
.

46 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^ ; 
ª°‹e
 
ªgi°îs
 
™d
 .

49 ; 
SWI
 
Jump
 
	gTabÀ


50 ; 
	gr0
 - 
swi
 
	gNumbî


51 ; 
	gr1
 - 
poöt
 
to
 
the
 
	gr0
-
	gr12


54 
swi_jum±abÀ


56 
MOV
 
	gr0
,
	gr10
 ; 
move
 
SWI
 
numbî
 
öto
 
r0


57 
B
 
	gevítsSWIH™dÀr
 ; 
ˇŒög
 
c
 
routöe
 
to
 
h™dÀ
 
swi
 
ˇŒ


58 
	gEND


	@/home/jkr555/arm/guide/ch11_os/SLOS/build/src/undef.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
undef
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eUndeföedH™dÀr


20 
AREA
 
	gUNDEFSLOS
,
	gCODE
,
READONLY


22 
c‹eUndeföedH™dÀr


24 
B
 
	gc‹eUndeföedH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch12_cache/cache.h

46 
	gIF
 {
	gCPU
} = "ARM920T"

47 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
 
assumed
)

48 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

49 
NWAY
 
EQU
 6 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (64 
way
)

50 
I7SET
 
EQU
 5 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 
as
 2**
ISET


51 
I7WAY
 
EQU
 26 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 
as
 2**
SSET


52 
I9WAY
 
EQU
 26 ; 
CP15
 
c9
 
way
 
ö¸emíãr
 
as
 2**
SSET


53 
ENDIF


54 
IF
 {
CPU
} = "ARM922T"

55 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
 
assumed
)

56 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

57 
NWAY
 
EQU
 6 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (64 
way
)

58 
I7SET
 
EQU
 5 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 
as
 2**
ISET


59 
I7WAY
 
EQU
 26 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 
as
 2**
SSET


60 
I9WAY
 
EQU
 26 ; 
CP15
 
c9
 
way
 
ö¸emíãr
 
as
 2**
SSET


61 
ENDIF


62 
IF
 {
CPU
} = "ARM926EJ-S"

63 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
 
assumed
)

64 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

65 
NWAY
 
EQU
 2 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (4 
way
)

66 
I7SET
 
EQU
 4 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 
as
 2**
ISET


67 
I7WAY
 
EQU
 30 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 
as
 2**
IWAY


68 
ENDIF


69 
IF
 {
CPU
} = "ARM940T"

70 
CSIZE
 
EQU
 12 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (4
K
)

71 
CLINE
 
EQU
 4 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

72 
NWAY
 
EQU
 6 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (64 
way
)

73 
I7SET
 
EQU
 4 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 = 2**
ISET


74 
I7WAY
 
EQU
 26 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 = 2**
IWAY


75 
I9WAY
 
EQU
 0 ; 
CP15
 
c9
 
way
 
ö¸emíãr
 = 2**
IWAY


76 
ENDIF


77 
IF
 {
CPU
} = "ARM946E-S"

78 
CSIZE
 
EQU
 12 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (4 
K
 
assumed
)

79 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

80 
NWAY
 
EQU
 2 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (4 
way
)

81 
I7SET
 
EQU
 4 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 = 2**
ISET


82 
I7WAY
 
EQU
 30 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 = 2**
IWAY


83 
I9WAY
 
EQU
 0 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 = 2**
IWAY


84 
ENDIF


85 
IF
 {
CPU
} = "ARM1022E"

86 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
)

87 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

88 
NWAY
 
EQU
 6 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (64 
way
)

89 
I7SET
 
EQU
 5 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 
as
 2**
ISET


90 
I7WAY
 
EQU
 26 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 
as
 2**
SSET


91 
I9WAY
 
EQU
 26 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 = 2**
IWAY


92 
ENDIF


93 
IF
 {
CPU
} = "ARM1026EJ-S"

94 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
 
assumed
)

95 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

96 
NWAY
 
EQU
 2 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (4 
way
)

97 
I7SET
 
EQU
 5 ; 
CP15
 
c7
 
£t
 
ö¸emíãr
 
as
 2**
ISET


98 
I7WAY
 
EQU
 30 ; 
CP15
 
c7
 
way
 
ö¸emíãr
 
as
 2**
IWAY


99 
ENDIF


100 
IF
 {
CPU
} = "SA-110"

101 
CSIZE
 
EQU
 14 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (16 
K
)

102 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

103 
NWAY
 
EQU
 5 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (4 
way
)

104 
CÀ™AddªssDˇche
 
EQU
 0x8000

105 
ENDIF


106 
IF
 {
CPU
} = "XSCALE"

107 
CSIZE
 
EQU
 15 ; 
ˇche
 
size
 
	gas
 2**
	$CSIZE
 (32 
K
)

108 
CLINE
 
EQU
 5 ; 
ˇche
 
löe
 
size
 
ö
 
byãs
 
as
 2**CLINE

109 
NWAY
 
EQU
 5 ; 
£t
 
assocütivôy
 = 2**
	$NWAY
 (32 
way
)

110 
MNWAY
 
EQU
 1 ; 
£t
 
assoc
 
möi
 
D
-
ˇche
 = 2**
	$NWAY
 (2 
way
)

111 
MCSIZE
 
EQU
 11 ; 
möi
 
ˇche
 
size
 
as
 2**
	$CSIZE
 (2 
K
)

112 
CÀ™AddªssDˇche
 
EQU
 0x8000 ;(32
K
 
block
 0x8000-0x10000)

113 
CÀ™AddªssMöiDˇche
 
EQU
 0x10000 ;(2
K
 
block
 0x10000-0x10800)

114 
ENDIF


117 
SWAY
 
	`EQU
 (
CSIZE
-
NWAY
Ë; 
size
 
of
 
way
 = 2**SWAY

118 
NSET
 
	`EQU
 (
CSIZE
-
NWAY
-
CLINE
Ë; 
ˇchñöes
 
≥r
 
way
 = 2**NSET

120 
MACRO


121 
CPWAIT


122 
MRC
 
p15
, 0, 
r12
, 
c2
, 
c0
, 0 ; 
ªad
 
™y
 
CP15


123 
MOV
 
r12
,Ñ12

124 
SUB
 
pc
,Öc, #4 ; 
bønch
 
to
 
√xt
 
ö°ru˘i⁄


125 
MEND


	@/home/jkr555/arm/guide/ch12_cache/cacheTest.c

52 
	~<°dio.h
>

53 
	~<time.h
>

55 
ˇche_RRã°
(, );

56 
ªadSë
(, );

57 
íabÀRoundRobö
();

58 
íabÀR™dom
();

59 
˛ónFlushCache
();

62 
	$ˇche_RRã°
(
times
,
num£t
)

64 
˛ock_t
 
cou¡
;

65 
	`¥ötf
("Round RoböÅe° sizê%d\r\n", 
num£t
);

66 
	`íabÀRoundRobö
();

67 
	`˛ónFlushCache
();

68 
cou¡
 = 
	`˛ock
();

69 
	`ªadSë
(
times
,
num£t
);

70 
cou¡
 = 
	`˛ock
() - count;

71 
	`¥ötf
("Round RobinÉnabled = %.2f seconds\r\n",

72 ()
cou¡
/
CLOCKS_PER_SEC
);

73 
	`íabÀR™dom
();

74 
	`˛ónFlushCache
();

75 
cou¡
 = 
	`˛ock
();

76 
	`ªadSë
(
times
, 
num£t
);

77 
cou¡
 = 
	`˛ock
() - count;

78 
	`¥ötf
("RandomÉnabled = %.2f seconds\r\n\r\n",

79 ()
cou¡
/
CLOCKS_PER_SEC
);

80 
	}
}

82 
	$ªadSë
–
times
, 
num£t
)

84 
£tcou¡
, 
vÆue
;

85 vﬁ©ûê*
√w°¨t
;

86 vﬁ©ûê*
°¨t
 = (*)0x20000;

87 
__asm


89 
time¶o›
:

90 
MOV
 
√w°¨t
, 
°¨t


91 
MOV
 
£tcou¡
, 
num£t


92 
£éo›
:

93 
LDR
 
vÆue
,[
√w°¨t
,#0];

94 
ADD
 
√w°¨t
,√w°¨t,#0
x40
;

95 
SUBS
 
£tcou¡
, setcount, #1;

96 
BNE
 
£éo›
;

97 
SUBS
 
times
,Åimes, #1;

98 
BNE
 
time¶o›
;

100  
vÆue
;

101 
	}
}

	@/home/jkr555/arm/guide/ch12_cache/cleancachebytest.s

52 ; 
˛ón
 
‹
 
	g˛ón
-
	g™d
-
Êush
 
ˇche
 
usög
 
ã°
 
	glo›


54 ; 
	gC
-
	g¥ŸŸy≥


55 ; 
˛ónDCache
();

56 ; 
˛ónFlushDCache
();

57 ; 
˛ónFlushCache
();

59 
AREA
 
	g˛ónˇchebyã°
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


61 
	gIF
 {
	gCPU
} = "ARM926EJ-S" :
LOR
: {
CPU
} = "ARM1026EJ-S"

62 
EXPORT
 
˛ónDCache


63 
EXPORT
 
˛ónFlushDCache


64 
EXPORT
 
˛ónFlushCache


66 ;
ªg15
 
	gRN
 5 ; 
¥ogøm
 
cou¡î


68 
˛ónDCache


69 
MRC
 
	gp15
, 0, 
	gpc
, 
	gc7
, 
	gc10
, 3 ; 
	gã°
/
˛ón
 
	gD
-
˛öe


70 
SUBNE
 
	gpc
,Öc, #12

71 
MOV
 
	gpc
, 
Ã


72 
˛ónFlushDCache


73 
MRC
 
	gp15
, 0, 
	gpc
, 
	gc7
, 
	gc14
, 3 ; 
	gã°
/
˛ónÊush
 
	gD
-
˛öe


74 
BNE
 
˛ónFlushDCache


75 
MOV
 
	gpc
, 
Ã


76 
˛ónFlushCache


77 
MRC
 
	gp15
, 0, 
	gpc
, 
	gc7
, 
	gc14
, 3 ; 
	gã°
/
˛ónÊush
 
	gD
-
˛öe


78 
BNE
 
˛ónFlushCache


79 
MCR
 
	gp15
, 0, 
	gr0
, 
	gc7
, 
	gc5
, 0 ; 
Êush
 
	gI
-
ˇche


80 
MOV
 
	gpc
, 
Ã


81 
ENDIF


	@/home/jkr555/arm/guide/ch12_cache/cleancachebyway.s

51 ; 
˛ón
 
‹
 
	g˛ón
-
	g™d
-
Êush
 
ˇche
 
usög
 
	gway
/
£t
 
	gödexög


53 ; 
	gC
-
	g¥ŸŸy≥s


54 ; 
˛ónDCache
();

55 ; 
˛ónFlushDCache
();

56 ; 
˛ónFlushCache
();

58 
AREA
 
	g˛ónˇchebyway
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


59 
	gIF
 {
	gCPU
} = "ARM920T" :
LOR
: \

60 {
CPU
} = "ARM922T" :
LOR
: \

61 {
CPU
} = "ARM940T" :
LOR
: \

62 {
CPU
} = "ARM946E-S" :
LOR
: \

63 {
CPU
} = "ARM1022E"

64 
EXPORT
 
˛ónDCache


65 
EXPORT
 
˛ónFlushDCache


66 
EXPORT
 
˛ónFlushCache


67 
INCLUDE
 
ˇche
.
h


69 
c7f
 
RN
 0 ; 
	g˝15
:
c7
 
f‹m©


71 
MACRO


72 
CACHECLEANBYWAY
 
$›


74 
MOV
 
c7f
, #0 ; 
¸óã
 
c7
 
	gf‹m©


76 
	gIF
 "$op" = "Dclean"

77 
MCR
 
p15
, 0, 
	gc7f
, 
	gc7
, 
	gc10
, 2 ; 
˛ón
 
	gD
-
˛öe


78 
ENDIF


79 
	gIF
 "$op" = "Dcleanflush"

80 
MCR
 
p15
, 0, 
	gc7f
, 
	gc7
, 
	gc14
, 2 ; 
˛ónÊush
 
	gD
-
˛öe


81 
ENDIF


83 
ADD
 
	gc7f
, c7f, #1<<
	gI7SET
 ; +1 
£t
 
ödex


84 
TST
 
	gc7f
, #1<<(
	gNSET
+
	gI7SET
Ë; 
ã°
 
ödex
 
ovîÊow


85 
	gBEQ
 %
BT5


87 
BIC
 
	gc7f
, c7f, #1<<(
	gNSET
+
	gI7SET
Ë; 
˛ór
 
ödex
 
ovîÊow


88 
ADDS
 
	gc7f
, c7f, #1<<
	gI7WAY
 ; +1 
vi˘im
 
poöãr


89 
	gBCC
 %
	gBT5
 ; 
ã°
 
way
 
ovîÊow


90 
MEND


92 
˛ónDCache


93 
CACHECLEANBYWAY
 
D˛ón


94 
MOV
 
	gpc
, 
Ã


95 
˛ónFlushDCache


96 
CACHECLEANBYWAY
 
D˛ónÊush


97 
MOV
 
	gpc
, 
Ã


98 
˛ónFlushCache


99 
CACHECLEANBYWAY
 
D˛ónÊush


100 
MCR
 
	gp15
,0,
	gr0
,
	gc7
,
	gc5
,0 ; 
Êush
 
	gI
-
ˇche


101 
MOV
 
	gpc
, 
Ã


102 
ENDIF


	@/home/jkr555/arm/guide/ch12_cache/cleancachexscale.s

51 ; 
˛ón
 
‹
 
	g˛ón
-
	g™d
-
Êush
 
ˇche
 
⁄
 
xsˇÀ
 o∏
	g°r⁄g¨m


53 ; 
	gC
-
	g¥ŸŸy≥


54 ; 
˛ónDCache
();

55 ; 
˛ónFlushDCache
();

56 ; 
˛ónFlushCache
();

58 
AREA
 
	g˛ónˇchexsˇÀ
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


60 
	gIF
 {
	gCPU
} = "XSCALE" :
LOR
: {
CPU
} = "SA-110"

61 
EXPORT
 
˛ónDCache


62 
EXPORT
 
˛ónFlushDCache


63 
EXPORT
 
˛ónFlushCache


64 
INCLUDE
 
ˇche
.
h


67 
adr
 
RN
 0 ; 
°¨t
 
addªss


68 
∆
 
	gRN
 1 ; 
numbî
 
of
 
ˇche
 
löes
 
to
 
¥o˚ss


69 
tmp
 
	gRN
 12 ; 
s¸©ch
 

71 
MACRO


72 
CACHECLEANXSCALE
 
$›


74 
	gIF
 "$op" = "Dclean"

75 
LDR
 
adr
, =
CÀ™AddªssDˇche


76 
MOV
 
∆
, #1024 ; (32 
	gways
 * 32 
	g˛öes
)

77 
MOV
 
	g∆
, #(1<<(
	gNWAY
+
	gNSET
))

78 
ENDIF


79 
	gIF
 "$op" = "DcleanMini"

80 
LDR
 
adr
, =
CÀ™AddªssMöiDˇche


81 
MOV
 
∆
, #64 ; (2 
	gways
 * 32 
	g˛öes
)

82 
MOV
 
	g∆
, #(1<<(
	gMNWAY
+
	gNSET
))

83 
	gENDIF


85 
	gIF
 {
	gCPU
} = "XSCALE" :
LAND
: "$op" = "Dclean"

86 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc2
, 5 ; 
Æloˇã
 
	gd
-
˛öe


87 
ADD
 
	gadr
,ádr, #32 ; +1 
	gd
-
˛öe


88 
ENDIF


89 
	gIF
 {
	gCPU
} = "SA-110" :
LOR
: "$op"= "DcleanMini"

90 
LDR
 
tmp
,[
adr
],#32 ; 
Lﬂd
 
	gd©a
, +1 
	gd
-
˛öe


91 
ENDIF


92 
SUBS
 
	g∆
,Çl, #1 ; -1 
lo›
 
cou¡


93 
	gBNE
 %
BT5


94 
	gIF
 {
	gCPU
} = "XSCALE"

95 
CPWAIT


96 
ENDIF


97 
MEND


99 
˛ónDCache


100 
CACHECLEANXSCALE
 
D˛ón


101 
MOV
 
pc
, 
Ã


102 
˛ónFlushDCache


103 
STMFD
 
	g•
!, {
	gÃ
}

104 
BL
 
˛ónDCache


105 
	gIF
 {
	gCPU
} = "XSCALE"

106 
BL
 
˛ónMöiDCache


107 
ENDIF


108 
MOV
 
r0
, #0

109 
MCR
 
	gp15
,0,
	gr0
,
	gc7
,
	gc6
,0 ; 
Êush
 
	gD
-
ˇche


110 
	gIF
 {
	gCPU
} = "XSCALE"

111 
CPWAIT


112 
ENDIF


113 
LDMFD
 
•
!, {
	gpc
}

114 
˛ónFlushCache


115 
STMFD
 
	g•
!, {
	gÃ
}

116 
BL
 
˛ónDCache


117 
	gIF
 {
	gCPU
} = "XSCALE"

118 
BL
 
˛ónMöiDCache


119 
ENDIF


120 
MOV
 
r0
, #0

121 
MCR
 
	gp15
,0,
	gr0
,
	gc7
,c7,0 ; 
Êush
 
	gI
-
	gˇche
 & 
	gD
-
ˇche


122 
	gIF
 {
	gCPU
} = "XSCALE"

123 
CPWAIT


124 
ENDIF


125 
LDMFD
 
•
!, {
	gpc
}

126 
ENDIF


128 
	gIF
 {
	gCPU
} = "XSCALE"

129 
EXPORT
 
˛ónMöiDCache


131 
˛ónMöiDCache


132 
CACHECLEANXSCALE
 
D˛ónMöi


133 
MOV
 
pc
, 
Ã


134 
ENDIF


136 
	gEND
 ; 
End
 
of
 
	gAªa


	@/home/jkr555/arm/guide/ch12_cache/cleanflushcacheregion.s

50 ; 
˛ón
 
‹
 
Êush
 
ˇche
 
‰om
 
ba£Addªss
 
to
 
íd
 
of
 
	gRegi⁄


51 ; 
r0
 
c⁄èös
 
	gba£Addªss


52 ; 
r1
 
c⁄èös
 
size
 
of
 
Regi⁄
 
ö
 
	gbyãs


54 ; 
ÊushICacheRegi⁄
(*
adr
, 
size
);

55 ; 
ÊushDCacheRegi⁄
(*
adr
, 
size
);

56 ; 
ÊushCacheRegi⁄
(*
adr
, 
size
);

57 ; 
˛ónDCacheRegi⁄
(*
adr
, 
size
);

58 ; 
˛ónFlushDCacheRegi⁄
(*
adr
, 
size
);

59 ; 
˛ónFlushCacheRegi⁄
(*
adr
, 
size
);

62 
AREA
 
	gˇcheRegi⁄Aªa
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


64 
	gIF
 {
	gCPU
} = "ARM920T" :
LOR
: \

65 {
CPU
} = "ARM922T" :
LOR
: \

66 {
CPU
} = "ARM946E-S" :
LOR
: \

67 {
CPU
} = "ARM926EJ-S" :
LOR
: \

68 {
CPU
} = "ARM1022E" :
LOR
: \

69 {
CPU
} = "ARM1026EJ-S" :
LOR
: \

70 {
CPU
} = "XSCALE" :
LOR
: \

71 {
CPU
} = "SA-110"

73 
INCLUDE
 
ˇche
.
h


75 
adr
 
RN
 0 ; 
a˘ive
 
addªss


76 
size
 
	gRN
 1 ; sizê
of
 
ªgi⁄
 
ö
 
byãs


77 
∆
 
	gRN
 1 ; 
numbî
 
of
 
ˇche
 
löes
 
to
 
˛ón
 
‹
 
Êush


79 
MACRO


80 
CACHEBYREGION
 
$›


82 
BIC
 
	gadr
,ádr, #(1<<
	gCLINE
)-1 ; 
	g˛ù
 2 
˛öe
 
adr


83 
MOV
 
	g∆
, 
	gsize
, 
	gl§
 #CLINE ; 
byãs
 
to
 
	g˛öe


85 
	gIF
 "$op" = "IcacheFlush"

86 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc5
, 1 ; 
Êush
 
	gI˛öe
@
adr


87 
ENDIF


88 
	gIF
 "$op" = "DcacheFlush"

89 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc6
, 1 ; 
Êush
 
	gDc˛öe
@
adr


90 
ENDIF


91 
	gIF
 "$op" = "IDcacheFlush"

92 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc5
, 1 ; 
Êush
 
	gI˛öe
@
adr


93 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc6
, 1 ; 
Êush
 
	gD˛öe
@
adr


94 
ENDIF


95 
	gIF
 "$op" = "DcacheClean"

96 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 1 ; 
˛ón
 
	gD˛öe
@
adr


97 
ENDIF


98 
	gIF
 "$op" = "DcacheCleanFlush"

99 
IF
 {
CPU
} = "XSCALE" :
LOR
: {CPU} = "SA-110"

100 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 1 ; 
˛ón
 
	gD˛öe
@
adr


101 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc6
, 1 ; 
Êush
 
	gD˛öe
@
adr


102 
ELSE


103 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc14
, 1 ; 
˛ónÊush
 
	gD˛öe
@
adr


104 
ENDIF


105 
ENDIF


106 
	gIF
 "$op" = "IDcacheCleanFlush"

107 
IF
 {
CPU
} = "ARM920T" :
LOR
: {CPU} = "ARM922T" :LOR: \

108 {
CPU
} = "ARM946E-S" :
LOR
: {CPU} = "ARM926EJ-S" :LOR: \

109 {
CPU
} = "ARM1022E" :
LOR
: {CPU} = "ARM1026EJ-S"

110 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc14
, 1 ;
˛ónÊush
 
	gD˛öe
@
adr


111 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc5
, 1 ; 
Êush
 
	gI˛öe
@
adr


112 
ENDIF


113 
	gIF
 {
	gCPU
} = "XSCALE"

114 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 1 ; 
˛ón
 
	gD˛öe
@
adr


115 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc6
, 1 ; 
Êush
 
	gD˛öe
@
adr


116 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc5
, 1 ; 
Êush
 
	gI˛öe
@
adr


117 
ENDIF


118 
ENDIF


120 
ADD
 
	gadr
,ádr, #1<<
	gCLINE
 ; +1 
√xt
 
˛öe
 
adr


121 
SUBS
 
	g∆
,Çl, #1 ; -1 
˛öe
 
cou¡î


122 
	gBNE
 %
	gBT10
 ; 
	gÊush
 #lines +1

123 
	gIF
 {
	gCPU
} = "XSCALE"

124 
CPWAIT


125 
ENDIF


126 
MOV
 
pc
, 
Ã


127 
MEND


129 
	gIF
 {
	gCPU
} = "SA-110"

130 
EXPORT
 
˛ónDCacheRegi⁄


131 
EXPORT
 
ÊushDCacheRegi⁄


132 
EXPORT
 
˛ónFlushDCacheRegi⁄


133 
˛ónDCacheRegi⁄


134 
CACHEBYREGION
 
DˇcheCÀ™


135 
ÊushDCacheRegi⁄


136 
CACHEBYREGION
 
DˇcheFlush


137 
˛ónFlushDCacheRegi⁄


138 
CACHEBYREGION
 
DˇcheCÀ™Flush


139 
ELSE


140 
EXPORT
 
ÊushICacheRegi⁄


141 
EXPORT
 
ÊushDCacheRegi⁄


142 
EXPORT
 
ÊushCacheRegi⁄


143 
EXPORT
 
˛ónDCacheRegi⁄


144 
EXPORT
 
˛ónFlushDCacheRegi⁄


145 
EXPORT
 
˛ónFlushCacheRegi⁄


146 
ÊushICacheRegi⁄


147 
CACHEBYREGION
 
IˇcheFlush


148 
ÊushDCacheRegi⁄


149 
CACHEBYREGION
 
DˇcheFlush


150 
ÊushCacheRegi⁄


151 
CACHEBYREGION
 
IDˇcheFlush


152 
˛ónDCacheRegi⁄


153 
CACHEBYREGION
 
DˇcheCÀ™


154 
˛ónFlushDCacheRegi⁄


155 
CACHEBYREGION
 
DˇcheCÀ™Flush


156 
˛ónFlushCacheRegi⁄


157 
CACHEBYREGION
 
IDˇcheCÀ™Flush


158 
ENDIF


159 
ENDIF


160 
END


	@/home/jkr555/arm/guide/ch12_cache/enableCache.s

46 
AREA
 
	gˇche_routöes
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


48 
EXPORT
 
íabÀMPU


49 
EXPORT
 
íabÀCache


50 
EXPORT
 
íabÀICache


51 
EXPORT
 
íabÀDCache


52 
EXPORT
 
dißbÀCache


53 
EXPORT
 
dißbÀDCache


54 
EXPORT
 
dißbÀICache


55 
EXPORT
 
íabÀR™dom


56 
EXPORT
 
	gíabÀRoundRobö


59 
íabÀMPU


60 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

61 
ORR
 
	gr0
,r0,#0
	gx00000001
 ; 
E«bÀ
 
MPU


62 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

63 
MOV
 
	gr0
, #0

64 
MOV
 
	gpc
, 
	gÃ


67 
dißbÀCache


68 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

69 
BIC
 
	gr0
,r0,#0
	gx00001000
 ; 
CÀ¨
 
Iˇche
 
íabÀ
 
bô


70 
BIC
 
	gr0
,r0,#0
	gx00000004
 ; 
CÀ¨
 
Dˇche
 
íabÀ
 
bô


71 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

72 
MOV
 
	gr0
, #0

73 
MOV
 
	gpc
,
	gÃ


75 
dißbÀDCache


76 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

77 
BIC
 
	gr0
,r0,#0
	gx00000004
 ; 
CÀ¨
 
Dˇche
 
íabÀ
 
bô


78 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

79 
MOV
 
	gr0
, #0

80 
MOV
 
	gpc
,
	gÃ


82 
dißbÀICache


83 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

84 
BIC
 
	gr0
,r0,#0
	gx00001000
 ; 
CÀ¨
 
Iˇche
 
íabÀ
 
bô


85 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

86 
MOV
 
	gr0
, #0

87 
MOV
 
	gpc
,
	gÃ


90 
íabÀCache


91 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

92 
ORR
 
	gr0
,r0,#0
	gx00001000
 ; 
Së
 
íabÀ
 
Iˇche


93 
ORR
 
	gr0
,r0,#0
	gx00000004
 ; 
Së
 
íabÀ
 
Dˇche
 
™d
 
¥Ÿe˘i⁄
 
unô


94 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

95 
MOV
 
	gr0
, #0

96 
MOV
 
	gpc
, 
	gÃ


99 
íabÀICache


100 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

101 
ORR
 
	gr0
,r0,#0
	gx00001000
 ; 
E«bÀ
 
Iˇche


102 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

103 
MOV
 
	gr0
, #0

104 
MOV
 
	gpc
, 
	gÃ


107 
íabÀDCache


108 
MRC
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

109 
ORR
 
	gr0
,r0,#0
	gx00000004
 ; 
E«bÀ
 
Dˇche


110 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

111 
MOV
 
	gr0
, #0

112 
MOV
 
	gpc
, 
	gÃ


115 
íabÀRoundRobö


116 
	gIF
 {
	gCPU
} = "ARM940T"

117 
MRC
 
p15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Ród
 
round
 
robö
 

118 
ORR
 
	gr0
,r0,#0
	gx0000000c
 ; 
íabÀ
 
	gd
-
ˇche
 
round
 
robö


119 
MCR
 
	gp15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Wrôe
 
to
 
ã°
 
c15


120 
MRC
 
	gp15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Ród
 
round
 
robö
 

121 
ENDIF


122 
	gIF
 {
	gCPU
} = "ARM920T" :
LOR
: \

123 {
CPU
} = "ARM922T"

124 
MRC
 
p15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

125 
ORR
 
	gr0
,r0,#0
	gx00004000
 ; 
E«bÀ
 
Iˇche


126 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

127 
	gENDIF


128 ; 
MOV
 
	gr0
, #0

129 
MOV
 
	gpc
, 
	gÃ


131 
íabÀR™dom


132 
	gIF
 {
	gCPU
} = "ARM940T"

133 
MRC
 
p15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Ród
 
round
 
robö
 

134 
BIC
 
	gr0
,r0,#0
	gx0000000c
 ; 
íabÀ
 
	gd
-
ˇche
 
round
 
robö


135 
MCR
 
	gp15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Wrôe
 
to
 
ã°
 
c15


136 
MRC
 
	gp15
,0,
	gr0
,
	gc15
,
	gc0
,0 ; 
Ród
 
round
 
robö
 

137 
ENDIF


138 
	gIF
 {
	gCPU
} = "ARM920T" :
LOR
: \

139 {
CPU
} = "ARM922T"

140 
MRC
 
p15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Ród
 
c⁄åﬁ
 

141 
BIC
 
	gr0
,r0,#0
	gx00004000
 ; 
E«bÀ
 
Iˇche


142 
MCR
 
	gp15
,0,
	gr0
,
	gc1
,
	gc0
,0 ; 
Wrôe
 
to
 
c⁄åﬁ
 1

143 
	gENDIF


144 ; 
MOV
 
	gr0
, #0

145 
MOV
 
	gpc
, 
	gÃ


	@/home/jkr555/arm/guide/ch12_cache/flushcache.s

50 
AREA
 
	gÊushAŒ
, 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
	gblock


52 ; 
	gC
-
	g¥ŸŸy≥


53 ; 
ÊushCache
();

54 ; 
ÊushDCache
();

55 ; 
ÊushICache
();

57 
	gIF
 {
	gCPU
} = "ARM720T" :
LOR
: \

58 {
CPU
} = "ARM920T" :
LOR
: \

59 {
CPU
} = "ARM922T" :
LOR
: \

60 {
CPU
} = "ARM926EJ-S" :
LOR
: \

61 {
CPU
} = "ARM940T" :
LOR
: \

62 {
CPU
} = "ARM946E-S" :
LOR
: \

63 {
CPU
} = "ARM1022E" :
LOR
: \

64 {
CPU
} = "ARM1026EJ-S" :
LOR
: \

65 {
CPU
} = "SA-110" :
LOR
: \

66 {
CPU
} = "XSCALE"

68 
c7f
 
RN
 0 ; 
ö
 
	gCP17
:
c7
 
f‹m©


69 
MACRO


70 
CACHEFLUSH
 
$›


72 
MOV
 
c7f
, #0

73 
	gIF
 "$op" = "Icache"

74 
MCR
 
p15
,0,
	gc7f
,
	gc7
,
	gc5
,0 ; 
Êush
 
	gI
-
ˇche


75 
ENDIF


76 
	gIF
 "$op" = "Dcache"

77 
MCR
 
p15
,0,
	gc7f
,
	gc7
,
	gc6
,0 ; 
Êush
 
	gD
-
ˇche


78 
ENDIF


79 
	gIF
 "$op" = "IDcache"

80 
IF
 {
CPU
} = "ARM940T" :
LOR
: \

81 {
CPU
} = "ARM946E-S"

82 
MCR
 
p15
,0,
	gc7f
,
	gc7
,
	gc5
,0 ; 
Êush
 
	gI
-
ˇche


83 
MCR
 
	gp15
,0,
	gc7f
,
	gc7
,
	gc6
,0 ; 
Êush
 
	gD
-
ˇche


84 
ELSE


85 
MCR
 
	gp15
,0,
	gc7f
,
	gc7
,c7,0 ; 
Êush
 
	gI
-
	gˇche
 & 
	gD
-
ˇche


86 
ENDIF


87 
ENDIF


88 
MOV
 
	gpc
, 
Ã


89 
MEND


91 
	gIF
 {
	gCPU
} = "ARM720T"

92 
EXPORT
 
ÊushCache


93 
ÊushCache


94 
CACHEFLUSH
 
IDˇche


95 
ELSE


96 
EXPORT
 
ÊushCache


97 
EXPORT
 
ÊushICache


98 
EXPORT
 
ÊushDCache


99 
ÊushCache


100 
CACHEFLUSH
 
IDˇche


101 
ÊushICache


102 
CACHEFLUSH
 
Iˇche


103 
ÊushDCache


104 
CACHEFLUSH
 
Dˇche


105 
ENDIF


106 
ENDIF


107 
END
 ; 
End
 
of
 
	gAªa


	@/home/jkr555/arm/guide/ch12_cache/lockcachebyLbit.s

51 ; 
lockDˇche
–* 
d©a
, 
size
);

52 ; 
lockIˇche
–* 
d©a
, 
size
);

54 
AREA
 
	glockˇcheblock
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


56 
	gIF
 {
	gCPU
} = "ARM926EJ-S" :
LOR
: \

57 {
CPU
} = "ARM1026EJ-S"

58 
EXPORT
 
lockDCache


59 
EXPORT
 
lockICache


60 
EXPORT
 
bôã°


61 
INCLUDE
 
ˇche
.
h


63 
adr
 
RN
 0 ; 
cuºít
 
addªss
 
of
 
code
 
‹
 
d©a


64 
size
 
	gRN
 1 ; 
mem‹y
 sizê
ö
 
byãs


65 
tmp
 
	gRN
 2 ; 
s¸©ch
 

66 
tmp1
 
	gRN
 3 ; 
s¸©ch
 

67 
c9f
 
	gRN
 12 ; 
	gCP15
:
c9
 
f‹m©


69 
MACRO


70 
CACHELOCKBYLBIT
 
$›


72 
ADD
 
size
, 
	gadr
, 
	gsize
 ; sizê
íd
 
addªss


73 
BIC
 
adr
, 
	gadr
, #(1<<
	gCLINE
)-1 ; 
Æign
 
to
 
CLINE


74 
MOV
 
	gtmp
, #(1<<
	gCLINE
)-1 ; 
s¸©ch
 
CLINE
 
mask


75 
TST
 
	gsize
, 
	gtmp
 ; 
CLINE
 
íd
 
	g‰agmít
 ?

76 
SUB
 
	gsize
, size, 
	gadr
 ; 
add
 
Æignmít
 
byãs


77 
MOV
 
	gsize
, size, 
	gl§
 #CLINE ; 
c⁄vît
 size 2 #CLINE

78 
ADDNE
 
	gsize
, size, #1 ; 
add
 
CLINE
 
‰agmít


79 
CMP
 
	gsize
, #(1<<
	gNSET
)-1 ; 
size
 
to
 
	gœrge
 ?

80 
	gBHI
 %
	gFT1
 ; 
exô
  
vi˘im
 
ba£


82 
	gIF
 "$op" = "Icache"

83 
MRC
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 1 ; 
gë
 
	gi
-
ˇche
 
lock
 
bôs


84 
ENDIF


85 
	gIF
 "$op" = "Dcache"

86 
MRC
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 0 ; 
gë
 
	gd
-
ˇche
 
lock
 
bôs


87 
ENDIF


89 
AND
 
	gtmp
, 
	gc9f
, #0
	gxf
 ;Åm∞
°©e
 
of
 
Lbôs


90 
MOV
 
tmp1
, #1

91 
TST
 
	gc9f
, 
	gtmp1
 ; 
ã°
 
lock
 
	gbô
 0

92 
MOVNE
 
	gtmp1
,Åmp1, 
	gLSL
 #1

93 
TSTNE
 
	gc9f
, 
	gtmp1
 ; 
ã°
 
lock
 
	gbô
 1

94 
MOVNE
 
	gtmp1
,Åmp1, 
	gLSL
 #1

95 
TSTNE
 
	gc9f
, 
	gtmp1
 ; 
ã°
 
lock
 
	gbô
 2

96 
MOVNE
 
	gtmp1
,Åmp1, 
	gLSL
 #1

97 
	gBNE
 %
	gFT1
 ; 
	gERROR
: 
no
 
avaûabÀ
 
ways


98 
CMP
 
size
, #0 ; 
no
 
lockdown
 
ªque°ed


99 
	gBEQ
 %
	gFT1
 ; 
exô
  
	gsize
 =0

101 
MVN
 
tmp1
, 
	gtmp1
 ; 
£À˘
 
L
 
bô


102 
AND
 
	gtmp1
,Åmp1, #0
	gxf
 ; 
mask
 
off
 
n⁄
 
L
 
bôs


103 
BIC
 
	gc9f
, c9f, #0
	gxf
 ; 
c⁄°ru˘
 
c9f


104 
ADD
 
	gc9f
, c9f, 
tmp1


106 
	gIF
 "$op" = "Icache"

107 
MCR
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 1 ; 
£t
 
lock
 
I
 
∑ge


108 
ENDIF


109 
	gIF
 "$op" = "Dcache"

110 
MCR
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 0 ; 
£t
 
lock
 
D
 
∑ge


111 
	gENDIF


113 
	gIF
 "$op" = "Icache"

114 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc13
, 1 ; 
lﬂd
 
code
 
ˇchñöe


115 
ADD
 
	gadr
,ádr, #1<<
	gCLINE
 ; 
˛öe
 
	gaddr
 =+ 1

116 
ENDIF


117 
IF
 "$op" = "Dcache"

118 
LDR
 
tmp1
, [
adr
], #1<<
	gCLINE
 ; 
lﬂd
 
d©a
 
ˇchñöe


119 
ENDIF


121 
SUBS
 
	gsize
, size, #1 ; 
	g˛öe
 =- 1

122 
BNE
 %
BT5
 ; 
lo›
 
thru
 
˛öes


124 
MVN
 
	gtmp1
, 
	gc9f
 ; 
lock
 
£À˘ed
 
	gL
-
bô


125 
AND
 
	gtmp1
,Åmp1, #0
	gxf
 ; 
mask
 
off
 
n⁄
 
	gL
-
bôs


126 
ORR
 
	gtmp
,Åmp, 
	gtmp1
 ; 
mîge
 
wôh
 
‹ig
 
	gL
-
bôs


127 
BIC
 
	gc9f
, c9f, #0
	gxf
 ; 
˛ór
 
Æl
 
	gL
-
bôs


128 
ADD
 
	gc9f
, c9f, 
	gtmp
 ; 
£t
 
	gL
-
bôs
 
ö
 
c9f


130 
	gIF
 "$op" = "Icache"

131 
MCR
 
p15
, 0, 
	gadr
, 
	gc9
, 
	gc0
, 1 ; 
£t
 
	gi
-
ˇche
 
lock
 
bôs


132 
ENDIF


133 
	gIF
 "$op" = "Dcache"

134 
MCR
 
p15
, 0, 
	gadr
, 
	gc9
, 
	gc0
, 0 ; 
£t
 
	gd
-
ˇche
 
lock
 
bôs


135 
	gENDIF


137 
MOV
 
	gr0
, 
	gtmp1
 ;  
Æloˇãd
 
way


138 
MOV
 
	gpc
, 
Ã


139 
MEND


141 
lockDCache


142 
CACHELOCKBYLBIT
 
Dˇche


143 
lockICache


144 
CACHELOCKBYLBIT
 
Iˇche


145 
ENDIF


146 
	gIF
 {
	gCPU
} = "ARM926EJ-S" :
LOR
: \

147 {
CPU
} = "ARM1026EJ-S"

148 
bôã°


149 
MRC
 
p15
, 0, 
	gr0
, 
	gc9
, 
	gc0
, 0 ; 
gë
 
	gd
-
ˇche
 
lock
 
bôs


150 
BIC
 
	gr0
,Ñ0, #0
xf


151 
ORR
 
	gr0
,Ñ0, #0
x7


152 
MCR
 
	gp15
, 0, 
	gr0
, 
	gc9
, 
	gc0
, 0 ; 
£t
 
	gd
-
ˇche
 
lock
 
bôs


153 
MRC
 
	gp15
, 0, 
	gr0
, 
	gc9
, 
	gc0
, 0 ; 
gë
 
	gd
-
ˇche
 
lock
 
bôs


154 
MOV
 
	gpc
, 
Ã


155 
ENDIF


156 
EXPORT
 
Arch


157 
Arch


158 
	gDCB
 {
	gCPU
}

	@/home/jkr555/arm/guide/ch12_cache/lockcachebyregion.s

50 ; 
lockDCache
–* 
d©a
, 
size
);

51 ; 
lockICache
–* 
d©a
, 
size
);

53 
AREA
 
	glockˇchebyªgi⁄
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


54 
	gIF
 {
	gCPU
} = "XSCALE"

55 
EXPORT
 
lockICache


56 
EXPORT
 
lockDCache


57 
EXPORT
 
lockDCacheRAM


58 
INCLUDE
 
ˇche
.
h


60 
adr
 
RN
 0 ; 
cuºít
 
addªss
 
of
 
code
 
‹
 
d©a


61 
size
 
	gRN
 1 ; 
mem‹y
 sizê
ö
 
byãs


62 
tmp
 
	gRN
 2 ; 
	g˝c15
:
c9
 31 (
lﬂd
 5:0 
vi˘im
 
poöãr
)

63 
tmp1
 
RN
 3 ; 
s¸©ch
 
LDR
 
ö°ru˘i⁄


64 
MACRO


65 
CACHELOCKREGION
 
$›


67 
ADD
 
	gsize
, 
	gadr
, sizê; sizê
íd
 
addªss


68 
BIC
 
adr
, 
	gadr
, #(1<<
	gCLINE
)-1 ; 
Æign
 
to
 
CLINE


69 
MOV
 
	gtmp
, #(1<<
	gCLINE
)-1 ; 
s¸©ch
 
CLINE
 
mask


70 
TST
 
	gsize
, 
	gtmp
 ; 
CLINE
 
íd
 
	g‰agmít
 ?

71 
SUB
 
	gsize
, size, 
	gadr
 ; 
add
 
Æignmít
 
byãs


72 
MOV
 
	gsize
, size, 
	gl§
 #CLINE ; 
c⁄vît
 size 2 #CLINE

73 
ADDNE
 
	gsize
, size, #1 ; 
add
 
CLINE
 
to
 
hﬁd
 
‰agmít


75 
CMP
 
	gsize
, #0 ; 
no
 
lockdown
 
ªque°ed


76 
	gBEQ
 %
	gFT1
 ; 
exô
  
	gsize
 =0

78 
IF
 "$›" = "Dˇche" :
LOR
: "$op" = "DcacheRAM"

79 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 4 ; 
døö
 
wrôe
 
buf„r


80 
MOV
 
	gtmp
, #1

81 
MCR
 
	gp15
, 0, 
	gtmp
, 
	gc9
, 
	gc2
, 0 ; 
u∆ock
 
d©a
 
ˇche


82 
CPWAIT


83 
MOV
 
	gtmp
, #0 ; 
eví
 
w‹ds
 
to
 
zîo


84 
ENDIF


85 
	gIF
 "$op" = "DcacheRAM"

86 
MOV
 
tmp1
, #0 ; 
öô
 
odd
 
w‹ds
 
to
 
zîo


87 
	gENDIF


89 
	gIF
 "$op" = "Icache"

90 
MCR
 
p15
, 0, 
	gadr
, 
	gc9
, 
	gc1
, 0; 
lock
 
ICache
 
löe


91 
ADD
 
	gadr
,ádr, #1<<
CLINE


92 
ENDIF


93 
	gIF
 "$op" = "Dcache"

94 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 1 ; 
˛ón
 
dúty
 
löe


95 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc6
, 1 ; 
Flush
 
	gd
-
ˇche
 
löe


96 
LDR
 
	gtmp
, [
adr
], #1<<
	gCLINE
 ; 
lﬂd
 
d©a
 
ˇchñöe


97 
ENDIF


99 
	gIF
 "$op" = "DcacheRAM"

100 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc2
, 5 ; 
AŒoˇã
 
	gd
-
ˇche
 
löe


101 
MCR
 
	gp15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 4 ; 
døö
 
wrôe
 
buf„r


102 
STRD
 
	gtmp
, [
adr
], #8 ; 
	göô
 2 
	gzîo
 & 
	gadr
=+2

103 
STRD
 
tmp
, [
adr
], #8 ; 
	göô
 2 
	gzîo
 & 
	gadr
=+2

104 
STRD
 
tmp
, [
adr
], #8 ; 
	göô
 2 
	gzîo
 & 
	gadr
=+2

105 
STRD
 
tmp
, [
adr
], #8 ; 
	göô
 2 
	gzîo
 & 
	gadr
=+2

106 
ENDIF


107 
SUBS
 
size
, 
	gsize
, #1

108 
	gBNE
 %
BT5


110 
	gIF
 "$›" = "Dˇche" :
LOR
: "$op" = "DcacheRAM"

111 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc10
, 4 ; 
døö
 
wrôe
 
buf„r


112 
MCR
 
	gp15
, 0, 
	gtmp
, 
	gc9
, 
	gc2
, 0 ; 
lock
 
d©a
 
ˇche


113 
CPWAIT


114 
	gENDIF


116 
MOV
 
	gr0
, #0

117 
MOV
 
	gpc
, 
Ã


118 
MEND


119 
lockICache


120 
CACHELOCKREGION
 
Iˇche


121 
lockDCache


122 
CACHELOCKREGION
 
Dˇche


123 
lockDCacheRAM


124 
CACHELOCKREGION
 
DˇcheRAM


125 
ENDIF


	@/home/jkr555/arm/guide/ch12_cache/lockcachebyway.s

50 ; 
lockDˇche
–* 
d©a
, 
size
);

51 ; 
lockIˇche
–* 
d©a
, 
size
);

53 
AREA
 
	glockˇcheblock
 , 
	gCODE
, 
	gREADONLY
 ; 
Sèπ
 
of
 
Aªa
 
block


55 
	gIF
 {
	gCPU
} = "ARM920T" :
LOR
: \

56 {
CPU
} = "ARM922T" :
LOR
: \

57 {
CPU
} = "ARM940T" :
LOR
: \

58 {
CPU
} = "ARM946E-S" :
LOR
: \

59 {
CPU
} = "ARM1022E"

60 
EXPORT
 
lockDCache


61 
EXPORT
 
lockICache


62 
INCLUDE
 
ˇche
.
h


64 
adr
 
RN
 0 ; 
cuºít
 
addªss
 
of
 
code
 
‹
 
d©a


65 
size
 
	gRN
 1 ; 
mem‹y
 sizê
ö
 
byãs


66 
nw
 
	gRN
 1 ; 
mem‹y
 
size
 
ö
 
ways


67 
cou¡
 
	gRN
 2

68 
tmp
 
	gRN
 2 ; 
s¸©ch
 

69 
tmp1
 
	gRN
 3 ; 
s¸©ch
 

70 
c9f
 
	gRN
 12 ; 
	gCP15
:
c9
 
f‹m©


72 
MACRO


73 
CACHELOCKBYWAY
 
$›


75 
BIC
 
adr
, 
	gadr
, #(1<<
	gCLINE
)-1 ; 
Æign
 
to
 
˛öe


76 
LDR
 
	gtmp
, =(1<<
SWAY
)-1 ; 
	gs¸©ch
 = 
size
 
of
 
way


77 
TST
 
size
, 
	gtmp
 ; 
way
 
íd
 
	g‰agmít
 ?

78 
MOV
 
	gnw
, 
	gsize
, 
	gl§
 #SWAY ; 
c⁄vît
 
byãs
 
to
 
ways


79 
ADDNE
 
	gnw
,Çw, #1 ; 
add
 
way
 
‰agmít


80 
CMP
 
	gnw
, #0 ; 
no
 
lockdown
 
ªque°ed


81 
	gBEQ
 %
	gFT2
 ; 
exô
  
vi˘im
 
ba£


83 
	gIF
 "$op" = "Icache"

84 
MRC
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 1 ; 
gë
 
	gi
-
ˇche
 
vi˘im


85 
ENDIF


86 
	gIF
 "$op" = "Dcache"

87 
MRC
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 0 ; 
gë
 
	gd
-
ˇche
 
vi˘im


88 
ENDIF


90 
AND
 
	gc9f
, c9f, 
	gtmp
 ; 
mask
 
high
 
bôs
 c9‡
vi˘im


91 
ADD
 
tmp
, 
	gc9f
, 
	gnw
 ; 
	gãmp
 = 
vi˘im
 + 
way
 
cou¡


92 
CMP
 
tmp
, #(1<<
	gNWAY
)-1 ; > 
tŸÆ
 
	gways
 ?

93 
MOVGT
 
	gr0
, #-1 ;  -1 
to
 
m™y
 
ways


94 
	gBGT
 %
	gFT1
 ; 
	gEº‹
: 
ˇche
 
way
 
ovîrun


96 
IF
 {
CPU
} = "ARM940T" :
LOR
: {CPU} = "ARM946E-S"

97 
ORR
 
c9f
, 
	gc9f
, #1<<31 ; 
put
 
ˇche
 
ö
 
lockdown
 
mode


98 
	gENDIF


100 
	gIF
 "$op" = "Icache"

101 
MCR
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 1 ; 
£t
 
vi˘im


102 
ENDIF


103 
	gIF
 "$op" = "Dcache"

104 
MCR
 
p15
, 0, 
	gc9f
, 
	gc9
, 
	gc0
, 0 ; 
£t
 
vi˘im


105 
ENDIF


107 
MOV
 
	gcou¡
, #(1<<
	gNSET
)-1

109 
	gIF
 "$op" = "Icache"

110 
MCR
 
p15
, 0, 
	gadr
, 
	gc7
, 
	gc13
, 1 ; 
lﬂd
 
code
 
ˇchñöe


111 
ADD
 
	gadr
,ádr, #1<<
	gCLINE
 ; 
˛öe
 
	gaddr
 =+ 1

112 
ENDIF


113 
IF
 "$op" = "Dcache"

114 
LDR
 
tmp1
, [
adr
], #1<<
	gCLINE
 ; 
lﬂd
 
d©a
 
ˇchñöe


115 
ENDIF


117 
SUBS
 
	gcou¡
, count, #1

118 
	gBNE
 %
BT5


119 
ADD
 
	gc9f
, c9f, #1<<
	gI9WAY
 ; 
vi˘im
 
	gpoöãr
 =+ 1

120 
SUBS
 
nw
, 
	gnw
, #1 ; 
way
 
	gcou¡î
 =- 1

121 
BNE
 %
BT10
 ; 
ª≥©
 #o‡
	gways


123 
	gIF
 {
	gCPU
} = "ARM940T" :
LOR
: {
CPU
} = "ARM946E-S"

124 
BIC
 
r0
, 
	gc9f
, #1<<31 ; 
˛ór
 
lock
 
	gbô
 & 
	gr0
=
vi˘im


125 
ENDIF


126 
IF
 "$op" = "Icache"

127 
MCR
 
p15
, 0, 
	gr0
, 
	gc9
, 
	gc0
, 1 ; 
£t
 
vi˘im
 
cou¡î


128 
ENDIF


129 
	gIF
 "$op" = "Dcache"

130 
MCR
 
p15
, 0, 
	gr0
, 
	gc9
, 
	gc0
, 0 ; 
£t
 
vi˘im
 
cou¡î


131 
	gENDIF


133 
MOV
 
	gpc
, 
Ã


134 
MEND


136 
lockDCache


137 
CACHELOCKBYWAY
 
Dˇche


138 
lockICache


139 
CACHELOCKBYWAY
 
Iˇche


140 
ENDIF


	@/home/jkr555/arm/guide/ch12_cache/main.c

48 
ˇche_RRã°
(
times
,
num£t
);

49 
ÊushCache
();

50 
ÊushICache
();

51 
ÊushDCache
();

52 
˛ónDCache
();

53 
˛ónMöiDCache
();

54 
˛ónFlushDCache
();

55 
˛ónFlushCache
();

56 
ÊushICacheRegi⁄
(*
adr
, 
size
);

57 
ÊushDCacheRegi⁄
(*
adr
, 
size
);

58 
ÊushCacheRegi⁄
(*
adr
, 
size
);

59 
˛ónDCacheRegi⁄
(*
adr
, 
size
);

60 
˛ónFlushDCacheRegi⁄
(*
adr
, 
size
);

61 
˛ónFlushCacheRegi⁄
(*
adr
, 
size
);

62 
lockICache
( *, );

63 
lockDCache
( *, );

64 
lockDCacheRAM
( *, );

66 
	$maö
()

68 #i‡
	`deföed
(
__TARGET_CPU_ARM720T
)

69 
	`ÊushCache
();

72 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
Ë|| deföed(
__TARGET_CPU_ARM922T
) || \

73 
	`deföed
(
__TARGET_CPU_ARM940T
Ë|| deföed(
__TARGET_CPU_ARM946E_S
) || \

74 
	`deföed
(
__TARGET_CPU_ARM1022E
Ë|| deföed(
__TARGET_CPU_ARM926EJ_S
) || \

75 
	`deföed
(
__TARGET_CPU_XSCALE
Ë|| deföed(
__TARGET_CPU_SA_110
) || \

76 
	`deföed
(
__TARGET_CPU_ARM1026EJ_S
)

77 
	`ÊushCache
();

78 
	`ÊushICache
();

79 
	`ÊushDCache
();

83 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
Ë|| deföed(
__TARGET_CPU_ARM922T
) || \

84 
	`deföed
(
__TARGET_CPU_ARM940T
Ë|| deföed(
__TARGET_CPU_ARM946E_S
) || \

85 
	`deföed
(
__TARGET_CPU_ARM1022E
Ë|| deföed(
__TARGET_CPU_ARM926EJ_S
) || \

86 
	`deföed
(
__TARGET_CPU_XSCALE
Ë|| deföed(
__TARGET_CPU_SA_110
) || \

87 
	`deföed
(
__TARGET_CPU_ARM1026EJ_S
)

88 
	`˛ónDCache
();

89 
	`˛ónFlushDCache
();

90 
	`˛ónFlushCache
();

93 #i‡
	`deföed
(
__TARGET_CPU_XSCALE
)

94 
	`˛ónMöiDCache
();

97 #i‡
	`deföed
(
__TARGET_CPU_SA_110
)

98 
	`˛ónDCacheRegi⁄
();

99 
	`ÊushDCacheRegi⁄
();

100 
	`˛ónFlushDCacheRegi⁄
();

103 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
Ë|| deföed(
__TARGET_CPU_ARM922T
) || \

104 
	`deföed
(
__TARGET_CPU_ARM946E_S
Ë|| deföed(
__TARGET_CPU_ARM926EJ_S
) || \

105 
	`deföed
(
__TARGET_CPU_ARM1022E
Ë|| deföed(
__TARGET_CPU_ARM1026EJ_S
) || \

106 
	`deföed
(
__TARGET_CPU_XSCALE
)

107 
	`ÊushICacheRegi⁄
(0x0, 0x100);

108 
	`ÊushDCacheRegi⁄
(0x0, 0x100);

109 
	`ÊushCacheRegi⁄
(0x0, 0x100);

110 
	`˛ónDCacheRegi⁄
(0x0, 0x100);

111 
	`˛ónFlushDCacheRegi⁄
(0x0, 0x100);

112 
	`˛ónFlushCacheRegi⁄
(0x0, 0x100);

115 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
Ë|| deföed(
__TARGET_CPU_ARM922T
) || \

116 
	`deföed
(
__TARGET_CPU_ARM940T
Ë|| deföed(
__TARGET_CPU_ARM946E_S
) || \

117 
	`deföed
(
__TARGET_CPU_ARM926EJ_S
Ë|| deföed(
__TARGET_CPU_ARM1026EJ_S
) || \

118 
	`deföed
(
__TARGET_CPU_XSCALE
Ë|| deföed(
__TARGET_CPU_ARM1022E
)

120 
	`lockDCache
(0x0, 0x100);

121 
	`lockICache
(0x0, 0x100);

124 #i‡ 
	`deföed
(
__TARGET_CPU_XSCALE
)

125 
	`lockDCacheRAM
(0x0, 0x10);

128 
	`ˇche_RRã°
(10000,64);

129 
	`ˇche_RRã°
(10000,65);

131 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íRedLED
()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM940IAP
,
RED
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnRedLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffRedLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/led.h

93 
›íRedLED
();

105 
swôchOnRedLED
();

117 
swôchOffRedLED
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/start.h

108 
íåy
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/startx.c

78 
	~"Àd.h
"

108 
	$íåy
 ()

110 vﬁ©ûê
dñay
;

112 i‡(
	`›íRedLED
 ()==0)

117 
	`swôchOnRedLED
 ();

120 
dñay
=0; delay<0x40ffff; delay++) {}

122 
	`swôchOffRedLED
 ();

125 
dñay
=0; delay<0x40ffff; delay++) {}

135 
dñay
=0xBEEFBEEF;

137 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/swiapi.c

2 
	~"../../cm940üp/evíts/swis.h
"

3 
	~"../../devi˚s/ddf_‰ame.h
"

5 
	#UINT
 

	)

9 
	mr
[4];

10 } 
	tªgi°î°r
;

12 
ªgi°î°r
 
	grs
;

14 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

32 
	$evítIODevi˚Inô
()

34 
ªgi°î°r
 
tmpReg
;

36 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

37 
tmpReg
.
r
[1] = 0;

38 
tmpReg
.
r
[2] = 0;

39 
tmpReg
.
r
[3] = 0;

41 
	`c‹eCÆlSWI
 (&
tmpReg
);

43 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

44 
	}
}

67 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

69 
ªgi°î°r
 
tmpReg
;

71 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

72 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

73 
tmpReg
.
r
[2] = 
b
;

74 
tmpReg
.
r
[3] = 
c
;

76 
	`c‹eCÆlSWI
(&
tmpReg
);

78  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

79 
	}
}

99 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

101 
ªgi°î°r
 
tmpReg
;

103 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

104 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

105 
tmpReg
.
r
[2] = 
b
;

106 
tmpReg
.
r
[3] = 0;

108 
	`c‹eCÆlSWI
(&
tmpReg
);

110  (Ë
tmpReg
.
r
[0];

111 
	}
}

127 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

129 
ªgi°î°r
 
tmpReg
;

131 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

132 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

133 
tmpReg
.
r
[2] = 
b
;

134 
tmpReg
.
r
[3] = 
c
;

136 
	`c‹eCÆlSWI
(&
tmpReg
);

137 
	}
}

152 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

154 
ªgi°î°r
 
tmpReg
;

156 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

157 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

158 
tmpReg
.
r
[2] = 
b
;

159 
tmpReg
.
r
[3] = 0;

161 
	`c‹eCÆlSWI
(&
tmpReg
);

163  (
UINT
Ë
tmpReg
.
r
[0];

164 
	}
}

180 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

182 
ªgi°î°r
 
tmpReg
;

184 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

185 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

186 
tmpReg
.
r
[2] = 
b
;

187 
tmpReg
.
r
[3] = 
c
;

189 
	`c‹eCÆlSWI
(&
tmpReg
);

190 
	}
}

205 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

207 
ªgi°î°r
 
tmpReg
;

209 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

210 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

211 
tmpReg
.
r
[2] = 
b
;

212 
tmpReg
.
r
[3] = 0;

214 
	`c‹eCÆlSWI
(&
tmpReg
);

216  (
UINT
Ë
tmpReg
.
r
[0];

217 
	}
}

232 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

234 
ªgi°î°r
 
tmpReg
;

236 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

237 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

238 
tmpReg
.
r
[2] = 
b
;

239 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

241 
	`c‹eCÆlSWI
(&
tmpReg
);

242 
	}
}

257 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

259 
ªgi°î°r
 
tmpReg
;

261 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

262 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

263 
tmpReg
.
r
[2] = 
b
;

264 
tmpReg
.
r
[3] = 0;

266 
	`c‹eCÆlSWI
(&
tmpReg
);

268  (*)
tmpReg
.
r
[0];

269 
	}
}

271 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

273 
ªgi°î°r
 
tmpReg
;

275 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

276 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

277 
tmpReg
.
r
[2] = 
b
;

278 
tmpReg
.
r
[3] = 0;

280 
	`c‹eCÆlSWI
(&
tmpReg
);

281 
	}
}

295 
	$brögUpF©ÆEº‹
(
UID
 
a
)

297 
ªgi°î°r
 
tmpReg
;

299 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

300 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

301 
tmpReg
.
r
[2] = 0;

302 
tmpReg
.
r
[3] = 0;

304 
	`c‹eCÆlSWI
(&
tmpReg
);

305 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íYñlowLED
 ()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM940IAP
,
YELLOW
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnYñlowLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffYñlowLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/led.h

93 
›íYñlowLED
();

105 
swôchOnYñlowLED
();

117 
swôchOffYñlowLED
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/start.h

103 
íåy
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/startx.c

76 
	~"Àd.h
"

106 
	$íåy
 ()

108 vﬁ©ûê
dñay
;

110 i‡(
	`›íYñlowLED
 ()==0)

115 
	`swôchOffYñlowLED
 ();

118 
dñay
=0; delay<0x20ffff; delay++) {}

120 
	`swôchOnYñlowLED
 ();

123 
dñay
=0; delay<0x20ffff; delay++) {}

133 
dñay
=0xBEEFBEEF;

135 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/swiapi.c

2 
	~"../../cm940üp/evíts/swis.h
"

3 
	~"../../devi˚s/ddf_‰ame.h
"

5 
	#UINT
 

	)

9 
	mr
[4];

10 } 
	tªgi°î°r
;

12 
ªgi°î°r
 
	grs
;

14 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

32 
	$evítIODevi˚Inô
()

34 
ªgi°î°r
 
tmpReg
;

36 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

37 
tmpReg
.
r
[1] = 0;

38 
tmpReg
.
r
[2] = 0;

39 
tmpReg
.
r
[3] = 0;

41 
	`c‹eCÆlSWI
 (&
tmpReg
);

43 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

44 
	}
}

67 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

69 
ªgi°î°r
 
tmpReg
;

71 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

72 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

73 
tmpReg
.
r
[2] = 
b
;

74 
tmpReg
.
r
[3] = 
c
;

76 
	`c‹eCÆlSWI
(&
tmpReg
);

78  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

79 
	}
}

99 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

101 
ªgi°î°r
 
tmpReg
;

103 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

104 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

105 
tmpReg
.
r
[2] = 
b
;

106 
tmpReg
.
r
[3] = 0;

108 
	`c‹eCÆlSWI
(&
tmpReg
);

110  (Ë
tmpReg
.
r
[0];

111 
	}
}

127 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

129 
ªgi°î°r
 
tmpReg
;

131 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

132 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

133 
tmpReg
.
r
[2] = 
b
;

134 
tmpReg
.
r
[3] = 
c
;

136 
	`c‹eCÆlSWI
(&
tmpReg
);

137 
	}
}

152 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

154 
ªgi°î°r
 
tmpReg
;

156 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

157 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

158 
tmpReg
.
r
[2] = 
b
;

159 
tmpReg
.
r
[3] = 0;

161 
	`c‹eCÆlSWI
(&
tmpReg
);

163  (
UINT
Ë
tmpReg
.
r
[0];

164 
	}
}

180 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

182 
ªgi°î°r
 
tmpReg
;

184 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

185 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

186 
tmpReg
.
r
[2] = 
b
;

187 
tmpReg
.
r
[3] = 
c
;

189 
	`c‹eCÆlSWI
(&
tmpReg
);

190 
	}
}

205 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

207 
ªgi°î°r
 
tmpReg
;

209 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

210 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

211 
tmpReg
.
r
[2] = 
b
;

212 
tmpReg
.
r
[3] = 0;

214 
	`c‹eCÆlSWI
(&
tmpReg
);

216  (
UINT
Ë
tmpReg
.
r
[0];

217 
	}
}

232 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

234 
ªgi°î°r
 
tmpReg
;

236 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

237 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

238 
tmpReg
.
r
[2] = 
b
;

239 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

241 
	`c‹eCÆlSWI
(&
tmpReg
);

242 
	}
}

257 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

259 
ªgi°î°r
 
tmpReg
;

261 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

262 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

263 
tmpReg
.
r
[2] = 
b
;

264 
tmpReg
.
r
[3] = 0;

266 
	`c‹eCÆlSWI
(&
tmpReg
);

268  (*)
tmpReg
.
r
[0];

269 
	}
}

271 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

273 
ªgi°î°r
 
tmpReg
;

275 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

276 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

277 
tmpReg
.
r
[2] = 
b
;

278 
tmpReg
.
r
[3] = 0;

280 
	`c‹eCÆlSWI
(&
tmpReg
);

281 
	}
}

295 
	$brögUpF©ÆEº‹
(
UID
 
a
)

297 
ªgi°î°r
 
tmpReg
;

299 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

300 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

301 
tmpReg
.
r
[2] = 0;

302 
tmpReg
.
r
[3] = 0;

304 
	`c‹eCÆlSWI
(&
tmpReg
);

305 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/com.c

73 
	~<°d¨g.h
>

75 
	~"../../c‹e/Æl.h
"

76 
	~"£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/readline.c

72 
	~<°rög.h
>

74 
	~"ty≥s.h
"

75 
	~"com.h
"

76 
	~"ªadlöe.h
"

78 
	#START
 ('A'-'@')

	)

79 
	#BACK
 ('B'-'@')

	)

80 
	#ERASE_FWD
 ('D'-'@')

	)

81 
	#END
 ('E'-'@')

	)

82 
	#FORWARD
 ('F'-'@')

	)

83 
	#ERASE
 ('H'-'@')

	)

84 
	#ERASE_EOL
 ('K'-'@')

	)

85 
	#ENTER
 ('M'-'@')

	)

86 
	#REDRAW
 ('R'-'@')

	)

87 
	#ERASE_LINE
 ('U'-'@')

	)

88 
	#ERASE_SOL
 ('W'-'@')

	)

90 
	#BACKSPACE
 ('H'-'@')

	)

91 
	#DELETE
 (0x7f)

	)

92 
	#LF
 ('\n')

	)

93 
	#CR
 ('\r')

	)

94 
	#CTRL_D
 ('D'-'@')

	)

96 
ªadC
();

97 
wrôeC
(
c
);

103 
	$x°æí
 (*
p
)

105 
n
=0;

107 *
p
++!=0Ë
n
++;

109  (
n
);

110 
	}
}

112 
	$x°r˝y
 (*
s
, *
t
)

114 (*
s
++ = *
t
++))

116 
	}
}

118 
	$xmemmove
(*
s
, *
t
,
n
)

120 
n
--Ë*
s
++ = *
t
++;

121 
	}
}

134 
	$back•a˚
 (
n
)

136 
n
--Ë
	`wrôeC
(
BACKSPACE
);

137 
	}
}

150 
	$backup
(*
buf„r
, 
pos
)

152 
	`back•a˚
(
	`x°æí
(&
buf„r
[
pos
]));

153 
	}
}

166 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

168 
c
;

170 
c
 = 
buf„r
[
pos
++];

172 
c
)

174 
	`wrôeC
(
c
);

175 
c
 = 
buf„r
[
pos
++];

177 
	}
}

191 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

193 
c
;

195 
	`wrôeC
(
CR
);

197 
c
 = *
¥om±
++;

199 
c
)

201 
	`wrôeC
(
c
);

202 
c
 = *
¥om±
++;

205 
	`ªdøw_eﬁ
(
buf„r
, 0);

206 
	`backup
(
buf„r
, 
pos
);

207 
	}
}

220 
	$dñëe
 (*
buf„r
, 
pos
)

222 i‡(
buf„r
[
pos
] == 0) ;

224 
	`x°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

225 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

226 
	`wrôeC
(' ');

227 
	`wrôeC
(
BACKSPACE
);

228 
	`backup
(
buf„r
, 
pos
);

231 
	}
}

245 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

247 *
s
 = &
buf„r
[
pos
];

249 
	`xmemmove
(
s
+1, s, 
	`x°æí
(s)+1);

250 
buf„r
[
pos
] = 
c
;

251 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

252 
pos
++;

253 
	`backup
(
buf„r
, 
pos
);

255  
pos
;

256 
	}
}

269 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

271 
pos
 = 0;

272 
c
;

276 
c
=
	`ªadC
();

278 i‡(
c
 =
CR
 || c =
LF
)

280 
buf„r
[
pos
] = 0;

281  
pos
;

284 i‡(
c
 =
CTRL_D
)

286 
buf„r
[0] = 0;

290 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

291 
buf„r
[
pos
++] = 
c
;

293 
	}
}

308 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

310 
i
;

311 
pos
 = 0;

312 
c
;

314 *
buf„r
 = 0;

315 
	`wrôe0
(
¥om±
);

319 
c
 = 
	`ªadC
();

320 i‡(
c
 =
DELETE
Ë¯
ERASE
;

321 i‡(
c
 < ' ')

323 
c
)

325 
START
:

326 
	`back•a˚
(
pos
);

327 
pos
 = 0;

329 
BACK
:

330 i‡(
pos
 > 0)

332 
	`wrôeC
(
BACKSPACE
);

333 
pos
--;

336 
ERASE_FWD
:

337 i‡(
	`x°æí
(
buf„r
) == 0)

339 
	`wrôe0
("*EOF*\r\n");

342 
	`dñëe
(
buf„r
, 
pos
);

344 
END
:

345 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

346 
pos
 = 
	`x°æí
(
buf„r
);

348 
FORWARD
:

349 i‡(
buf„r
[
pos
])

351 
	`wrôeC
(
buf„r
[
pos
]);

352 
pos
++;

355 
ERASE
:

356 i‡(
pos
 > 0)

358 
	`wrôeC
(
BACKSPACE
);

359 
pos
--;

360 
	`dñëe
(
buf„r
, 
pos
);

363 
ENTER
:

364 
	`wrôeC
(
CR
);

365 
	`wrôeC
(
LF
);

366  
	`x°æí
(
buf„r
);

367 
REDRAW
:

368 
	`wrôeC
(
LF
);

369 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

371 
ERASE_LINE
:

372 
	`back•a˚
(
pos
);

373 
i
 = 
pos
 = 
	`x°æí
(
buf„r
);

375 
i
--Ë
	`wrôeC
(' ');

377 
	`back•a˚
(
pos
);

378 
pos
 = 0;

379 
buf„r
[0] = 0;

382 } i‡(
	`x°æí
(
buf„r
Ë< 
maxÀn
)

383 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

385 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/serial.c

72 
	~"ty≥s.h
"

73 
	~"../../devi˚s/ddf_io.h
"

74 
	~"../../devi˚s/ddf_ty≥s.h
"

76 
	~"swis.h
"

77 
	~"../../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
 (
UINT
 
com
)

112 i‡(
com
>1Ë{ 
FALSE
;}

114 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_CM940IAP
,
com
);

118 i‡(
ho°
==0Ë{ 
FALSE
;}

122 
£rül
)

124 
DEVICE_IN_USE
:

125 
DEVICE_UNKNOWN
:

127  
FALSE
;

130  
TRUE
;

131 
	}
}

143 
	$wrôeCh¨ToHo°
 (
c
)

144 {
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);
	}
}

156 
	$¥ötToHo°
 (*
s
)

158 *
s
!=0)

160 
	`wrôeCh¨ToHo°
 (*
s
++);

162 
	}
}

174 
	$ªadCh¨FromHo°
 ()

175 { ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);
	}
}

188 
	$˛o£Ho°
 ()

190 i‡(
ho°
==0Ë 
FALSE
;

192  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

193 
	}
}

206 
	$b™√r
 ()

208 
	`¥ötToHo°
 ("\n\r");

209 
	`¥ötToHo°
 ("\n\rSimple Little OS - mpuSLOS (0.03)\n\r");

210 
	`¥ötToHo°
 ("- initialized ...... ok\n\r");

211 
	`¥ötToHo°
 ("-Ñunning on ....... cm940iap \n\r");

212 
	`¥ötToHo°
 ("- simple shell .....áctive\n\r");

213 
	`¥ötToHo°
 ("\n\r");

214 
	`¥ötToHo°
 ("\n\r");

215 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/shell.c

73 
	~"ty≥s.h
"

74 
	~"ªadlöe.h
"

75 
	~"com.h
"

91 
	$shñl
 ()

93 
CÆlBack
 
cb
;

94 
Àn
;

98 
Àn
 = 
	`ªadLöe
("cm940üp: ", 
comm™d_löe
, 255);

99 
cb
 = 
	`CLI
(
comm™d_löe
);

100 } !
cb
);

102 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/shell.h

73 
	~"£rül.h
"

89 
shñl
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/startx.c

78 
	~"ty≥s.h
"

79 
	~"£rül.h
"

80 
	~"shñl.h
"

86 
	#COM1
 (1)

	)

87 
	#COM0
 (0)

	)

93 
b™√r
 ();

115 
	$íåy
()

126 if(
	`›íHo°
 (
COM0
)==
TRUE
)

128 
	`b™√r
 ();

129 
	`shñl
 ();

139 
	`˛o£Ho°
 ();

140 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/swiapi.c

2 
	~"../../cm940üp/evíts/swis.h
"

3 
	~"../../devi˚s/ddf_‰ame.h
"

5 
	#UINT
 

	)

9 
	mr
[4];

10 } 
	tªgi°î°r
;

12 
ªgi°î°r
 
	grs
;

14 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

32 
	$evítIODevi˚Inô
()

34 
ªgi°î°r
 
tmpReg
;

36 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

37 
tmpReg
.
r
[1] = 0;

38 
tmpReg
.
r
[2] = 0;

39 
tmpReg
.
r
[3] = 0;

41 
	`c‹eCÆlSWI
 (&
tmpReg
);

43 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

44 
	}
}

67 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

69 
ªgi°î°r
 
tmpReg
;

71 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

72 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

73 
tmpReg
.
r
[2] = 
b
;

74 
tmpReg
.
r
[3] = 
c
;

76 
	`c‹eCÆlSWI
(&
tmpReg
);

78  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

79 
	}
}

99 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

101 
ªgi°î°r
 
tmpReg
;

103 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

104 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

105 
tmpReg
.
r
[2] = 
b
;

106 
tmpReg
.
r
[3] = 0;

108 
	`c‹eCÆlSWI
(&
tmpReg
);

110  (Ë
tmpReg
.
r
[0];

111 
	}
}

127 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

129 
ªgi°î°r
 
tmpReg
;

131 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

132 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

133 
tmpReg
.
r
[2] = 
b
;

134 
tmpReg
.
r
[3] = 
c
;

136 
	`c‹eCÆlSWI
(&
tmpReg
);

137 
	}
}

152 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

154 
ªgi°î°r
 
tmpReg
;

156 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

157 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

158 
tmpReg
.
r
[2] = 
b
;

159 
tmpReg
.
r
[3] = 0;

161 
	`c‹eCÆlSWI
(&
tmpReg
);

163  (
UINT
Ë
tmpReg
.
r
[0];

164 
	}
}

180 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

182 
ªgi°î°r
 
tmpReg
;

184 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

185 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

186 
tmpReg
.
r
[2] = 
b
;

187 
tmpReg
.
r
[3] = 
c
;

189 
	`c‹eCÆlSWI
(&
tmpReg
);

190 
	}
}

205 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

207 
ªgi°î°r
 
tmpReg
;

209 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

210 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

211 
tmpReg
.
r
[2] = 
b
;

212 
tmpReg
.
r
[3] = 0;

214 
	`c‹eCÆlSWI
(&
tmpReg
);

216  (
UINT
Ë
tmpReg
.
r
[0];

217 
	}
}

232 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

234 
ªgi°î°r
 
tmpReg
;

236 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

237 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

238 
tmpReg
.
r
[2] = 
b
;

239 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

241 
	`c‹eCÆlSWI
(&
tmpReg
);

242 
	}
}

257 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

259 
ªgi°î°r
 
tmpReg
;

261 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

262 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

263 
tmpReg
.
r
[2] = 
b
;

264 
tmpReg
.
r
[3] = 0;

266 
	`c‹eCÆlSWI
(&
tmpReg
);

268  (*)
tmpReg
.
r
[0];

269 
	}
}

271 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

273 
ªgi°î°r
 
tmpReg
;

275 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

276 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

277 
tmpReg
.
r
[2] = 
b
;

278 
tmpReg
.
r
[3] = 0;

280 
	`c‹eCÆlSWI
(&
tmpReg
);

281 
	}
}

295 
	$brögUpF©ÆEº‹
(
UID
 
a
)

297 
ªgi°î°r
 
tmpReg
;

299 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

300 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

301 
tmpReg
.
r
[2] = 0;

302 
tmpReg
.
r
[3] = 0;

304 
	`c‹eCÆlSWI
(&
tmpReg
);

305 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/swis.h

76 #i‚de‡
SLOS


83 
	#SLOS
 5075

	)

89 
	#Evít_IODevi˚Inô
 0x800

	)

90 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

91 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

92 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

93 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

94 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

95 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

96 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

97 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

103 
	#BrögUp_Ba£
 0x700

	)

104 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

105 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

111 
	sSwiRegs


113 
	mr
[13];

114 
	m˝§
;

115 
	mpc
;

116 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/ddf_tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"../devi˚s/Àd_drivî.h
"

74 
	~"../devi˚s/£rül_drivî.h
"

80 
	~"../../devi˚s/ddf_ty≥s.h
"

92 
devi˚_åì°r
 
	gdevi˚s
[] =

102 
DEVICE_LED_CM940IAP
,

103 
Àd_öô
,

104 
Àd_›í
,

105 
Àd_˛o£
,

106 
Àd_wrôe_bô
,

107 
Àd_ªad_bô
,

110 
DEVICE_SERIAL_CM940IAP
,

111 
£rül_öô
,

112 
£rül_›í
,

113 
£rül_˛o£
,

114 
£rül_wrôe_byã
,

115 
£rül_ªad_byã
,

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

82 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

98 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

99 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

100 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

101 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

102 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

106 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

107 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

108 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

109 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

110 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

112 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

120 
	mÀd
[4];

121 
	muid
[4];

122 } 
	töã∫Æ_Àd°r
;

128 
öã∫Æ_Àd°r
 
	gdiodes
;

143 
	$Àd_öô
 ()

147 
PAUSE
;

149 
LED_ALL_OFF
;

153 
diodes
.
Àd
 [
RED
-1] = 
OFF
;

154 
diodes
.
Àd
 [
YELLOW
-1] = 
OFF
;

155 
diodes
.
Àd
 [
GREEN
-1] = 
OFF
;

156 
diodes
.
Àd
 [
GREEN2
-1] = 
OFF
;

158 
diodes
.
uid
 [
RED
-1] = 
NONE
;

159 
diodes
.
uid
 [
YELLOW
-1] = 
NONE
;

160 
diodes
.
uid
 [
GREEN
-1] = 
NONE
;

161 
diodes
.
uid
 [
GREEN2
-1] = 
NONE
;

162 
	}
}

175 
UID
 
	$Àd_›í
 (
maj‹
,
mö‹
) {

177 
mö‹
 --;

179 i‡(
maj‹
==
DEVICE_LED_CM940IAP
)

181 i‡(
mö‹
<4)

183 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

185 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

186  
diodes
.
uid
[
mö‹
];

190  
DEVICE_IN_USE
;

195  
DEVICE_UNKNOWN
;

199  
DEVICE_NEXT
;

200 
	}
}

216 
	$Àd_˛o£
 (
UID
 
id
) {

217 
x
;

219 
x
=0;x<=3;x++)

221 i‡(
diodes
.
uid
[
x
]==
id
)

223 
diodes
.
uid
 [
x
] = 
NONE
;

224  
DEVICE_SUCCESS
;

228  
DEVICE_UNKNOWN
;

229 
	}
}

243 
	$Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
) {

244 
x
;

246 
PAUSE
;

248 
x
=0;x<=3;x++)

250 i‡(
diodes
.
uid
[
x
]==
id
)

252 i‡(
diodes
.
uid
[
x
]!=
NONE
)

254 
Àd_£t
 &= 1;

256 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

258 i‡(
Àd_£t
==
ON
)

260 
x
)

263 0 : 
LED_1_ON
; ;

264 1 : 
LED_2_ON
; ;

265 2 : 
LED_3_ON
; ;

266 3 : 
LED_4_ON
; ;

271 
x
)

273 0 : 
LED_1_OFF
; ;

274 1 : 
LED_2_OFF
; ;

275 2 : 
LED_3_OFF
; ;

276 3 : 
LED_4_OFF
; ;

282 
	}
}

293 
BYTE
 
	$Àd_ªad_bô
 (
UID
 
id
) {

294 
x
;

296 
x
=0;x<=3;x++)

298 i‡(
diodes
.
uid
[
x
]==
id
)

300 i‡(
diodes
.
uid
[
x
]!=
NONE
)

302  
diodes
.
Àd
 [
x
];

312 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/led_driver.h

68 #i‚de‡
_DEVICE_CM7IAP_LED


70 
	#_DEVICE_CM7IAP_LED
 1

	)

72 
	#DEVICE_LED_CM940IAP
 55075

	)

83 
	#GREEN
 4

	)

84 
	#YELLOW
 3

	)

85 
	#RED
 2

	)

86 
	#GREEN2
 1

	)

89 
	#ON
 1

	)

90 
	#OFF
 0

	)

104 
Àd_öô
 ();

117 
UID
 
Àd_›í
 (
devi˚
,
Àd
);

131 
Àd_˛o£
 (
UID
 
id
);

145 
Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
);

157 
BYTE
 
Àd_ªad_bô
 (
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_driver.c

23 
	~"../../devi˚s/ddf_‰ame.h
"

24 
	~"£rül_drivî.h
"

25 
	~"£rül_ma¸os.h
"

31 
	#DEVICE_SERIAL_CM940IAP
 55095

	)

39 
	mbaudøã
[2];

40 
	muid
[2];

41 } 
	töã∫Æ_£rül°r
;

47 
öã∫Æ_£rül°r
 
	gnode
;

60 
	$öã∫Æ_£rül_cm940üp_£tup
 (
p‹t
, 
baudR©e
)

62 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_M
, ((
baudR©e
 & 0xf00) >> 8));

63 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_L
, (
baudR©e
 & 0xff));

64 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_H
, (
AMBA_UARTLCR_H_WLEN_8
 | 
AMBA_UARTLCR_H_FEN
));

65 
	}
}

77 
	$£rül_öô
 ()

82 
	`öã∫Æ_£rül_cm940üp_£tup
 (
INTEGRATOR_UART0_BASE
,
ARM_BAUD_9600
);

85 
	`öã∫Æ_£rül_cm940üp_£tup
 (
INTEGRATOR_UART1_BASE
,
ARM_BAUD_9600
);

88 
node
.
baudøã
[0] = 
ARM_BAUD_9600
;

89 
node
.
baudøã
[1] = 
ARM_BAUD_9600
;

90 
node
.
uid
[
COM0
] = 
NONE
;

91 
node
.
uid
[
COM1
] = 
NONE
;

92 
	}
}

107 
UID
 
	$£rül_›í
 (
maj‹
,
com
)

109 i‡(
maj‹
==
DEVICE_SERIAL_CM940IAP
)

111 i‡(
com
==
COM0
 || com==
COM1
)

113 i‡(
node
.
uid
[
com
]!=
NONE
)

115  
DEVICE_IN_USE
;

119 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

120  
node
.
uid
[
com
];

125  
DEVICE_NEXT
;

126 
	}
}

140 
	$£rül_˛o£
 (
UID
 
id
)

142 i‡(
node
.
uid
[
COM0
]==
id
)

144 
node
.
uid
[
COM0
] = 
NONE
;

145  
DEVICE_SUCCESS
;

148 i‡(
node
.
uid
[
COM1
]==
id
)

150 
node
.
uid
[
COM1
] = 
NONE
;

151  
DEVICE_SUCCESS
;

154  
DEVICE_UNKNOWN
;

155 
	}
}

170 
	$öã∫Æ_£rül_wrôe
 (
p‹t
,
BYTE
 
c
)

172  
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

173 
	`PUT_CHAR
(
p‹t
,
c
);

174 
	}
}

188 
	$£rül_wrôe_byã
 (
UID
 
id
,
BYTE
 
d©a
)

191 i‡(
node
.
uid
[
COM0
]==
id
)

193 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART0_BASE
,
d©a
);

197 i‡(
node
.
uid
[
COM1
]==
id
)

199 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART1_BASE
,
d©a
);

203 
	}
}

215 
BYTE
 
	$öã∫Æ_£rül_ªad
 (
p‹t
)

218  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

220  
	`GET_CHAR
(
p‹t
);

221 
	}
}

233 
BYTE
 
	$£rül_ªad_byã
 (
UID
 
id
)

235 i‡(
node
.
uid
[
COM0
]==
id
)

237  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART0_BASE
);

240 i‡(
node
.
uid
[
COM1
]==
id
)

242  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART1_BASE
);

246 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_driver.h

28 
£rül_öô
 ();

41 
UID
 
£rül_›í
 (
devi˚
,
ign‹ed
);

55 
£rül_˛o£
 (
UID
 
id
);

68 
£rül_wrôe_byã
 (
UID
 
id
,
BYTE
 
£rül
);

80 
BYTE
 
£rül_ªad_byã
 (
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_macros.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

5 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

7 
	#AMBA_UARTDR
 0x00

	)

8 
	#AMBA_UARTRSR
 0x04

	)

9 
	#AMBA_UARTECR
 0x04

	)

10 
	#AMBA_UARTLCR_H
 0x08

	)

11 
	#AMBA_UARTLCR_M
 0x0C

	)

12 
	#AMBA_UARTLCR_L
 0x10

	)

13 
	#AMBA_UARTCR
 0x14

	)

14 
	#AMBA_UARTFR
 0x18

	)

15 
	#AMBA_UARTIIR
 0x1C

	)

16 
	#AMBA_UARTICR
 0x1C

	)

17 
	#AMBA_UARTILPR
 0x20

	)

19 
	#AMBA_UARTRSR_OE
 0x08

	)

20 
	#AMBA_UARTRSR_BE
 0x04

	)

21 
	#AMBA_UARTRSR_PE
 0x02

	)

22 
	#AMBA_UARTRSR_FE
 0x01

	)

24 
	#AMBA_UARTFR_TXFF
 0x20

	)

25 
	#AMBA_UARTFR_RXFE
 0x10

	)

26 
	#AMBA_UARTFR_BUSY
 0x08

	)

27 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

29 
	#AMBA_UARTCR_RTIE
 0x40

	)

30 
	#AMBA_UARTCR_TIE
 0x20

	)

31 
	#AMBA_UARTCR_RIE
 0x10

	)

32 
	#AMBA_UARTCR_MSIE
 0x08

	)

33 
	#AMBA_UARTCR_IIRLP
 0x04

	)

34 
	#AMBA_UARTCR_SIREN
 0x02

	)

35 
	#AMBA_UARTCR_UARTEN
 0x01

	)

37 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

38 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

39 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

40 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

41 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

42 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

43 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

44 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

45 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

47 
	#AMBA_UARTIIR_RTIS
 0x08

	)

48 
	#AMBA_UARTIIR_TIS
 0x04

	)

49 
	#AMBA_UARTIIR_RIS
 0x02

	)

50 
	#AMBA_UARTIIR_MIS
 0x01

	)

53 
	#ARM_BAUD_460800
 1

	)

54 
	#ARM_BAUD_230400
 3

	)

55 
	#ARM_BAUD_115200
 7

	)

56 
	#ARM_BAUD_57600
 15

	)

57 
	#ARM_BAUD_38400
 23

	)

58 
	#ARM_BAUD_19200
 47

	)

59 
	#ARM_BAUD_14400
 63

	)

60 
	#ARM_BAUD_9600
 95

	)

61 
	#ARM_BAUD_4800
 191

	)

62 
	#ARM_BAUD_2400
 383

	)

63 
	#ARM_BAUD_1200
 767

	)

67 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

68 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

69 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

70 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

72 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

73 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

76 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

77 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

79 #i‚de‡
LLEVELIO


80 
	#LLEVELIO
 1

	)

81 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

82 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

83 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

84 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

85 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

86 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

87 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

88 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

91 
	#COM1
 (1)

	)

92 
	#COM0
 (0)

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/events_init.c

92 
	$evítSîvi˚sInô
 ()

97 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/events_init.h

81 
evítSîvi˚sInô
 ();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/irq_handler.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
h™dÀr
.
s


55 @ * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 @ * 
OS
 : 
SLOS


57 @ * 
Pœtf‹m
 : 
I¡egøt‹
/
AP
 940

58 @ * 
Hi°‹y
 :

60 @ * 19
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
suµ‹t
 
I¡egøt‹
 940

63 @ * 30
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


64 @ * - 
ªmove
 
the
 
buâ⁄
 
£rvi˚
 
routöe


69 @ * 
EXPORT


72 .
ãxt


73 .
globÆ
 
evítsIRQH™dÀr


76 @ * 
IMPORT


79 .
evítsTickCM940IAPSîvi˚


80 .
kî√lScheduÀr


83 @ * 
ROUTINES


86 
CMRegi°îBa£
:

87 .
w‹d
 0x10000000

88 
IRQ0_BASE
:

89 .
w‹d
 0x14000000

91 .
equ
 
TIMERINT2
, 0x00000080

92 .
equ
 
STATUS
, 0x00000000

94 @ -- 
evíts_úq_h™dÀr
 ------------------------------------------------------

96 @ 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


97 @ 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

100 
evítsIRQH™dÀr
:

101 
SUB
 
r14
,Ñ14, #4

102 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} @ savêc⁄ãxt

103 
LDR
 
r0
, 
IRQ0_BASE
 @ 
Lﬂd
 
Ba£
 
addªss
 
of
 
I¡
 
Cål


104 
LDR
 
r0
, [r0,#STATUS] @ 
Ród
 
I¡îru±
 
°©us


105 
LDR
 
r1
, =0x000001f‡@ 
lﬂd
 
vÆue
 
to
 
mask
 
off
 
uµî
 
bôs


106 
AND
 
r0
,Ñ0, 
r1
 @ 
mask
 
off
 
unu£d
 
öãºu±s


107 
TST
 
r0
, #TIMERINT2

108 
BNE
 
evítsTickCM940IAPVíìr


109 
LDMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
pc
}^ @ 
unknown
 
evít
 
ign‹e


111 
evítsTickCM940IAPVíìr
:

112 
BL
 
evítsTickCM940IAPSîvi˚
 @ 
ª£t
 
timî


113 
B
 
kî√lScheduÀr


114 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/swi_handler.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögUpSëR8fiq
();

98 
brögUpSëR9fiq
();

99 
brögUpSëR10fiq
();

101 
STATE
;

120 
CÆlBack
 
	$evítsSWIH™dÀr
(
swi_numbî
, 
SwiRegs
 *
r
)

122 
swi_numbî
)

129 
SLOS
:

131 
r
->r[0])

144 
BrögUp_Tø˚
:

146 
r
->r[1])

149 
	`brögUpSëR9fiq
 (
r
->r[2]);

153 
	`brögUpSëR10fiq
 (
r
->r[2]);

159 
BrögUp_F©ÆEº‹
:

160 
	`brögUpSëR8fiq
 (
r
->r[1]);

162 
ÁèÀº‹
: fatalerror;

172 
Evít_IODevi˚Inô
:

173 
	`ioInôülizeDrivîs
 ();

174 
r
->r[0] = 1;

175 
r
->r[1] = 2;

185 i‡(
STATE
!=1)

188 
asm
 volatile ("MSR CPSR_c,#0x5f");

191 
r
->r[0])

194 
Evít_IODevi˚O≥n
:

195 
r
->r[0] = (Ë
	`ioO≥nDrivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

198 
Evít_IODevi˚Clo£
:

199 
r
->r[0] = (Ë
	`ioClo£Drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

202 
Evít_IODevi˚WrôeByã
:

203 
	`ioWrôeByã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

206 
Evít_IODevi˚RódByã
:

207 
r
->r[0] = (Ë
	`ioRódByã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

210 
Evít_IODevi˚WrôeBô
:

211 
	`ioWrôeBô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

214 
Evít_IODevi˚RódBô
:

215 
r
->r[0] = (Ë
	`ioRódBô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

218 
Evít_IODevi˚WrôeBlock
:

219 
	`ioWrôeBlock
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

222 
Evít_IODevi˚RódBlock
:

223 
r
->r[0] = (Ë
	`ioRódBlock
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

228 
asm
 volatile ("MSR CPSR_c,#0xD3");

232 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/swis.h

76 #i‚de‡
SLOS


83 
	#SLOS
 5075

	)

89 
	#Evít_IODevi˚Inô
 0x800

	)

90 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

91 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

92 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

93 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

94 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

95 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

96 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

97 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

103 
	#BrögUp_Ba£
 0x700

	)

104 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

105 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

111 
	sSwiRegs


113 
	mr
[13];

114 
	m˝§
;

115 
	mpc
;

116 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/tick_service.c

73 
	~"../hódîs/Àd.h
"

74 
	~"../hódîs/ma¸os.h
"

76 
	~"../../hódîs/≠i_ty≥s.h
"

82 
	#O√MûliSec⁄d
 93750000

	)

83 
	#Irq0
 0x14000000

	)

84 
	#I¡_E«bÀSë
 2

	)

102 
	gÀd_pul£
 = 0;

103 
UINT
 
	gøã
;

119 
	$evítTickInô
 (
UINT
 
m£c
)

121 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

129 
m£c
)

132 
øã
 = 2;

136 
øã
 = 24;

146 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

147 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

148 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

149 
	}
}

161 
	$evítTimîISR
 ()

163 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

171 
PAUSE
;

172 i‡–
Àd_pul£
 )

173 { 
LED_1_ON
; 
Àd_pul£
 = 0; }

175 { 
LED_1_OFF
; 
Àd_pul£
 = 1; }

184 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

185 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

186 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

187 
	}
}

189 
	$evítsTickCM940IAPSîvi˚
 ()

191 
	`evítTimîISR
 ();

192 
	}
}

204 
	$evítTickSèπ
 ()

206 vﬁ©ûê* 
IRQ
 = (*)
Irq0
;

207 *(
IRQ
 + 
I¡_E«bÀSë
) = 0x80;

208 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/tick_service.h

103 
evítTickInô
 (
UINT
 
m£c
);

115 
evítsTickCM940IAPSîvi˚
 ();

127 
evítTickSèπ
 ();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/all.h

68 #i‚de‡
_HEADERS_CM940IAP_ALL


70 
	#_HEADERS_CM940IAP_ALL
 1

	)

72 
	~"Àd.h
"

73 
	~"ma¸os.h
"

79 
	~"../evíts/tick_£rvi˚.h
"

80 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/led.h

81 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

97 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

98 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

99 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

100 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

101 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

105 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

106 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

107 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

108 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

109 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

111 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/macros.h

79 
	#Timî0
 0x13000000

	)

80 
	#Timî1
 0x13000100

	)

81 
	#Timî2
 0x13000200

	)

83 
	#Timî_Lﬂd
 0

	)

84 
	#Timî_VÆue
 1

	)

85 
	#Timî_C⁄åﬁ
 2

	)

86 
	#Timî_CÀ¨
 3

	)

92 
	#πc_Ba£
 0x15000000

	)

93 
	#πc_D©a
 0x00

	)

94 
	#πc_M©ch
 0x01

	)

95 
	#πc_Sèt
 0x02

	)

96 
	#πc_CÀ¨
 0x02

	)

97 
	#πc_Lﬂd
 0x03

	)

98 
	#πc_C⁄åﬁ
 0x04

	)

104 
	#TimîE«bÀ
 0x80

	)

105 
	#TimîPîiodic
 0x40

	)

106 
	#TimîDißbÀ
 0x00

	)

107 
	#TimîFªîun
 0x00

	)

108 
	#TimîPªsˇÀ
 0x00

	)

109 
	#TimîPªsˇÀ16
 0x04

	)

110 
	#TimîPªsˇÀ256
 0x08

	)

114 
	#IRQVe˘‹
 0x18

	)

117 
	#INTEGRATOR_CT_BASE
 0x13000000

	)

118 
	#INTEGRATOR_IC_BASE
 0x14000000

	)

119 
	#INTEGRATOR_RTC_BASE
 0x15000000

	)

120 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

121 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

122 
	#INTEGRATOR_KBD_BASE
 0x18000000

	)

123 
	#INTEGRATOR_MOUSE_BASE
 0x19000000

	)

125 
	#AMBA_UARTDR
 0x00

	)

126 
	#AMBA_UARTRSR
 0x04

	)

127 
	#AMBA_UARTECR
 0x04

	)

128 
	#AMBA_UARTLCR_H
 0x08

	)

129 
	#AMBA_UARTLCR_M
 0x0C

	)

130 
	#AMBA_UARTLCR_L
 0x10

	)

131 
	#AMBA_UARTCR
 0x14

	)

132 
	#AMBA_UARTFR
 0x18

	)

133 
	#AMBA_UARTIIR
 0x1C

	)

134 
	#AMBA_UARTICR
 0x1C

	)

135 
	#AMBA_UARTILPR
 0x20

	)

137 
	#AMBA_UARTRSR_OE
 0x08

	)

138 
	#AMBA_UARTRSR_BE
 0x04

	)

139 
	#AMBA_UARTRSR_PE
 0x02

	)

140 
	#AMBA_UARTRSR_FE
 0x01

	)

142 
	#AMBA_UARTFR_TXFF
 0x20

	)

143 
	#AMBA_UARTFR_RXFE
 0x10

	)

144 
	#AMBA_UARTFR_BUSY
 0x08

	)

145 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

147 
	#AMBA_UARTCR_RTIE
 0x40

	)

148 
	#AMBA_UARTCR_TIE
 0x20

	)

149 
	#AMBA_UARTCR_RIE
 0x10

	)

150 
	#AMBA_UARTCR_MSIE
 0x08

	)

151 
	#AMBA_UARTCR_IIRLP
 0x04

	)

152 
	#AMBA_UARTCR_SIREN
 0x02

	)

153 
	#AMBA_UARTCR_UARTEN
 0x01

	)

155 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

156 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

157 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

158 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

159 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

160 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

161 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

162 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

163 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

165 
	#AMBA_UARTIIR_RTIS
 0x08

	)

166 
	#AMBA_UARTIIR_TIS
 0x04

	)

167 
	#AMBA_UARTIIR_RIS
 0x02

	)

168 
	#AMBA_UARTIIR_MIS
 0x01

	)

171 
	#ARM_BAUD_460800
 1

	)

172 
	#ARM_BAUD_230400
 3

	)

173 
	#ARM_BAUD_115200
 7

	)

174 
	#ARM_BAUD_57600
 15

	)

175 
	#ARM_BAUD_38400
 23

	)

176 
	#ARM_BAUD_19200
 47

	)

177 
	#ARM_BAUD_14400
 63

	)

178 
	#ARM_BAUD_9600
 95

	)

179 
	#ARM_BAUD_4800
 191

	)

180 
	#ARM_BAUD_2400
 383

	)

181 
	#ARM_BAUD_1200
 767

	)

185 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

186 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

187 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

188 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

190 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

191 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

194 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

195 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

197 #i‚de‡
LLEVELIO


198 
	#LLEVELIO
 1

	)

199 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

200 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

201 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

202 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

203 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

204 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

205 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

206 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/init.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
öô
.
s


8 @ * 
OS
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 14 
July
 2003 
Andªw
 
N
. 
Sloss


13 @ * - 
£∑øãd
 
the
 
pcbSëUp
 
routöe


17 .
ãxt


18 .
code
 32

19 .
Æign
 0

20 .
globÆ
 
c‹eInôülize


21 .
C_E¡ry


22 .
MpuPCB_PåTask2


23 .
MpuPCB_PåTask3


24 .
mpuInôFlush


25 .
C_E¡ryTask2


26 .
C_E¡ryTask3


27 .
MpuPCB_CuºítTask


28 .
≠∂iˇti⁄Lﬂdî


29 .
pcbSëUp


30 .
globÆ
 
öôSëUpSècks


32 .
c‹eCÆlSWI


34 .
equ
 
IRQ32md
, 0x12

35 .
equ
 
SVC32md
, 0x13

36 .
equ
 
SYS32md
, 0x1f

37 .
equ
 
NoI¡
, 0xc0

39 
c‹eInôülize
:

41 
BL
 
mpuInôFlush


42 
BL
 
brögUpInôFIQRegi°îs


43 
B
 
≠∂iˇti⁄Lﬂdî


51 
öôSëUpSècks
:

53 
MOV
 
•
,#0
x10000
 @ ; 
Kî√l
 
Sèck


54 
MSR
 
	gCPSR_c
,#NoI¡|
SYS32md


55 
MOV
 
	g•
,#0
	gx28000
 @ ; 
Sy°em
 
	gSèck
=0x28000

56 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


57 
MOV
 
	g•
,#0
	gx9000
 @ ; 
IRQ
 
	gSèck
=0x9000

58 
MSR
 
CPSR_c
,#NoI¡|
SVC32md


66 
MOV
 
	gr0
,#0
	gx28000
 @ ; 
Task2


67 
LDR
 
	gr1
,=
MpuPCB_PåTask2


68 
MOV
 
r2
,#0
x30000


69 
BL
 
pcbSëUp


71 
MOV
 
	gr0
,#0
	gx30000
 @ ; 
Task3


72 
LDR
 
	gr1
,=
MpuPCB_PåTask3


73 
MOV
 
r2
,#0
x38000


74 
BL
 
	gpcbSëUp


76 @ ; -- 
£t
 
the
 
cuºít
 
ID
 
to
 
	gTASK1
 ...........

78 
LDR
 
	gr0
, =
MpuPCB_CuºítTask


79 
MOV
 
r1
, #0

80 
STR
 
	gr1
,[
r0
] @ ; 
fú°
 
èsk
 
	gID
=0

81 
LDR
 
Ã
,=
C_E¡ry


82 
MOV
 
pc
,
	gÃ
 @ ; 
ˇŒ
 
	gC_E¡ry


83 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/mpupcb.s

2 @ ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ ; * 
	gModuÀ
 : 
mpupcb
.
s


8 @ ; * 
	gOS
 : 
SLOS


9 @ ; * 
	gVîsi⁄
 : 0.09

10 @ ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ ; * 14 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


13 @ ; * - 
£∑øãd
 
the
 
pcbSëUp
 
	groutöe


17 .
	gãxt


18 .
	gcode
 32

19 .
	gÆign
 0

20 .
globÆ
 
	gpcbSëup


21 .
globÆ
 
	gMpuPCB_CuºítTask


22 .
globÆ
 
	gMpuPCB_TabÀ


23 .
globÆ
 
	gMpuPCB_T›OfIRQSèck


24 .
globÆ
 
	gMpuPCB_PåCuºítTask


25 .
globÆ
 
	gMpuPCB_PåNextTask


26 .
globÆ
 
	gMpuPCB_PåTask1


27 .
globÆ
 
	gMpuPCB_BŸtomTask1


28 .
globÆ
 
	gMpuPCB_Regi⁄TabÀ1


29 .
globÆ
 
	gMpuPCB_PåTask2


30 .
globÆ
 
	gMpuPCB_BŸtomTask2


31 .
globÆ
 
	gMpuPCB_Regi⁄TabÀ1


32 .
globÆ
 
	gMpuPCB_PåTask3


33 .
globÆ
 
	gMpuPCB_BŸtomTask3


34 .
globÆ
 
	gMpuPCB_Regi⁄TabÀ1


35 .
globÆ
 
	gpcbSëUp


37 @ ; -- 
	gpcbSëUp
 ---------------------------------------------------------------

39 @ ; 
	gDes¸ùti⁄
 : 
PCB
 
£tup


41 @ ; 
	gP¨amëîs
 : 
r0
=<
thªad
 
íåy
 
addªss
>

42 @ ; 
	gr1
=<
PCB
 
Addªss
>

43 @ ; 
	gr2
=<
°ack
 
addªss
>

44 @ ; 
	gRëu∫
 : 
£tup
 
PCB


45 @ ; 
	gNŸes
 :

48 
	gpcbSëUp
:

49 
STR
 
r0
,[
r1
,#-4]

50 
STR
 
	gr0
,[
r1
,#-64]

51 
STR
 
	gr2
,[
r1
,#-8]

52 
MOV
 
	gr0
,#0
x50


53 
STR
 
	gr0
,[
r1
,#-68]

54 
MOV
 
	gpc
,
Ã


56 
	gMpuPCB_TabÀ
:

57 .
w‹d
 
MpuPCB_PåTask1


58 .
w‹d
 
MpuPCB_PåTask2


59 .
w‹d
 
MpuPCB_PåTask3


61 
MpuPCB_T›OfIRQSèck
:

62 .
w‹d
 0x9000 @ ; 
ªÆ
 
vÆue


64 
	gMpuPCB_PåCuºítTask
:

65 .
w‹d
 0x1

67 
MpuPCB_PåNextTask
:

68 .
w‹d
 0x1

70 
MpuPCB_CuºítTask
:

71 .
w‹d
 0x1

74 @ ; 
	$Task
(1): 
FuŒ
 
MPU
 
PCB


75 @ ; 
mpupcb


77 @ ; 
PCB


78 @ ; 
Regi⁄TabÀ


79 @ ; 
	}
}

82 
	gMpuPCB_BŸtomTask1
:

83 .
skù
 72

84 
MpuPCB_PåTask1
:

86 
MpuPCB_Regi⁄TabÀ1
:

87 .
w‹d
 0x20000 @ ; 
ba£
 
	gaddªss


88 .
	gw‹d
 14 @ ; 
SIZE_32K
 
	gaddªss


89 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

90 .
	gw‹d
 6 @ ; 
ˇche
 
™d
 
wrôe
 
	gthrough


91 .
	gw‹d
 1 @ ; 
	gR_ENABLED


94 @ ; 
	$Task
(2): 
FuŒ
 
MPU
 
PCB


95 @ ; 
mpupcb


97 @ ; 
PCB


98 @ ; 
Regi⁄TabÀ


99 @ ; 
	}
}

102 
	gMpuPCB_BŸtomTask2
:

103 .
skù
 72

104 
MpuPCB_PåTask2
:

106 
MpuPCB_Regi⁄TabÀ2
:

107 .
w‹d
 0x28000 @ ; 
ba£
 
	gaddªss


108 .
	gw‹d
 14 @ ; 
SIZE_32K
 
	gaddªss


109 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

110 .
	gw‹d
 6 @ ; 
ˇche
 
™d
 
wrôe
 
	gthrough


111 .
	gw‹d
 1 @ ; 
	gR_ENABLED


114 @ ; 
	$Task
(3): 
FuŒ
 
MPU
 
PCB


115 @ ; 
mpupcb


117 @ ; 
PCB


118 @ ; 
Regi⁄TabÀ


119 @ ; 
	}
}

122 
	gMpuPCB_BŸtomTask3
:

123 .
skù
 72

124 
MpuPCB_PåTask3
:

126 
MpuPCB_Regi⁄TabÀ3
:

127 .
w‹d
 0x30000 @ ; 
ba£
 
	gaddªss


128 .
	gw‹d
 14 @ ; 
SIZE_32K
 
	gaddªss


129 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

130 .
	gw‹d
 6 @ ; 
ˇche
 
™d
 
wrôe
 
	gthrough


131 .
	gw‹d
 1 @ ; 
	gR_ENABLED


132 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/all.h

71 #i‚de‡
_CORE_ALL


73 
	#_CORE_ALL
 1

	)

75 
	~"../hódîs/≠i_ty≥s.h
"

76 
	~"../devi˚s/ddf_io.h
"

77 
	~<as£π.h
>

78 
	~<time.h
>

79 
	~"../cm940üp/hódîs/Æl.h
"

80 
	~"../hódîs/≠i_devi˚.h
"

81 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/cinit.c

77 
	~"../c‹e/Æl.h
"

78 
	~"../cm940üp/evíts/evíts_öô.h
"

79 
	~"../mem‹y/mem_öô.h
"

87 
	#DEVICESINIT
 1

	)

88 
	#SERVICESINIT
 2

	)

89 
	#TICKINIT
 3

	)

90 
	#CINITINIT
 4

	)

91 
	#TICKSTART
 5

	)

92 
	#MPUSETUP
 6

	)

93 
	#ENTERTASK
 7

	)

95 
	#LOW_LEVEL_INITIALIZATION
 1

	)

96 
	#BOOT_SLOS
 2

	)

108 
	gSTATE
;

114 
swôchOnSy°em
 ();

130 
	$cöô_öô
 ()

132 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

144 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

154 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

163 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

164 
	}
}

176 
	$C_E¡ry
 ( )

191 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

201 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

210 
	`Œåa˚
(
	`mem‹yMpuSy°em
(),
MPUSETUP
);

219 
STATE
=
BOOT_SLOS
;

221 
	`Œåa˚
(
	`swôchOnSy°em
(),
ENTERTASK
);

231 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/jump.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
jump
.
s


55 @ * 
Des¸ùti⁄
 : 
jumps
 
öto
 
the
 
fú°
 
èsk


56 @ * 
OS
 : 
mpuSLOS
 0.03

57 @ * 
Hi°‹y
 :

59 @ * 14
th
 
July
 2002 
Andªw
 
N
. 
Sloss


60 @ * - 
added
 
a
 
√w
 
jump
 
mech™ism


64 .
ãxt


65 .
code
 32

66 .
Æign
 0

67 .
globÆ
 
jumpToTask1


69 @ -- 
JumpToTask1
 --------------------------------------------------------------

71 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
SPSR
 
to
 
U£r
 
Mode
 
™d
 
íabÀs
 
IRQ
's 

72 @ 
P¨amëîs
 : 
r0
 - 
addªss
 
⁄
 
èsk1


73 @ 
Rëu∫
 : 
√vî


74 @ 
NŸes
 : 
this
 
routöe
 
is
 
ªquúed
 
MPU
 
vîsi⁄
 
of
 
the


75 @ 
code
.

78 
jumpToTask1
:

79 
MSR
 
SPSR_c
,#0
x50


80 
MOVS
 
pc
,
r0


81 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/swiapi.c

2 
	~"../cm940üp/evíts/swis.h
"

3 
	~"../devi˚s/ddf_‰ame.h
"

5 
	#UINT
 

	)

9 
	mr
[4];

10 } 
	tªgi°î°r
;

12 
ªgi°î°r
 
	grs
;

14 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

32 
	$evítIODevi˚Inô
()

34 
ªgi°î°r
 
tmpReg
;

36 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

37 
tmpReg
.
r
[1] = 0;

38 
tmpReg
.
r
[2] = 0;

39 
tmpReg
.
r
[3] = 0;

41 
	`c‹eCÆlSWI
 (&
tmpReg
);

43 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

44 
	}
}

67 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

69 
ªgi°î°r
 
tmpReg
;

71 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

72 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

73 
tmpReg
.
r
[2] = 
b
;

74 
tmpReg
.
r
[3] = 
c
;

76 
	`c‹eCÆlSWI
(&
tmpReg
);

78  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

79 
	}
}

99 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

101 
ªgi°î°r
 
tmpReg
;

103 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

104 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

105 
tmpReg
.
r
[2] = 
b
;

106 
tmpReg
.
r
[3] = 0;

108 
	`c‹eCÆlSWI
(&
tmpReg
);

110  (Ë
tmpReg
.
r
[0];

111 
	}
}

127 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

129 
ªgi°î°r
 
tmpReg
;

131 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

132 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

133 
tmpReg
.
r
[2] = 
b
;

134 
tmpReg
.
r
[3] = 
c
;

136 
	`c‹eCÆlSWI
(&
tmpReg
);

137 
	}
}

152 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

154 
ªgi°î°r
 
tmpReg
;

156 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

157 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

158 
tmpReg
.
r
[2] = 
b
;

159 
tmpReg
.
r
[3] = 0;

161 
	`c‹eCÆlSWI
(&
tmpReg
);

163  (
UINT
Ë
tmpReg
.
r
[0];

164 
	}
}

180 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

182 
ªgi°î°r
 
tmpReg
;

184 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

185 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

186 
tmpReg
.
r
[2] = 
b
;

187 
tmpReg
.
r
[3] = 
c
;

189 
	`c‹eCÆlSWI
(&
tmpReg
);

190 
	}
}

205 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

207 
ªgi°î°r
 
tmpReg
;

209 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

210 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

211 
tmpReg
.
r
[2] = 
b
;

212 
tmpReg
.
r
[3] = 0;

214 
	`c‹eCÆlSWI
(&
tmpReg
);

216  (
UINT
Ë
tmpReg
.
r
[0];

217 
	}
}

232 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

234 
ªgi°î°r
 
tmpReg
;

236 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

237 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

238 
tmpReg
.
r
[2] = 
b
;

239 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

241 
	`c‹eCÆlSWI
(&
tmpReg
);

242 
	}
}

257 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

259 
ªgi°î°r
 
tmpReg
;

261 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

262 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

263 
tmpReg
.
r
[2] = 
b
;

264 
tmpReg
.
r
[3] = 0;

266 
	`c‹eCÆlSWI
(&
tmpReg
);

268  (*)
tmpReg
.
r
[0];

269 
	}
}

271 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

273 
ªgi°î°r
 
tmpReg
;

275 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

276 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

277 
tmpReg
.
r
[2] = 
b
;

278 
tmpReg
.
r
[3] = 0;

280 
	`c‹eCÆlSWI
(&
tmpReg
);

281 
	}
}

295 
	$brögUpF©ÆEº‹
(
UID
 
a
)

297 
ªgi°î°r
 
tmpReg
;

299 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

300 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

301 
tmpReg
.
r
[2] = 0;

302 
tmpReg
.
r
[3] = 0;

304 
	`c‹eCÆlSWI
(&
tmpReg
);

305 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
 ()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/uid.h

72 
	~"../hódîs/≠i_ty≥s.h
"

74 
	#NONE
 0

	)

98 
UID
 
uid_gíî©e
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/data.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eD©aAb‹tH™dÀr


23 
c‹eD©aAb‹tH™dÀr
:

24 
B
 
c‹eD©aAb‹tH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a
 {

97 
	msize
;

98 *
	md©a
;

99 } 
	tblock_d©a°r
;

109 
	sdevi˚_åì
 {

118 
	m«me
[12];

127 
UID
 
	mdrivî_id
;

137 (*
	möô
)();

151 
UID
 (*
›í
)(, );

164 (*
	m˛o£
)(
	mUID
);

181 (*
	mbyã
)(
	mUID
, 
	mBYTE
);

191 (*
	mbô
)(
	mUID
, 
	mBYTE
);

201 (*
	mblock
)(
	mUID
, 
	mblock_d©a°r
 *);

203 } 
	mwrôe
;

221 
BYTE
 (*
byã
)(
	mUID
);

232 
BYTE
 (*
bô
)(
	mUID
);

242 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

244 } 
	mªad
;

246 } 
	tdevi˚_åì°r
 ;

248 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_io.c

73 
	~"../cm940üp/devi˚s/ddf_åì.h
"

89 
	$ioInôülizeDrivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
 (
id
);

147 
	}
}

161 
	$ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
 (
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
 (
id
);

185 
	}
}

199 
	$ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
 (
id
,
bô
);

204 
	}
}

218 
BYTE
 
	$ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

220 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

222  
d
->
ªad
.
	`byã
 (
id
);

223 
	}
}

237 
	$ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

239 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

241 
d
->
wrôe
.
	`block
 (
id
,
block
);

242 
	}
}

256 
block_d©a°r
 *
	$ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
)

258 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

260  
d
->
ªad
.
	`block
 (
id
);

261 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_io.h

73 
	~"ddf_‰ame.h
"

89 
ioInôülizeDrivîs
();

103 
devi˚_åì°r
 *
ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
);

116 
ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

130 
ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

144 
BYTE
 
ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

159 
ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

173 
BYTE
 
ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

187 
ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
,
block_d©a°r
 *
block
);

201 
block_d©a°r
 *
ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_types.h

68 #i‚de‡
_DEVICE_DDF_CM940IAP_TYPES


70 
	#_DEVICE_DDF_CM940IAP_TYPES
 1

	)

73 
	#DEVICE_LED_CM940IAP
 55075

	)

74 
	#DEVICE_SERIAL_CM940IAP
 55095

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/events/bringup.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
brögup


55 @ * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 @ * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 @ * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 @ * 
OS
 : 
SLOS
 0.09

59 @ * 
Pœtf‹m
 : 
gíîic


64 @ * 
EXPORT


67 .
ãxt


68 .
code
 32

69 .
Æign
 0

70 .
globÆ
 
brögUpSëR8fiq


71 .
globÆ
 
brögUpSëR9fiq


72 .
globÆ
 
brögUpSëR10fiq


73 .
globÆ
 
brögUpInôFIQRegi°îs


75 @ -- 
swôchToFIQMode
 ---------------------------------------------------------

76 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

77 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


78 @ 
Rëu∫
 : 
n⁄e
...

80 
swôchToFIQMode
:

82 
MOV
 
r3
,
Ã


83 
MRS
 
r1
,
CPSR


84 
BIC
 
r1
,r1,#0
x1f


85 
ORR
 
r1
,r1,#0
x11


86 
MSR
 
CPSR_c
,
r1


87 
MOV
 
pc
,
r3


89 @ -- 
swôchToSVCMode
 ---------------------------------------------------------

90 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

91 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


92 @ 
Rëu∫
 : 
n⁄e
...

95 
swôchToSVCMode
:

97 
MOV
 
r3
,
Ã


98 
MRS
 
r1
,
CPSR


99 
BIC
 
r1
,r1,#0
x1f


100 
ORR
 
r1
,r1,#0
x13


101 
MSR
 
CPSR_c
,
r1


102 
MOV
 
pc
,
r3


104 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

105 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

106 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


107 @ 
Rëu∫
 : 
n⁄e
...

109 
brögUpInôFIQRegi°îs
:

111 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


113 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

114 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


115 
MOV
 
r8
,#0 @ 
r8FIQ
=0

116 
MOV
 
r9
,#0 @ 
r9FIQ
=0

117 
MOV
 
r10
,#0 @ 
r10FIQ
=0

118 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


119 
MOV
 
pc
,
r2
 @  
back


121 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

122 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

123 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


124 @ 
Rëu∫
 : 
n⁄e
...

126 
brögUpSëR8fiq
:

128 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


130 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

131 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


132 
MOV
 
r8
,
r0
 @ 
r10_fiq
 =Ñ0

133 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


134 
MOV
 
pc
,
r2
 @  
back


136 @ -- 
brögUpSëR9fiq
 ---------------------------------------------------------

138 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

140 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


141 @ 
Rëu∫
 : 
n⁄e
...

144 
brögUpSëR9fiq
:

146 @ 
r2
 - 
íåy
 
åa˚
 
numbî


148 
MOV
 
r2
,
Ã


149 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


150 
MOV
 
r9
,
r0
 @ 
r9_fiq
 = 
r2


151 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


152 
MOV
 
pc
,
r2
 @  
back


154 @ -- 
brögup_£tR10fiq
 -------------------------------------------------------

156 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

158 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


159 @ 
Rëu∫
 : 
n⁄e
...

162 
brögUpSëR10fiq
:

164 @ 
r2
 - 
exô
 
åa˚
 
numbî


166 
MOV
 
r2
,
Ã


167 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


168 
MOV
 
r10
,
r0
 @ 
r10_fiq
 = 
r2


169 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


170 
MOV
 
pc
,
r2
 @  
back


171 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/events/cpsr.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
˝§


55 @ * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 @ * 
OS
 : 
SLOS
 0.09

57 @ * 
Pœtf‹m
 : 
gíîic


58 @ * 
Hi°‹y
 :

60 @ * 15
th
 
July
 2002 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
a
 
hódî


66 @ * 
EXPORT


69 .
ãxt


70 .
code
 32

71 .
Æign
 0

72 .
globÆ
 
modifyC⁄åﬁCPSR


74 @ -- 
modifyC⁄åﬁCPSR
 --------------------------------------------------------

75 @ 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


76 @ 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


77 @ 
Rëu∫
 : 
n⁄e
...

79 
modifyC⁄åﬁCPSR
:

82 @ 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


83 @ 
°ack
.

84 @ 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

85 @ 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

86 @ 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

87 @ 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

90 
STMFD
 
r13
!,{
r3
}

91 
MOV
 
	gr3
,
r13


92 
ADD
 
	gr13
,r13,#4

93 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

96 @ 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


97 @ 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


100 
MRS
 
	gr1
,
CPSR


101 
BIC
 
	gr1
,r1,#0
xff


102 
ORR
 
	gr1
,r1,
r0


103 
MSR
 
	gCPSR_c
,
	gr1


106 @ 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


107 @ 
Rëu∫
 
to
 
the
 
	gˇŒì


110 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

111 
LDMFD
 
	gr3
,{r3}

112 
MOV
 
	gpc
,
	gÃ


113 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/fiq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
fiq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eFIQH™dÀr


23 
c‹eFIQH™dÀr
:

24 
B
 
c‹eFIQH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_device.h

74 
	~"../cm940üp/evíts/swis.h
"

96 
evítIODevi˚Inô
();

119 
devi˚_åì°r
 *
evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
);

139 
evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

155 
evítIODevi˚WrôeByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
);

170 
UINT
 
evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
,
UID
 
b
);

186 
evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
,
UID
 
b
,
UINT
 
c
);

201 
UINT
 
evítIODevi˚RódBô
(
devi˚_åì°r
 *,
UID
);

216 
evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *,
UID
,*);

231 *
evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_lldebug.h

72 #i‚de‡
LLDEBUG


73 
	#LLDEBUG
 1

	)

75 
	~"../cm940üp/evíts/swis.h
"

97 
brögUpTø˚
(
UINT
 
a
, 
UID
 
b
);

111 
brögUpF©ÆEº‹
(
UINT
 
a
);

130 
	#ENTRY
 123

	)

131 
	#EXIT
 321

	)

133 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

134 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

136 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

137 (
	gr
); \

138 
Œåa˚a·î
((
u
))

152 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_types.h

72 #i‚de‡
_HEADERS_API_TYPES


74 
	#_HEADERS_API_TYPES
 1

	)

76 
	tUINT
;

77 
	tUID
;

78 
	tBYTE
;

79 (*
	tCÆlBack
)();

80 
	tBOOL
;

82 
	#TRUE
 0

	)

83 
	#FALSE
 -1

	)

85 
	#DEVICE_SUCCESS
 0

	)

86 
	#DEVICE_IN_USE
 -1

	)

87 
	#DEVICE_UNKNOWN
 -2

	)

88 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/irq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
úq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eIRQH™dÀr


22 .
evítsIRQH™dÀr


24 
c‹eIRQH™dÀr
:

25 
B
 
evítsIRQH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/async.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mpuSLOS


55 @ * 
ModuÀ
 : 
async


56 @ * 
Des¸ùti⁄
 : 
⁄
 
	`sy°em
 (
íabÀ
 
ˇche
 
™d
 
asynchr⁄ous
 
mode
).

57 @ * 
Hi°‹y
 :

59 @ * 8
th
 
July
 2002 
Andªw
 
N
. 
Sloss


60 @ * - 
p‹ãd
 
‰om
 
Chris
 
Wright
'sÉxample code. 

64 .
jumpToTask1


65 .
mpuCh™geC⁄åﬁ


67 .
globÆ
 
swôchOnSy°em


71 @ ; 
swôchOnSy°em
 :

72 @ ; 
íabÀs
 
I
 & 
D
 
ˇche
, 
™d
 
Wrôe
 
back


73 @ ; 
•ecül
 
to
 
the
 940 
£t
Åhê
bus
Åÿ
asynchr⁄ous
 
˛ockög


76 
swôchOnSy°em
:

78 @ ;
öföôe


79 @ ; 
B
 
öföôe


81 @ ; 
íabÀ
: 
Iˇche
,
WB
,
Dˇche
,
MPU


83 
LDR
 
r0
,=0x100d

84 
LDR
 
r1
,=0x100d

85 
BL
 
mpuCh™geC⁄åﬁ


87 @ ; 
asynchr⁄ous
 
˛ockög
, 940
t
 
⁄ly


89 
LDR
 
r0
,=0xc0000000

90 
LDR
 
r1
,=0xc0000000

91 
BL
 
mpuCh™geC⁄åﬁ


94 @ ; 
Jump
 
to
 
Task
 1 
™d
 tÿ
U£r
 
mode
ánd 
íabÀ
 
IRQ
 
öãºu±s


97 
MOV
 
r0
,#0
x20000


98 
B
 
jumpToTask1


99 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mem_init.c

72 
	~"ªgi⁄s.h
"

73 
	~"mem_öô.h
"

79 
öôStdA˘iveRegi⁄s
();

80 
öôExtA˘iveRegi⁄s
();

82 
c⁄figStdRegi⁄
(, []);

83 
c⁄figExtRegi⁄
(, []);

85 
deÁu…Regi⁄s
();

87 
MpuPCB_Regi⁄TabÀ1
[5];

93 
	#≥rfBASE
 0x10000000

	)

94 
	#ÀdBASE
 0x1A000000

	)

96 
	#sSBASE
 0x00010000

	)

97 
	#pSBASE
 0x00000000

	)

118 
	gdeÁu…PCB
[5] = {
dÊtBASE
,
SIZE_4G
,
RWXrwx
,
ccb
,
R_DISABLE
};

119 
	g≥rfPCB
[5] = {
≥rfBASE
,
SIZE_256M
,
RWXrwx
,
ccb
,
R_ENABLE
};

120 
	g≥rfLEDPCB
[5] = {
ÀdBASE
,
SIZE_16M
,
RWXrwx
,
ccb
,
R_ENABLE
};

122 
MpuPCB_Regi⁄TabÀ1
[5];

124 
	gsh¨edPCB
[5] = {
sSBASE
,
SIZE_64K
,
RWXRWX
,
CWT
,
R_ENABLE
};

125 
	g¥Ÿe˘PCB
[5] = {
pSBASE
,
SIZE_4G
,
RWXrwx
,
CWT
,
R_ENABLE
};

140 
	$öôStdA˘iveRegi⁄s
()

143 
	`c⁄figStdRegi⁄
(
PROTECTED_SYSTEM
,
¥Ÿe˘PCB
);

144 
	`c⁄figStdRegi⁄
(
SHARED_SYSTEM
,
sh¨edPCB
);

145 
	`c⁄figStdRegi⁄
(
TASK
,
MpuPCB_Regi⁄TabÀ1
);

146 
	`c⁄figStdRegi⁄
(
PERIPHERAL
,
≥rfPCB
);

147 
	`c⁄figStdRegi⁄
(
LEDPERIPHERAL
,
≥rfLEDPCB
);

150 
	}
}

161 
	$öôExtA˘iveRegi⁄s
()

163 
	`c⁄figExtRegi⁄
(
PROTECTED_SYSTEM
,
¥Ÿe˘PCB
);

164 
	`c⁄figExtRegi⁄
(
SHARED_SYSTEM
,
sh¨edPCB
);

165 
	`c⁄figExtRegi⁄
(
TASK
,
MpuPCB_Regi⁄TabÀ1
);

166 
	`c⁄figExtRegi⁄
(
PERIPHERAL
,
≥rfPCB
);

169 
	}
}

181 
	$c⁄figStdRegi⁄
(
ªgi⁄
, 
PCB
[])

183 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
PCB
[0], PCB[1]);

184 
	`mpuRegi⁄StdAc˚ss
(
ªgi⁄
, 
PCB
[2]);

185 
	`mpuRegi⁄CB
(
ªgi⁄
, 
PCB
[3]);

186 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
PCB
[4]);

189 
	}
}

201 
	$c⁄figExtRegi⁄
(
ªgi⁄
, 
PCB
[] )

203 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
PCB
[0], PCB[1]);

204 
	`mpuRegi⁄ExtAc˚ss
(
ªgi⁄
, 
PCB
[2]);

205 
	`mpuRegi⁄CB
(
ªgi⁄
, 
PCB
[3]);

206 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
PCB
[4]);

209 
	}
}

221 
	$deÁu…Regi⁄s
()

223 
i
;

233 
	`mpuCh™geC⁄åﬁ
(0x00, 0xC000100D);

235  
i
=0 ; i < 8; i++)

237 
	`c⁄figStdRegi⁄
(
i
, 
deÁu…PCB
);

240 
	}
}

252 
	$mem‹yMpuSy°em
()

262 
	`deÁu…Regi⁄s
();

271 
	`öôStdA˘iveRegi⁄s
();

272 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mem_init.h

72 
mpuCh™geC⁄åﬁ
(, );

73 
mpuRegi⁄Deföe
(, , );

74 
mpuRegi⁄StdAc˚ss
(, );

75 
mpuRegi⁄ExtAc˚ss
(, );

76 
mpuRegi⁄CB
(, );

77 
mpuRegi⁄E«bÀ
(, );

92 
öôStdA˘iveRegi⁄s
();

103 
öôExtA˘iveRegi⁄s
();

115 
c⁄figStdRegi⁄
(
ªgi⁄
, []);

127 
c⁄figExtRegi⁄
(
ªgi⁄
, [] );

139 
deÁu…Regi⁄s
();

151 
mem‹yMpuSy°em
();

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mpu.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mpuSLOS


54 @ * 
ModuÀ
 : 
mpu
.
s


55 @ * 
Des¸ùti⁄
 : 
¥ovides
 
a
 
£t
 
of
 
sim∂e
 
MPU
 
routöes


56 @ * 
Pœtf‹m
 : 
CM940IAP


57 @ * 
Hi°‹y
 :

59 @ * 4 
July
 2002 (
Indïídí˚
 
Day
Ë
Andªw
 
N
. 
Sloss


60 @ * - 
èkí
 
‰om
 
Chris
 
Wright
 
MPU
 
exam∂e


65 @ * 
IMPORT
/
EXPORT


68 .
MpuPCB_TabÀ


70 .
globÆ
 
mpuInôFlush


71 .
globÆ
 
mpuRegi⁄Deföe


72 .
globÆ
 
mpuRegi⁄StdAc˚ss


73 .
globÆ
 
mpuRegi⁄ExtAc˚ss


74 .
globÆ
 
mpuRegi⁄CB


75 .
globÆ
 
mpuRegi⁄E«bÀ


76 .
globÆ
 
mpuCh™geC⁄åﬁ


77 .
globÆ
 
mpuScheduÀRegi⁄2


80 @ * 
ROUTINES


84 
mpuInôFlush
:

86 
MOV
 
r0
, #0
x78


87 
MCR
 
p15
, 0x0, 
r0
, 
c1
, 
c0
, 0x0 @ ;

88 
MOV
 
r0
, #0
x0


89 
MCR
 
p15
, 0x0, 
r0
, 
c7
, 
c5
, 0x0 @ ; 
övÆid©e
 
ö°ru˘i⁄
 
ˇche


90 
MCR
 
p15
, 0x0, 
r0
, 
c7
, 
c6
, 0x0 @ ; 
övÆid©e
 
d©a
 
ˇche


92 
MOV
 
pc
,
Ã


95 @ ; 
Ch™ge
 
C⁄åﬁ
 
Regi°î
 
VÆues


96 @ ; 
	`ch™geC⁄åﬁ
(
vÆue
, 
mask
)

99 
mpuCh™geC⁄åﬁ
:

100 
MVN
 
r2
, 
r1
 @ ; 
övît
 
mask


101 
BIC
 
r3
, 
r0
, 
r2
 @ ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


102 
CMP
 
r3
, 
r0


103 
BNE
 
Eº‹C⁄åﬁ
 @ ; 
vÆues
 
outside
 
of
 
mask
 
£t


104 
MRC
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 @ ; 
gë
 
c⁄åﬁ
 
vÆues


105 
BIC
 
r3
,Ñ3, 
r1
 @ ; 
mask
 
off
 
bô
 
th©
 
ch™ge


106 
ORR
 
r3
,Ñ3, 
r0
 @ ; 
£t
 
vÆue
 
of
 
bôs
 
th©
 
ch™ge


107 
MCR
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 @ ; 
£t
 
c⁄åﬁ
 
vÆues


108 
MOV
 
r0
, #0

109 
MOV
 
pc
, 
Ã


112 @ ; 
Deföe
 
D©a
 
Regi⁄
 
Ba£
 
™d
 
Size


113 @ ; 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
ba£
, 
size
)

116 
mpuRegi⁄Deföe
:

118 
mpuRegi⁄DeföeEº‹Check
:

119 
CMP
 
r2
, #11 @ ; 
check
 
size
 
vÆue
 
too
 
	`smÆl
 (<11)

120 
BLO
 
Eº‹Size
 @ ; 
ERROR
: 
ªgi⁄
 
size
 
to
 
smÆl


121 
CMPHI
 
r2
, #31 @ ; 
check
 
size
 
vÆue
 
too
 
	`œrge
 (>31)

122 
BHI
 
Eº‹Size
 @ ; 
ERROR
: 
ªgi⁄
 
size
 
too
 
œrge


124 
ADD
 
r12
, 
r2
, #1 @ ; 
adju°
 
mu…ùÀ
 
of
 
	$size
 (
off
 
by
 
⁄e
)

125 
MOV
 
r3
, 
r1
, 
l§
 
r12
 @ ; 
˛ór
 
åaûög
 
zîos
 
∑π1


126 
MOV
 
r3
,Ñ3, 
l¶
 
r12
 @ ; 
˛ór
 
åaûög
 
zîos
 
∑π2


127 
CMP
 
r1
, 
r3
 @ ; 
check
 
Addªss
 
is
 
Æig√d
 
⁄
 
size


128 
BHI
 
Eº‹Addªss
 @ ; 
ERROR
: 
addªss
 
is
 
nŸ
 
Æig√d


130 
ORR
 
r3
,Ñ3, 
r2
, 
l¶
 #1 @ ; 
comböe
 
size
 
™d
 
ba£
 
addªss


131 
MOV
 
r12
, 
r0
 @ ; 
˛ór
Ñ0  
vÆue


132 
MOV
 
r0
 , #0 @ ; 
£t
  
vÆue
 
to
 
zîo


133 
CMP
 
r12
, #8 @ 
check
 
ªgi⁄
 
is
 
ö
 
ønge


134 
ADDLO
 
pc
,Öc, 
r12
, 
l¶
 #4 @ 
bønch
 
to
 
ba£
 
™d
 
size
 
routöe


135 @ 
l¶
 
	`vÆue
 (940
T
=#4 740/946=#3)

136 
B
 
Eº‹Regi⁄
 @ 
ERROR
: 
Regi⁄
 
to
 
œrge
, 
∑d
 
jump


138 
deföeRegi⁄0
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

139 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


140 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


141 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

142 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


144 
deföeRegi⁄1
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

145 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


146 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


147 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

148 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


150 
deföeRegi⁄2
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

151 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


152 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


153 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

154 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


156 
deföeRegi⁄3
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

157 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


158 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


159 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

160 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


162 
deföeRegi⁄4
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

163 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


164 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


165 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

166 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


168 
deföeRegi⁄5
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

169 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


170 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


171 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

172 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


174 
deföeRegi⁄6
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

175 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


176 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


177 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

178 
NOP
 @ 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


180 
deföeRegi⁄7
: @ 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

181 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 @ 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


182 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 @ 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


183 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

187 @ ; 
Deföe
 
Ac˚ss
 
Pîmissi⁄s


188 @ ; 
	`mpuRegi⁄StdAc˚ss
(
ªgi⁄
, 
≠
)

191 
mpuRegi⁄StdAc˚ss
:

192 
CMP
 
r0
, #0
x7
 @ 
check
 
ªgi⁄
 
is
 
ö
 
ønge


193 
BHI
 
Eº‹Regi⁄
 @ 
ERROR
: 
Regi⁄
 
out
 
of
 
R™ge


194 
TST
 
r1
, #0
xCC
 @ 
check
 
exãnded
 
≥rmissi⁄
 
u£


195 
BNE
 
Eº‹Pîmissi⁄
 @ 
ERROR
: 
U£
 
of
 
Exãnded
 
Pîmissi⁄s


196 
MOV
 
r0
,Ñ0, 
l¶
 #1 @ 
ªgi⁄
 
numbî
 
≠
 
is
 2b
ôs


197 
MOV
 
r2
, #3 @ 
£t
 
mask
 2 
bôs
 
wide


199 
£tStdDAP
:

200 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 0 @ 
gë
 
D
 
ac˚ss
 
≥rmissi⁄s


201 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
D
 
≠
 
bôs


202 
AND
 
r12
, 
r1
, #0
x3
 @ 
˛ór
 
Æl
 
ex˚±
 
°d
 
D
 
AP
 
bôs


203 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 @ 
£t
 
°d
 
D
 
AP
 
bôs


204 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 0 @ 
£t
 
°d
 
ac˚ss
 
≥rmissi⁄s


206 
£tStdIAP
:

207 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 1 @ 
gë
 
I
 
ac˚ss
 
≥rmissi⁄s


208 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
I
 
≠
 
bôs


209 
MOV
 
r1
,Ñ1, 
l§
 #4 @ 
shi·
 
I
 
AP
 
bôs
 
ö
 
posôi⁄


210 
AND
 
r12
, 
r1
, #0
x3
 @ 
˛ór
 
Æl
 
ex˚±
 
°d
 
I
 
AP
 
bôs


211 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 @ 
£t
 
°d
 
D
 
AP
 
bôs


212 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 1 @ 
£t
 
°d
 
ac˚ss
 
≥rmissi⁄s


214 
MOV
 
r0
, #0 @ 
suc˚ss


215 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

217 @ ; 
Deföe
 
Ac˚ss
 
Pîmissi⁄s


218 @ ; 
	`mpuRegi⁄ExtAc˚ss
(
ªgi⁄
, 
≠
)

221 
mpuRegi⁄ExtAc˚ss
:

222 
CMP
 
r0
, #0
x7
 @ 
check
 
ªgi⁄
 
is
 
ö
 
ønge


223 
BHI
 
Eº‹Regi⁄
 @ 
ERROR
: 
Regi⁄
 
out
 
of
 
R™ge


224 
TST
 
r1
, #0
x88
 @ 
check
 
u≈ªdi˘abÀ
 
ext
 
≥rmissi⁄


225 
BNE
 
Eº‹Pîmissi⁄
 @ 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


227 
MOV
 
r12
, #4

228 
TEQ
 
r12
, 
r1
, 
l§
 #4 @ 
check
 
ö°
 
≥rmissi⁄
 0x100 
u≈ªdiˇbÀ


229 
MOV
 
r12
, #7

230 
TEQNE
 
r12
, 
r1
, 
l§
 #4 @ 
check
 
ö°
 
≥rmissi⁄
 0x111 
u≈ªdiˇbÀ


231 
BEQ
 
Eº‹Pîmissi⁄
 @ 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


233 
AND
 
r12
, 
r1
, #0
xf


234 
TEQ
 
r12
, #4 @ 
check
 
d©a
 
≥rmissi⁄
 0x100 
u≈ªdiˇbÀ


235 
TEQNE
 
r12
, #7 @ 
check
 
d©a
 
≥rmissi⁄
 0x111 
u≈ªdiˇbÀ


236 
BEQ
 
Eº‹Pîmissi⁄
 @ 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


238 
MOV
 
r0
,Ñ0, 
l¶
 #1 @ 
ªgi⁄
 
numbî
 
≠
 
is
 2b
ôs


239 
MOV
 
r2
, #3 @ 
£t
 
mask
 2 
bôs
 
wide


241 
£tExtDAP
:

242 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 2 @ 
gë
 
D
 
ac˚ss
 
≥rmissi⁄s


243 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
D
 
≠
 
bôs


244 
AND
 
r12
, 
r1
, #0
xf
 @ 
˛ór
 
Æl
 
ex˚±
 
ext
 
D
 
AP
 
bôs


245 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 @ 
£t
 
ext
 
D
 
AP
 
bôs


246 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 2 @ 
£t
 
ext
 
ac˚ss
 
≥rmissi⁄s


248 
£tExtIAP
:

249 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 3 @ 
gë
 
I
 
ac˚ss
 
≥rmissi⁄s


250 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
I
 
≠
 
bôs


251 
MOV
 
r1
,Ñ1, 
l§
 #4 @ 
shi·
 
I
 
AP
 
bôs
 
ö
 
posôi⁄


252 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 @ 
£t
 
ext
 
D
 
AP
 
bôs


253 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 3 @ 
£t
 
ext
 
ac˚ss
 
≥rmissi⁄s


255 
MOV
 
r0
, #0 @ 
suc˚ss


256 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

259 @ ; 
Së
 
Cache
 
™d
 
Buf„r
 
In°ru˘i⁄
ánd 
D©a
 
Regi⁄s


260 @ ; 
	`mpuRegi⁄CB
(
ªgi⁄
, 
CB
)

263 
mpuRegi⁄CB
:

264 
CMP
 
r0
, #0
x7
 @ 
check
 
ªgi⁄
 
is
 
ö
 
ønge


265 
CMPLE
 
r1
, #0
x7
 @ 
check
 
CCB
 
ö
 
ønge


266 
BHI
 
OutOfR™ge
 @ 
jump
 
to
 
the
 
îr‹
 
h™dÀr


267 
MOV
 
r2
, #1 @ 
£t
 
bô
 
mask
 1 bit

269 
£tBuf„r
:

270 
MRC
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 @ 
gë
 
buf„r
 
öfo


271 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
buf„r
 
bô


272 
BIC
 
r12
, 
r1
, #0
x6
 @ 
˛ór
 
I
 
D
 
ˇche
 
∑π
 
of
 
CB


273 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 @ 
£t
 
buf„r
 
bô


274 
MCR
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 @ 
£t
 
buf„r
 
bô
 
ªgi⁄


276 
£tDCache
:

277 
MRC
 
p15
, 0, 
r3
, 
c2
, 
c0
, 0 @ 
gë
 
D
 
ˇche
 
öfo


278 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
D
 
ˇche
 
bô


279 
MOV
 
r1
,Ñ1, 
l§
 #1 @ 
dr›
 
buf„r
 
bô
 
move
 
D
 
ˇche
 
ö
 
posôi⁄


280 
BIC
 
r12
, 
r1
, #0
x2
 @ 
˛ór
 
I
 
ˇche
 
∑π
 
of
 
CB


281 
ORR
 
r3
,Ñ3, 
r1
, 
l¶
 
r0
 @ 
£t
 
D
 
ˇche
 
bô


282 
MCR
 
p15
, 0, 
r3
, 
c2
, 
c0
, 0 @ 
£t
 
D
 
ˇche
 
ªgi⁄


284 
£tICache
:

285 
MRC
 
p15
, 0, 
r3
, 
c2
, 
c0
, 1 @ 
gë
 
I
 
ˇche
 
öfo


286 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 @ 
˛ór
 
I
 
ˇche
 
bô


287 
MOV
 
r1
,Ñ1, 
l§
 #1 @ 
dr›
 
D
 
ˇche
 
bô
 
move
 
I
 cachê
ö
 
posôi⁄


288 
ORR
 
r3
,Ñ3, 
r1
, 
l¶
 
r0
 @ 
£t
 
I
 
ˇche
 
bô


289 
MCR
 
p15
, 0, 
r3
, 
c2
, 
c0
, 1 @ 
£t
 
I
 
ˇche
 
ªgi⁄


292 
MOV
 
r0
, #0 @ 
suc˚ss


293 
MOV
 
pc
, 
Ã
 @ 

296 @ ; 
E«bÀ
 
Regi⁄


297 @ ; 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
íabÀ
)

300 
mpuRegi⁄E«bÀ
:

301 
CMP
 
r0
, #7 @ 
check
 
ªgi⁄
 
is
 
ö
 
ønge


302 
CMPLE
 
r1
, #1

303 
BHI
 
OutOfR™ge
 @ 
ERROR
 
h™dÀr


305 
MOV
 
r2
, 
r0
 @ 
r3
 = 
ªgi⁄


306 
MOV
 
r0
, #0 @ 
£t
 
fun˘i⁄
 
suc˚ss


307 
MOV
 
r12
, 
pc
 @ 
Lﬂd
 
addªss
 
of
 
jump
 
èbÀ


308 
LDR
 
pc
, [
r12
,
r2
,
LSL
#2] @ 
Jump
 
to
 
the
 
routöe


309 
E«bÀJumpTabÀ
:

310 .
w‹d
 
íabÀRegi⁄0


311 .
w‹d
 
íabÀRegi⁄1


312 .
w‹d
 
íabÀRegi⁄2


313 .
w‹d
 
íabÀRegi⁄3


314 .
w‹d
 
íabÀRegi⁄4


315 .
w‹d
 
íabÀRegi⁄5


316 .
w‹d
 
íabÀRegi⁄6


317 .
w‹d
 
íabÀRegi⁄7


319 
íabÀRegi⁄0
: @ 
£t
 
ªgi⁄
 0 
íabÀ


320 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 @ 
gë
 
D
 
ªgi⁄
 0 
ba£
 
™d
 
size


321 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


322 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


323 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 @ 
£t
 
D
 
ªgi⁄
 0 
íabÀ


325 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 @ 
gë
 
ªgi⁄
 0 
ba£
 
™d
 
size


326 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


327 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
I
 
íabÀ
 
‹
 
dißbÀ
 
ªgi⁄


328 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 @ 
£t
 
I
 
ªgi⁄
 0 
íabÀ


329 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

331 
íabÀRegi⁄1
: @ 
deföe
 
D
 
ªgi⁄
 
dißbÀs
Ñegion

332 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 @ 
gë
 
D
 
ªgi⁄
 1 
ba£
 
™d
 
size


333 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


334 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


335 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 @ 
£t
 
D
 
ªgi⁄
 1 
íabÀ


337 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 @ 
gë
 
I
 
ªgi⁄
 1 
ba£
 
™d
 
size


338 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


339 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


340 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 @ 
£t
 
I
 
ªgi⁄
 1 
íabÀ


341 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

343 
íabÀRegi⁄2
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

344 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 @ 
gë
 
D
 
ªgi⁄
 2 
ba£
 
™d
 
size


345 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


346 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


347 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 @ 
£t
 
D
 
ªgi⁄
 2 
íabÀ


349 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 @ 
gë
 
I
 
ªgi⁄
 2 
ba£
 
™d
 
size


350 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


351 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


352 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 @ 
£t
 
I
 
ªgi⁄
 2 
íabÀ


353 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

355 
íabÀRegi⁄3
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

356 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 @ 
gë
 
D
 
ªgi⁄
 3 
ba£
 
™d
 
size


357 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


358 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


359 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 @ 
£t
 
D
 
ªgi⁄
 3 
íabÀ


361 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 @ 
gë
 
ªgi⁄
 3 
ba£
 
™d
 
size


362 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


363 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


364 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 @ 
£t
 
I
 
ªgi⁄
 3 
íabÀ


365 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

367 
íabÀRegi⁄4
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

368 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 @ 
gë
 
D
 
ªgi⁄
 4 
ba£
 
™d
 
size


369 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


370 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


371 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 @ 
£t
 
D
 
ªgi⁄
 4 
íabÀ


373 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 @ 
gë
 
I
 
ªgi⁄
 4 
ba£
 
™d
 
size


374 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


375 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


376 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 @ 
£t
 
I
 
ªgi⁄
 4 
íabÀ


377 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

379 
íabÀRegi⁄5
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

380 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 @ 
gë
 
D
 
ªgi⁄
 5 
ba£
 
™d
 
size


381 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


382 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


383 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 @ 
£t
 
ªgi⁄
 5 
íabÀ


385 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 @ 
gë
 
I
 
ªgi⁄
 5 
ba£
 
™d
 
size


386 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


387 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


388 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 @ 
£t
 
I
 
ªgi⁄
 5 
íabÀ


389 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

391 
íabÀRegi⁄6
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

392 
MRC
 
p15
, 0, 
r3
, 
c6
, c6, 0 @ 
gë
 
D
 
ªgi⁄
 6 
ba£
 
™d
 
size


393 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


394 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


395 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 0 @ 
£t
 
D
 
ªgi⁄
 6 
íabÀ


397 
MRC
 
p15
, 0, 
r3
, 
c6
, c6, 1 @ 
gë
 
I
 
ªgi⁄
 6 
ba£
 
™d
 
size


398 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
I
 
ªgi⁄
 
íabÀ


399 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


400 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 1 @ 
£t
 
I
 
ªgi⁄
 6 
íabÀ


401 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

403 
íabÀRegi⁄7
: @ 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

404 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 @ 
gë
 
D
 
ªgi⁄
 7 
ba£
 
™d
 
size


405 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
D
 
ªgi⁄
 
íabÀ


406 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


407 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 @ 
£t
 
D
 
ªgi⁄
 7 
íabÀ


409 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 @ 
gë
 
I
 
ªgi⁄
 7 
ba£
 
™d
 
size


410 
BIC
 
r3
,Ñ3, #1 @ 
˛ór
 
I
 
ªgi⁄
 
íabÀ


411 
ORR
 
r3
,Ñ3, 
r1
 @ 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


412 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 @ 
£t
 
I
 
ªgi⁄
 7 
íabÀ


413 
MOV
 
pc
, 
Ã
 @ 
ªgi⁄
 
£t
 

415 
OutOfR™ge
:

416 
B
 
OutOfR™ge
 @ 
lo›
 
©
 
îr‹
 
debuggög


418 
Eº‹C⁄åﬁ
:

419 
B
 
Eº‹C⁄åﬁ


420 
Eº‹Pîmissi⁄
: @ 
Eº‹
 
Pîmissi⁄
 =4

421 
B
 
Eº‹Pîmissi⁄
 @ 
debug
 
ã°


422 
ADD
 
r0
,Ñ0, #1

423 
Eº‹Size
: @ 
Eº‹
 
Size
 = 3

424 
ADD
 
r0
,Ñ0, #1

425 
Eº‹Addªss
: @ 
Eº‹
 
Addªss
 
u«lig√d
 = 2

426 
ADD
 
r0
,Ñ0, #1

427 
Eº‹Regi⁄
: @ 
Eº‹
 
Regi⁄
 
nŸ
 
vÆid
 = 1

428 
ADD
 
r0
,Ñ0, #1

429 
MOV
 
pc
, 
Ã


443 
mpuScheduÀRegi⁄2
:

460 
STMFD
 
•
!,{
r0
-
r4
,
r12
,
Ã
} @ savêc⁄ãxt

461 
LDR
 
	gr1
,=
MpuPCB_TabÀ


462 
LDR
 
r4
,[
r1
,
r0
,
LSL
#2] @ 
	gr4

√w
 
PCB
 
addªss


465 @ 
deföe
 
the
 
√w
 
ªgi⁄
 ...

468 
MOV
 
r0
,#2 @ 
	g∑ømëî
 1 
ªgi⁄2


469 
LDR
 
	gr1
,[
r4
] @ 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[0]

470 
LDR
 
	gr2
,[
r4
,#4] @ 
	g∑ømëî
 3 
	gRegi⁄TabÀ
[1]

471 
BL
 
	gmpuRegi⁄Deföe


474 @ 
deföe
 
°™d¨d
 
ac˚ss
 
	g≥rmissi⁄s
 ...

477 
MOV
 
	gr0
,#2 @ 
	g∑ømëî
 1 
ªgi⁄2


478 
LDR
 
	gr1
,[
r4
,#8] @ 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[2]

479 
BL
 
	gmpuRegi⁄StdAc˚ss


482 @ 
ˇche
 
™d
 
wrôe
 
	gthrough
 ...

485 
MOV
 
	gr0
,#2 @ 
	g∑ømëî
 1 
ªgi⁄2


486 
LDR
 
	gr1
,[
r4
,#12] @ 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[3]

487 
BL
 
	gmpuRegi⁄CB


490 @ 
íabÀ
 
√w
 
	gªgi⁄
 ...

493 
MOV
 
	gr0
,#2 @ 
	g∑ømëî
 1 
ªgi⁄2


494 
LDR
 
	gr1
,[
r4
,#16] @ 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[4]

495 
BL
 
	gmpuRegi⁄E«bÀ


498 @ 
ª°‹e
 
c⁄ãxt
 
™d
  
to
 
	gscheduÀr
 ...

501 
LDMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gpc
}

502 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/regions.h

72 
	#SIZE_4G
 31

	)

73 
	#SIZE_2G
 30

	)

74 
	#SIZE_1G
 29

	)

75 
	#SIZE_512M
 28

	)

76 
	#SIZE_256M
 27

	)

77 
	#SIZE_128M
 26

	)

78 
	#SIZE_64M
 25

	)

79 
	#SIZE_32M
 24

	)

80 
	#SIZE_16M
 23

	)

81 
	#SIZE_8M
 22

	)

82 
	#SIZE_4M
 21

	)

83 
	#SIZE_2M
 20

	)

84 
	#SIZE_1M
 19

	)

85 
	#SIZE_512K
 18

	)

86 
	#SIZE_256K
 17

	)

87 
	#SIZE_128K
 16

	)

88 
	#SIZE_64K
 15

	)

89 
	#SIZE_32K
 14

	)

90 
	#SIZE_16K
 13

	)

91 
	#SIZE_8K
 12

	)

92 
	#SIZE_4K
 11

	)

95 
	#CCB
 7

	)

96 
	#CCb
 6

	)

97 
	#CcB
 5

	)

98 
	#Ccb
 4

	)

99 
	#cCB
 3

	)

100 
	#cCb
 2

	)

101 
	#ccB
 1

	)

102 
	#ccb
 0

	)

106 
	#CWB
 7

	)

107 
	#CWT
 6

	)

108 
	#cWB
 3

	)

109 
	#cWT
 2

	)

112 
	#rwrw
 0

	)

113 
	#RWrw
 1

	)

114 
	#RWRw
 2

	)

115 
	#RWRW
 3

	)

118 
	#xx
 0

	)

119 
	#Xx
 1

	)

120 
	#XX
 3

	)

124 
	#rwxrwx
 (
xx
 << 4Ë+ (
rwrw
)

	)

125 
	#RWxrwx
 (
xx
 << 4Ë+ (
RWrw
)

	)

126 
	#RWxRwx
 (
xx
 << 4Ë+ (
RWRw
)

	)

127 
	#RWxRWx
 (
xx
 << 4Ë+ (
RWRW
)

	)

129 
	#rwXrwx
 (
Xx
 << 4Ë+ (
rwrw
)

	)

130 
	#RWXrwx
 (
Xx
 << 4Ë+ (
RWrw
)

	)

131 
	#RWXRwx
 (
Xx
 << 4Ë+ (
RWRw
)

	)

132 
	#RWXRWx
 (
Xx
 << 4Ë+ (
RWRW
)

	)

134 
	#rwXrwX
 (
XX
 << 4Ë+ (
rwrw
)

	)

135 
	#RWXrwX
 (
XX
 << 4Ë+ (
RWrw
)

	)

136 
	#RWXRwX
 (
XX
 << 4Ë+ (
RWRw
)

	)

137 
	#RWXRWX
 (
XX
 << 4Ë+ (
RWRW
)

	)

139 
	#R_ENABLE
 1

	)

140 
	#R_DISABLE
 0

	)

144 
	#BACKGROUND
 0

	)

145 
	#PROTECTED_SYSTEM
 1

	)

146 
	#TASK
 2

	)

147 
	#SHARED_SYSTEM
 3

	)

148 
	#PERIPHERAL
 4

	)

149 
	#LEDPERIPHERAL
 5

	)

154 
	#dÊtBASE
 0x00000000

	)

	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/prefetch.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
¥e„tch
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹ePª„tchAb‹tH™dÀr


23 
c‹ePª„tchAb‹tH™dÀr
:

25 
B
 
c‹ePª„tchAb‹tH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/reserved.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eRe£rvedH™dÀr


23 
c‹eRe£rvedH™dÀr
:

24 
B
 
c‹eRe£rvedH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/sal.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
ßl
.
s


55 @ * 
Proje˘
 : 
SLOS


56 @ * 
Vîsi⁄
 : 0.09

57 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


58 @ * 
Hi°‹y
 :

60 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
hódî
 
öf‹m©i⁄


65 .
globÆ
 
≠∂iˇti⁄Lﬂdî


66 .
öôSëUpSècks


68 @ -- 
≠∂iˇti⁄Lﬂdî
 ------------------------------------------------------

70 @ 
Des¸ùti⁄s
 : 
≠∂iˇti⁄
 
lﬂdî


72 @ 
P¨amëîs
 :

73 @ 
Rëu∫
 :

74 @ 
NŸes
 :

77 
≠∂iˇti⁄Lﬂdî
:

79 
LDR
 
r11
,=
ALT


81 
≠∂iˇti⁄LﬂdîLo›
:

82 
LDR
 
r12
,[
r11
],#4

83 
LDR
 
r14
,[
r11
],#4

84 
LDR
 
r13
,[
r11
],#4

86 
CMP
 
r13
,#0

87 
BEQ
 
öôSëUpSècks


89 
≠∂iˇti⁄BlockC›y
:

90 
LDMIA
 
r12
!,{
r0
-
r10
}

91 
STMIA
 
r13
!,{
r0
-
r10
}

92 
CMP
 
r12
,
r14


93 
BLE
 
≠∂iˇti⁄BlockC›y


94 
B
 
≠∂iˇti⁄LﬂdîLo›


98 @ * 
Aµliˇti⁄
 
Lﬂdî
 
TabÀ


102 
ALT
:

103 @ ; 
íåy
 
öto
 
the
 
	gèbÀ


105 @ ; 
	g§c_°¨èddr


106 @ ; 
	g§c_ídaddr


107 @ ; 
	gde°_addr


110 @ ; 
èsk
 (3)

112 .
w‹d
 
	gèsk3°¨t


113 .
w‹d
 
	gèsk3íd


114 .
	gw‹d
 0x30000

116 @ ; 
èsk
 (2)

118 .
w‹d
 
	gèsk2°¨t


119 .
w‹d
 
	gèsk2íd


120 .
	gw‹d
 0x28000

122 @ ; 
èsk
 (1)

124 .
w‹d
 
	gèsk1°¨t


125 .
w‹d
 
	gèsk1íd


126 .
	gw‹d
 0x20000

128 @ ; 
	gTîmö©e


130 .
	gw‹d
 0

131 .
	gw‹d
 0

132 .
	gw‹d
 0

134 .
	gd©a


135 .
	gÆign
 4

136 
	gèsk1°¨t
:

137 .
öcbö
 "../image/apps/task1.bin"

138 
èsk1íd
:

139 
èsk2°¨t
:

140 .
öcbö
 "../image/apps/task2.bin"

141 
èsk2íd
:

142 
èsk3°¨t
:

143 .
öcbö
 "../image/apps/task3.bin"

144 
èsk3íd
:

145 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/scheduler.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
scheduÀr
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
MpuPCB_CuºítTask


22 .
globÆ
 
MpuPCB_PåCuºítTask


23 .
globÆ
 
MpuPCB_PåNextTask


24 .
globÆ
 
MpuPCB_TabÀ


25 .
globÆ
 
MpuPCB_T›OfIRQSèck


26 .
globÆ
 
kî√lScheduÀr


28 .
mpuScheduÀRegi⁄2


30 
kî√lScheduÀr
:

33 @ ; 
Round
 
Robö
 
	gScheduÀr


36 
	gCuºítTask
:

37 
LDR
 
r3
,=
MpuPCB_CuºítTask


38 
LDR
 
r0
,[
r3
] @ ; 
	gr0
 = 
Cuºít
 
Task
 
ID


39 
LDR
 
r1
,=
MpuPCB_TabÀ


40 
LDR
 
r1
,[r1,
r0
,
LSL
#2] @ ; 
	gr1
 = 
addªss
 
of
 
cuºít
 
èsk


41 
LDR
 
r2
,=
MpuPCB_PåCuºítTask


42 
STR
 
r1
,[
r2
] @ ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


43 @ ; ** 
	gPCB_PåCuºítTask
 - 
upd©ed
 
wôh
 
the
 
√w
 
addªss


44 
	gNextTask
:

45 
ADD
 
r0
,
	gr0
,#1 @ ;Ñ0 = 
Cuºít_Task
+1

46 
CMP
 
r0
,#3

47 
MOVEQ
 
	gr0
,#0 @ ; r0==
MaxTask
 
thí
 
r0
=0

48 
STR
 
r0
,[
r3
] @ ; 
ßve
 
√w
 
Task
 
	gID


49 @ ; 
ch™ge
 
Regi⁄2
 
to
 
the
 
√w
 
èsk


50 
BL
 
	gmpuScheduÀRegi⁄2
 @ ; 
ch™ge
 
	gªgi⁄


51 @ ; 
com∂ëe
 
the
 
√w
 
èsk
 
öf‹m©i⁄


52 
LDR
 
	gr1
,=
MpuPCB_TabÀ


53 
LDR
 
r1
,[r1,
r0
,
LSL
#2] @ ; 
	gr1
 = 
√w
 
√xt
 
èsk
 
PCB
 
addªss


54 
LDR
 
r0
,=
MpuPCB_PåNextTask


55 
STR
 
r1
,[
r0
] @ ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


57 @ ; ** 
	gMpuPCB_PåCuºítTask
 = 
cuºít
 
PCB


58 @ ; ** 
	gMpuPCB_PåNextTask
 = 
√xt
 
PCB


59 @ ; ** 
	gMpuPCB_CuºítTask
 = 
√w
 
TASK_ID


62 @ ; 
C⁄ãxt
 
	gSwôch


65 
	gh™dÀr_c⁄ãxtswôch
:

66 
LDMFD
 
•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} @ ; 
ª°‹e
 
ªmaöög
 
ªgi°îs


67 
LDR
 
	gr13
,=
MpuPCB_PåCuºítTask


68 
LDR
 
r13
,[r13] @ ; 
lﬂd
 
cuºít
 
PCB


69 
SUB
 
	gr13
,r13,#60

70 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^ @ ; 
°‹e
 
the
 
U£r
 
ªg
 
öto
 
cuºít
 
PCB


71 
MRS
 
	gr0
, 
SPSR


72 
STMDB
 
	gr13
,{
	gr0
,
	gr14
}

73 
LDR
 
	gr13
,=
MpuPCB_PåNextTask


74 
LDR
 
r13
,[r13]

75 
SUB
 
	gr13
,r13,#60 @ ; 
lﬂd
 
™d
 
posôi⁄
 
√xt
 
PCB


76 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
} @ ; 
lﬂd
 
the
 
√w
 
èsk


77 
MSR
 
	g•§_cxsf
, 
r0


78 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^ @ ; 
lﬂd
 
U£r
 
ªgs


79 
LDR
 
	gr13
,=
MpuPCB_T›OfIRQSèck


80 
LDR
 
r13
,[r13] @ ; 
lﬂd
 
IRQ
 
°ack


81 
MOVS
 
	gpc
,
	gr14
 @ ;  
√xt
 
	gèsk


82 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/start.s

8 @ * 
	gModuÀ
 : 
°¨t
.
s


9 @ * 
Proje˘
 : 
SLOS


10 @ * 
Vîsi⁄
 : 0.09

11 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 
Hi°‹y
 :

14 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


15 @ * - 
added
 
hódî
 
öf‹m©i⁄


20 @ * 
SLOS
 2002

24 @ * 
IMPORT


27 .
ãxt


28 .
code
 32

29 .
Æign
 0

30 .
globÆ
 
_°¨t
,
	g°¨t
,
_maöCRTSèπup


33 
	g_°¨t
:

34 
°¨t
:

35 
_maöCRTSèπup
:

49 
LDR
 
pc
,
ve˘‹Re£t


50 
LDR
 
	gpc
,
ve˘‹Undeföed


51 
LDR
 
	gpc
,
ve˘‹SWI


52 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


53 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


54 
LDR
 
	gpc
,
ve˘‹Re£rved


55 
LDR
 
	gpc
,
ve˘‹IRQ


56 
LDR
 
	gpc
,
	gve˘‹FIQ


58 @ -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

60 
	g±rPCBTabÀ
:

61 .
w‹d
 
MpuPCB_TabÀ


63 @ -- 
Kî√l
 
Jump
 
èbÀ
 ------------------------------

65 
ve˘‹Re£t
:

66 .
w‹d
 
c‹eInôülize


67 
ve˘‹Undeföed
:

68 .
w‹d
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
:

70 .
w‹d
 
c‹eSWIH™dÀr


71 
ve˘‹Pª„tchAb‹t
:

72 .
w‹d
 
c‹ePª„tchAb‹tH™dÀr


73 
ve˘‹D©aAb‹t
:

74 .
w‹d
 
c‹eD©aAb‹tH™dÀr


75 
ve˘‹Re£rved
:

76 .
w‹d
 
c‹eRe£rvedH™dÀr


77 
ve˘‹IRQ
:

78 .
w‹d
 
c‹eIRQH™dÀr


79 
ve˘‹FIQ
:

80 .
w‹d
 
c‹eFIQH™dÀr


82 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/swi.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
c‹eSWIH™dÀr


25 .
globÆ
 
c‹eCÆlSWI


26 .
evítsSWIH™dÀr


29 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


33 @ 
c‹eCÆlSWI
(
ªgi°î°r
 *
r0
)

36 
c‹eCÆlSWI
:

37 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

38 
MOV
 
r4
,
r0


39 
LDMIA
 
r4
,{
r0
-
r3
}

40 
SWI
 5075

41 
STMIA
 
r4
,{
r0
-
r3
}

42 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

45 @ 
c‹eSWIH™dÀr
()

48 
c‹eSWIH™dÀr
:

49 
STMFD
 
•
!,{
r0
-
r12
,
Ã
}

50 
LDR
 
r10
,[
Ã
,#-4]

51 
BIC
 
r10
,r10,#0
xff000000


52 
MOV
 
r0
,
r10


53 
MOV
 
r1
,
•


54 
MRS
 
r2
,
SPSR


55 
STMFD
 
•
!,{
r2
}

56 
BL
 
evítsSWIH™dÀr
 @ÉvítsSWIH™dÀr(
r0
-
swiNumbî
,
r1
-
poöt
);

57 
LDMFD
 
	g•
!,{
	gr2
}

58 
MSR
 
	gSPSR_cxsf
,
r2


59 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^

60 .
	gíd


	@/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/undef.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
undef
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eUndeföedH™dÀr


24 
c‹eUndeföedH™dÀr
:

25 
B
 
c‹eUndeföedH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch13_mpu/ch13_examples/main.c

48 
	~"ªgi⁄s.h
"

49 
	~"¥Ÿe˘i⁄.h
"

52 
	#KERNEL
 1

	)

53 
	#TASK
 2

	)

54 
	#SHARED
 3

	)

55 
	#PERIPH
 4

	)

60 
Regi⁄
 
	g≥rùhîÆRegi⁄
 = {
PERIPH
, 
STANDARD
, 0x10000000, 
SIZE_1M
 , 
RONA
, 
RWNA
, 
ccb
};

61 
Regi⁄
 
	gkî√lRegi⁄
 = {
KERNEL
, 
STANDARD
, 0x00000000, 
SIZE_4G
 , 
RONA
, 
RWNA
, 
CWT
};

62 
Regi⁄
 
	gsh¨edRegi⁄
 = {
SHARED
, 
STANDARD
, 0x00010000, 
SIZE_64K
, 
RORO
, 
RWRW
, 
CWT
};

63 
Regi⁄
 
	gèsk1Regi⁄
 = {
TASK
 , 
STANDARD
, 0x00020000, 
SIZE_32K
, 
RORO
, 
RWRW
, 
CWT
};

64 
Regi⁄
 
	gèsk2Regi⁄
 = {
TASK
 , 
STANDARD
, 0x00028000, 
SIZE_32K
, 
RORO
, 
RWRW
, 
CWT
};

65 
Regi⁄
 
	gèsk3Regi⁄
 = {
TASK
 , 
STANDARD
, 0x00030000, 
SIZE_32K
, 
RORO
, 
RWRW
, 
CWT
};

71 
	$maö
()

74 
	`öôA˘iveRegi⁄s
();

75 
	`íabÀMPU
();

80 
	}
}

87 
	$c⁄figRegi⁄
(
Regi⁄
 *
ªgi⁄
)

94 
	`ªgi⁄Së
(
ªgi⁄
->
numbî
,Ñegi⁄->
ba£addªss
,

95 
ªgi⁄
->
size
, 
R_DISABLE
);

101 i‡(
ªgi⁄
->
ty≥
 =
STANDARD
)

103 
	`ªgi⁄SëISAP
(
ªgi⁄
->
numbî
,Ñegi⁄->
IAP
);

104 
	`ªgi⁄SëDSAP
(
ªgi⁄
->
numbî
,Ñegi⁄->
DAP
);

106 i‡(
ªgi⁄
->
ty≥
 =
EXTENDED
)

108 
	`ªgi⁄SëIEAP
(
ªgi⁄
->
numbî
,Ñegi⁄->
IAP
);

109 
	`ªgi⁄SëDEAP
(
ªgi⁄
->
numbî
,Ñegi⁄->
DAP
);

118 
	`ªgi⁄SëCB
(
ªgi⁄
->
numbî
,Ñegi⁄->
CB
);

125 
	`ªgi⁄Së
(
ªgi⁄
->
numbî
,Ñegi⁄->
ba£addªss
,

126 
ªgi⁄
->
size
, 
R_ENABLE
);

127 
	}
}

133 
	$öôA˘iveRegi⁄s
()

135 
	`c⁄figRegi⁄
(&
kî√lRegi⁄
);

136 
	`c⁄figRegi⁄
(&
sh¨edRegi⁄
);

137 
	`c⁄figRegi⁄
(&
≥rùhîÆRegi⁄
);

138 
	`c⁄figRegi⁄
(&
èsk1Regi⁄
);

139 
	}
}

141 
	$íabÀMPU
()

143 
vÆue
, 
mask
;

145 
vÆue
 = 
ENABLEMPU
 | 
ENABLEDCACHE
 | 
ENABLEICACHE
;

146 
mask
 = 
MASKMPU
 | 
MASKDCACHE
 | 
MASKICACHE
;

147 
	`c⁄åﬁSë
(
vÆue
, 
mask
);

148 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/ch13_examples/mpu.c

52 #i‡
deföed
–
__TARGET_CPU_ARM940T
)

53 
	#SET_REGION
(
REGION_NUMBER
Ë\

	)

55 
	g__asm
{
MCR
 
	gp15
, 0, 
	gc6f
, 
	gc6
, 
	gc
 ## 
	gREGION_NUMBER
, 0 } \

57 
	g__asm
{
MCR
 
	gp15
, 0, 
	gc6f
, 
	gc6
, 
	gc
 ## 
	gREGION_NUMBER
, 1 }

60 #i‡
deföed
(
__TARGET_CPU_ARM946E_S
) | \

61 
	$deföed
(
__TARGET_CPU_ARM1026EJ_S
)

62 
	#SET_REGION
(
REGION_NUMBER
Ë\

	)

64 
__asm
{
MCR
 
p15
, 0, 
c6f
, 
c6
, 
c
 ## 
REGION_NUMBER
, 0 
	}
}

67 
	$ªgi⁄Së
(
ªgi⁄
, 
addªss
,

68 
sizeN
, 
íabÀ
)

70 
c6f
;

72 
c6f
 = 
íabÀ
 | (
sizeN
<<1Ë| 
addªss
;

73 
ªgi⁄
)

75 0: { 
	`SET_REGION
(0); ;}

76 1: { 
	`SET_REGION
(1); ;}

77 2: { 
	`SET_REGION
(2); ;}

78 3: { 
	`SET_REGION
(3); ;}

79 4: { 
	`SET_REGION
(4); ;}

80 5: { 
	`SET_REGION
(5); ;}

81 6: { 
	`SET_REGION
(6); ;}

82 7: { 
	`SET_REGION
(7); ;}

85 
	}
}

91 
	$ªgi⁄SëISAP
(
ªgi⁄
, 
≠
)

93 
c5f
, 
shi·
;

95 
shi·
 = 2*
ªgi⁄
;

96 
__asm
{ 
MRC
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 1 }

97 
c5f
 = c5‡&~ (0x3<<
shi·
);

98 
c5f
 = c5‡| (
≠
<<
shi·
);

99 
__asm
{ 
MCR
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 1 }

100 
	}
}

102 
	$ªgi⁄SëDSAP
(
ªgi⁄
, 
≠
)

104 
c5f
, 
shi·
;

106 
shi·
 = 2*
ªgi⁄
;

107 
__asm
{ 
MRC
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 0 }

108 
c5f
 = c5‡&~ (0x3<<
shi·
);

109 
c5f
 = c5‡| (
≠
<<
shi·
);

110 
__asm
{ 
MCR
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 0 }

111 
	}
}

119 
	$ªgi⁄SëIEAP
(
ªgi⁄
, 
≠
)

121 
c5f
, 
shi·
;

123 
shi·
 = 4*
ªgi⁄
;

124 
__asm
{ 
MRC
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 3 }

125 
c5f
 = c5‡&~ (0xf<<
shi·
);

126 
c5f
 = c5‡| (
≠
<<
shi·
);

127 
__asm
{ 
MCR
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 3 }

128 
	}
}

129 
	$ªgi⁄SëDEAP
(
ªgi⁄
, 
≠
)

131 
c5f
, 
shi·
;

133 
shi·
 = 4*
ªgi⁄
;

134 
__asm
{ 
MRC
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 2 }

135 
c5f
 = c5‡&~ (0xf<<
shi·
);

136 
c5f
 = c5‡| (
≠
<<
shi·
);

137 
__asm
{ 
MCR
 
p15
, 0, 
c5f
, 
c5
, 
c0
, 2 }

138 
	}
}

151 
	$ªgi⁄SëCB
(
ªgi⁄
, 
CB
)

153 
c3f
, 
ãmpCB
;

155 
ãmpCB
 = 
CB
;

156 
__asm
{
MRC
 
p15
, 0, 
c3f
, 
c3
, 
c0
, 0 }

157 
c3f
 = c3‡&~ (0x1<<
ªgi⁄
);

158 
c3f
 = c3‡| ((
ãmpCB
 & 0x1)<<
ªgi⁄
);

159 
__asm
{
MCR
 
p15
, 0, 
c3f
, 
c3
, 
c0
, 0 }

161 
ãmpCB
 = 
CB
>>0x1;

162 
__asm
{
MRC
 
p15
, 0, 
c3f
, 
c2
, 
c0
, 0 }

163 
c3f
 = c3‡&~ (0x1<<
ªgi⁄
);

164 
c3f
 = c3‡| ((
ãmpCB
 & 0x1)<<
ªgi⁄
);

165 
__asm
{
MCR
 
p15
, 0, 
c3f
, 
c2
, 
c0
, 0 }

167 
ãmpCB
 = 
CB
>>0x2;

168 
__asm
{
MRC
 
p15
, 0, 
c3f
, 
c2
, 
c0
, 1 }

169 
c3f
 = c3‡&~ (0x1<<
ªgi⁄
);

170 
c3f
 = c3‡| ((
ãmpCB
 & 0x1)<<
ªgi⁄
);

171 
__asm
{
MCR
 
p15
, 0, 
c3f
, 
c2
, 
c0
, 1 }

172 
	}
}

179 
	$c⁄åﬁSë
(
vÆue
, 
mask
)

181 
c1f
;

183 
__asm
{
MRC
 
p15
, 0, 
c1f
, 
c1
, 
c0
, 0 }

184 
c1f
 = c1‡&~ 
mask
;

185 
c1f
 = c1‡| 
vÆue
;

186 
__asm
{ 
MCR
 
p15
, 0, 
c1f
, 
c1
, 
c0
, 0 }

187 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/ch13_examples/protection.h

52 
ªgi⁄Së
(
ªgi⁄
, 
addªss
, 
size
, 
íabÀ
);

53 
ªgi⁄SëISAP
(, );

54 
ªgi⁄SëDSAP
(, );

55 
ªgi⁄SëIEAP
(, );

56 
ªgi⁄SëDEAP
(, );

58 
ªgi⁄SëCB
(, );

59 
c⁄åﬁSë
(
vÆue
, 
mask
);

67 
	mnumbî
;

68 
	mty≥
;

69 
	mba£addªss
;

70 
	msize
;

71 
	mIAP
;

72 
	mDAP
;

73 
	mCB
;

74 } 
	tRegi⁄
;

76 
íabÀMPU
();

77 
öôA˘iveRegi⁄s
();

78 
íabÀMPU
();

79 
c⁄figRegi⁄
(
Regi⁄
 *);

	@/home/jkr555/arm/guide/ch13_mpu/ch13_examples/regions.h

50 
	#STANDARD
 0

	)

51 
	#EXTENDED
 1

	)

54 
	#NANA
 0

	)

55 
	#RWNA
 1

	)

56 
	#RWRO
 2

	)

57 
	#RWRW
 3

	)

58 
	#RONA
 5

	)

59 
	#RORO
 6

	)

62 
	#SIZE_4G
 31

	)

63 
	#SIZE_2G
 30

	)

64 
	#SIZE_1G
 29

	)

65 
	#SIZE_512M
 28

	)

66 
	#SIZE_256M
 27

	)

67 
	#SIZE_128M
 26

	)

68 
	#SIZE_64M
 25

	)

69 
	#SIZE_32M
 24

	)

70 
	#SIZE_16M
 23

	)

71 
	#SIZE_8M
 22

	)

72 
	#SIZE_4M
 21

	)

73 
	#SIZE_2M
 20

	)

74 
	#SIZE_1M
 19

	)

75 
	#SIZE_512K
 18

	)

76 
	#SIZE_256K
 17

	)

77 
	#SIZE_128K
 16

	)

78 
	#SIZE_64K
 15

	)

79 
	#SIZE_32K
 14

	)

80 
	#SIZE_16K
 13

	)

81 
	#SIZE_8K
 12

	)

82 
	#SIZE_4K
 11

	)

85 
	#CCB
 7

	)

86 
	#CWB
 7

	)

87 
	#CCb
 6

	)

88 
	#CWT
 6

	)

89 
	#CcB
 5

	)

90 
	#Ccb
 4

	)

91 
	#cCB
 3

	)

92 
	#cWB
 3

	)

93 
	#cCb
 2

	)

94 
	#cWT
 2

	)

95 
	#ccB
 1

	)

96 
	#ccb
 0

	)

99 
	#R_ENABLE
 1

	)

100 
	#R_DISABLE
 0

	)

103 
	#ENABLEMPU
 (0x1<<0)

	)

104 
	#ENABLEDCACHE
 (0x1<<2)

	)

105 
	#ENABLEICACHE
 (0x1<<12)

	)

106 
	#MASKMPU
 (0x1<<0)

	)

107 
	#MASKDCACHE
 (0x1<<2)

	)

108 
	#MASKICACHE
 (0x1<<12)

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íRedLED
()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM940IAP
,
RED
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnRedLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffRedLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/led.h

93 
›íRedLED
();

105 
swôchOnRedLED
();

117 
swôchOffRedLED
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/start.c

78 
	~"Àd.h
"

108 
	$íåy
 ()

110 vﬁ©ûê
dñay
;

112 i‡(
	`›íRedLED
 ()==0)

117 
	`swôchOnRedLED
 ();

120 
dñay
=0; delay<0x40ffff; delay++) {}

122 
	`swôchOffRedLED
 ();

125 
dñay
=0; delay<0x40ffff; delay++) {}

135 
dñay
=0xBEEFBEEF;

137 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/start.h

108 
íåy
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íYñlowLED
 ()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM940IAP
,
YELLOW
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnYñlowLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffYñlowLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/led.h

93 
›íYñlowLED
();

105 
swôchOnYñlowLED
();

117 
swôchOffYñlowLED
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/start.c

76 
	~"Àd.h
"

106 
	$íåy
 ()

108 vﬁ©ûê
dñay
;

110 i‡(
	`›íYñlowLED
 ()==0)

115 
	`swôchOffYñlowLED
 ();

118 
dñay
=0; delay<0x20ffff; delay++) {}

120 
	`swôchOnYñlowLED
 ();

123 
dñay
=0; delay<0x20ffff; delay++) {}

133 
dñay
=0xBEEFBEEF;

135 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/start.h

103 
C_E¡ryTask1
 ();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/com.c

73 
	~<°d¨g.h
>

75 
	~"../../c‹e/Æl.h
"

76 
	~"£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/readline.c

72 
	~<°rög.h
>

74 
	~"ty≥s.h
"

75 
	~"com.h
"

76 
	~"ªadlöe.h
"

78 
	#START
 ('A'-'@')

	)

79 
	#BACK
 ('B'-'@')

	)

80 
	#ERASE_FWD
 ('D'-'@')

	)

81 
	#END
 ('E'-'@')

	)

82 
	#FORWARD
 ('F'-'@')

	)

83 
	#ERASE
 ('H'-'@')

	)

84 
	#ERASE_EOL
 ('K'-'@')

	)

85 
	#ENTER
 ('M'-'@')

	)

86 
	#REDRAW
 ('R'-'@')

	)

87 
	#ERASE_LINE
 ('U'-'@')

	)

88 
	#ERASE_SOL
 ('W'-'@')

	)

90 
	#BACKSPACE
 ('H'-'@')

	)

91 
	#DELETE
 (0x7f)

	)

92 
	#LF
 ('\n')

	)

93 
	#CR
 ('\r')

	)

94 
	#CTRL_D
 ('D'-'@')

	)

96 
ªadC
();

97 
wrôeC
(
c
);

113 
	$back•a˚
 (
n
)

115 
n
--Ë
	`wrôeC
(
BACKSPACE
);

116 
	}
}

129 
	$backup
(*
buf„r
, 
pos
)

131 
	`back•a˚
(
	`°æí
(&
buf„r
[
pos
]));

132 
	}
}

145 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

147 
c
;

149 
c
 = 
buf„r
[
pos
++];

151 
c
)

153 
	`wrôeC
(
c
);

154 
c
 = 
buf„r
[
pos
++];

156 
	}
}

170 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

172 
c
;

174 
	`wrôeC
(
CR
);

176 
c
 = *
¥om±
++;

178 
c
)

180 
	`wrôeC
(
c
);

181 
c
 = *
¥om±
++;

184 
	`ªdøw_eﬁ
(
buf„r
, 0);

185 
	`backup
(
buf„r
, 
pos
);

186 
	}
}

199 
	$dñëe
 (*
buf„r
, 
pos
)

201 i‡(
buf„r
[
pos
] == 0) ;

203 
	`°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

204 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

205 
	`wrôeC
(' ');

206 
	`wrôeC
(
BACKSPACE
);

207 
	`backup
(
buf„r
, 
pos
);

210 
	}
}

224 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

226 *
s
 = &
buf„r
[
pos
];

228 
	`memmove
(
s
+1, s, 
	`°æí
(s)+1);

229 
buf„r
[
pos
] = 
c
;

230 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

231 
pos
++;

232 
	`backup
(
buf„r
, 
pos
);

234  
pos
;

235 
	}
}

248 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

250 
pos
 = 0;

251 
c
;

255 
c
=
	`ªadC
();

257 i‡(
c
 =
CR
 || c =
LF
)

259 
buf„r
[
pos
] = 0;

260  
pos
;

263 i‡(
c
 =
CTRL_D
)

265 
buf„r
[0] = 0;

269 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

270 
buf„r
[
pos
++] = 
c
;

272 
	}
}

287 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

289 
i
;

290 
pos
 = 0;

291 
c
;

293 *
buf„r
 = 0;

294 
	`wrôe0
(
¥om±
);

298 
c
 = 
	`ªadC
();

299 i‡(
c
 =
DELETE
Ë¯
ERASE
;

300 i‡(
c
 < ' ')

302 
c
)

304 
START
:

305 
	`back•a˚
(
pos
);

306 
pos
 = 0;

308 
BACK
:

309 i‡(
pos
 > 0)

311 
	`wrôeC
(
BACKSPACE
);

312 
pos
--;

315 
ERASE_FWD
:

316 i‡(
	`°æí
(
buf„r
) == 0)

318 
	`wrôe0
("*EOF*\r\n");

321 
	`dñëe
(
buf„r
, 
pos
);

323 
END
:

324 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

325 
pos
 = 
	`°æí
(
buf„r
);

327 
FORWARD
:

328 i‡(
buf„r
[
pos
])

330 
	`wrôeC
(
buf„r
[
pos
]);

331 
pos
++;

334 
ERASE
:

335 i‡(
pos
 > 0)

337 
	`wrôeC
(
BACKSPACE
);

338 
pos
--;

339 
	`dñëe
(
buf„r
, 
pos
);

342 
ENTER
:

343 
	`wrôeC
(
CR
);

344 
	`wrôeC
(
LF
);

345  
	`°æí
(
buf„r
);

346 
REDRAW
:

347 
	`wrôeC
(
LF
);

348 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

350 
ERASE_LINE
:

351 
	`back•a˚
(
pos
);

352 
i
 = 
pos
 = 
	`°æí
(
buf„r
);

354 
i
--Ë
	`wrôeC
(' ');

356 
	`back•a˚
(
pos
);

357 
pos
 = 0;

358 
buf„r
[0] = 0;

361 } i‡(
	`°æí
(
buf„r
Ë< 
maxÀn
)

362 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

364 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/serial.c

72 
	~"ty≥s.h
"

73 
	~"../../devi˚s/ddf_io.h
"

74 
	~"../../devi˚s/ddf_ty≥s.h
"

76 
	~"swis.h
"

77 
	~"../../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
 (
UINT
 
com
)

112 i‡(
com
>1Ë{ 
FALSE
;}

114 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_CM940IAP
,
com
);

118 i‡(
ho°
==0Ë{ 
FALSE
;}

122 
£rül
)

124 
DEVICE_IN_USE
:

125 
DEVICE_UNKNOWN
:

127  
FALSE
;

130  
TRUE
;

131 
	}
}

143 
	$wrôeCh¨ToHo°
 (
c
)

144 {
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);
	}
}

156 
	$¥ötToHo°
 (*
s
)

158 *
s
!=0)

160 
	`wrôeCh¨ToHo°
 (*
s
++);

162 
	}
}

174 
	$ªadCh¨FromHo°
 ()

175 { ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);
	}
}

188 
	$˛o£Ho°
 ()

190 i‡(
ho°
==0Ë 
FALSE
;

192  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

193 
	}
}

206 
	$b™√r
 ()

208 
	`¥ötToHo°
 ("\n\r");

209 
	`¥ötToHo°
 ("\n\rSimple Little OS - mpuSLOS (0.03)\n\r");

210 
	`¥ötToHo°
 ("- initialized ...... ok\n\r");

211 
	`¥ötToHo°
 ("-Ñunning on ....... cm940iap \n\r");

212 
	`¥ötToHo°
 ("- simple shell .....áctive\n\r");

213 
	`¥ötToHo°
 ("\n\r");

214 
	`¥ötToHo°
 ("\n\r");

215 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/shell.c

73 
	~"ty≥s.h
"

74 
	~"ªadlöe.h
"

75 
	~"com.h
"

91 
	$shñl
 ()

93 
CÆlBack
 
cb
;

94 
Àn
;

98 
Àn
 = 
	`ªadLöe
("cm940üp: ", 
comm™d_löe
, 255);

99 
cb
 = 
	`CLI
(
comm™d_löe
);

100 } !
cb
);

102 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/shell.h

73 
	~"£rül.h
"

89 
shñl
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/start.c

78 
	~"ty≥s.h
"

79 
	~"£rül.h
"

80 
	~"shñl.h
"

86 
	#COM1
 (1)

	)

87 
	#COM0
 (0)

	)

93 
b™√r
 ();

115 
	$íåy
 ()

126 if(
	`›íHo°
 (
COM0
)==
TRUE
)

128 
	`b™√r
 ();

129 
	`shñl
 ();

139 
	`˛o£Ho°
 ();

140 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/swis.h

76 #i‚de‡
SLOS


83 
	#SLOS
 5075

	)

89 
	#Evít_IODevi˚Inô
 0x800

	)

90 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

91 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

92 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

93 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

94 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

95 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

96 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

97 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

103 
	#BrögUp_Ba£
 0x700

	)

104 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

105 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

111 
	sSwiRegs


113 
	mr
[13];

114 
	m˝§
;

115 
	mpc
;

116 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/ddf_tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"../devi˚s/Àd_drivî.h
"

74 
	~"../devi˚s/£rül_drivî.h
"

80 
	~"../../devi˚s/ddf_ty≥s.h
"

92 
devi˚_åì°r
 
	gdevi˚s
[] =

102 
DEVICE_LED_CM940IAP
,

103 
Àd_öô
,

104 
Àd_›í
,

105 
Àd_˛o£
,

106 
Àd_wrôe_bô
,

107 
Àd_ªad_bô
,

110 
DEVICE_SERIAL_CM940IAP
,

111 
£rül_öô
,

112 
£rül_›í
,

113 
£rül_˛o£
,

114 
£rül_wrôe_byã
,

115 
£rül_ªad_byã
,

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

82 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

98 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

99 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

100 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

101 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

102 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

106 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

107 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

108 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

109 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

110 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

112 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

120 
	mÀd
[4];

121 
	muid
[4];

122 } 
	töã∫Æ_Àd°r
;

128 
öã∫Æ_Àd°r
 
	gdiodes
;

143 
	$Àd_öô
 ()

147 
PAUSE
;

149 
LED_ALL_OFF
;

153 
diodes
.
Àd
 [
RED
-1] = 
OFF
;

154 
diodes
.
Àd
 [
YELLOW
-1] = 
OFF
;

155 
diodes
.
Àd
 [
GREEN
-1] = 
OFF
;

156 
diodes
.
Àd
 [
GREEN2
-1] = 
OFF
;

158 
diodes
.
uid
 [
RED
-1] = 
NONE
;

159 
diodes
.
uid
 [
YELLOW
-1] = 
NONE
;

160 
diodes
.
uid
 [
GREEN
-1] = 
NONE
;

161 
diodes
.
uid
 [
GREEN2
-1] = 
NONE
;

162 
	}
}

175 
UID
 
	$Àd_›í
 (
maj‹
,
mö‹
) {

177 
mö‹
 --;

179 i‡(
maj‹
==
DEVICE_LED_CM940IAP
)

181 i‡(
mö‹
<4)

183 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

185 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

186  
diodes
.
uid
[
mö‹
];

190  
DEVICE_IN_USE
;

195  
DEVICE_UNKNOWN
;

199  
DEVICE_NEXT
;

200 
	}
}

216 
	$Àd_˛o£
 (
UID
 
id
) {

217 
x
;

219 
x
=0;x<=3;x++)

221 i‡(
diodes
.
uid
[
x
]==
id
)

223 
diodes
.
uid
 [
x
] = 
NONE
;

224  
DEVICE_SUCCESS
;

228  
DEVICE_UNKNOWN
;

229 
	}
}

243 
	$Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
) {

244 
x
;

246 
PAUSE
;

248 
x
=0;x<=3;x++)

250 i‡(
diodes
.
uid
[
x
]==
id
)

252 i‡(
diodes
.
uid
[
x
]!=
NONE
)

254 
Àd_£t
 &= 1;

256 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

258 i‡(
Àd_£t
==
ON
)

260 
x
)

263 0 : 
LED_1_ON
; ;

264 1 : 
LED_2_ON
; ;

265 2 : 
LED_3_ON
; ;

266 3 : 
LED_4_ON
; ;

271 
x
)

273 0 : 
LED_1_OFF
; ;

274 1 : 
LED_2_OFF
; ;

275 2 : 
LED_3_OFF
; ;

276 3 : 
LED_4_OFF
; ;

282 
	}
}

293 
BYTE
 
	$Àd_ªad_bô
 (
UID
 
id
) {

294 
x
;

296 
x
=0;x<=3;x++)

298 i‡(
diodes
.
uid
[
x
]==
id
)

300 i‡(
diodes
.
uid
[
x
]!=
NONE
)

302  
diodes
.
Àd
 [
x
];

312 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/led_driver.h

68 #i‚de‡
_DEVICE_CM7IAP_LED


70 
	#_DEVICE_CM7IAP_LED
 1

	)

72 
	#DEVICE_LED_CM940IAP
 55075

	)

83 
	#GREEN
 4

	)

84 
	#YELLOW
 3

	)

85 
	#RED
 2

	)

86 
	#GREEN2
 1

	)

89 
	#ON
 1

	)

90 
	#OFF
 0

	)

104 
Àd_öô
 ();

117 
UID
 
Àd_›í
 (
devi˚
,
Àd
);

131 
Àd_˛o£
 (
UID
 
id
);

145 
Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
);

157 
BYTE
 
Àd_ªad_bô
 (
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_driver.c

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"£rül_drivî.h
"

74 
	~"£rül_ma¸os.h
"

81 
	#DEVICE_SERIAL_CM940IAP
 55095

	)

89 
	mbaudøã
[2];

90 
	muid
[2];

91 } 
	töã∫Æ_£rül°r
;

97 
öã∫Æ_£rül°r
 
	gnode
;

110 
	$öã∫Æ_£rül_cm940üp_£tup
 (
p‹t
, 
baudR©e
)

112 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_M
, ((
baudR©e
 & 0xf00) >> 8));

113 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_L
, (
baudR©e
 & 0xff));

114 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_H
, (
AMBA_UARTLCR_H_WLEN_8
 | 
AMBA_UARTLCR_H_FEN
));

115 
	}
}

127 
	$£rül_öô
 ()

132 
	`öã∫Æ_£rül_cm940üp_£tup
 (
INTEGRATOR_UART0_BASE
,
ARM_BAUD_9600
);

135 
	`öã∫Æ_£rül_cm940üp_£tup
 (
INTEGRATOR_UART1_BASE
,
ARM_BAUD_9600
);

139 
node
.
baudøã
[0] = 
ARM_BAUD_9600
;

140 
node
.
baudøã
[1] = 
ARM_BAUD_9600
;

141 
node
.
uid
[
COM0
] = 
NONE
;

142 
node
.
uid
[
COM1
] = 
NONE
;

143 
	}
}

158 
UID
 
	$£rül_›í
 (
maj‹
,
com
)

160 i‡(
maj‹
==
DEVICE_SERIAL_CM940IAP
)

162 i‡(
com
==
COM0
 || com==
COM1
)

164 i‡(
node
.
uid
[
com
]!=
NONE
)

166  
DEVICE_IN_USE
;

170 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

171  
node
.
uid
[
com
];

176  
DEVICE_NEXT
;

177 
	}
}

191 
	$£rül_˛o£
 (
UID
 
id
)

193 i‡(
node
.
uid
[
COM0
]==
id
)

195 
node
.
uid
[
COM0
] = 
NONE
;

196  
DEVICE_SUCCESS
;

199 i‡(
node
.
uid
[
COM1
]==
id
)

201 
node
.
uid
[
COM1
] = 
NONE
;

202  
DEVICE_SUCCESS
;

205  
DEVICE_UNKNOWN
;

206 
	}
}

221 
	$öã∫Æ_£rül_wrôe
 (
p‹t
,
BYTE
 
c
)

223  
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

224 
	`PUT_CHAR
(
p‹t
,
c
);

225 
	}
}

239 
	$£rül_wrôe_byã
 (
UID
 
id
,
BYTE
 
d©a
)

242 i‡(
node
.
uid
[
COM0
]==
id
)

244 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART0_BASE
,
d©a
);

248 i‡(
node
.
uid
[
COM1
]==
id
)

250 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART1_BASE
,
d©a
);

254 
	}
}

266 
BYTE
 
	$öã∫Æ_£rül_ªad
 (
p‹t
)

269  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

271  
	`GET_CHAR
(
p‹t
);

272 
	}
}

284 
BYTE
 
	$£rül_ªad_byã
 (
UID
 
id
)

286 i‡(
node
.
uid
[
COM0
]==
id
)

288  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART0_BASE
);

291 i‡(
node
.
uid
[
COM1
]==
id
)

293  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART1_BASE
);

297 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_driver.h

78 
£rül_öô
 ();

91 
UID
 
£rül_›í
 (
devi˚
,
ign‹ed
);

105 
£rül_˛o£
 (
UID
 
id
);

118 
£rül_wrôe_byã
 (
UID
 
id
,
BYTE
 
£rül
);

130 
BYTE
 
£rül_ªad_byã
 (
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_macros.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

5 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

7 
	#AMBA_UARTDR
 0x00

	)

8 
	#AMBA_UARTRSR
 0x04

	)

9 
	#AMBA_UARTECR
 0x04

	)

10 
	#AMBA_UARTLCR_H
 0x08

	)

11 
	#AMBA_UARTLCR_M
 0x0C

	)

12 
	#AMBA_UARTLCR_L
 0x10

	)

13 
	#AMBA_UARTCR
 0x14

	)

14 
	#AMBA_UARTFR
 0x18

	)

15 
	#AMBA_UARTIIR
 0x1C

	)

16 
	#AMBA_UARTICR
 0x1C

	)

17 
	#AMBA_UARTILPR
 0x20

	)

19 
	#AMBA_UARTRSR_OE
 0x08

	)

20 
	#AMBA_UARTRSR_BE
 0x04

	)

21 
	#AMBA_UARTRSR_PE
 0x02

	)

22 
	#AMBA_UARTRSR_FE
 0x01

	)

24 
	#AMBA_UARTFR_TXFF
 0x20

	)

25 
	#AMBA_UARTFR_RXFE
 0x10

	)

26 
	#AMBA_UARTFR_BUSY
 0x08

	)

27 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

29 
	#AMBA_UARTCR_RTIE
 0x40

	)

30 
	#AMBA_UARTCR_TIE
 0x20

	)

31 
	#AMBA_UARTCR_RIE
 0x10

	)

32 
	#AMBA_UARTCR_MSIE
 0x08

	)

33 
	#AMBA_UARTCR_IIRLP
 0x04

	)

34 
	#AMBA_UARTCR_SIREN
 0x02

	)

35 
	#AMBA_UARTCR_UARTEN
 0x01

	)

37 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

38 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

39 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

40 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

41 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

42 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

43 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

44 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

45 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

47 
	#AMBA_UARTIIR_RTIS
 0x08

	)

48 
	#AMBA_UARTIIR_TIS
 0x04

	)

49 
	#AMBA_UARTIIR_RIS
 0x02

	)

50 
	#AMBA_UARTIIR_MIS
 0x01

	)

53 
	#ARM_BAUD_460800
 1

	)

54 
	#ARM_BAUD_230400
 3

	)

55 
	#ARM_BAUD_115200
 7

	)

56 
	#ARM_BAUD_57600
 15

	)

57 
	#ARM_BAUD_38400
 23

	)

58 
	#ARM_BAUD_19200
 47

	)

59 
	#ARM_BAUD_14400
 63

	)

60 
	#ARM_BAUD_9600
 95

	)

61 
	#ARM_BAUD_4800
 191

	)

62 
	#ARM_BAUD_2400
 383

	)

63 
	#ARM_BAUD_1200
 767

	)

67 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

68 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

69 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

70 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

72 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

73 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

76 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

77 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

79 #i‚de‡
LLEVELIO


80 
	#LLEVELIO
 1

	)

81 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

82 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

83 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

84 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

85 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

86 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

87 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

88 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

91 
	#COM1
 (1)

	)

92 
	#COM0
 (0)

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/events_init.c

92 
	$evítSîvi˚sInô
 ()

97 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/events_init.h

81 
evítSîvi˚sInô
 ();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/irq_handler.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
h™dÀr
.
s


55 ; * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 ; * 
OS
 : 
SLOS


57 ; * 
Pœtf‹m
 : 
I¡egøt‹
/
AP
 940

58 ; * 
Hi°‹y
 :

60 ; * 21 
De˚mbî
 2001 
Andªw
 
N
. 
Sloss


61 ; * - 
°¨ãd
 
w‹kög
 
⁄
 
the
 
h™dÀrs


63 ; * 19
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


64 ; * - 
added
 
suµ‹t
 
I¡egøt‹
 940

66 ; * 30
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


67 ; * - 
ªmove
 
the
 
buâ⁄
 
£rvi˚
 
routöe


72 ; * 
EXPORT


75 
EXPORT
 
evíts_úq_cm940üp_h™dÀr


78 ; * 
IMPORT


81 
IMPORT
 
evíts_tick_cm940üp_£rvi˚


82 
IMPORT
 
kî√lScheduÀr


85 ; * 
ROUTINES


88 
AREA
 
IRQI940
,
CODE
,
READONLY


90 
CMRegi°îBa£
 
DCD
 0x10000000

91 
IRQ0_BASE
 
DCD
 0x14000000

93 
TIMERINT2
 
EQU
 0x00000080

94 
STATUS
 
EQU
 0x00000000

96 ; -- 
evíts_úq_h™dÀr
 ------------------------------------------------------

98 ; 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


99 ; 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

102 
evíts_úq_cm940üp_h™dÀr


104 
SUB
 
r14
,Ñ14, #4

105 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} ; savêc⁄ãxt

106 
LDR
 
	gr0
, 
	gIRQ0_BASE
 ; 
Lﬂd
 
Ba£
 
addªss
 
of
 
I¡
 
Cål


107 
LDR
 
	gr0
, [
r0
,#STATUS] ; 
Ród
 
I¡îru±
 
°©us


108 
LDR
 
	gr1
, =0x000001f‡; 
lﬂd
 
vÆue
 
to
 
mask
 
off
 
uµî
 
bôs


109 
AND
 
	gr0
,Ñ0, 
	gr1
 ; 
mask
 
off
 
unu£d
 
öãºu±s


110 
TST
 
	gr0
, #TIMERINT2

111 
BNE
 
evíts_tick_cm940üp_víìr


112 
LDMFD
 
	gr13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ ; 
unknown
 
evít
 
ign‹e


114 
evíts_tick_cm940üp_víìr


116 
BL
 
	gevíts_tick_cm940üp_£rvi˚
 ; 
ª£t
 
timî


117 
B
 
kî√lScheduÀr


118 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/swi_handler.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögupSëR8fiq
();

98 
brögupSëR9fiq
();

99 
brögupSëR10fiq
();

101 
STATE
;

120 
CÆlBack
 
	$evíts_swi_cm940üp_h™dÀr
 (
swi_numbî
, 
SwiRegs
 *
r
)

122 
swi_numbî
)

129 
SLOS
:

131 
r
->r[0])

145 
BrögUp_Tø˚
:

147 
r
->r[1])

150 
	`brögupSëR9fiq
 (
r
->r[2]);

154 
	`brögupSëR10fiq
 (
r
->r[2]);

160 
BrögUp_F©ÆEº‹
:

161 
	`brögupSëR8fiq
 (
r
->r[1]);

163 
ÁèÀº‹
: fatalerror;

173 
Evít_IODevi˚Inô
:

174 
	`io_öôülize_drivîs
 ();

184 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SYSTEM
|
IRQoN
);}

186 
r
->r[0])

189 
Evít_IODevi˚O≥n
:

190 
r
->r[0] = (Ë
	`io_›í_drivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

193 
Evít_IODevi˚Clo£
:

194 
r
->r[0] = (Ë
	`io_˛o£_drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

197 
Evít_IODevi˚WrôeByã
:

198 
	`io_wrôe_byã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

201 
Evít_IODevi˚RódByã
:

202 
r
->r[0] = (Ë
	`io_ªad_byã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

205 
Evít_IODevi˚WrôeBô
:

206 
	`io_wrôe_bô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

209 
Evít_IODevi˚RódBô
:

210 
r
->r[0] = (Ë
	`io_ªad_bô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

213 
Evít_IODevi˚WrôeBlock
:

214 
	`io_wrôe_block
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

217 
Evít_IODevi˚RódBlock
:

218 
r
->r[0] = (Ë
	`io_ªad_block
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

223 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SVC
|
IRQoFF
);}

228 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/swis.h

76 #i‚de‡
SLOS


83 
	#SLOS
 5075

	)

89 
	#Evít_IODevi˚Inô
 0x800

	)

90 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

91 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

92 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

93 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

94 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

95 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

96 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

97 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

103 
	#BrögUp_Ba£
 0x700

	)

104 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

105 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

111 
	sSwiRegs


113 
	mr
[13];

114 
	m˝§
;

115 
	mpc
;

116 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/tick_service.c

73 
	~"../hódîs/Àd.h
"

74 
	~"../hódîs/ma¸os.h
"

76 
	~"../../hódîs/≠i_ty≥s.h
"

82 
	#O√MûliSec⁄d
 93750000

	)

83 
	#Irq0
 0x14000000

	)

84 
	#I¡_E«bÀSë
 2

	)

102 
	gÀd_pul£
 = 0;

103 
UINT
 
	gøã
;

119 
	$evítTickInô
 (
UINT
 
m£c
)

121 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

129 
m£c
)

132 
øã
 = 2;

136 
øã
 = 24;

146 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

147 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

148 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

149 
	}
}

161 
	$evítTimîISR
 ()

163 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

171 
PAUSE
;

172 i‡–
Àd_pul£
 )

173 { 
LED_1_ON
; 
Àd_pul£
 = 0; }

175 { 
LED_1_OFF
; 
Àd_pul£
 = 1; }

184 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

185 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

186 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

187 
	}
}

189 
	$evíts_tick_cm940üp_£rvi˚
 ()

191 
	`evítTimîISR
 ();

192 
	}
}

204 
	$evítTickSèπ
 ()

206 vﬁ©ûê* 
IRQ
 = (*)
Irq0
;

207 *(
IRQ
 + 
I¡_E«bÀSë
) = 0x80;

208 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/tick_service.h

103 
evítTickInô
 (
UINT
 
m£c
);

115 
evíts_tick_cm940üp_£rvi˚
 ();

127 
evítTickSèπ
 ();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/all.h

68 #i‚de‡
_HEADERS_CM940IAP_ALL


70 
	#_HEADERS_CM940IAP_ALL
 1

	)

72 
	~"Àd.h
"

73 
	~"ma¸os.h
"

79 
	~"../evíts/tick_£rvi˚.h
"

80 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/led.h

81 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

97 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

98 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

99 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

100 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

101 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

105 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

106 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

107 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

108 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

109 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

111 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/macros.h

79 
	#Timî0
 0x13000000

	)

80 
	#Timî1
 0x13000100

	)

81 
	#Timî2
 0x13000200

	)

83 
	#Timî_Lﬂd
 0

	)

84 
	#Timî_VÆue
 1

	)

85 
	#Timî_C⁄åﬁ
 2

	)

86 
	#Timî_CÀ¨
 3

	)

92 
	#πc_Ba£
 0x15000000

	)

93 
	#πc_D©a
 0x00

	)

94 
	#πc_M©ch
 0x01

	)

95 
	#πc_Sèt
 0x02

	)

96 
	#πc_CÀ¨
 0x02

	)

97 
	#πc_Lﬂd
 0x03

	)

98 
	#πc_C⁄åﬁ
 0x04

	)

104 
	#TimîE«bÀ
 0x80

	)

105 
	#TimîPîiodic
 0x40

	)

106 
	#TimîDißbÀ
 0x00

	)

107 
	#TimîFªîun
 0x00

	)

108 
	#TimîPªsˇÀ
 0x00

	)

109 
	#TimîPªsˇÀ16
 0x04

	)

110 
	#TimîPªsˇÀ256
 0x08

	)

114 
	#IRQVe˘‹
 0x18

	)

117 
	#INTEGRATOR_CT_BASE
 0x13000000

	)

118 
	#INTEGRATOR_IC_BASE
 0x14000000

	)

119 
	#INTEGRATOR_RTC_BASE
 0x15000000

	)

120 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

121 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

122 
	#INTEGRATOR_KBD_BASE
 0x18000000

	)

123 
	#INTEGRATOR_MOUSE_BASE
 0x19000000

	)

125 
	#AMBA_UARTDR
 0x00

	)

126 
	#AMBA_UARTRSR
 0x04

	)

127 
	#AMBA_UARTECR
 0x04

	)

128 
	#AMBA_UARTLCR_H
 0x08

	)

129 
	#AMBA_UARTLCR_M
 0x0C

	)

130 
	#AMBA_UARTLCR_L
 0x10

	)

131 
	#AMBA_UARTCR
 0x14

	)

132 
	#AMBA_UARTFR
 0x18

	)

133 
	#AMBA_UARTIIR
 0x1C

	)

134 
	#AMBA_UARTICR
 0x1C

	)

135 
	#AMBA_UARTILPR
 0x20

	)

137 
	#AMBA_UARTRSR_OE
 0x08

	)

138 
	#AMBA_UARTRSR_BE
 0x04

	)

139 
	#AMBA_UARTRSR_PE
 0x02

	)

140 
	#AMBA_UARTRSR_FE
 0x01

	)

142 
	#AMBA_UARTFR_TXFF
 0x20

	)

143 
	#AMBA_UARTFR_RXFE
 0x10

	)

144 
	#AMBA_UARTFR_BUSY
 0x08

	)

145 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

147 
	#AMBA_UARTCR_RTIE
 0x40

	)

148 
	#AMBA_UARTCR_TIE
 0x20

	)

149 
	#AMBA_UARTCR_RIE
 0x10

	)

150 
	#AMBA_UARTCR_MSIE
 0x08

	)

151 
	#AMBA_UARTCR_IIRLP
 0x04

	)

152 
	#AMBA_UARTCR_SIREN
 0x02

	)

153 
	#AMBA_UARTCR_UARTEN
 0x01

	)

155 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

156 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

157 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

158 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

159 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

160 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

161 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

162 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

163 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

165 
	#AMBA_UARTIIR_RTIS
 0x08

	)

166 
	#AMBA_UARTIIR_TIS
 0x04

	)

167 
	#AMBA_UARTIIR_RIS
 0x02

	)

168 
	#AMBA_UARTIIR_MIS
 0x01

	)

171 
	#ARM_BAUD_460800
 1

	)

172 
	#ARM_BAUD_230400
 3

	)

173 
	#ARM_BAUD_115200
 7

	)

174 
	#ARM_BAUD_57600
 15

	)

175 
	#ARM_BAUD_38400
 23

	)

176 
	#ARM_BAUD_19200
 47

	)

177 
	#ARM_BAUD_14400
 63

	)

178 
	#ARM_BAUD_9600
 95

	)

179 
	#ARM_BAUD_4800
 191

	)

180 
	#ARM_BAUD_2400
 383

	)

181 
	#ARM_BAUD_1200
 767

	)

185 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

186 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

187 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

188 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

190 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

191 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

194 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

195 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

197 #i‚de‡
LLEVELIO


198 
	#LLEVELIO
 1

	)

199 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

200 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

201 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

202 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

203 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

204 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

205 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

206 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/init.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
öô
.
s


8 ; * 
	gOS
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


12 ; * 14 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


13 ; * - 
£∑øãd
 
the
 
pcbSëUp
 
	groutöe


18 ; 
	gIMPORT
/
EXPORT
 
key
 
	gfun˘i⁄s


21 
EXPORT
 
c‹eInôülize


22 
EXPORT
 
öôSëUpSècks


24 
IMPORT
 
MpuPCB_PåTask2


25 
IMPORT
 
MpuPCB_PåTask3


26 
IMPORT
 
mpuInôFlush


27 
IMPORT
 
brögupInôFIQRegi°îs


28 
IMPORT
 
C_E¡ry


29 
IMPORT
 
MpuPCB_CuºítTask


30 
IMPORT
 
≠∂iˇti⁄Lﬂdî


31 
IMPORT
 
	gpcbSëUp


34 ; 
Deföe
 
u£ful
 
	gc⁄°™ts


37 
IRQ32md
 
	gEQU
 0x12

38 
SVC32md
 
	gEQU
 0x13

39 
SYS32md
 
	gEQU
 0x1f

40 
NoI¡
 
	gEQU
 0xc0

42 
AREA
 
	gINITSLOS
,
	gCODE
,
	gREADONLY


45 ; 
Sèπ
 
öôülizög
 
the
 
c‹e
 
	g∑πs


48 
c‹eInôülize


51 
BL
 
mpuInôFlush


52 
BL
 
brögupInôFIQRegi°îs


53 
B
 
	g≠∂iˇti⁄Lﬂdî


56 ; 
Sëup
 
°acks
 
	gSVC
|
	gIRQ
|
	gSYS
&
	gUSER


57 ; 
	gMode
 = 
SVC


60 
öôSëUpSècks


62 
MOV
 
	g•
,#0
	gx10000
 ; 
Kî√l
 
Sèck


63 
MSR
 
	gCPSR_c
,#NoI¡|
SYS32md


64 
MOV
 
	g•
,#0
	gx28000
 ; 
Sy°em
 
	gSèck
=0x28000

65 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


66 
MOV
 
	g•
,#0
	gx9000
 ; 
IRQ
 
	gSèck
=0x9000

67 
MSR
 
CPSR_c
,#NoI¡|
	gSVC32md


70 ; 
Sëup
 
Task
 
Pro˚ss
 
C⁄åﬁ
 
Block
 (
MPUPCB
).

71 ; 
	gMode
 = 
SVC


74 
MOV
 
	gr0
,#0
	gx28000
 ; 
Task2


75 
LDR
 
	gr1
,=
MpuPCB_PåTask2


76 
MOV
 
r2
,#0
x30000


77 
BL
 
pcbSëUp


79 
MOV
 
	gr0
,#0
	gx30000
 ; 
Task3


80 
LDR
 
	gr1
,=
MpuPCB_PåTask3


81 
MOV
 
r2
,#0
x38000


82 
BL
 
	gpcbSëUp


84 ; -- 
£t
 
the
 
cuºít
 
ID
 
to
 
	gTASK1
 ...........

86 
LDR
 
	gr0
, =
MpuPCB_CuºítTask


87 
MOV
 
r1
, #0

88 
STR
 
	gr1
,[
r0
] ; 
fú°
 
èsk
 
	gID
=0

89 
LDR
 
Ã
,=
C_E¡ry


90 
MOV
 
pc
,
	gÃ
 ; 
ˇŒ
 
C_E¡ry


91 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/mpupcb.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
mpupcb
.
s


8 ; * 
	gOS
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


12 ; * 14 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


13 ; * - 
£∑øãd
 
the
 
pcbSëUp
 
	groutöe


18 
EXPORT
 
MpuPCB_CuºítTask


19 
EXPORT
 
MpuPCB_TabÀ


20 
EXPORT
 
MpuPCB_T›OfIRQSèck


21 
EXPORT
 
MpuPCB_PåCuºítTask


22 
EXPORT
 
MpuPCB_PåNextTask


23 
EXPORT
 
MpuPCB_PåTask1


24 
EXPORT
 
MpuPCB_BŸtomTask1


25 
EXPORT
 
MpuPCB_Regi⁄TabÀ1


26 
EXPORT
 
MpuPCB_PåTask2


27 
EXPORT
 
MpuPCB_BŸtomTask2


28 
EXPORT
 
MpuPCB_Regi⁄TabÀ2


29 
EXPORT
 
MpuPCB_PåTask3


30 
EXPORT
 
MpuPCB_BŸtomTask3


31 
EXPORT
 
MpuPCB_Regi⁄TabÀ3


32 
EXPORT
 
	gpcbSëUp


34 ; -- 
	gpcbSëUp
 ----------------------------------------------------------------

36 ; 
	gDes¸ùti⁄
 : 
PCB
 
£tup


38 ; 
	gP¨amëîs
 : 
r0
=<
thªad
 
íåy
 
addªss
>

39 ; 
	gr1
=<
PCB
 
Addªss
>

40 ; 
	gr2
=<
°ack
 
addªss
>

41 ; 
	gRëu∫
 : 
£tup
 
PCB


42 ; 
	gNŸes
 :

45 
AREA
 
	gPCBSëUp
,
	gCODE
,
READWRITE


46 
pcbSëUp


47 
STR
 
	gr0
,[
r1
,#-4] ; 
	gPCB
[-4]=
C_TaskE¡ry
<2>

48 
STR
 
r0
,[
r1
,#-64] ; 
	gPCB
[-64]=
C_TaskE¡ry
<2>

49 
STR
 
r2
,[
r1
,#-8] ; 
	gPCB
[-8]=<
°ack
 
addªss
>

50 
MOV
 
r0
,#0
x50


51 
STR
 
	gr0
,[
r1
,#-68] ; 
	gPCB
[-68]=
iFt_U£r


52 
MOV
 
pc
,
Ã


54 
AREA
 
	gMpuPCBTabÀ
,
	gDATA
,
READWRITE


56 
MpuPCB_TabÀ


57 
DCD
 
MpuPCB_PåTask1


58 
DCD
 
MpuPCB_PåTask2


59 
DCD
 
MpuPCB_PåTask3


61 
AREA
 
	gMpuPCBIRQ
,
	gDATA
,
READWRITE


62 
MpuPCB_T›OfIRQSèck


63 
	gDCD
 0x9000 ; 
ªÆ
 
vÆue


65 
AREA
 
	gMpuPCBPåCURRENT
,
	gDATA
,
READWRITE


66 
MpuPCB_PåCuºítTask


67 
	gDCD
 0x1

69 
AREA
 
	gMpuPCBPåNEXT
,
	gDATA
,
READWRITE


70 
MpuPCB_PåNextTask


71 
	gDCD
 0x1

73 
AREA
 
	gMpuPCBA˘ive
,
	gDATA
,
READWRITE


74 
MpuPCB_CuºítTask


75 
	gDCD
 0x1

78 ; 
	$Task
(1): 
FuŒ
 
MPU
 
PCB


79 ; 
mpupcb


81 ; 
PCB


82 ; 
Regi⁄TabÀ


83 ; 
	}
}

86 
AREA
 
	gPCB1
,
	gDATA
,
READWRITE


88 
	gMpuPCB_BŸtomTask1


90 
MpuPCB_PåTask1


92 
MpuPCB_Regi⁄TabÀ1


93 
	gDCD
 0x20000 ; 
ba£
 
addªss


94 
	gDCD
 14 ; 
SIZE_32K
 
addªss


95 
DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

96 
DCD
 6 ; 
ˇche
 
™d
 
wrôe
 
through


97 
DCD
 1 ; 
R_ENABLED


100 ; 
	$Task
(2): 
FuŒ
 
MPU
 
PCB


101 ; 
mpupcb


103 ; 
PCB


104 ; 
Regi⁄TabÀ


105 ; 
	}
}

108 
AREA
 
	gPCB2
,
	gDATA
,
READWRITE


110 
	gMpuPCB_BŸtomTask2


112 
MpuPCB_PåTask2


114 
MpuPCB_Regi⁄TabÀ2


115 
	gDCD
 0x28000 ; 
ba£
 
addªss


116 
	gDCD
 14 ; 
SIZE_32K
 
addªss


117 
DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

118 
DCD
 6 ; 
ˇche
 
™d
 
wrôe
 
through


119 
DCD
 1 ; 
R_ENABLED


122 ; 
	$Task
(3): 
FuŒ
 
MPU
 
PCB


123 ; 
mpupcb


125 ; 
PCB


126 ; 
Regi⁄TabÀ


127 ; 
	}
}

130 
AREA
 
	gPCB3
,
	gDATA
,
READWRITE


132 
	gMpuPCB_BŸtomTask3


134 
MpuPCB_PåTask3


136 
MpuPCB_Regi⁄TabÀ3


137 
	gDCD
 0x30000 ; 
ba£
 
addªss


138 
	gDCD
 14 ; 
SIZE_32K
 
addªss


139 
DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

140 
DCD
 6 ; 
ˇche
 
™d
 
wrôe
 
through


141 
DCD
 1 ; 
R_ENABLED


142 
END


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/all.h

71 #i‚de‡
_CORE_ALL


73 
	#_CORE_ALL
 1

	)

75 
	~"../hódîs/≠i_ty≥s.h
"

76 
	~"../devi˚s/ddf_io.h
"

77 
	~<as£π.h
>

78 
	~<time.h
>

79 
	~"../cm940üp/hódîs/Æl.h
"

80 
	~"../hódîs/≠i_devi˚.h
"

81 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/cinit.c

77 
	~"../c‹e/Æl.h
"

78 
	~"../cm940üp/evíts/evíts_öô.h
"

79 
	~"../mem‹y/mem_öô.h
"

87 
	#DEVICESINIT
 1

	)

88 
	#SERVICESINIT
 2

	)

89 
	#TICKINIT
 3

	)

90 
	#CINITINIT
 4

	)

91 
	#TICKSTART
 5

	)

92 
	#MPUSETUP
 6

	)

93 
	#ENTERTASK
 7

	)

95 
	#LOW_LEVEL_INITIALIZATION
 1

	)

96 
	#BOOT_SLOS
 2

	)

108 
	gSTATE
;

114 
swôchOnSy°em
 ();

130 
	$cöô_öô
 ()

132 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

144 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

154 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

163 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

164 
	}
}

176 
	$C_E¡ry
 ( )

191 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

201 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

210 
	`Œåa˚
(
	`mem‹yMpuSy°em
(),
MPUSETUP
);

219 
STATE
=
BOOT_SLOS
;

221 
	`Œåa˚
(
	`swôchOnSy°em
(),
ENTERTASK
);

231 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/jump.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mpuSLOS


54 ; * 
ModuÀ
 : 
jump
.
s


55 ; * 
Des¸ùti⁄
 : 
jumps
 
öto
 
the
 
fú°
 
èsk


56 ; * 
OS
 : 
mpuSLOS
 0.03

57 ; * 
Hi°‹y
 :

59 ; * 14
th
 
July
 2002 
Andªw
 
N
. 
Sloss


60 ; * - 
added
 
a
 
√w
 
jump
 
mech™ism


64 
EXPORT
 
jumpToTask1


66 
AREA
 
jump
,
CODE
,
READONLY


68 ; -- 
JumpToTask1
 --------------------------------------------------------------

70 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
SPSR
 
to
 
U£r
 
Mode
 
™d
 
íabÀs
 
IRQ
's 

71 ; 
P¨amëîs
 : 
r0
 - 
addªss
 
⁄
 
èsk1


72 ; 
Rëu∫
 : 
√vî


73 ; 
NŸes
 : 
this
 
routöe
 
is
 
ªquúed
 
MPU
 
vîsi⁄
 
of
 
the


74 ; 
code
.

77 
jumpToTask1


79 
MSR
 
SPSR_c
,#0
x50


80 
MOVS
 
pc
,
r0


81 
END


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
 ()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/uid.h

72 
	~"../hódîs/≠i_ty≥s.h
"

74 
	#NONE
 0

	)

98 
UID
 
uid_gíî©e
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/data.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
d©a
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eD©aAb‹tH™dÀr


20 
AREA
 
	gDATAABTSLOS
,
	gCODE
,
READONLY


22 
c‹eD©aAb‹tH™dÀr


24 
B
 
	gc‹eD©aAb‹tH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a
 {

97 
	msize
;

98 *
	md©a
;

99 } 
	tblock_d©a°r
;

109 
	sdevi˚_åì
 {

118 
	m«me
[12];

127 
UID
 
	mdrivî_id
;

137 (*
	möô
)();

151 
UID
 (*
›í
)(, );

164 (*
	m˛o£
)(
	mUID
);

181 (*
	mbyã
)(
	mUID
, 
	mBYTE
);

191 (*
	mbô
)(
	mUID
, 
	mBYTE
);

201 (*
	mblock
)(
	mUID
, 
	mblock_d©a°r
 *);

203 } 
	mwrôe
;

221 
BYTE
 (*
byã
)(
	mUID
);

232 
BYTE
 (*
bô
)(
	mUID
);

242 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

244 } 
	mªad
;

246 } 
	tdevi˚_åì°r
 ;

248 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_io.c

73 
	~"../cm940üp/devi˚s/ddf_åì.h
"

89 
	$io_öôülize_drivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$io_›í_drivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$io_˛o£_drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
 (
id
);

147 
	}
}

161 
	$io_wrôe_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
 (
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$io_ªad_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
 (
id
);

185 
	}
}

199 
	$io_wrôe_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
 (
id
,
bô
);

204 
	}
}

218 
BYTE
 
	$io_ªad_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

220 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

222  
d
->
ªad
.
	`byã
 (
id
);

223 
	}
}

237 
	$io_wrôe_block
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

239 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

241 
d
->
wrôe
.
	`block
 (
id
,
block
);

242 
	}
}

256 
block_d©a°r
 *
	$io_ªad_block
(
devi˚_åì°r
 *
d
,
UID
 
id
)

258 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

260  
d
->
ªad
.
	`block
 (
id
);

261 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_io.h

73 
	~"ddf_‰ame.h
"

89 
io_öôülize_drivîs
();

103 
devi˚_åì°r
 *
io_›í_drivî
(*
id
,
maj‹
,
mö‹
);

116 
io_˛o£_drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

130 
io_wrôe_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

144 
BYTE
 
io_ªad_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

159 
io_wrôe_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

173 
BYTE
 
io_ªad_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

187 
io_wrôe_block
(
devi˚_åì°r
 *
d
,
UID
 
id
,
block_d©a°r
 *
block
);

201 
block_d©a°r
 *
io_ªad_block
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_types.h

68 #i‚de‡
_DEVICE_DDF_CM940IAP_TYPES


70 
	#_DEVICE_DDF_CM940IAP_TYPES
 1

	)

73 
	#DEVICE_LED_CM940IAP
 55075

	)

74 
	#DEVICE_SERIAL_CM940IAP
 55095

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/events/bringup.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
SmÆl
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
brögup


55 ; * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 ; * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 ; * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 ; * 
OS
 : 
SLOS
 
MPU
 0.03

59 ; * 
Pœtf‹m
 : 
gíîic


64 ; * 
EXPORT


67 
EXPORT
 
brögupSëR8fiq


68 
EXPORT
 
brögupSëR9fiq


69 
EXPORT
 
brögupSëR10fiq


70 
EXPORT
 
brögupInôFIQRegi°îs


72 
AREA
 
brögup
,
CODE
,
READONLY


74 ; -- 
swôchToFIQMode
 --------------------------------------------------------

76 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

78 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


79 ; 
Rëu∫
 : 
n⁄e
...

82 
swôchToFIQMode


84 
MOV
 
r3
,
Ã


85 
MRS
 
r1
,
CPSR


86 
BIC
 
r1
,r1,#0
x1f


87 
ORR
 
r1
,r1,#0
x11


88 
MSR
 
CPSR_c
,
r1


89 
MOV
 
pc
,
r3


91 ; -- 
swôchToSVCMode
 --------------------------------------------------------

93 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

95 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


96 ; 
Rëu∫
 : 
n⁄e
...

99 
swôchToSVCMode


101 
MOV
 
r3
,
Ã


102 
MRS
 
r1
,
CPSR


103 
BIC
 
r1
,r1,#0
x1f


104 
ORR
 
r1
,r1,#0
x13


105 
MSR
 
CPSR_c
,
r1


106 
MOV
 
pc
,
r3


108 ; -- 
brögup_£tR8fiq
 -------------------------------------------------------

110 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

112 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


113 ; 
Rëu∫
 : 
n⁄e
...

116 
brögupInôFIQRegi°îs


118 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


120 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

121 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


122 
MOV
 
r8
,#0 ; 
r8FIQ
=0

123 
MOV
 
r9
,#0 ; 
r9FIQ
=0

124 
MOV
 
r10
,#0 ; 
r10FIQ
=0

125 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


126 
MOV
 
pc
,
r2
 ;  
back


128 ; -- 
brögup_£tR8fiq
 -------------------------------------------------------

130 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

132 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


133 ; 
Rëu∫
 : 
n⁄e
...

136 
brögupSëR8fiq


138 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


140 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

141 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


142 
MOV
 
r8
,
r0
 ; 
r10_fiq
 =Ñ0

143 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


144 
MOV
 
pc
,
r2
 ;  
back


146 ; -- 
brögup_£tR9fiq
 -------------------------------------------------------

148 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

150 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


151 ; 
Rëu∫
 : 
n⁄e
...

154 
brögupSëR9fiq


156 ; 
r2
 - 
íåy
 
åa˚
 
numbî


158 
MOV
 
r2
,
Ã


159 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


160 
MOV
 
r9
,
r0
 ; 
r9_fiq
 = 
r2


161 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


162 
MOV
 
pc
,
r2
 ;  
back


164 ; -- 
brögup_£tR10fiq
 ------------------------------------------------------

166 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

168 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


169 ; 
Rëu∫
 : 
n⁄e
...

172 
brögupSëR10fiq


174 ; 
r2
 - 
exô
 
åa˚
 
numbî


176 
MOV
 
r2
,
Ã


177 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


178 
MOV
 
r10
,
r0
 ; 
r10_fiq
 = 
r2


179 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


180 
MOV
 
pc
,
r2
 ;  
back


181 
END


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/events/cpsr.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
SmÆl
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
˝§


55 ; * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 ; * 
OS
 : 
SLOS
 0.03

57 ; * 
Pœtf‹m
 : 
gíîic


62 ; * 
EXPORT


65 
EXPORT
 
modifyC⁄åﬁCPSR


67 
AREA
 
˝§
,
CODE
,
READONLY


69 ; -- 
modifyC⁄åﬁCPSR
 ------------------------------------------------------

71 ; 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


73 ; 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


74 ; 
Rëu∫
 : 
n⁄e
...

77 
modifyC⁄åﬁCPSR


80 ; 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


81 ; 
°ack
.

82 ; 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

83 ; 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

84 ; 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

85 ; 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

89 
STMFD
 
r13
!,{
r3
}

90 
MOV
 
	gr3
,
r13


91 
ADD
 
	gr13
,r13,#4

92 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

95 ; 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


96 ; 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


99 
MRS
 
	gr1
,
CPSR


100 
BIC
 
	gr1
,r1,#0
xff


101 
ORR
 
	gr1
,r1,
r0


102 
MSR
 
	gCPSR_c
,
	gr1


105 ; 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


106 ; 
Rëu∫
 
to
 
the
 
	gˇŒì


110 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

111 
LDMFD
 
	gr3
,{r3}

112 
MOV
 
	gpc
,
Ã


113 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/fiq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
fiq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eFIQH™dÀr


20 
AREA
 
	gFIQSLOS
,
	gCODE
,
READONLY


22 
c‹eFIQH™dÀr


24 
B
 
	gc‹eFIQH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_device.h

74 
	~"../cm940üp/evíts/swis.h
"

96 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Inô
 (
UINT
);

97 
	#evítIODevi˚Inô
(Ë
	`_evítIODevi˚Inô
 (
Evít_IODevi˚Inô
)

	)

120 
	$__swi
 (
SLOS
Ë
devi˚_åì°r
 *
	`_evítIODevi˚O≥n
 (
UINT
,
UID
 *,UINT,UINT);

121 
	#evítIODevi˚O≥n
(
a
,
b
,
c
Ë
_evítIODevi˚O≥n
 \

	)

122 (
Evít_IODevi˚O≥n
,(
a
),(
b
),(
c
))

142 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Clo£
 (
UINT
,
devi˚_åì°r
 *,
UID
);

143 
	#evítIODevi˚Clo£
(
a
,
b
Ë
_evítIODevi˚Clo£
 \

	)

144 (
Evít_IODevi˚Clo£
,(
a
),(
b
))

160 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeByã
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

161 
	#evítIODevi˚WrôeByã
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeByã
 \

	)

162 (
Evít_IODevi˚WrôeByã
,(
a
),(
b
),(
c
))

177 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódByã
 (UINT,
devi˚_åì°r
 *,
UID
);

178 
	#evítIODevi˚RódByã
(
a
,
b
Ë
_evítIODevi˚RódByã
 \

	)

179 (
Evít_IODevi˚RódByã
,(
a
),(
b
))

195 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBô
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

196 
	#evítIODevi˚WrôeBô
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBô
 \

	)

197 (
Evít_IODevi˚WrôeBô
,(
a
),(
b
),(
c
))

212 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódBô
 (UINT,
devi˚_åì°r
 *,
UID
);

213 
	#evítIODevi˚RódBô
(
a
,
b
Ë
_evítIODevi˚RódBô
 \

	)

214 (
Evít_IODevi˚RódBô
,(
a
),(
b
))

229 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
,*);

230 
	#evítIODevi˚WrôeBlock
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBlock
 \

	)

231 (
Evít_IODevi˚WrôeBlock
,(
a
),(
b
),(
c
))

246 
	$__swi
 (
SLOS
Ë* 
	`_evítIODevi˚RódBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
);

247 
	#evítIODevi˚RódBlock
(
a
,
b
Ë
_evítIODevi˚RódBlock
 \

	)

248 (
Evít_IODevi˚RódBlock
,(
a
),(
b
))

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_lldebug.h

73 #i‚de‡
LLDEBUG


74 
	#LLDEBUG
 1

	)

76 
	~"../cm940üp/evíts/swis.h
"

92 
	$__swi
 (
SLOS
Ë
	`_brögUpTø˚
 (
UINT
,,
UID
);

93 
	#brögUpTø˚
(
a
,
b
Ë
	`_brögUpTø˚
 (
BrögUp_Tø˚
,◊),(b))

	)

106 
	$__swi
 (
SLOS
Ë
	`_brögUpF©ÆEº‹
 (
UINT
,
UID
);

107 
	#brögUpF©ÆEº‹
(
a
Ë
	`_brögUpF©ÆEº‹
 (
BrögUp_F©ÆEº‹
,◊))

	)

127 
	#ENTRY
 123

	)

128 
	#EXIT
 321

	)

130 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

131 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

133 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

134 (
r
); \

135 
	`Œåa˚a·î
((
u
))

149 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_types.h

72 #i‚de‡
_HEADERS_API_TYPES


74 
	#_HEADERS_API_TYPES
 1

	)

76 
	tUINT
;

77 
	tUID
;

78 
	tBYTE
;

79 (*
	tCÆlBack
)();

80 
	tBOOL
;

82 
	#TRUE
 0

	)

83 
	#FALSE
 -1

	)

85 
	#DEVICE_SUCCESS
 0

	)

86 
	#DEVICE_IN_USE
 -1

	)

87 
	#DEVICE_UNKNOWN
 -2

	)

88 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/irq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
úq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eIRQH™dÀr


20 
IMPORT
 
evíts_úq_cm940üp_h™dÀr


23 
AREA
 
	gIRQSLOS
,
	gCODE
,
READONLY


25 
c‹eIRQH™dÀr


27 
B
 
	gevíts_úq_cm940üp_h™dÀr
 ; 
bønch
 
IRQ
 
h™dÀr


29 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/async.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mpuSLOS


54 ; * 
ModuÀ
 : 
async


55 ; * 
Des¸ùti⁄
 : 
⁄
 
	`sy°em
 (
íabÀ
 
ˇche
 
™d
 
asynchr⁄ous
 
mode
).

56 ; * 
Hi°‹y
 :

58 ; * 8
th
 
July
 2002 
Andªw
 
N
. 
Sloss


59 ; * - 
p‹ãd
 
‰om
 
Chris
 
Wright
'sÉxample code. 

63 
IMPORT
 
jumpToTask1


64 
IMPORT
 
mpuCh™geC⁄åﬁ


66 
EXPORT
 
swôchOnSy°em


68 
AREA
 
async940
,
CODE
,
READONLY


71 ; 
swôchOnSy°em
 :

72 ; 
íabÀs
 
I
 & 
D
 
ˇche
, 
™d
 
Wrôe
 
back


73 ; 
•ecül
 
to
 
the
 940 
£t
Åhê
bus
Åÿ
asynchr⁄ous
 
˛ockög


76 
swôchOnSy°em


78 ;
öföôe


79 ; 
B
 
öföôe


81 ; 
íabÀ
: 
Iˇche
,
WB
,
Dˇche
,
MPU


83 
LDR
 
r0
,=0x100d

84 
LDR
 
r1
,=0x100d

85 
BL
 
mpuCh™geC⁄åﬁ


87 ; 
asynchr⁄ous
 
˛ockög
, 940
t
 
⁄ly


89 
LDR
 
r0
,=0xc0000000

90 
LDR
 
r1
,=0xc0000000

91 
BL
 
mpuCh™geC⁄åﬁ


94 ; 
Jump
 
to
 
Task
 1 
™d
 tÿ
U£r
 
mode
ánd 
íabÀ
 
IRQ
 
öãºu±s


97 
MOV
 
r0
,#0
x20000


98 
B
 
jumpToTask1


99 
END


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mem_init.c

72 
	~"ªgi⁄s.h
"

73 
	~"mem_öô.h
"

79 
öôStdA˘iveRegi⁄s
();

80 
öôExtA˘iveRegi⁄s
();

82 
c⁄figStdRegi⁄
(, []);

83 
c⁄figExtRegi⁄
(, []);

85 
deÁu…Regi⁄s
();

87 
MpuPCB_Regi⁄TabÀ1
[5];

93 
	#≥rfBASE
 0x10000000

	)

94 
	#ÀdBASE
 0x1A000000

	)

96 
	#sSBASE
 0x00010000

	)

97 
	#pSBASE
 0x00000000

	)

118 
	gdeÁu…PCB
[5] = {
dÊtBASE
,
SIZE_4G
,
RWXrwx
,
ccb
,
R_DISABLE
};

119 
	g≥rfPCB
[5] = {
≥rfBASE
,
SIZE_256M
,
RWXrwx
,
ccb
,
R_ENABLE
};

120 
	g≥rfLEDPCB
[5] = {
ÀdBASE
,
SIZE_16M
,
RWXrwx
,
ccb
,
R_ENABLE
};

122 
MpuPCB_Regi⁄TabÀ1
[5];

124 
	gsh¨edPCB
[5] = {
sSBASE
,
SIZE_64K
,
RWXRWX
,
CWT
,
R_ENABLE
};

125 
	g¥Ÿe˘PCB
[5] = {
pSBASE
,
SIZE_4G
,
RWXrwx
,
CWT
,
R_ENABLE
};

140 
	$öôStdA˘iveRegi⁄s
()

143 
	`c⁄figStdRegi⁄
(
PROTECTED_SYSTEM
,
¥Ÿe˘PCB
);

144 
	`c⁄figStdRegi⁄
(
SHARED_SYSTEM
,
sh¨edPCB
);

145 
	`c⁄figStdRegi⁄
(
TASK
,
MpuPCB_Regi⁄TabÀ1
);

146 
	`c⁄figStdRegi⁄
(
PERIPHERAL
,
≥rfPCB
);

147 
	`c⁄figStdRegi⁄
(
LEDPERIPHERAL
,
≥rfLEDPCB
);

150 
	}
}

161 
	$öôExtA˘iveRegi⁄s
()

163 
	`c⁄figExtRegi⁄
(
PROTECTED_SYSTEM
,
¥Ÿe˘PCB
);

164 
	`c⁄figExtRegi⁄
(
SHARED_SYSTEM
,
sh¨edPCB
);

165 
	`c⁄figExtRegi⁄
(
TASK
,
MpuPCB_Regi⁄TabÀ1
);

166 
	`c⁄figExtRegi⁄
(
PERIPHERAL
,
≥rfPCB
);

169 
	}
}

181 
	$c⁄figStdRegi⁄
(
ªgi⁄
, 
PCB
[])

183 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
PCB
[0], PCB[1]);

184 
	`mpuRegi⁄StdAc˚ss
(
ªgi⁄
, 
PCB
[2]);

185 
	`mpuRegi⁄CB
(
ªgi⁄
, 
PCB
[3]);

186 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
PCB
[4]);

189 
	}
}

201 
	$c⁄figExtRegi⁄
(
ªgi⁄
, 
PCB
[] )

203 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
PCB
[0], PCB[1]);

204 
	`mpuRegi⁄ExtAc˚ss
(
ªgi⁄
, 
PCB
[2]);

205 
	`mpuRegi⁄CB
(
ªgi⁄
, 
PCB
[3]);

206 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
PCB
[4]);

209 
	}
}

221 
	$deÁu…Regi⁄s
()

223 
i
;

233 
	`mpuCh™geC⁄åﬁ
(0x00, 0xC000100D);

235  
i
=0 ; i < 8; i++)

237 
	`c⁄figStdRegi⁄
(
i
, 
deÁu…PCB
);

240 
	}
}

252 
	$mem‹yMpuSy°em
()

262 
	`deÁu…Regi⁄s
();

271 
	`öôStdA˘iveRegi⁄s
();

272 
	}
}

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mem_init.h

72 
mpuCh™geC⁄åﬁ
(, );

73 
mpuRegi⁄Deföe
(, , );

74 
mpuRegi⁄StdAc˚ss
(, );

75 
mpuRegi⁄ExtAc˚ss
(, );

76 
mpuRegi⁄CB
(, );

77 
mpuRegi⁄E«bÀ
(, );

92 
öôStdA˘iveRegi⁄s
();

103 
öôExtA˘iveRegi⁄s
();

115 
c⁄figStdRegi⁄
(
ªgi⁄
, []);

127 
c⁄figExtRegi⁄
(
ªgi⁄
, [] );

139 
deÁu…Regi⁄s
();

151 
mem‹yMpuSy°em
();

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mpu.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mpuSLOS


54 ; * 
ModuÀ
 : 
mpu
.
s


55 ; * 
Des¸ùti⁄
 : 
¥ovides
 
a
 
£t
 
of
 
sim∂e
 
MPU
 
routöes


56 ; * 
Pœtf‹m
 : 
CM940IAP


57 ; * 
Hi°‹y
 :

59 ; * 4 
July
 2002 (
Indïídí˚
 
Day
Ë
Andªw
 
N
. 
Sloss


60 ; * - 
èkí
 
‰om
 
Chris
 
Wright
 
MPU
 
exam∂e


65 ; * 
IMPORT
/
EXPORT


68 
IMPORT
 
MpuPCB_TabÀ


70 
EXPORT
 
mpuInôFlush


71 
EXPORT
 
mpuRegi⁄Deföe


72 
EXPORT
 
mpuRegi⁄StdAc˚ss


73 
EXPORT
 
mpuRegi⁄ExtAc˚ss


74 
EXPORT
 
mpuRegi⁄CB


75 
EXPORT
 
mpuRegi⁄E«bÀ


76 
EXPORT
 
mpuCh™geC⁄åﬁ


77 
EXPORT
 
mpuScheduÀRegi⁄2


80 ; * 
ROUTINES


83 
AREA
 
MPU
,
CODE
,
READONLY


85 
mpuInôFlush


87 
MOV
 
r0
, #0
x78


88 
MCR
 
p15
, 0x0, 
r0
, 
c1
, 
c0
, 0x0 ;

89 
MOV
 
r0
, #0
x0


90 
MCR
 
p15
, 0x0, 
r0
, 
c7
, 
c5
, 0x0 ; 
övÆid©e
 
ö°ru˘i⁄
 
ˇche


91 
MCR
 
p15
, 0x0, 
r0
, 
c7
, 
c6
, 0x0 ; 
övÆid©e
 
d©a
 
ˇche


93 
MOV
 
pc
,
Ã


96 ; 
Ch™ge
 
C⁄åﬁ
 
Regi°î
 
VÆues


97 ; 
	`ch™geC⁄åﬁ
(
vÆue
, 
mask
)

100 
mpuCh™geC⁄åﬁ


101 
MVN
 
r2
, 
r1
 ; 
övît
 
mask


102 
BIC
 
r3
, 
r0
, 
r2
 ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


103 
CMP
 
r3
, 
r0


104 
BNE
 
Eº‹C⁄åﬁ
 ; 
vÆues
 
outside
 
of
 
mask
 
£t


105 
MRC
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 ; 
gë
 
c⁄åﬁ
 
vÆues


106 
BIC
 
r3
,Ñ3, 
r1
 ; 
mask
 
off
 
bô
 
th©
 
ch™ge


107 
ORR
 
r3
,Ñ3, 
r0
 ; 
£t
 
vÆue
 
of
 
bôs
 
th©
 
ch™ge


108 
MCR
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 ; 
£t
 
c⁄åﬁ
 
vÆues


109 
MOV
 
r0
, #0

110 
MOV
 
pc
, 
Ã


113 ; 
Deföe
 
D©a
 
Regi⁄
 
Ba£
 
™d
 
Size


114 ; 
	`mpuRegi⁄Deföe
(
ªgi⁄
, 
ba£
, 
size
)

117 
mpuRegi⁄Deföe


119 
mpuRegi⁄DeföeEº‹Check


120 
CMP
 
r2
, #11 ; 
check
 
size
 
vÆue
 
too
 
	`smÆl
 (<11)

121 
BLO
 
Eº‹Size
 ; 
ERROR
: 
ªgi⁄
 
size
 
to
 
smÆl


122 
CMPHI
 
r2
, #31 ; 
check
 
size
 
vÆue
 
too
 
	`œrge
 (>31)

123 
BHI
 
Eº‹Size
 ; 
ERROR
: 
ªgi⁄
 
size
 
too
 
œrge


125 
ADD
 
r12
, 
r2
, #1 ; 
adju°
 
mu…ùÀ
 
of
 
	$size
 (
off
 
by
 
⁄e
)

126 
MOV
 
r3
, 
r1
, 
l§
 
r12
 ; 
˛ór
 
åaûög
 
zîos
 
∑π1


127 
MOV
 
r3
,Ñ3, 
l¶
 
r12
 ; 
˛ór
 
åaûög
 
zîos
 
∑π2


128 
CMP
 
r1
, 
r3
 ; 
check
 
Addªss
 
is
 
Æig√d
 
⁄
 
size


129 
BHI
 
Eº‹Addªss
 ; 
ERROR
: 
addªss
 
is
 
nŸ
 
Æig√d


131 
ORR
 
r3
,Ñ3, 
r2
, 
l¶
 #1 ; 
comböe
 
size
 
™d
 
ba£
 
addªss


132 
MOV
 
r12
, 
r0
 ; 
˛ór
Ñ0  
vÆue


133 
MOV
 
r0
 , #0 ; 
£t
  
vÆue
 
to
 
zîo


134 
CMP
 
r12
, #8 ; 
check
 
ªgi⁄
 
is
 
ö
 
ønge


135 
ADDLO
 
pc
,Öc, 
r12
, 
l¶
 #4 ; 
bønch
 
to
 
ba£
 
™d
 
size
 
routöe


136 ; 
l¶
 
	`vÆue
 (940
T
=#4 740/946=#3)

137 
B
 
Eº‹Regi⁄
 ; 
ERROR
: 
Regi⁄
 
to
 
œrge
, 
∑d
 
jump


139 
deföeRegi⁄0
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

140 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


141 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


142 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

143 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


145 
deföeRegi⁄1
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

146 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


147 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


148 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

149 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


151 
deföeRegi⁄2
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

152 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


153 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


154 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

155 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


157 
deföeRegi⁄3
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

158 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


159 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


160 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

161 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


163 
deföeRegi⁄4
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

164 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


165 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


166 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

167 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


169 
deföeRegi⁄5
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

170 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


171 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


172 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

173 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


175 
deföeRegi⁄6
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

176 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


177 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


178 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

179 
NOP
 ; 
∑d
 
jump
, 
ªmove
 
ö
 740
T
/946E
S


181 
deföeRegi⁄7
 ; 
deföög
 
ªgi⁄
 
dißbÀs
Ñegion

182 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 ; 
£t
 
Dªgi⁄
 
ba£
 
™d
 
size


183 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 ; 
£t
 
Iªgi⁄
 
ba£
 
™d
 
size
, 940
T
 
⁄ly


184 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

188 ; 
Deföe
 
Ac˚ss
 
Pîmissi⁄s


189 ; 
	`mpuRegi⁄StdAc˚ss
(
ªgi⁄
, 
≠
)

192 
mpuRegi⁄StdAc˚ss


193 
CMP
 
r0
, #0
x7
 ; 
check
 
ªgi⁄
 
is
 
ö
 
ønge


194 
BHI
 
Eº‹Regi⁄
 ; 
ERROR
: 
Regi⁄
 
out
 
of
 
R™ge


195 
TST
 
r1
, #0
xCC
 ; 
check
 
exãnded
 
≥rmissi⁄
 
u£


196 
BNE
 
Eº‹Pîmissi⁄
 ; 
ERROR
: 
U£
 
of
 
Exãnded
 
Pîmissi⁄s


197 
MOV
 
r0
,Ñ0, 
l¶
 #1 ; 
ªgi⁄
 
numbî
 
≠
 
is
 2b
ôs


198 
MOV
 
r2
, #3 ; 
£t
 
mask
 2 
bôs
 
wide


200 
£tStdDAP


201 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 0 ; 
gë
 
D
 
ac˚ss
 
≥rmissi⁄s


202 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
D
 
≠
 
bôs


203 
AND
 
r12
, 
r1
, #0
x3
 ; 
˛ór
 
Æl
 
ex˚±
 
°d
 
D
 
AP
 
bôs


204 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 ; 
£t
 
°d
 
D
 
AP
 
bôs


205 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 0 ; 
£t
 
°d
 
ac˚ss
 
≥rmissi⁄s


207 
£tStdIAP


208 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 1 ; 
gë
 
I
 
ac˚ss
 
≥rmissi⁄s


209 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
I
 
≠
 
bôs


210 
MOV
 
r1
,Ñ1, 
l§
 #4 ; 
shi·
 
I
 
AP
 
bôs
 
ö
 
posôi⁄


211 
AND
 
r12
, 
r1
, #0
x3
 ; 
˛ór
 
Æl
 
ex˚±
 
°d
 
I
 
AP
 
bôs


212 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 ; 
£t
 
°d
 
D
 
AP
 
bôs


213 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 1 ; 
£t
 
°d
 
ac˚ss
 
≥rmissi⁄s


215 
MOV
 
r0
, #0 ; 
suc˚ss


216 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

218 ; 
Deföe
 
Ac˚ss
 
Pîmissi⁄s


219 ; 
	`mpuRegi⁄ExtAc˚ss
(
ªgi⁄
, 
≠
)

222 
mpuRegi⁄ExtAc˚ss


223 
CMP
 
r0
, #0
x7
 ; 
check
 
ªgi⁄
 
is
 
ö
 
ønge


224 
BHI
 
Eº‹Regi⁄
 ; 
ERROR
: 
Regi⁄
 
out
 
of
 
R™ge


225 
TST
 
r1
, #0
x88
 ; 
check
 
u≈ªdi˘abÀ
 
ext
 
≥rmissi⁄


226 
BNE
 
Eº‹Pîmissi⁄
 ; 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


228 
MOV
 
r12
, #4

229 
TEQ
 
r12
, 
r1
, 
l§
 #4 ; 
check
 
ö°
 
≥rmissi⁄
 0x100 
u≈ªdiˇbÀ


230 
MOV
 
r12
, #7

231 
TEQNE
 
r12
, 
r1
, 
l§
 #4 ; 
check
 
ö°
 
≥rmissi⁄
 0x111 
u≈ªdiˇbÀ


232 
BEQ
 
Eº‹Pîmissi⁄
 ; 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


234 
AND
 
r12
, 
r1
, #0
xf


235 
TEQ
 
r12
, #4 ; 
check
 
d©a
 
≥rmissi⁄
 0x100 
u≈ªdiˇbÀ


236 
TEQNE
 
r12
, #7 ; 
check
 
d©a
 
≥rmissi⁄
 0x111 
u≈ªdiˇbÀ


237 
BEQ
 
Eº‹Pîmissi⁄
 ; 
ERROR
: 
u≈ªdiˇbÀ
 
u£
 
Ext
 
Pîmissi⁄s


239 
MOV
 
r0
,Ñ0, 
l¶
 #1 ; 
ªgi⁄
 
numbî
 
≠
 
is
 2b
ôs


240 
MOV
 
r2
, #3 ; 
£t
 
mask
 2 
bôs
 
wide


242 
£tExtDAP


243 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 2 ; 
gë
 
D
 
ac˚ss
 
≥rmissi⁄s


244 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
D
 
≠
 
bôs


245 
AND
 
r12
, 
r1
, #0
xf
 ; 
˛ór
 
Æl
 
ex˚±
 
ext
 
D
 
AP
 
bôs


246 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 ; 
£t
 
ext
 
D
 
AP
 
bôs


247 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 2 ; 
£t
 
ext
 
ac˚ss
 
≥rmissi⁄s


249 
£tExtIAP


250 
MRC
 
p15
, 0, 
r3
, 
c5
, 
c0
, 3 ; 
gë
 
I
 
ac˚ss
 
≥rmissi⁄s


251 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
I
 
≠
 
bôs


252 
MOV
 
r1
,Ñ1, 
l§
 #4 ; 
shi·
 
I
 
AP
 
bôs
 
ö
 
posôi⁄


253 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 ; 
£t
 
ext
 
D
 
AP
 
bôs


254 
MCR
 
p15
, 0, 
r3
, 
c5
, 
c0
, 3 ; 
£t
 
ext
 
ac˚ss
 
≥rmissi⁄s


256 
MOV
 
r0
, #0 ; 
suc˚ss


257 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

260 ; 
Së
 
Cache
 
™d
 
Buf„r
 
In°ru˘i⁄
ánd 
D©a
 
Regi⁄s


261 ; 
	`mpuRegi⁄CB
(
ªgi⁄
, 
CB
)

264 
mpuRegi⁄CB


265 
CMP
 
r0
, #0
x7
 ; 
check
 
ªgi⁄
 
is
 
ö
 
ønge


266 
CMPLE
 
r1
, #0
x7
 ; 
check
 
CCB
 
ö
 
ønge


267 
BHI
 
OutOfR™ge
 ; 
jump
 
to
 
the
 
îr‹
 
h™dÀr


268 
MOV
 
r2
, #1 ; 
£t
 
bô
 
mask
 1 bit

270 
£tBuf„r


271 
MRC
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 ; 
gë
 
buf„r
 
öfo


272 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
buf„r
 
bô


273 
BIC
 
r12
, 
r1
, #0
x6
 ; 
˛ór
 
I
 
D
 
ˇche
 
∑π
 
of
 
CB


274 
ORR
 
r3
,Ñ3, 
r12
, 
l¶
 
r0
 ; 
£t
 
buf„r
 
bô


275 
MCR
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 ; 
£t
 
buf„r
 
bô
 
ªgi⁄


277 
£tDCache


278 
MRC
 
p15
, 0, 
r3
, 
c2
, 
c0
, 0 ; 
gë
 
D
 
ˇche
 
öfo


279 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
D
 
ˇche
 
bô


280 
MOV
 
r1
,Ñ1, 
l§
 #1 ; 
dr›
 
buf„r
 
bô
 
move
 
D
 
ˇche
 
ö
 
posôi⁄


281 
BIC
 
r12
, 
r1
, #0
x2
 ; 
˛ór
 
I
 
ˇche
 
∑π
 
of
 
CB


282 
ORR
 
r3
,Ñ3, 
r1
, 
l¶
 
r0
 ; 
£t
 
D
 
ˇche
 
bô


283 
MCR
 
p15
, 0, 
r3
, 
c2
, 
c0
, 0 ; 
£t
 
D
 
ˇche
 
ªgi⁄


285 
£tICache


286 
MRC
 
p15
, 0, 
r3
, 
c2
, 
c0
, 1 ; 
gë
 
I
 
ˇche
 
öfo


287 
BIC
 
r3
,Ñ3, 
r2
, 
l¶
 
r0
 ; 
˛ór
 
I
 
ˇche
 
bô


288 
MOV
 
r1
,Ñ1, 
l§
 #1 ; 
dr›
 
D
 
ˇche
 
bô
 
move
 
I
 cachê
ö
 
posôi⁄


289 
ORR
 
r3
,Ñ3, 
r1
, 
l¶
 
r0
 ; 
£t
 
I
 
ˇche
 
bô


290 
MCR
 
p15
, 0, 
r3
, 
c2
, 
c0
, 1 ; 
£t
 
I
 
ˇche
 
ªgi⁄


293 
MOV
 
r0
, #0 ; 
suc˚ss


294 
MOV
 
pc
, 
Ã
 ; 

297 ; 
E«bÀ
 
Regi⁄


298 ; 
	`mpuRegi⁄E«bÀ
(
ªgi⁄
, 
íabÀ
)

301 
mpuRegi⁄E«bÀ


302 
CMP
 
r0
, #7 ; 
check
 
ªgi⁄
 
is
 
ö
 
ønge


303 
CMPLE
 
r1
, #1

304 
BHI
 
OutOfR™ge
 ; 
ERROR
 
h™dÀr


306 
MOV
 
r2
, 
r0
 ; 
r3
 = 
ªgi⁄


307 
MOV
 
r0
, #0 ; 
£t
 
fun˘i⁄
 
suc˚ss


308 
MOV
 
r12
, 
pc
 ; 
Lﬂd
 
addªss
 
of
 
jump
 
èbÀ


309 
LDR
 
pc
, [
r12
,
r2
,
LSL
#2] ; 
Jump
 
to
 
the
 
routöe


310 
E«bÀJumpTabÀ


311 
DCD
 
íabÀRegi⁄0


312 
DCD
 
íabÀRegi⁄1


313 
DCD
 
íabÀRegi⁄2


314 
DCD
 
íabÀRegi⁄3


315 
DCD
 
íabÀRegi⁄4


316 
DCD
 
íabÀRegi⁄5


317 
DCD
 
íabÀRegi⁄6


318 
DCD
 
íabÀRegi⁄7


320 
íabÀRegi⁄0
 ; 
£t
 
ªgi⁄
 0 
íabÀ


321 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 ; 
gë
 
D
 
ªgi⁄
 0 
ba£
 
™d
 
size


322 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


323 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


324 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 0 ; 
£t
 
D
 
ªgi⁄
 0 
íabÀ


326 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 ; 
gë
 
ªgi⁄
 0 
ba£
 
™d
 
size


327 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


328 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
I
 
íabÀ
 
‹
 
dißbÀ
 
ªgi⁄


329 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c0
, 1 ; 
£t
 
I
 
ªgi⁄
 0 
íabÀ


330 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

332 
íabÀRegi⁄1
 ; 
deföe
 
D
 
ªgi⁄
 
dißbÀs
Ñegion

333 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 ; 
gë
 
D
 
ªgi⁄
 1 
ba£
 
™d
 
size


334 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


335 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


336 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 0 ; 
£t
 
D
 
ªgi⁄
 1 
íabÀ


338 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 ; 
gë
 
I
 
ªgi⁄
 1 
ba£
 
™d
 
size


339 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


340 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


341 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c1
, 1 ; 
£t
 
I
 
ªgi⁄
 1 
íabÀ


342 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

344 
íabÀRegi⁄2
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

345 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 ; 
gë
 
D
 
ªgi⁄
 2 
ba£
 
™d
 
size


346 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


347 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


348 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 0 ; 
£t
 
D
 
ªgi⁄
 2 
íabÀ


350 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 ; 
gë
 
I
 
ªgi⁄
 2 
ba£
 
™d
 
size


351 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


352 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


353 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c2
, 1 ; 
£t
 
I
 
ªgi⁄
 2 
íabÀ


354 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

356 
íabÀRegi⁄3
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

357 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 ; 
gë
 
D
 
ªgi⁄
 3 
ba£
 
™d
 
size


358 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


359 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


360 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 0 ; 
£t
 
D
 
ªgi⁄
 3 
íabÀ


362 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 ; 
gë
 
ªgi⁄
 3 
ba£
 
™d
 
size


363 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


364 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


365 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c3
, 1 ; 
£t
 
I
 
ªgi⁄
 3 
íabÀ


366 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

368 
íabÀRegi⁄4
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

369 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 ; 
gë
 
D
 
ªgi⁄
 4 
ba£
 
™d
 
size


370 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


371 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


372 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 0 ; 
£t
 
D
 
ªgi⁄
 4 
íabÀ


374 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 ; 
gë
 
I
 
ªgi⁄
 4 
ba£
 
™d
 
size


375 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


376 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


377 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c4
, 1 ; 
£t
 
I
 
ªgi⁄
 4 
íabÀ


378 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

380 
íabÀRegi⁄5
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

381 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 ; 
gë
 
D
 
ªgi⁄
 5 
ba£
 
™d
 
size


382 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


383 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


384 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 0 ; 
£t
 
ªgi⁄
 5 
íabÀ


386 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 ; 
gë
 
I
 
ªgi⁄
 5 
ba£
 
™d
 
size


387 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


388 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


389 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c5
, 1 ; 
£t
 
I
 
ªgi⁄
 5 
íabÀ


390 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

392 
íabÀRegi⁄6
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

393 
MRC
 
p15
, 0, 
r3
, 
c6
, c6, 0 ; 
gë
 
D
 
ªgi⁄
 6 
ba£
 
™d
 
size


394 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


395 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


396 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 0 ; 
£t
 
D
 
ªgi⁄
 6 
íabÀ


398 
MRC
 
p15
, 0, 
r3
, 
c6
, c6, 1 ; 
gë
 
I
 
ªgi⁄
 6 
ba£
 
™d
 
size


399 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
I
 
ªgi⁄
 
íabÀ


400 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


401 
MCR
 
p15
, 0, 
r3
, 
c6
, c6, 1 ; 
£t
 
I
 
ªgi⁄
 6 
íabÀ


402 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

404 
íabÀRegi⁄7
 ; 
deföe
 
ªgi⁄
 
dißbÀs
Ñegion

405 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 ; 
gë
 
D
 
ªgi⁄
 7 
ba£
 
™d
 
size


406 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
D
 
ªgi⁄
 
íabÀ


407 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
D
 
ªgi⁄


408 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 0 ; 
£t
 
D
 
ªgi⁄
 7 
íabÀ


410 
MRC
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 ; 
gë
 
I
 
ªgi⁄
 7 
ba£
 
™d
 
size


411 
BIC
 
r3
,Ñ3, #1 ; 
˛ór
 
I
 
ªgi⁄
 
íabÀ


412 
ORR
 
r3
,Ñ3, 
r1
 ; 
£t
 
íabÀ
 
‹
 
dißbÀ
 
I
 
ªgi⁄


413 
MCR
 
p15
, 0, 
r3
, 
c6
, 
c7
, 1 ; 
£t
 
I
 
ªgi⁄
 7 
íabÀ


414 
MOV
 
pc
, 
Ã
 ; 
ªgi⁄
 
£t
 

416 
OutOfR™ge


417 
B
 
OutOfR™ge
 ; 
lo›
 
©
 
îr‹
 
debuggög


419 
Eº‹C⁄åﬁ


420 
b
 
Eº‹C⁄åﬁ


421 
Eº‹Pîmissi⁄
 ; 
Eº‹
 
Pîmissi⁄
 =4

422 
b
 
Eº‹Pîmissi⁄
 ; 
debug
 
ã°


423 
ADD
 
r0
,Ñ0, #1

424 
Eº‹Size
 ; 
Eº‹
 
Size
 = 3

425 
ADD
 
r0
,Ñ0, #1

426 
Eº‹Addªss
 ; 
Eº‹
 
Addªss
 
u«lig√d
 = 2

427 
ADD
 
r0
,Ñ0, #1

428 
Eº‹Regi⁄
 ; 
Eº‹
 
Regi⁄
 
nŸ
 
vÆid
 = 1

429 
ADD
 
r0
,Ñ0, #1

430 
MOV
 
pc
, 
Ã


444 
mpuScheduÀRegi⁄2


461 
STMFD
 
•
!,{
r0
-
r4
,
r12
,
Ã
} ; savêc⁄ãxt

462 
LDR
 
	gr1
,=
MpuPCB_TabÀ


463 
LDR
 
r4
,[
r1
,
r0
,
LSL
#2] ; 
	gr4

√w
 
PCB
 
addªss


466 ; 
deföe
 
the
 
√w
 
	gªgi⁄
 ...

469 
MOV
 
	gr0
,#2 ; 
	g∑ømëî
 1 
ªgi⁄2


470 
LDR
 
	gr1
,[
r4
] ; 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[0]

471 
LDR
 
	gr2
,[
r4
,#4] ; 
	g∑ømëî
 3 
	gRegi⁄TabÀ
[1]

472 
BL
 
	gmpuRegi⁄Deföe


475 ; 
deföe
 
°™d¨d
 
ac˚ss
 
	g≥rmissi⁄s
 ...

478 
MOV
 
	gr0
,#2 ; 
	g∑ømëî
 1 
ªgi⁄2


479 
LDR
 
	gr1
,[
r4
,#8] ; 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[2]

480 
BL
 
	gmpuRegi⁄StdAc˚ss


483 ; 
ˇche
 
™d
 
wrôe
 
	gthrough
 ...

486 
MOV
 
	gr0
,#2 ; 
	g∑ømëî
 1 
ªgi⁄2


487 
LDR
 
	gr1
,[
r4
,#12] ; 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[3]

488 
BL
 
	gmpuRegi⁄CB


491 ; 
íabÀ
 
√w
 
	gªgi⁄
 ...

494 
MOV
 
	gr0
,#2 ; 
	g∑ømëî
 1 
ªgi⁄2


495 
LDR
 
	gr1
,[
r4
,#16] ; 
	g∑ømëî
 2 
	gRegi⁄TabÀ
[4]

496 
BL
 
	gmpuRegi⁄E«bÀ


499 ; 
ª°‹e
 
c⁄ãxt
 
™d
  
to
 
	gscheduÀr
 ...

502 
LDMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gpc
}

503 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/regions.h

72 
	#SIZE_4G
 31

	)

73 
	#SIZE_2G
 30

	)

74 
	#SIZE_1G
 29

	)

75 
	#SIZE_512M
 28

	)

76 
	#SIZE_256M
 27

	)

77 
	#SIZE_128M
 26

	)

78 
	#SIZE_64M
 25

	)

79 
	#SIZE_32M
 24

	)

80 
	#SIZE_16M
 23

	)

81 
	#SIZE_8M
 22

	)

82 
	#SIZE_4M
 21

	)

83 
	#SIZE_2M
 20

	)

84 
	#SIZE_1M
 19

	)

85 
	#SIZE_512K
 18

	)

86 
	#SIZE_256K
 17

	)

87 
	#SIZE_128K
 16

	)

88 
	#SIZE_64K
 15

	)

89 
	#SIZE_32K
 14

	)

90 
	#SIZE_16K
 13

	)

91 
	#SIZE_8K
 12

	)

92 
	#SIZE_4K
 11

	)

95 
	#CCB
 7

	)

96 
	#CCb
 6

	)

97 
	#CcB
 5

	)

98 
	#Ccb
 4

	)

99 
	#cCB
 3

	)

100 
	#cCb
 2

	)

101 
	#ccB
 1

	)

102 
	#ccb
 0

	)

106 
	#CWB
 7

	)

107 
	#CWT
 6

	)

108 
	#cWB
 3

	)

109 
	#cWT
 2

	)

112 
	#rwrw
 0

	)

113 
	#RWrw
 1

	)

114 
	#RWRw
 2

	)

115 
	#RWRW
 3

	)

118 
	#xx
 0

	)

119 
	#Xx
 1

	)

120 
	#XX
 3

	)

124 
	#rwxrwx
 (
xx
 << 4Ë+ (
rwrw
)

	)

125 
	#RWxrwx
 (
xx
 << 4Ë+ (
RWrw
)

	)

126 
	#RWxRwx
 (
xx
 << 4Ë+ (
RWRw
)

	)

127 
	#RWxRWx
 (
xx
 << 4Ë+ (
RWRW
)

	)

129 
	#rwXrwx
 (
Xx
 << 4Ë+ (
rwrw
)

	)

130 
	#RWXrwx
 (
Xx
 << 4Ë+ (
RWrw
)

	)

131 
	#RWXRwx
 (
Xx
 << 4Ë+ (
RWRw
)

	)

132 
	#RWXRWx
 (
Xx
 << 4Ë+ (
RWRW
)

	)

134 
	#rwXrwX
 (
XX
 << 4Ë+ (
rwrw
)

	)

135 
	#RWXrwX
 (
XX
 << 4Ë+ (
RWrw
)

	)

136 
	#RWXRwX
 (
XX
 << 4Ë+ (
RWRw
)

	)

137 
	#RWXRWX
 (
XX
 << 4Ë+ (
RWRW
)

	)

139 
	#R_ENABLE
 1

	)

140 
	#R_DISABLE
 0

	)

144 
	#BACKGROUND
 0

	)

145 
	#PROTECTED_SYSTEM
 1

	)

146 
	#TASK
 2

	)

147 
	#SHARED_SYSTEM
 3

	)

148 
	#PERIPHERAL
 4

	)

149 
	#LEDPERIPHERAL
 5

	)

154 
	#dÊtBASE
 0x00000000

	)

	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/prefetch.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
¥e„tch
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹ePª„tchAb‹tH™dÀr


20 
AREA
 
	gPREFECTABTSLOS
,
	gCODE
,
READONLY


22 
c‹ePª„tchAb‹tH™dÀr


24 
B
 
	gc‹ePª„tchAb‹tH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/reserved.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
ª£rved
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eRe£rvedH™dÀr


20 
AREA
 
	gRESERVEDSLOS
,
	gCODE
,
READONLY


22 
c‹eRe£rvedH™dÀr


24 
B
 
	gc‹eRe£rvedH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/sal.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
ßl
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
≠∂iˇti⁄Lﬂdî


19 
IMPORT
 
öôSëUpSècks


21 
AREA
 
	gAPPLOADER
,
	gCODE
,
	gREADONLY


23 ; -- 
	g≠∂iˇti⁄Lﬂdî
 ------------------------------------------------------

25 ; 
	gDes¸ùti⁄s
 : 
≠∂iˇti⁄
 
lﬂdî


27 ; 
	gP¨amëîs
 :

28 ; 
	gRëu∫
 :

29 ; 
	gNŸes
 :

32 
≠∂iˇti⁄Lﬂdî


34 
LDR
 
	gr11
,=
ALT


36 
≠∂iˇti⁄LﬂdîLo›


37 
LDR
 
r12
,[
r11
],#4

38 
LDR
 
	gr14
,[
r11
],#4

39 
LDR
 
	gr13
,[
r11
],#4

41 
CMP
 
	gr13
,#0

42 
BEQ
 
öôSëUpSècks


44 
≠∂iˇti⁄BlockC›y


46 
LDMIA
 
	gr12
!,{
	gr0
-
	gr10
}

47 
STMIA
 
	gr13
!,{
	gr0
-
	gr10
}

48 
CMP
 
	gr12
,
r14


49 
BLE
 
≠∂iˇti⁄BlockC›y


50 
B
 
	g≠∂iˇti⁄LﬂdîLo›


54 ; * 
Aµliˇti⁄
 
Lﬂdî
 
	gTabÀ


58 
	gALT


59 ; 
íåy
 
öto
 
the
 
	gèbÀ


61 ; 
	g§c_°¨èddr


62 ; 
	g§c_ídaddr


63 ; 
	gde°_addr


66 ; 
	$èsk
 (3)

68 
DCD
 
èsk3°¨t


69 
DCD
 
èsk3íd


70 
DCD
 0x30000

72 ; 
	$èsk
 (2)

74 
DCD
 
èsk2°¨t


75 
DCD
 
èsk2íd


76 
DCD
 0x28000

78 ; 
	$èsk
 (1)

80 
DCD
 
èsk1°¨t


81 
DCD
 
èsk1íd


82 
DCD
 0x20000

84 ; 
Tîmö©e


86 
DCD
 0

87 
DCD
 0

88 
DCD
 0

91 
AREA
 
zzzAIB
,
DATA
,
READONLY


93 
ALIGN
 4

94 
èsk1°¨t


95 
INCBIN
 ../
image
/
≠ps
/
èsk1
.
bö


96 
èsk1íd


97 
èsk2°¨t


98 
INCBIN
 ../
image
/
≠ps
/
èsk2
.
bö


99 
èsk2íd


100 
èsk3°¨t


101 
INCBIN
 ../
image
/
≠ps
/
èsk3
.
bö


102 
èsk3íd


103 
END


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/scheduler.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
scheduÀr
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
IMPORT
 
MpuPCB_CuºítTask


19 
IMPORT
 
MpuPCB_PåCuºítTask


20 
IMPORT
 
MpuPCB_PåNextTask


21 
IMPORT
 
MpuPCB_TabÀ


22 
IMPORT
 
MpuPCB_T›OfIRQSèck


23 
IMPORT
 
mpuScheduÀRegi⁄2


25 
EXPORT
 
kî√lScheduÀr


27 
AREA
 
	gSCHEDULER
,
	gCODE
,
READONLY


29 
	gkî√lScheduÀr


32 ; 
Round
 
Robö
 
	gScheduÀr


35 
CuºítTask


36 
LDR
 
	gr3
,=
MpuPCB_CuºítTask


37 
LDR
 
r0
,[
r3
] ; 
	gr0
 = 
Cuºít
 
Task
 
ID


38 
LDR
 
r1
,=
MpuPCB_TabÀ


39 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
addªss
 
of
 
cuºít
 
èsk


40 
LDR
 
r2
,=
MpuPCB_PåCuºítTask


41 
STR
 
r1
,[
r2
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


42 ; ** 
	gPCB_PåCuºítTask
 - 
upd©ed
 
wôh
 
the
 
√w
 
addªss


43 
NextTask


44 
ADD
 
	gr0
,r0,#1 ;Ñ0 = 
Cuºít_Task
+1

45 
CMP
 
r0
,#3

46 
MOVEQ
 
	gr0
,#0 ; r0==
MaxTask
 
thí
 
r0
=0

47 
STR
 
r0
,[
r3
] ; 
ßve
 
√w
 
Task
 
	gID


48 ; 
ch™ge
 
Regi⁄2
 
to
 
the
 
√w
 
èsk


49 
BL
 
	gmpuScheduÀRegi⁄2
 ; 
ch™ge
 
	gªgi⁄


50 ; 
com∂ëe
 
the
 
√w
 
èsk
 
öf‹m©i⁄


51 
LDR
 
	gr1
,=
MpuPCB_TabÀ


52 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
√w
 
√xt
 
èsk
 
PCB
 
addªss


53 
LDR
 
r0
,=
MpuPCB_PåNextTask


54 
STR
 
r1
,[
r0
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


56 ; ** 
	gMpuPCB_PåCuºítTask
 = 
cuºít
 
PCB


57 ; ** 
	gMpuPCB_PåNextTask
 = 
√xt
 
PCB


58 ; ** 
	gMpuPCB_CuºítTask
 = 
√w
 
TASK_ID


61 ; 
C⁄ãxt
 
	gSwôch


64 
h™dÀr_c⁄ãxtswôch


65 
LDMFD
 
	g•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} ; 
ª°‹e
 
ªmaöög
 
ªgi°îs


66 
LDR
 
	gr13
,=
MpuPCB_PåCuºítTask


67 
LDR
 
r13
,[r13] ; 
lﬂd
 
cuºít
 
PCB


68 
SUB
 
	gr13
,r13,#60

69 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
°‹e
 
the
 
U£r
 
ªg
 
öto
 
cuºít
 
PCB


70 
MRS
 
	gr0
, 
SPSR


71 
STMDB
 
	gr13
,{
	gr0
,
	gr14
}

72 
LDR
 
	gr13
,=
MpuPCB_PåNextTask


73 
LDR
 
r13
,[r13]

74 
SUB
 
	gr13
,r13,#60 ; 
lﬂd
 
™d
 
posôi⁄
 
√xt
 
PCB


75 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
} ; 
lﬂd
 
the
 
√w
 
èsk


76 
MSR
 
	g•§_cxsf
, 
r0


77 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
lﬂd
 
U£r
 
ªgs


78 
LDR
 
	gr13
,=
MpuPCB_T›OfIRQSèck


79 
LDR
 
r13
,[r13] ; 
lﬂd
 
IRQ
 
°ack


80 
MOVS
 
	gpc
,
	gr14
 ;  
√xt
 
èsk


81 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/start.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
°¨t
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


19 ; * 
	gIMPORT


22 
IMPORT
 
c‹eInôülize


23 
IMPORT
 
c‹eUndeföedH™dÀr


24 
IMPORT
 
c‹eSWIH™dÀr


25 
IMPORT
 
c‹ePª„tchAb‹tH™dÀr


26 
IMPORT
 
c‹eD©aAb‹tH™dÀr


27 
IMPORT
 
c‹eRe£rvedH™dÀr


28 
IMPORT
 
c‹eIRQH™dÀr


29 
IMPORT
 
c‹eFIQH™dÀr


30 
IMPORT
 
MpuPCB_TabÀ


32 
AREA
 
	gENTRYSLOS
,
	gCODE
,
	gREADONLY


35 ; * 
	gCODE


38 
	gENTRY


40 ; -- 
Ve˘‹
 
	gTabÀ
 ------------------------------------

42 ; 
èbÀ
 
	goff£t
 ..........

43 ; 00 - 
	gRe£t


44 ; 04 - 
Undeföed
 
	gö°ru˘i⁄s


45 ; 08 - 
SWI
 
	gö°ru˘i⁄s


46 ; 0C - 
¥e„tch
 
	gab‹t


47 ; 10 - 
D©a
 
	gab‹t


48 ; 14 - 
	gRe£rved


49 ; 18 - 
IRQ
 
	göãºu±s


50 ; 1C - 
FIQ
 
öãºu±s


52 
LDR
 
	gpc
,
ve˘‹Re£t


53 
LDR
 
	gpc
,
ve˘‹Undeföed


54 
LDR
 
	gpc
,
ve˘‹SWI


55 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


56 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


57 
LDR
 
	gpc
,
ve˘‹Re£rved


58 
LDR
 
	gpc
,
ve˘‹IRQ


59 
LDR
 
	gpc
,
	gve˘‹FIQ


61 ; -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

63 
±rPCBTabÀ
 
DCD
 
	gMpuPCB_TabÀ


65 ; -- 
Kî√l
 
Jump
 
	gèbÀ
 ------------------------------

67 
ve˘‹Re£t
 
DCD
 
c‹eInôülize


68 
ve˘‹Undeföed
 
DCD
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
 
DCD
 
c‹eSWIH™dÀr


70 
ve˘‹Pª„tchAb‹t
 
DCD
 
c‹ePª„tchAb‹tH™dÀr


71 
ve˘‹D©aAb‹t
 
DCD
 
c‹eD©aAb‹tH™dÀr


72 
ve˘‹Re£rved
 
DCD
 
c‹eRe£rvedH™dÀr


73 
ve˘‹IRQ
 
DCD
 
c‹eIRQH™dÀr


74 
ve˘‹FIQ
 
DCD
 
c‹eFIQH™dÀr


76 
	gEND


79 ; * 
END
 
OF
 
	g°¨t
.
	gs


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/swi.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
swi
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
	gc‹eSWIH™dÀr


21 ; * 
	gIMPORT


24 
IMPORT
 
evíts_swi_cm940üp_h™dÀr


27 
AREA
 
	gSWISLOS
, 
	gCODE
, 
	gREADONLY


30 ; * 
kî√l
 
swi
 
h™dÀr
 
	gevít


33 
c‹eSWIH™dÀr


35 
STMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gÃ
} ; 
St‹e
 
ªgi°îs


36 
LDR
 
	gr10
,[
Ã
,#-4] ; 
CÆcuœã
 
addªss
 
of
 
SWI
 
ö°ru˘i⁄


37 
BIC
 
	gr10
,r10,#0
	gxff000000
 ; 
Mask
 
off
 
	gt›
 8 
bôs


38 
MOV
 
	gr1
,
	g•
 ; 
£c⁄d
 
∑ømëî
 
to
 
C
 
	groutöe
...

39 ; 
is
 
poöãr
 
to
 
	gvÆues
.

40 
MRS
 
	gr2
,
	gSPSR
 ; 
move
 
the
 
•§
 
öto
 
gp
 

41 
STMFD
 
	g•
!,{
	gr2
} ; 
°‹e
 
•§
 
⁄to
 
the
 
	g°ack
.

42 ; 
This
 
is
 
⁄ly
 
	gªÆly


43 ; 
√eded
 
ö
 
of
 
√°ed
 
	gSWI
's

44 
BL
 
	gswi_jum±abÀ
 ; 
ˇŒ
 
C
 
routöe
 
to
 
h™dÀ
 
SWI


45 
LDMFD
 
	g•
!,{
	gr2
} ; 
ª°‹e
 
•§
 
‰om
 
°ack
 
öto
 
r2


46 
MSR
 
	gSPSR_cf
,
	gr2
 ; 
™d
 
ª°‹e
 
ô
 
öto
 
	g•§
.

47 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^ ; 
ª°‹e
 
ªgi°îs
 
™d
 .

50 ; 
SWI
 
Jump
 
	gTabÀ


51 ; 
	gr0
 - 
swi
 
	gNumbî


52 ; 
	gr1
 - 
poöt
 
to
 
the
 
	gr0
-
	gr12


55 
swi_jum±abÀ


57 
MOV
 
	gr0
,
	gr10
 ; 
move
 
SWI
 
numbî
 
öto
 
r0


58 
B
 
	gevíts_swi_cm940üp_h™dÀr
 ; 
ˇŒög
 
c
 
routöe
 
to
 
h™dÀ
 
swi
 
ˇŒ


59 
	gEND


	@/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/undef.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
undef
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eUndeföedH™dÀr


20 
AREA
 
	gUNDEFSLOS
,
	gCODE
,
READONLY


22 
c‹eUndeföedH™dÀr


24 
B
 
	gc‹eUndeföedH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

82 
	#GREEN
 4

	)

83 
	#YELLOW
 3

	)

84 
	#RED
 2

	)

85 
	#GREEN2
 1

	)

91 
devi˚_åì°r
 *
	gho°
;

92 
UID
 
	gÀd
;

108 
BOOL
 
	$›íRedLED
()

119 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM920IAP
,
RED
);

123 i‡(
ho°
==0Ë{ 
FALSE
;}

127 
Àd
)

129 
DEVICE_IN_USE
:

130 
DEVICE_UNKNOWN
:

132  
FALSE
;

135  
TRUE
;

136 
	}
}

148 
	$swôchOnRedLED
()

150 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

151 
	}
}

163 
	$swôchOffRedLED
()

165 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

166 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/led.h

93 
›íRedLED
();

105 
swôchOnRedLED
();

117 
swôchOffRedLED
();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/start.h

108 
íåy
();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/startx.c

78 
	~"Àd.h
"

108 
	$íåy
 ()

110 vﬁ©ûê
dñay
;

112 i‡(
	`›íRedLED
 ()==0)

117 
	`swôchOnRedLED
 ();

120 
dñay
=0; delay<0x40ffff; delay++) {}

122 
	`swôchOffRedLED
 ();

125 
dñay
=0; delay<0x40ffff; delay++) {}

135 
dñay
=0xBEEFBEEF;

137 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/swiapi.c

71 
	~"../../cm920üp/evíts/swis.h
"

72 
	~"../../devi˚s/ddf_‰ame.h
"

78 
	#UINT
 

	)

86 
	mr
[4];

87 } 
	tªgi°î°r
;

93 
ªgi°î°r
 
	grs
;

99 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

121 
	$evítIODevi˚Inô
()

123 
ªgi°î°r
 
tmpReg
;

125 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

126 
tmpReg
.
r
[1] = 0;

127 
tmpReg
.
r
[2] = 0;

128 
tmpReg
.
r
[3] = 0;

130 
	`c‹eCÆlSWI
 (&
tmpReg
);

132 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

133 
	}
}

156 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

158 
ªgi°î°r
 
tmpReg
;

160 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

161 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

162 
tmpReg
.
r
[2] = 
b
;

163 
tmpReg
.
r
[3] = 
c
;

165 
	`c‹eCÆlSWI
(&
tmpReg
);

167  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

168 
	}
}

188 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

190 
ªgi°î°r
 
tmpReg
;

192 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

193 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

194 
tmpReg
.
r
[2] = 
b
;

195 
tmpReg
.
r
[3] = 0;

197 
	`c‹eCÆlSWI
(&
tmpReg
);

199  (Ë
tmpReg
.
r
[0];

200 
	}
}

216 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

218 
ªgi°î°r
 
tmpReg
;

220 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

221 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

222 
tmpReg
.
r
[2] = 
b
;

223 
tmpReg
.
r
[3] = 
c
;

225 
	`c‹eCÆlSWI
(&
tmpReg
);

226 
	}
}

241 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

243 
ªgi°î°r
 
tmpReg
;

245 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

246 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

247 
tmpReg
.
r
[2] = 
b
;

248 
tmpReg
.
r
[3] = 0;

250 
	`c‹eCÆlSWI
(&
tmpReg
);

252  (
UINT
Ë
tmpReg
.
r
[0];

253 
	}
}

269 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

271 
ªgi°î°r
 
tmpReg
;

273 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

274 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

275 
tmpReg
.
r
[2] = 
b
;

276 
tmpReg
.
r
[3] = 
c
;

278 
	`c‹eCÆlSWI
(&
tmpReg
);

279 
	}
}

294 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

296 
ªgi°î°r
 
tmpReg
;

298 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

299 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

300 
tmpReg
.
r
[2] = 
b
;

301 
tmpReg
.
r
[3] = 0;

303 
	`c‹eCÆlSWI
(&
tmpReg
);

305  (
UINT
Ë
tmpReg
.
r
[0];

306 
	}
}

321 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

323 
ªgi°î°r
 
tmpReg
;

325 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

326 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

327 
tmpReg
.
r
[2] = 
b
;

328 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

330 
	`c‹eCÆlSWI
(&
tmpReg
);

331 
	}
}

346 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

348 
ªgi°î°r
 
tmpReg
;

350 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

351 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

352 
tmpReg
.
r
[2] = 
b
;

353 
tmpReg
.
r
[3] = 0;

355 
	`c‹eCÆlSWI
(&
tmpReg
);

357  (*)
tmpReg
.
r
[0];

358 
	}
}

360 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

362 
ªgi°î°r
 
tmpReg
;

364 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

365 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

366 
tmpReg
.
r
[2] = 
b
;

367 
tmpReg
.
r
[3] = 0;

369 
	`c‹eCÆlSWI
(&
tmpReg
);

370 
	}
}

384 
	$brögUpF©ÆEº‹
(
UID
 
a
)

386 
ªgi°î°r
 
tmpReg
;

388 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

389 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

390 
tmpReg
.
r
[2] = 0;

391 
tmpReg
.
r
[3] = 0;

393 
	`c‹eCÆlSWI
(&
tmpReg
);

394 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

82 
	#GREEN
 4

	)

83 
	#YELLOW
 3

	)

84 
	#RED
 2

	)

85 
	#GREEN2
 1

	)

91 
devi˚_åì°r
 *
	gho°
;

92 
UID
 
	gÀd
;

108 
BOOL
 
	$›íYñlowLED
 ()

119 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM920IAP
,
YELLOW
);

123 i‡(
ho°
==0Ë{ 
FALSE
;}

127 
Àd
)

129 
DEVICE_IN_USE
:

130 
DEVICE_UNKNOWN
:

132  
FALSE
;

135  
TRUE
;

136 
	}
}

148 
	$swôchOnYñlowLED
()

150 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

151 
	}
}

163 
	$swôchOffYñlowLED
()

165 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

166 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/led.h

93 
›íYñlowLED
();

105 
swôchOnYñlowLED
();

117 
swôchOffYñlowLED
();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/start.h

103 
íåy
();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/startx.c

76 
	~"Àd.h
"

106 
	$íåy
 ()

108 vﬁ©ûê
dñay
;

110 i‡(
	`›íYñlowLED
 ()==0)

115 
	`swôchOffYñlowLED
 ();

118 
dñay
=0; delay<0x20ffff; delay++) {}

120 
	`swôchOnYñlowLED
 ();

123 
dñay
=0; delay<0x20ffff; delay++) {}

133 
dñay
=0xBEEFBEEF;

135 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/swiapi.c

71 
	~"../../cm920üp/evíts/swis.h
"

72 
	~"../../devi˚s/ddf_‰ame.h
"

78 
	#UINT
 

	)

86 
	mr
[4];

87 } 
	tªgi°î°r
;

93 
ªgi°î°r
 
	grs
;

99 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

121 
	$evítIODevi˚Inô
()

123 
ªgi°î°r
 
tmpReg
;

125 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

126 
tmpReg
.
r
[1] = 0;

127 
tmpReg
.
r
[2] = 0;

128 
tmpReg
.
r
[3] = 0;

130 
	`c‹eCÆlSWI
 (&
tmpReg
);

132 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

133 
	}
}

156 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

158 
ªgi°î°r
 
tmpReg
;

160 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

161 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

162 
tmpReg
.
r
[2] = 
b
;

163 
tmpReg
.
r
[3] = 
c
;

165 
	`c‹eCÆlSWI
(&
tmpReg
);

167  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

168 
	}
}

188 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

190 
ªgi°î°r
 
tmpReg
;

192 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

193 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

194 
tmpReg
.
r
[2] = 
b
;

195 
tmpReg
.
r
[3] = 0;

197 
	`c‹eCÆlSWI
(&
tmpReg
);

199  (Ë
tmpReg
.
r
[0];

200 
	}
}

216 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

218 
ªgi°î°r
 
tmpReg
;

220 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

221 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

222 
tmpReg
.
r
[2] = 
b
;

223 
tmpReg
.
r
[3] = 
c
;

225 
	`c‹eCÆlSWI
(&
tmpReg
);

226 
	}
}

241 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

243 
ªgi°î°r
 
tmpReg
;

245 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

246 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

247 
tmpReg
.
r
[2] = 
b
;

248 
tmpReg
.
r
[3] = 0;

250 
	`c‹eCÆlSWI
(&
tmpReg
);

252  (
UINT
Ë
tmpReg
.
r
[0];

253 
	}
}

269 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

271 
ªgi°î°r
 
tmpReg
;

273 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

274 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

275 
tmpReg
.
r
[2] = 
b
;

276 
tmpReg
.
r
[3] = 
c
;

278 
	`c‹eCÆlSWI
(&
tmpReg
);

279 
	}
}

294 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

296 
ªgi°î°r
 
tmpReg
;

298 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

299 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

300 
tmpReg
.
r
[2] = 
b
;

301 
tmpReg
.
r
[3] = 0;

303 
	`c‹eCÆlSWI
(&
tmpReg
);

305  (
UINT
Ë
tmpReg
.
r
[0];

306 
	}
}

321 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

323 
ªgi°î°r
 
tmpReg
;

325 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

326 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

327 
tmpReg
.
r
[2] = 
b
;

328 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

330 
	`c‹eCÆlSWI
(&
tmpReg
);

331 
	}
}

346 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

348 
ªgi°î°r
 
tmpReg
;

350 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

351 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

352 
tmpReg
.
r
[2] = 
b
;

353 
tmpReg
.
r
[3] = 0;

355 
	`c‹eCÆlSWI
(&
tmpReg
);

357  (*)
tmpReg
.
r
[0];

358 
	}
}

360 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

362 
ªgi°î°r
 
tmpReg
;

364 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

365 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

366 
tmpReg
.
r
[2] = 
b
;

367 
tmpReg
.
r
[3] = 0;

369 
	`c‹eCÆlSWI
(&
tmpReg
);

370 
	}
}

384 
	$brögUpF©ÆEº‹
(
UID
 
a
)

386 
ªgi°î°r
 
tmpReg
;

388 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

389 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

390 
tmpReg
.
r
[2] = 0;

391 
tmpReg
.
r
[3] = 0;

393 
	`c‹eCÆlSWI
(&
tmpReg
);

394 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/com.c

73 
	~<°d¨g.h
>

75 
	~"../../c‹e/Æl.h
"

76 
	~"£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/readline.c

72 
	~<°rög.h
>

74 
	~"ty≥s.h
"

75 
	~"com.h
"

76 
	~"ªadlöe.h
"

78 
	#START
 ('A'-'@')

	)

79 
	#BACK
 ('B'-'@')

	)

80 
	#ERASE_FWD
 ('D'-'@')

	)

81 
	#END
 ('E'-'@')

	)

82 
	#FORWARD
 ('F'-'@')

	)

83 
	#ERASE
 ('H'-'@')

	)

84 
	#ERASE_EOL
 ('K'-'@')

	)

85 
	#ENTER
 ('M'-'@')

	)

86 
	#REDRAW
 ('R'-'@')

	)

87 
	#ERASE_LINE
 ('U'-'@')

	)

88 
	#ERASE_SOL
 ('W'-'@')

	)

90 
	#BACKSPACE
 ('H'-'@')

	)

91 
	#DELETE
 (0x7f)

	)

92 
	#LF
 ('\n')

	)

93 
	#CR
 ('\r')

	)

94 
	#CTRL_D
 ('D'-'@')

	)

96 
ªadC
();

97 
wrôeC
(
c
);

103 
	$x°æí
 (*
p
)

105 
n
=0;

107 *
p
++!=0Ë
n
++;

109  (
n
);

110 
	}
}

112 
	$x°r˝y
 (*
s
, *
t
)

114 (*
s
++ = *
t
++))

116 
	}
}

118 
	$xmemmove
(*
s
, *
t
,
n
)

120 
n
--Ë*
s
++ = *
t
++;

121 
	}
}

134 
	$back•a˚
 (
n
)

136 
n
--Ë
	`wrôeC
(
BACKSPACE
);

137 
	}
}

150 
	$backup
(*
buf„r
, 
pos
)

152 
	`back•a˚
(
	`x°æí
(&
buf„r
[
pos
]));

153 
	}
}

166 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

168 
c
;

170 
c
 = 
buf„r
[
pos
++];

172 
c
)

174 
	`wrôeC
(
c
);

175 
c
 = 
buf„r
[
pos
++];

177 
	}
}

191 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

193 
c
;

195 
	`wrôeC
(
CR
);

197 
c
 = *
¥om±
++;

199 
c
)

201 
	`wrôeC
(
c
);

202 
c
 = *
¥om±
++;

205 
	`ªdøw_eﬁ
(
buf„r
, 0);

206 
	`backup
(
buf„r
, 
pos
);

207 
	}
}

220 
	$dñëe
 (*
buf„r
, 
pos
)

222 i‡(
buf„r
[
pos
] == 0) ;

224 
	`x°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

225 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

226 
	`wrôeC
(' ');

227 
	`wrôeC
(
BACKSPACE
);

228 
	`backup
(
buf„r
, 
pos
);

231 
	}
}

245 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

247 *
s
 = &
buf„r
[
pos
];

249 
	`xmemmove
(
s
+1, s, 
	`x°æí
(s)+1);

250 
buf„r
[
pos
] = 
c
;

251 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

252 
pos
++;

253 
	`backup
(
buf„r
, 
pos
);

255  
pos
;

256 
	}
}

269 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

271 
pos
 = 0;

272 
c
;

276 
c
=
	`ªadC
();

278 i‡(
c
 =
CR
 || c =
LF
)

280 
buf„r
[
pos
] = 0;

281  
pos
;

284 i‡(
c
 =
CTRL_D
)

286 
buf„r
[0] = 0;

290 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

291 
buf„r
[
pos
++] = 
c
;

293 
	}
}

308 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

310 
i
;

311 
pos
 = 0;

312 
c
;

314 *
buf„r
 = 0;

315 
	`wrôe0
(
¥om±
);

319 
c
 = 
	`ªadC
();

320 i‡(
c
 =
DELETE
Ë¯
ERASE
;

321 i‡(
c
 < ' ')

323 
c
)

325 
START
:

326 
	`back•a˚
(
pos
);

327 
pos
 = 0;

329 
BACK
:

330 i‡(
pos
 > 0)

332 
	`wrôeC
(
BACKSPACE
);

333 
pos
--;

336 
ERASE_FWD
:

337 i‡(
	`x°æí
(
buf„r
) == 0)

339 
	`wrôe0
("*EOF*\r\n");

342 
	`dñëe
(
buf„r
, 
pos
);

344 
END
:

345 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

346 
pos
 = 
	`x°æí
(
buf„r
);

348 
FORWARD
:

349 i‡(
buf„r
[
pos
])

351 
	`wrôeC
(
buf„r
[
pos
]);

352 
pos
++;

355 
ERASE
:

356 i‡(
pos
 > 0)

358 
	`wrôeC
(
BACKSPACE
);

359 
pos
--;

360 
	`dñëe
(
buf„r
, 
pos
);

363 
ENTER
:

364 
	`wrôeC
(
CR
);

365 
	`wrôeC
(
LF
);

366  
	`x°æí
(
buf„r
);

367 
REDRAW
:

368 
	`wrôeC
(
LF
);

369 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

371 
ERASE_LINE
:

372 
	`back•a˚
(
pos
);

373 
i
 = 
pos
 = 
	`x°æí
(
buf„r
);

375 
i
--Ë
	`wrôeC
(' ');

377 
	`back•a˚
(
pos
);

378 
pos
 = 0;

379 
buf„r
[0] = 0;

382 } i‡(
	`x°æí
(
buf„r
Ë< 
maxÀn
)

383 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

385 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/serial.c

72 
	~"ty≥s.h
"

73 
	~"../../devi˚s/ddf_io.h
"

74 
	~"../../devi˚s/ddf_ty≥s.h
"

76 
	~"swis.h
"

77 
	~"../../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
 (
UINT
 
com
)

112 i‡(
com
>1Ë{ 
FALSE
;}

114 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_CM920IAP
,
com
);

118 i‡(
ho°
==0Ë{ 
FALSE
;}

122 
£rül
)

124 
DEVICE_IN_USE
:

125 
DEVICE_UNKNOWN
:

127  
FALSE
;

130  
TRUE
;

131 
	}
}

143 
	$wrôeCh¨ToHo°
 (
c
)

144 {
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);
	}
}

156 
	$¥ötToHo°
 (*
s
)

158 *
s
!=0)

160 
	`wrôeCh¨ToHo°
 (*
s
++);

162 
	}
}

174 
	$ªadCh¨FromHo°
 ()

175 { ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);
	}
}

188 
	$˛o£Ho°
 ()

190 i‡(
ho°
==0Ë 
FALSE
;

192  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

193 
	}
}

206 
	$b™√r
 ()

208 
	`¥ötToHo°
 ("\n\r");

209 
	`¥ötToHo°
 ("\n\rSimple Little OS - mmuSLOS (0.03)\n\r");

210 
	`¥ötToHo°
 ("- initialized ...... ok\n\r");

211 
	`¥ötToHo°
 ("-Ñunning on ....... cm920iap \n\r");

212 
	`¥ötToHo°
 ("- simple shell .....áctive\n\r");

213 
	`¥ötToHo°
 ("\n\r");

214 
	`¥ötToHo°
 ("\n\r");

215 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/shell.c

73 
	~"ty≥s.h
"

74 
	~"ªadlöe.h
"

75 
	~"com.h
"

91 
	$shñl
 ()

93 
CÆlBack
 
cb
;

94 
Àn
;

98 
Àn
 = 
	`ªadLöe
("cm920üp: ", 
comm™d_löe
, 255);

99 
cb
 = 
	`CLI
(
comm™d_löe
);

100 } !
cb
);

102 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/shell.h

73 
	~"£rül.h
"

89 
shñl
();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/start.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
_°¨t
,
	g°¨t
,
	g_maöCRTSèπup


25 .
globÆ
 
	gc‹eCÆlSWI


26 .
íåy


28 
_°¨t
:

29 
°¨t
:

30 
_maöCRTSèπup
:

32 
LDR
 
Ã
,=
íåy


33 
MOV
 
pc
,
Ã


36 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


40 @ 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r0
)

43 
c‹eCÆlSWI
:

44 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

45 
MOV
 
r4
,
r0


46 
LDMIA
 
r4
,{
r0
-
r3
}

47 
SWI
 5075

48 
STMIA
 
r4
,{
r0
-
r3
}

49 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

50 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/startx.c

78 
	~"ty≥s.h
"

79 
	~"£rül.h
"

80 
	~"shñl.h
"

86 
	#COM1
 (1)

	)

87 
	#COM0
 (0)

	)

93 
b™√r
 ();

115 
	$íåy
()

126 if(
	`›íHo°
 (
COM0
)==
TRUE
)

128 
	`b™√r
 ();

129 
	`shñl
 ();

139 
	`˛o£Ho°
 ();

140 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/swiapi.c

71 
	~"../../cm920üp/evíts/swis.h
"

72 
	~"../../devi˚s/ddf_‰ame.h
"

78 
	#UINT
 

	)

86 
	mr
[4];

87 } 
	tªgi°î°r
;

93 
ªgi°î°r
 
	grs
;

99 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

121 
	$evítIODevi˚Inô
()

123 
ªgi°î°r
 
tmpReg
;

125 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

126 
tmpReg
.
r
[1] = 0;

127 
tmpReg
.
r
[2] = 0;

128 
tmpReg
.
r
[3] = 0;

130 
	`c‹eCÆlSWI
 (&
tmpReg
);

132 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

133 
	}
}

156 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

158 
ªgi°î°r
 
tmpReg
;

160 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

161 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

162 
tmpReg
.
r
[2] = 
b
;

163 
tmpReg
.
r
[3] = 
c
;

165 
	`c‹eCÆlSWI
(&
tmpReg
);

167  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

168 
	}
}

188 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

190 
ªgi°î°r
 
tmpReg
;

192 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

193 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

194 
tmpReg
.
r
[2] = 
b
;

195 
tmpReg
.
r
[3] = 0;

197 
	`c‹eCÆlSWI
(&
tmpReg
);

199  (Ë
tmpReg
.
r
[0];

200 
	}
}

216 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

218 
ªgi°î°r
 
tmpReg
;

220 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

221 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

222 
tmpReg
.
r
[2] = 
b
;

223 
tmpReg
.
r
[3] = 
c
;

225 
	`c‹eCÆlSWI
(&
tmpReg
);

226 
	}
}

241 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

243 
ªgi°î°r
 
tmpReg
;

245 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

246 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

247 
tmpReg
.
r
[2] = 
b
;

248 
tmpReg
.
r
[3] = 0;

250 
	`c‹eCÆlSWI
(&
tmpReg
);

252  (
UINT
Ë
tmpReg
.
r
[0];

253 
	}
}

269 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

271 
ªgi°î°r
 
tmpReg
;

273 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

274 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

275 
tmpReg
.
r
[2] = 
b
;

276 
tmpReg
.
r
[3] = 
c
;

278 
	`c‹eCÆlSWI
(&
tmpReg
);

279 
	}
}

294 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

296 
ªgi°î°r
 
tmpReg
;

298 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

299 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

300 
tmpReg
.
r
[2] = 
b
;

301 
tmpReg
.
r
[3] = 0;

303 
	`c‹eCÆlSWI
(&
tmpReg
);

305  (
UINT
Ë
tmpReg
.
r
[0];

306 
	}
}

321 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

323 
ªgi°î°r
 
tmpReg
;

325 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

326 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

327 
tmpReg
.
r
[2] = 
b
;

328 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

330 
	`c‹eCÆlSWI
(&
tmpReg
);

331 
	}
}

346 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

348 
ªgi°î°r
 
tmpReg
;

350 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

351 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

352 
tmpReg
.
r
[2] = 
b
;

353 
tmpReg
.
r
[3] = 0;

355 
	`c‹eCÆlSWI
(&
tmpReg
);

357  (*)
tmpReg
.
r
[0];

358 
	}
}

360 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

362 
ªgi°î°r
 
tmpReg
;

364 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

365 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

366 
tmpReg
.
r
[2] = 
b
;

367 
tmpReg
.
r
[3] = 0;

369 
	`c‹eCÆlSWI
(&
tmpReg
);

370 
	}
}

384 
	$brögUpF©ÆEº‹
(
UID
 
a
)

386 
ªgi°î°r
 
tmpReg
;

388 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

389 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

390 
tmpReg
.
r
[2] = 0;

391 
tmpReg
.
r
[3] = 0;

393 
	`c‹eCÆlSWI
(&
tmpReg
);

394 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/swis.h

76 #i‚de‡
SLOS


83 
	#SLOS
 5075

	)

89 
	#Evít_IODevi˚Inô
 0x800

	)

90 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

91 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

92 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

93 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

94 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

95 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

96 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

97 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

103 
	#BrögUp_Ba£
 0x700

	)

104 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

105 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

111 
	sSwiRegs


113 
	mr
[13];

114 
	m˝§
;

115 
	mpc
;

116 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

82 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

96 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

97 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

98 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

99 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

100 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

104 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

105 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

106 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

107 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

108 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

110 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

117 
	mÀd
[4];

118 
	muid
[4];

119 } 
	töã∫Æ_Àd°r
;

125 
öã∫Æ_Àd°r
 
	gdiodes
;

139 
	$Àd_öô
 ()

143 
PAUSE
;

145 
LED_ALL_OFF
;

149 
diodes
.
Àd
 [
RED
-1] = 
OFF
;

150 
diodes
.
Àd
 [
YELLOW
-1] = 
OFF
;

151 
diodes
.
Àd
 [
GREEN
-1] = 
OFF
;

152 
diodes
.
Àd
 [
GREEN2
-1] = 
OFF
;

154 
diodes
.
uid
 [
RED
-1] = 
NONE
;

155 
diodes
.
uid
 [
YELLOW
-1] = 
NONE
;

156 
diodes
.
uid
 [
GREEN
-1] = 
NONE
;

157 
diodes
.
uid
 [
GREEN2
-1] = 
NONE
;

159 
	}
}

172 
UID
 
	$Àd_›í
 (
maj‹
,
mö‹
)

174 
mö‹
 --;

176 i‡(
maj‹
==
DEVICE_LED_CM920IAP
)

178 i‡(
mö‹
<4)

180 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

182 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

183  
diodes
.
uid
[
mö‹
];

187  
DEVICE_IN_USE
;

192  
DEVICE_UNKNOWN
;

196  
DEVICE_NEXT
;

197 
	}
}

213 
	$Àd_˛o£
 (
UID
 
id
)

215 
x
;

217 
x
=0;x<=3;x++)

219 i‡(
diodes
.
uid
[
x
]==
id
)

221 
diodes
.
uid
 [
x
] = 
NONE
;

222  
DEVICE_SUCCESS
;

226  
DEVICE_UNKNOWN
;

227 
	}
}

241 
	$Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
)

243 
x
;

245 
PAUSE
;

247 
x
=0;x<=3;x++)

249 i‡(
diodes
.
uid
[
x
]==
id
)

251 i‡(
diodes
.
uid
[
x
]!=
NONE
)

253 
Àd_£t
 &= 1;

255 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

257 i‡(
Àd_£t
==
ON
)

259 
x
)

262 0 : 
LED_1_ON
; ;

263 1 : 
LED_2_ON
; ;

264 2 : 
LED_3_ON
; ;

265 3 : 
LED_4_ON
; ;

270 
x
)

272 0 : 
LED_1_OFF
; ;

273 1 : 
LED_2_OFF
; ;

274 2 : 
LED_3_OFF
; ;

275 3 : 
LED_4_OFF
; ;

281 
	}
}

293 
BYTE
 
	$Àd_ªad_bô
 (
UID
 
id
)

295 
x
;

297 
x
=0;x<=3;x++)

299 i‡(
diodes
.
uid
[
x
]==
id
)

301 i‡(
diodes
.
uid
[
x
]!=
NONE
)

303  
diodes
.
Àd
 [
x
];

313 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/led_driver.h

73 #i‚de‡
_DEVICE_CM920IAP_LED


75 
	#_DEVICE_CM920IAP_LED
 1

	)

77 
	#DEVICE_LED_CM920IAP
 55075

	)

88 
	#GREEN
 4

	)

89 
	#YELLOW
 3

	)

90 
	#RED
 2

	)

91 
	#GREEN2
 1

	)

94 
	#ON
 1

	)

95 
	#OFF
 0

	)

113 
Àd_öô
();

126 
UID
 
Àd_›í
(
devi˚
,
Àd
);

140 
Àd_˛o£
(
UID
 
id
);

154 
Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
);

166 
BYTE
 
Àd_ªad_bô
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_driver.c

23 
	~"../../devi˚s/ddf_‰ame.h
"

24 
	~"£rül_drivî.h
"

25 
	~"£rül_ma¸os.h
"

31 
	#DEVICE_SERIAL_CM920IAP
 55095

	)

39 
	mbaudøã
[2];

40 
	muid
[2];

41 } 
	töã∫Æ_£rül°r
;

47 
öã∫Æ_£rül°r
 
	gnode
;

64 
	$öã∫Æ_£rül_cm920üp_£tup
(
p‹t
, 
baudR©e
)

66 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_M
, ((
baudR©e
 & 0xf00) >> 8));

67 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_L
, (
baudR©e
 & 0xff));

68 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_H
, (
AMBA_UARTLCR_H_WLEN_8
 | 
AMBA_UARTLCR_H_FEN
));

69 
	}
}

81 
	$£rül_öô
()

86 
	`öã∫Æ_£rül_cm920üp_£tup
 (
INTEGRATOR_UART0_BASE
,
ARM_BAUD_9600
);

89 
	`öã∫Æ_£rül_cm920üp_£tup
 (
INTEGRATOR_UART1_BASE
,
ARM_BAUD_9600
);

93 
node
.
baudøã
[0] = 
ARM_BAUD_9600
;

94 
node
.
baudøã
[1] = 
ARM_BAUD_9600
;

95 
node
.
uid
[
COM0
] = 
NONE
;

96 
node
.
uid
[
COM1
] = 
NONE
;

97 
	}
}

112 
UID
 
	$£rül_›í
(
maj‹
,
com
)

114 i‡(
maj‹
==
DEVICE_SERIAL_CM920IAP
)

116 i‡(
com
==
COM0
 || com==
COM1
)

118 i‡(
node
.
uid
[
com
]!=
NONE
)

120  
DEVICE_IN_USE
;

124 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

125  
node
.
uid
[
com
];

130  
DEVICE_NEXT
;

131 
	}
}

145 
	$£rül_˛o£
(
UID
 
id
)

147 i‡(
node
.
uid
[
COM0
]==
id
)

149 
node
.
uid
[
COM0
] = 
NONE
;

150  
DEVICE_SUCCESS
;

153 i‡(
node
.
uid
[
COM1
]==
id
)

155 
node
.
uid
[
COM1
] = 
NONE
;

156  
DEVICE_SUCCESS
;

159  
DEVICE_UNKNOWN
;

160 
	}
}

174 
	$öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
)

176  
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

177 
	`PUT_CHAR
(
p‹t
,
c
);

178 
	}
}

191 
	$£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
)

194 i‡(
node
.
uid
[
COM0
]==
id
)

196 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART0_BASE
,
d©a
);

200 i‡(
node
.
uid
[
COM1
]==
id
)

202 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART1_BASE
,
d©a
);

206 
	}
}

218 
BYTE
 
	$öã∫Æ_£rül_ªad
(
p‹t
)

221  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

223  
	`GET_CHAR
(
p‹t
);

224 
	}
}

235 
BYTE
 
	$£rül_ªad_byã
(
UID
 
id
)

237 i‡(
node
.
uid
[
COM0
]==
id
)

239  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART0_BASE
);

242 i‡(
node
.
uid
[
COM1
]==
id
)

244  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART1_BASE
);

248 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_driver.h

82 
£rül_öô
();

95 
UID
 
£rül_›í
(
devi˚
,
ign‹ed
);

109 
£rül_˛o£
(
UID
 
id
);

121 
£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
£rül
);

132 
BYTE
 
£rül_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_macros.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

5 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

7 
	#AMBA_UARTDR
 0x00

	)

8 
	#AMBA_UARTRSR
 0x04

	)

9 
	#AMBA_UARTECR
 0x04

	)

10 
	#AMBA_UARTLCR_H
 0x08

	)

11 
	#AMBA_UARTLCR_M
 0x0C

	)

12 
	#AMBA_UARTLCR_L
 0x10

	)

13 
	#AMBA_UARTCR
 0x14

	)

14 
	#AMBA_UARTFR
 0x18

	)

15 
	#AMBA_UARTIIR
 0x1C

	)

16 
	#AMBA_UARTICR
 0x1C

	)

17 
	#AMBA_UARTILPR
 0x20

	)

19 
	#AMBA_UARTRSR_OE
 0x08

	)

20 
	#AMBA_UARTRSR_BE
 0x04

	)

21 
	#AMBA_UARTRSR_PE
 0x02

	)

22 
	#AMBA_UARTRSR_FE
 0x01

	)

24 
	#AMBA_UARTFR_TXFF
 0x20

	)

25 
	#AMBA_UARTFR_RXFE
 0x10

	)

26 
	#AMBA_UARTFR_BUSY
 0x08

	)

27 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

29 
	#AMBA_UARTCR_RTIE
 0x40

	)

30 
	#AMBA_UARTCR_TIE
 0x20

	)

31 
	#AMBA_UARTCR_RIE
 0x10

	)

32 
	#AMBA_UARTCR_MSIE
 0x08

	)

33 
	#AMBA_UARTCR_IIRLP
 0x04

	)

34 
	#AMBA_UARTCR_SIREN
 0x02

	)

35 
	#AMBA_UARTCR_UARTEN
 0x01

	)

37 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

38 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

39 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

40 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

41 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

42 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

43 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

44 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

45 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

47 
	#AMBA_UARTIIR_RTIS
 0x08

	)

48 
	#AMBA_UARTIIR_TIS
 0x04

	)

49 
	#AMBA_UARTIIR_RIS
 0x02

	)

50 
	#AMBA_UARTIIR_MIS
 0x01

	)

53 
	#ARM_BAUD_460800
 1

	)

54 
	#ARM_BAUD_230400
 3

	)

55 
	#ARM_BAUD_115200
 7

	)

56 
	#ARM_BAUD_57600
 15

	)

57 
	#ARM_BAUD_38400
 23

	)

58 
	#ARM_BAUD_19200
 47

	)

59 
	#ARM_BAUD_14400
 63

	)

60 
	#ARM_BAUD_9600
 95

	)

61 
	#ARM_BAUD_4800
 191

	)

62 
	#ARM_BAUD_2400
 383

	)

63 
	#ARM_BAUD_1200
 767

	)

67 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

68 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

69 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

70 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

72 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

73 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

76 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

77 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

79 #i‚de‡
LLEVELIO


80 
	#LLEVELIO
 1

	)

81 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

82 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

83 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

84 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

85 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

86 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

87 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

88 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

91 
	#COM1
 (1)

	)

92 
	#COM0
 (0)

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"Àd_drivî.h
"

74 
	~"£rül_drivî.h
"

80 
	~"../../devi˚s/ddf_ty≥s.h
"

92 
devi˚_åì°r
 
	gdevi˚s
[] =

102 
DEVICE_LED_CM920IAP
,

103 
Àd_öô
,

104 
Àd_›í
,

105 
Àd_˛o£
,

106 
Àd_wrôe_bô
,

107 
Àd_ªad_bô
,

110 
DEVICE_SERIAL_CM920IAP
,

111 
£rül_öô
,

112 
£rül_›í
,

113 
£rül_˛o£
,

114 
£rül_wrôe_byã
,

115 
£rül_ªad_byã
,

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/events_init.c

91 
	$evítSîvi˚sInô
 ()

96 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/events_init.h

82 
evítSîvi˚sInô
 ();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/irq_handler.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
h™dÀr
.
s


55 @ * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 @ * 
OS
 : 
SLOS


57 @ * 
Pœtf‹m
 : 
I¡egøt‹
/
AP
 940

58 @ * 
Hi°‹y
 :

60 @ * 19
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
suµ‹t
 
I¡egøt‹
 940

63 @ * 30
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


64 @ * - 
ªmove
 
the
 
buâ⁄
 
£rvi˚
 
routöe


69 @ * 
EXPORT


72 .
ãxt


73 .
globÆ
 
evítsIRQH™dÀr


76 @ * 
IMPORT


79 .
evítsTickCM920IAPSîvi˚


80 .
kî√lScheduÀr


83 @ * 
ROUTINES


86 
CMRegi°îBa£
:

87 .
w‹d
 0x10000000

88 
IRQ0_BASE
:

89 .
w‹d
 0x14000000

91 .
equ
 
TIMERINT2
, 0x00000080

92 .
equ
 
STATUS
, 0x00000000

94 @ -- 
evíts_úq_h™dÀr
 ------------------------------------------------------

96 @ 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


97 @ 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

100 
evítsIRQH™dÀr
:

101 
SUB
 
r14
,Ñ14, #4

102 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} @ savêc⁄ãxt

103 
LDR
 
r0
, 
IRQ0_BASE
 @ 
Lﬂd
 
Ba£
 
addªss
 
of
 
I¡
 
Cål


104 
LDR
 
r0
, [r0,#STATUS] @ 
Ród
 
I¡îru±
 
°©us


105 
LDR
 
r1
, =0x000001f‡@ 
lﬂd
 
vÆue
 
to
 
mask
 
off
 
uµî
 
bôs


106 
AND
 
r0
,Ñ0, 
r1
 @ 
mask
 
off
 
unu£d
 
öãºu±s


107 
TST
 
r0
, #TIMERINT2

108 
BNE
 
evítsTickCM920IAPVíìr


109 
LDMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
pc
}^ @ 
unknown
 
evít
 
ign‹e


111 
evítsTickCM920IAPVíìr
:

112 
BL
 
evítsTickCM920IAPSîvi˚
 @ 
ª£t
 
timî


113 
B
 
kî√lScheduÀr


114 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/swi_handler.c

77 
	~"../../c‹e/Æl.h
"

85 
	#SYSTEM
 0x1f

	)

86 
	#SVC
 0x13

	)

87 
	#USER
 0x10

	)

91 
	#IRQoN
 0x40

	)

92 
	#IRQoFF
 0xc0

	)

96 
modifyC⁄åﬁCPSR
();

97 
brögUpSëR8fiq
();

98 
brögUpSëR9fiq
();

99 
brögUpSëR10fiq
();

101 
STATE
;

120 
CÆlBack
 
	$evítsSWIH™dÀr
(
swi_numbî
, 
SwiRegs
 *
r
)

122 
swi_numbî
)

129 
SLOS
:

131 
r
->r[0])

144 
BrögUp_Tø˚
:

146 
r
->r[1])

149 
	`brögUpSëR9fiq
 (
r
->r[2]);

153 
	`brögUpSëR10fiq
 (
r
->r[2]);

159 
BrögUp_F©ÆEº‹
:

160 
	`brögUpSëR8fiq
 (
r
->r[1]);

162 
ÁèÀº‹
: fatalerror;

172 
Evít_IODevi˚Inô
:

173 
	`ioInôülizeDrivîs
 ();

174 
r
->r[0] = 1;

175 
r
->r[1] = 2;

185 i‡(
STATE
!=1)

188 
asm
 volatile ("MSR CPSR_c,#0x5f");

191 
r
->r[0])

194 
Evít_IODevi˚O≥n
:

195 
r
->r[0] = (Ë
	`ioO≥nDrivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

198 
Evít_IODevi˚Clo£
:

199 
r
->r[0] = (Ë
	`ioClo£Drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

202 
Evít_IODevi˚WrôeByã
:

203 
	`ioWrôeByã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

206 
Evít_IODevi˚RódByã
:

207 
r
->r[0] = (Ë
	`ioRódByã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

210 
Evít_IODevi˚WrôeBô
:

211 
	`ioWrôeBô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

214 
Evít_IODevi˚RódBô
:

215 
r
->r[0] = (Ë
	`ioRódBô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

218 
Evít_IODevi˚WrôeBlock
:

219 
	`ioWrôeBlock
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

222 
Evít_IODevi˚RódBlock
:

223 
r
->r[0] = (Ë
	`ioRódBlock
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

228 
asm
 volatile ("MSR CPSR_c,#0xD3");

232 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/swis.h

76 #i‚de‡
SLOS


89 
	#SLOS
 5075

	)

105 
	#Evít_IODevi˚Inô
 0x800

	)

130 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

131 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

132 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

133 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

134 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

135 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

136 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

137 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

143 
	#BrögUp_Ba£
 0x700

	)

144 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

145 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

148 
	sSwiRegs
 {

149 
	mr
[13];

150 
	m˝§
;

151 
	mpc
;

152 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/tick_service.c

72 
	~"../hódîs/Àd.h
"

73 
	~"../hódîs/ma¸os.h
"

75 
	~"../../hódîs/≠i_ty≥s.h
"

81 
	#O√MûliSec⁄d
 93750000

	)

82 
	#Irq0
 0x14000000

	)

83 
	#I¡_E«bÀSë
 2

	)

99 
	gÀd_pul£
 = 0;

100 
UINT
 
	gøã
;

116 
	$evítTickInô
 (
UINT
 
m£c
)

118 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

126 
m£c
)

129 
øã
 = 2;

133 
øã
 = 24;

143 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

144 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

145 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

146 
	}
}

158 
	$evítTimîISR
 ()

160 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

168 
PAUSE
;

169 i‡–
Àd_pul£
 )

170 { 
LED_1_ON
; 
Àd_pul£
 = 0; }

172 { 
LED_1_OFF
; 
Àd_pul£
 = 1; }

181 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

182 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

183 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

184 
	}
}

186 
	$evítsTickCM920IAPSîvi˚
()

188 
	`evítTimîISR
 ();

189 
	}
}

201 
	$evítTickSèπ
 ()

203 vﬁ©ûê* 
IRQ
 = (*)
Irq0
;

204 *(
IRQ
 + 
I¡_E«bÀSë
) = 0x80;

205 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/tick_service.h

102 
evítTickInô
 (
UINT
 
m£c
);

114 
evíts_tick_cm940üp_£rvi˚
 ();

126 
evítTickSèπ
 ();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/all.h

67 #i‚de‡
_HEADERS_CM920IAP_ALL


69 
	#_HEADERS_CM920IAP_ALL
 1

	)

71 
	~"Àd.h
"

72 
	~"ma¸os.h
"

78 
	~"../evíts/tick_£rvi˚.h
"

80 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/led.h

80 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

96 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

97 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

98 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

99 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

100 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

104 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

105 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

106 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

107 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

108 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

110 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/macros.h

78 
	#Timî0
 0x13000000

	)

79 
	#Timî1
 0x13000100

	)

80 
	#Timî2
 0x13000200

	)

82 
	#Timî_Lﬂd
 0

	)

83 
	#Timî_VÆue
 1

	)

84 
	#Timî_C⁄åﬁ
 2

	)

85 
	#Timî_CÀ¨
 3

	)

91 
	#πc_Ba£
 0x15000000

	)

92 
	#πc_D©a
 0x00

	)

93 
	#πc_M©ch
 0x01

	)

94 
	#πc_Sèt
 0x02

	)

95 
	#πc_CÀ¨
 0x02

	)

96 
	#πc_Lﬂd
 0x03

	)

97 
	#πc_C⁄åﬁ
 0x04

	)

103 
	#TimîE«bÀ
 0x80

	)

104 
	#TimîPîiodic
 0x40

	)

105 
	#TimîDißbÀ
 0x00

	)

106 
	#TimîFªîun
 0x00

	)

107 
	#TimîPªsˇÀ
 0x00

	)

108 
	#TimîPªsˇÀ16
 0x04

	)

109 
	#TimîPªsˇÀ256
 0x08

	)

113 
	#IRQVe˘‹
 0x18

	)

116 
	#INTEGRATOR_CT_BASE
 0x13000000

	)

117 
	#INTEGRATOR_IC_BASE
 0x14000000

	)

118 
	#INTEGRATOR_RTC_BASE
 0x15000000

	)

119 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

120 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

121 
	#INTEGRATOR_KBD_BASE
 0x18000000

	)

122 
	#INTEGRATOR_MOUSE_BASE
 0x19000000

	)

124 
	#AMBA_UARTDR
 0x00

	)

125 
	#AMBA_UARTRSR
 0x04

	)

126 
	#AMBA_UARTECR
 0x04

	)

127 
	#AMBA_UARTLCR_H
 0x08

	)

128 
	#AMBA_UARTLCR_M
 0x0C

	)

129 
	#AMBA_UARTLCR_L
 0x10

	)

130 
	#AMBA_UARTCR
 0x14

	)

131 
	#AMBA_UARTFR
 0x18

	)

132 
	#AMBA_UARTIIR
 0x1C

	)

133 
	#AMBA_UARTICR
 0x1C

	)

134 
	#AMBA_UARTILPR
 0x20

	)

136 
	#AMBA_UARTRSR_OE
 0x08

	)

137 
	#AMBA_UARTRSR_BE
 0x04

	)

138 
	#AMBA_UARTRSR_PE
 0x02

	)

139 
	#AMBA_UARTRSR_FE
 0x01

	)

141 
	#AMBA_UARTFR_TXFF
 0x20

	)

142 
	#AMBA_UARTFR_RXFE
 0x10

	)

143 
	#AMBA_UARTFR_BUSY
 0x08

	)

144 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

146 
	#AMBA_UARTCR_RTIE
 0x40

	)

147 
	#AMBA_UARTCR_TIE
 0x20

	)

148 
	#AMBA_UARTCR_RIE
 0x10

	)

149 
	#AMBA_UARTCR_MSIE
 0x08

	)

150 
	#AMBA_UARTCR_IIRLP
 0x04

	)

151 
	#AMBA_UARTCR_SIREN
 0x02

	)

152 
	#AMBA_UARTCR_UARTEN
 0x01

	)

154 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

155 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

156 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

157 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

158 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

159 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

160 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

161 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

162 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

164 
	#AMBA_UARTIIR_RTIS
 0x08

	)

165 
	#AMBA_UARTIIR_TIS
 0x04

	)

166 
	#AMBA_UARTIIR_RIS
 0x02

	)

167 
	#AMBA_UARTIIR_MIS
 0x01

	)

170 
	#ARM_BAUD_460800
 1

	)

171 
	#ARM_BAUD_230400
 3

	)

172 
	#ARM_BAUD_115200
 7

	)

173 
	#ARM_BAUD_57600
 15

	)

174 
	#ARM_BAUD_38400
 23

	)

175 
	#ARM_BAUD_19200
 47

	)

176 
	#ARM_BAUD_14400
 63

	)

177 
	#ARM_BAUD_9600
 95

	)

178 
	#ARM_BAUD_4800
 191

	)

179 
	#ARM_BAUD_2400
 383

	)

180 
	#ARM_BAUD_1200
 767

	)

184 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

185 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

186 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

187 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

189 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

190 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

193 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

194 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

196 #i‚de‡
LLEVELIO


197 
	#LLEVELIO
 1

	)

198 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

199 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

200 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

201 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

202 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

203 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

204 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

205 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/init.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
öô
.
s


8 @ * 
OS
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 14 
July
 2003 
Andªw
 
N
. 
Sloss


13 @ * - 
£∑øãd
 
the
 
pcbSëUp
 
routöe


17 .
ãxt


18 .
code
 32

19 .
Æign
 0

20 .
globÆ
 
c‹eInôülize


21 .
C_E¡ry


22 .
MmuPCB_PåTask2


23 .
MmuPCB_PåTask3


24 .
mpuInôFlush


25 .
C_E¡ryTask2


26 .
C_E¡ryTask3


27 .
MmuPCB_CuºítTask


28 .
≠∂iˇti⁄Lﬂdî


29 .
pcbSëUp


30 .
globÆ
 
öôSëUpSècks


32 .
c‹eCÆlSWI


34 .
equ
 
IRQ32md
, 0x12

35 .
equ
 
SVC32md
, 0x13

36 .
equ
 
SYS32md
, 0x1f

37 .
equ
 
NoI¡
, 0xc0

39 
c‹eInôülize
:

41 
BL
 
mmuFlushCache


42 
BL
 
brögUpInôFIQRegi°îs


43 
B
 
≠∂iˇti⁄Lﬂdî


51 
öôSëUpSècks
:

53 
MOV
 
•
,#0
x10000
 @ ; 
Kî√l
 
Sèck


54 
MSR
 
	gCPSR_c
,#NoI¡|
SYS32md


55 
LDR
 
	g•
,=0x408000 @ ; 
Sy°em
 
	gSèck
=0x408000

56 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


57 
MOV
 
	g•
,#0
	gx9000
 @ ; 
IRQ
 
	gSèck
 = 0x9000

58 
MSR
 
CPSR_c
,#NoI¡|
SVC32md


66 
LDR
 
	gr0
,=0x400000 @ ; 
	gTask
 2

67 
LDR
 
	gr1
,=
MmuPCB_PåTask2


68 
LDR
 
r2
,=0x408000

69 
BL
 
pcbSëUp


71 
LDR
 
r0
,=0x400000 @ ; 
	gTask
 3

72 
LDR
 
	gr1
,=
MmuPCB_PåTask3


73 
LDR
 
r2
,=0x408000

74 
BL
 
pcbSëUp


76 @ ; -- 
£t
 
the
 
cuºít
 
ID
 
to
 
	gTASK1
 ...........

78 
LDR
 
	gr0
, =
MmuPCB_CuºítTask


79 
MOV
 
r1
, #0

80 
STR
 
	gr1
,[
r0
] @ ; 
fú°
 
èsk
 
	gID
=0

81 
LDR
 
Ã
,=
C_E¡ry


82 
MOV
 
pc
,
	gÃ
 @ ; 
ˇŒ
 
	gC_E¡ry


83 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/mmupcb.s

2 @ ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


8 @ ; * 
	gNOTE
: 
This
 
fûe
 
is
 
autom©iˇŒy
 
gíî©ed


11 @ ; * 
	gProje˘
 : 
mmuSLOS


12 @ ; * 
	gVîsi⁄
 : 0.03

13 @ ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


17 .
globÆ
 
	gMmuPCB_CuºítTask


18 .
globÆ
 
	gMmuPCB_TabÀ


19 .
globÆ
 
	gMmuPCB_IRQSèck


20 .
globÆ
 
	gMmuPCB_PåCuºítTask


21 .
globÆ
 
	gMmuPCB_PåNextTask


23 .
globÆ
 
	gMmuPCB_PåTask1


24 .
globÆ
 
	gMmuPCB_BŸtomTask1


25 .
globÆ
 
	gMmuPCB_Regi⁄TabÀ1


27 .
globÆ
 
	gMmuPCB_PåTask2


28 .
globÆ
 
	gMmuPCB_BŸtomTask2


29 .
globÆ
 
	gMmuPCB_Regi⁄TabÀ2


31 .
globÆ
 
	gMmuPCB_PåTask3


32 .
globÆ
 
	gMmuPCB_BŸtomTask3


33 .
globÆ
 
	gMmuPCB_Regi⁄TabÀ3


34 .
globÆ
 
	gpcbSëUp


36 @ ; -- 
	gpcbSëUp
 ----------------------------------------------------------------

38 @ ; 
	gDes¸ùti⁄
 : 
PCB
 
£tup


40 @ ; 
	gP¨amëîs
 : 
r0
=<
thªad
 
íåy
 
addªss
>

41 @ ; 
	gr1
=<
PCB
 
Addªss
>

42 @ ; 
	gr2
=<
°ack
 
addªss
>

43 @ ; 
	gRëu∫
 : 
£tup
 
PCB


44 @ ; 
	gNŸes
 :

47 
	gpcbSëUp
:

48 
STR
 
r0
,[
r1
,#-4] @ ; 
	gPCB
[-4]=
C_TaskE¡ry
<2>

49 
STR
 
r0
,[
r1
,#-64] @ ; 
	gPCB
[-64]=
C_TaskE¡ry
<2>

50 
STR
 
r2
,[
r1
,#-8] @ ; 
	gPCB
[-8]=<
°ack
 
addªss
>

51 
MOV
 
r0
,#0
x50


52 
STR
 
	gr0
,[
r1
,#-68] @ ; 
	gPCB
[-68]=
iFt_U£r


53 
MOV
 
pc
,
Ã


55 
	gMmuPCB_TabÀ
:

57 .
w‹d
 
MmuPCB_PåTask1


58 .
w‹d
 
MmuPCB_PåTask2


59 .
w‹d
 
MmuPCB_PåTask3


61 
MmuPCB_IRQSèck
:

62 .
w‹d
 0x9000 @ ; 
ªÆ
 
vÆue


64 
	gMmuPCB_PåCuºítTask
:

65 .
w‹d
 0x1

67 
MmuPCB_PåNextTask
:

68 .
w‹d
 0x1

70 
MmuPCB_CuºítTask
:

71 .
w‹d
 0x1

74 @ ; 
	$Task
(1): 
FuŒ
 
MMU
 
PCB


75 @ ; 
mmupcb


77 @ ; 
PCB


78 @ ; 
Regi⁄TabÀ


79 @ ; 
	}
}

82 
	gMmuPCB_BŸtomTask1
:

83 .
skù
 72

84 
MmuPCB_PåTask1
:

86 
MmuPCB_Regi⁄TabÀ1
:

87 .
w‹d
 0x400000 @ ; 
vútuÆ
 
ba£
 
	gaddªss


88 .
	gw‹d
 8 @ ; 
VútuÆ
 
addªss
 (
∑ge
 
size
 8x4
k
=32k)

89 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

90 .
	gw‹d
 6 @ ; 
	gCWT


91 .
	gw‹d
 1 @ ; 
	gACTIVE


92 .
	gw‹d
 0x3c400 @ ; 
L2
 
Ba£
 
Page
 
TabÀ
 
	gAddªss


93 .
	gw‹d
 1 @ ; 
Cﬂr£
 
G™uÆôy
 (=4
k
)

94 .
w‹d
 0x03 @ ; 
	gDOM


95 .
	gw‹d
 0x50000 @ ; 
Physiˇl
 
	gAddªss


96 .
	gw‹d
 0x20000 @ ; 
Lﬂd
 
	gAddªss


99 @ ; 
	$Task
(2): 
FuŒ
 
MMU
 
PCB


100 @ ; 
mmupcb


102 @ ; 
PCB


103 @ ; 
Regi⁄TabÀ


104 @ ; 
	}
}

107 
	gMmuPCB_BŸtomTask2
:

108 .
skù
 72

109 
MmuPCB_PåTask2
:

111 
MmuPCB_Regi⁄TabÀ2
:

112 .
w‹d
 0x400000 @ ; 
vútuÆ
 
ba£
 
	gaddªss


113 .
	gw‹d
 8 @ ; 
VútuÆ
 
addªss
 (
∑ge
 
size
 8x4
k
=32k)

114 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

115 .
	gw‹d
 6 @ ; 
	gCWT


116 .
	gw‹d
 1 @ ; 
	gACTIVE


117 .
	gw‹d
 0x3c800 @ ; 
L2
 
Ba£
 
Page
 
TabÀ
 
	gAddªss


118 .
	gw‹d
 1 @ ; 
Cﬂr£
 
G™uÆôy
 (=4
k
)

119 .
w‹d
 0x03 @ ; 
	gDOM


120 .
	gw‹d
 0x58000 @ ; 
Physiˇl
 
	gAddªss


121 .
	gw‹d
 0x28000 @ ; 
Lﬂd
 
	gAddªss


124 @ ; 
	$Task
(3): 
FuŒ
 
MMU
 
PCB


125 @ ; 
mmupcb


127 @ ; 
PCB


128 @ ; 
Regi⁄TabÀ


129 @ ; 
	}
}

132 
	gMmuPCB_BŸtomTask3
:

133 .
skù
 72

134 
MmuPCB_PåTask3
:

136 
MmuPCB_Regi⁄TabÀ3
:

137 .
w‹d
 0x400000 @ ; 
vútuÆ
 
ba£
 
	gaddªss


138 .
	gw‹d
 8 @ ; 
VútuÆ
 
addªss
 (
∑ge
 
size
 8x4
k
=32k)

139 .
w‹d
 (3<<4)+(3Ë@ ; 
≥rmissi⁄s
 (
RWXRWX
)

140 .
	gw‹d
 6 @ ; 
	gCWT


141 .
	gw‹d
 1 @ ; 
	gACTIVE


142 .
	gw‹d
 0x3cc00 @ ; 
L2
 
Ba£
 
Page
 
TabÀ
 
	gAddªss


143 .
	gw‹d
 1 @ ; 
Cﬂr£
 
G™uÆôy
 (=4
k
)

144 .
w‹d
 0x03 @ ; 
	gDOM


145 .
	gw‹d
 0x60000 @ ; 
Physiˇl
 
	gAddªss


146 .
	gw‹d
 0x30000 @; 
Lﬂd
 
	gAddªss


147 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/all.h

71 #i‚de‡
_CORE_ALL


73 
	#_CORE_ALL
 1

	)

75 
	~"../hódîs/≠i_ty≥s.h
"

76 
	~"../devi˚s/ddf_io.h
"

77 
	~<as£π.h
>

78 
	~<time.h
>

79 
	~"../cm920üp/hódîs/Æl.h
"

80 
	~"../hódîs/≠i_devi˚.h
"

81 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/cinit.c

81 
	~"Æl.h
"

82 
	~"../cm920üp/evíts/evíts_öô.h
"

83 
	~"../mem‹y/utû.h
"

91 
	#DEVICESINIT
 1

	)

92 
	#SERVICESINIT
 2

	)

93 
	#TICKINIT
 3

	)

94 
	#CINITINIT
 4

	)

95 
	#TICKSTART
 5

	)

96 
	#MMUSETUP
 6

	)

97 
	#ENTERTASK
 7

	)

99 
	#LOW_LEVEL_INITIALIZATION
 1

	)

100 
	#BOOT_SLOS
 2

	)

112 
	gSTATE
;

118 
swôchOnSy°em
 ();

134 
	$cöô_öô
 ()

136 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

148 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

158 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

167 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

168 
	}
}

180 
	$C_E¡ry
 ( )

195 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

205 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

214 
	`Œåa˚
(
	`mem‹yMmuSy°em
(),
MMUSETUP
);

223 
STATE
=
BOOT_SLOS
;

225 
	`Œåa˚
(
	`swôchOnSy°em
(),
ENTERTASK
);

235 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/jump.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
jump
.
s


55 @ * 
Des¸ùti⁄
 : 
jumps
 
öto
 
the
 
fú°
 
èsk


56 @ * 
OS
 : 
mpuSLOS
 0.03

57 @ * 
Hi°‹y
 :

59 @ * 14
th
 
July
 2002 
Andªw
 
N
. 
Sloss


60 @ * - 
added
 
a
 
√w
 
jump
 
mech™ism


64 .
ãxt


65 .
code
 32

66 .
Æign
 0

67 .
globÆ
 
jumpToTask1


69 @ -- 
JumpToTask1
 --------------------------------------------------------------

71 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
SPSR
 
to
 
U£r
 
Mode
 
™d
 
íabÀs
 
IRQ
's 

72 @ 
P¨amëîs
 : 
r0
 - 
addªss
 
⁄
 
èsk1


73 @ 
Rëu∫
 : 
√vî


74 @ 
NŸes
 : 
this
 
routöe
 
is
 
ªquúed
 
MPU
 
vîsi⁄
 
of
 
the


75 @ 
code
.

78 
jumpToTask1
:

80 
MRS
 
r1
,
SPSR


81 
MOV
 
r1
,#0
x50


82 
MSR
 
SPSR_c
,
r1


83 
MOVS
 
pc
,
r0


84 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/swiapi.c

72 
	~"../cm920üp/evíts/swis.h
"

73 
	~"../devi˚s/ddf_‰ame.h
"

79 
	#UINT
 

	)

87 
	mr
[4];

88 } 
	tªgi°î°r
;

90 
ªgi°î°r
 
	grs
;

96 
c‹eCÆlSWI
 (
ªgi°î°r
 *
r
);

118 
	$evítIODevi˚Inô
()

120 
ªgi°î°r
 
tmpReg
;

122 
tmpReg
.
r
[0] = 
Evít_IODevi˚Inô
;

123 
tmpReg
.
r
[1] = 0;

124 
tmpReg
.
r
[2] = 0;

125 
tmpReg
.
r
[3] = 0;

127 
	`c‹eCÆlSWI
 (&
tmpReg
);

129 i‡(
tmpReg
.
r
[0]!=1 ||ÅmpReg.r[1]!=2) { 999);}

130 
	}
}

153 
devi˚_åì°r
 *
	$evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
)

155 
ªgi°î°r
 
tmpReg
;

157 
tmpReg
.
r
[0] = 
Evít_IODevi˚O≥n
;

158 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

159 
tmpReg
.
r
[2] = 
b
;

160 
tmpReg
.
r
[3] = 
c
;

162 
	`c‹eCÆlSWI
(&
tmpReg
);

164  (
devi˚_åì°r
 *)
tmpReg
.
r
[0];

165 
	}
}

185 
	$evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

187 
ªgi°î°r
 
tmpReg
;

189 
tmpReg
.
r
[0] = 
Evít_IODevi˚Clo£
;

190 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

191 
tmpReg
.
r
[2] = 
b
;

192 
tmpReg
.
r
[3] = 0;

194 
	`c‹eCÆlSWI
(&
tmpReg
);

196  (Ë
tmpReg
.
r
[0];

197 
	}
}

213 
	$evítIODevi˚WrôeByã
(
UINT
 
a
,UINT 
b
, UINT 
c
)

215 
ªgi°î°r
 
tmpReg
;

217 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeByã
;

218 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

219 
tmpReg
.
r
[2] = 
b
;

220 
tmpReg
.
r
[3] = 
c
;

222 
	`c‹eCÆlSWI
(&
tmpReg
);

223 
	}
}

238 
UINT
 
	$evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

240 
ªgi°î°r
 
tmpReg
;

242 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódByã
;

243 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

244 
tmpReg
.
r
[2] = 
b
;

245 
tmpReg
.
r
[3] = 0;

247 
	`c‹eCÆlSWI
(&
tmpReg
);

249  (
UINT
Ë
tmpReg
.
r
[0];

250 
	}
}

266 
	$evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
)

268 
ªgi°î°r
 
tmpReg
;

270 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBô
;

271 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

272 
tmpReg
.
r
[2] = 
b
;

273 
tmpReg
.
r
[3] = 
c
;

275 
	`c‹eCÆlSWI
(&
tmpReg
);

276 
	}
}

291 
UINT
 
	$evítIODevi˚RódBô
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

293 
ªgi°î°r
 
tmpReg
;

295 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBô
;

296 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

297 
tmpReg
.
r
[2] = 
b
;

298 
tmpReg
.
r
[3] = 0;

300 
	`c‹eCÆlSWI
(&
tmpReg
);

302  (
UINT
Ë
tmpReg
.
r
[0];

303 
	}
}

318 
	$evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
, *
c
)

320 
ªgi°î°r
 
tmpReg
;

322 
tmpReg
.
r
[0] = 
Evít_IODevi˚WrôeBlock
;

323 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

324 
tmpReg
.
r
[2] = 
b
;

325 
tmpReg
.
r
[3] = (
UINT
Ë
c
;

327 
	`c‹eCÆlSWI
(&
tmpReg
);

328 
	}
}

343 *
	$evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
)

345 
ªgi°î°r
 
tmpReg
;

347 
tmpReg
.
r
[0] = 
Evít_IODevi˚RódBlock
;

348 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

349 
tmpReg
.
r
[2] = 
b
;

350 
tmpReg
.
r
[3] = 0;

352 
	`c‹eCÆlSWI
(&
tmpReg
);

354  (*)
tmpReg
.
r
[0];

355 
	}
}

357 
	$brögUpTø˚
(
UINT
 
a
, 
UID
 
b
)

359 
ªgi°î°r
 
tmpReg
;

361 
tmpReg
.
r
[0] = 
BrögUp_Tø˚
;

362 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

363 
tmpReg
.
r
[2] = 
b
;

364 
tmpReg
.
r
[3] = 0;

366 
	`c‹eCÆlSWI
(&
tmpReg
);

367 
	}
}

381 
	$brögUpF©ÆEº‹
(
UID
 
a
)

383 
ªgi°î°r
 
tmpReg
;

385 
tmpReg
.
r
[0] = 
BrögUp_F©ÆEº‹
;

386 
tmpReg
.
r
[1] = (
UINT
Ë
a
;

387 
tmpReg
.
r
[2] = 0;

388 
tmpReg
.
r
[3] = 0;

390 
	`c‹eCÆlSWI
(&
tmpReg
);

391 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
 ()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/uid.h

71 
	~"../hódîs/≠i_ty≥s.h
"

73 
	#NONE
 0

	)

97 
UID
 
uid_gíî©e
 ();

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/data.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eD©aAb‹tH™dÀr


23 
c‹eD©aAb‹tH™dÀr
:

24 
B
 
c‹eD©aAb‹tH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a


98 
	msize
;

99 *
	md©a
;

100 } 
	tblock_d©a°r
;

110 
	sdevi˚_åì


120 
	m«me
[12];

129 
UID
 
	mdrivî_id
;

139 (*
	möô
)();

153 
UID
 (*
›í
)(, );

166 (*
	m˛o£
Ë(
	mUID
);

183 (*
	mbyã
)(
	mUID
, 
	mBYTE
);

193 (*
	mbô
)(
	mUID
, 
	mBYTE
);

203 (*
	mblock
)(
	mUID
, 
	mblock_d©a°r
 *);

205 } 
	mwrôe
;

223 
BYTE
 (*
byã
)(
	mUID
);

234 
BYTE
 (*
bô
)(
	mUID
);

244 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

246 } 
	mªad
;

248 } 
	tdevi˚_åì°r
 ;

250 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_io.c

73 
	~"../cm920üp/devi˚s/åì.h
"

89 
	$ioInôülizeDrivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
 (
id
);

147 
	}
}

161 
	$ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
 (
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
 (
id
);

185 
	}
}

199 
	$ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
 (
id
,
bô
);

204 
	}
}

218 
BYTE
 
	$ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

220 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

222  
d
->
ªad
.
	`byã
 (
id
);

223 
	}
}

237 
	$ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

239 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

241 
d
->
wrôe
.
	`block
 (
id
,
block
);

242 
	}
}

256 
block_d©a°r
 *
	$ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
)

258 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

260  
d
->
ªad
.
	`block
 (
id
);

261 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_io.h

73 
	~"ddf_‰ame.h
"

89 
ioInôülizeDrivîs
();

103 
devi˚_åì°r
 *
ioO≥nDrivî
(*
id
,
maj‹
,
mö‹
);

116 
ioClo£Drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

130 
ioWrôeBô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

144 
BYTE
 
ioRódBô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

159 
ioWrôeByã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

173 
BYTE
 
ioRódByã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

187 
ioWrôeBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
,
block_d©a°r
 *
block
);

201 
block_d©a°r
 *
ioRódBlock
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_types.h

72 #i‚de‡
_DEVICE_DDF_CM920IAP_TYPES


74 
	#_DEVICE_DDF_CM920IAP_TYPES
 1

	)

77 
	#DEVICE_LED_CM920IAP
 55075

	)

78 
	#DEVICE_SERIAL_CM920IAP
 55095

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/events/bringup.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
brögup


55 @ * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 @ * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 @ * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 @ * 
OS
 : 
SLOS
 0.09

59 @ * 
Pœtf‹m
 : 
gíîic


64 @ * 
EXPORT


67 .
ãxt


68 .
code
 32

69 .
Æign
 0

70 .
globÆ
 
brögUpSëR8fiq


71 .
globÆ
 
brögUpSëR9fiq


72 .
globÆ
 
brögUpSëR10fiq


73 .
globÆ
 
brögUpInôFIQRegi°îs


75 @ -- 
swôchToFIQMode
 ---------------------------------------------------------

76 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

77 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


78 @ 
Rëu∫
 : 
n⁄e
...

80 
swôchToFIQMode
:

82 
MOV
 
r3
,
Ã


83 
MRS
 
r1
,
CPSR


84 
BIC
 
r1
,r1,#0
x1f


85 
ORR
 
r1
,r1,#0
x11


86 
MSR
 
CPSR_c
,
r1


87 
MOV
 
pc
,
r3


89 @ -- 
swôchToSVCMode
 ---------------------------------------------------------

90 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

91 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


92 @ 
Rëu∫
 : 
n⁄e
...

95 
swôchToSVCMode
:

97 
MOV
 
r3
,
Ã


98 
MRS
 
r1
,
CPSR


99 
BIC
 
r1
,r1,#0
x1f


100 
ORR
 
r1
,r1,#0
x13


101 
MSR
 
CPSR_c
,
r1


102 
MOV
 
pc
,
r3


104 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

105 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

106 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


107 @ 
Rëu∫
 : 
n⁄e
...

109 
brögUpInôFIQRegi°îs
:

111 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


113 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

114 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


115 
MOV
 
r8
,#0 @ 
r8FIQ
=0

116 
MOV
 
r9
,#0 @ 
r9FIQ
=0

117 
MOV
 
r10
,#0 @ 
r10FIQ
=0

118 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


119 
MOV
 
pc
,
r2
 @  
back


121 @ -- 
brögUpSëR8fiq
 ---------------------------------------------------------

122 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

123 @ 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


124 @ 
Rëu∫
 : 
n⁄e
...

126 
brögUpSëR8fiq
:

128 @ 
r1
 - 
Áèl
 
îr‹
 
numbî


130 
MOV
 
r2
,
Ã
 @ 
c›y
 
lök
 
öto
Ñ2

131 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


132 
MOV
 
r8
,
r0
 @ 
r10_fiq
 =Ñ0

133 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


134 
MOV
 
pc
,
r2
 @  
back


136 @ -- 
brögUpSëR9fiq
 ---------------------------------------------------------

138 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

140 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


141 @ 
Rëu∫
 : 
n⁄e
...

144 
brögUpSëR9fiq
:

146 @ 
r2
 - 
íåy
 
åa˚
 
numbî


148 
MOV
 
r2
,
Ã


149 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


150 
MOV
 
r9
,
r0
 @ 
r9_fiq
 = 
r2


151 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


152 
MOV
 
pc
,
r2
 @  
back


154 @ -- 
brögup_£tR10fiq
 -------------------------------------------------------

156 @ 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

158 @ 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


159 @ 
Rëu∫
 : 
n⁄e
...

162 
brögUpSëR10fiq
:

164 @ 
r2
 - 
exô
 
åa˚
 
numbî


166 
MOV
 
r2
,
Ã


167 
BL
 
swôchToFIQMode
 @ 
ch™ge
 
FIQ


168 
MOV
 
r10
,
r0
 @ 
r10_fiq
 = 
r2


169 
BL
 
swôchToSVCMode
 @ 
ch™ge
 
SVC


170 
MOV
 
pc
,
r2
 @  
back


171 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/events/cpsr.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
˝§


55 @ * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 @ * 
OS
 : 
SLOS
 0.09

57 @ * 
Pœtf‹m
 : 
gíîic


58 @ * 
Hi°‹y
 :

60 @ * 15
th
 
July
 2002 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
a
 
hódî


66 @ * 
EXPORT


69 .
ãxt


70 .
code
 32

71 .
Æign
 0

72 .
globÆ
 
modifyC⁄åﬁCPSR


74 @ -- 
modifyC⁄åﬁCPSR
 --------------------------------------------------------

75 @ 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


76 @ 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


77 @ 
Rëu∫
 : 
n⁄e
...

79 
modifyC⁄åﬁCPSR
:

82 @ 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


83 @ 
°ack
.

84 @ 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

85 @ 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

86 @ 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

87 @ 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

90 
STMFD
 
r13
!,{
r3
}

91 
MOV
 
	gr3
,
r13


92 
ADD
 
	gr13
,r13,#4

93 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

96 @ 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


97 @ 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


100 
MRS
 
	gr1
,
CPSR


101 
BIC
 
	gr1
,r1,#0
xff


102 
ORR
 
	gr1
,r1,
r0


103 
MSR
 
	gCPSR_c
,
	gr1


106 @ 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


107 @ 
Rëu∫
 
to
 
the
 
	gˇŒì


110 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

111 
LDMFD
 
	gr3
,{r3}

112 
MOV
 
	gpc
,
	gÃ


113 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/fiq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
fiq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eFIQH™dÀr


23 
c‹eFIQH™dÀr
:

24 
B
 
c‹eFIQH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_device.h

74 
	~"../cm920üp/evíts/swis.h
"

96 
evítIODevi˚Inô
();

119 
devi˚_åì°r
 *
evítIODevi˚O≥n
(
UID
 *
a
, 
UINT
 
b
, UINT 
c
);

139 
evítIODevi˚Clo£
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

155 
evítIODevi˚WrôeByã
(
devi˚_åì°r
 *
a
, 
UID
 
b
, 
UINT
 
c
);

170 
UINT
 
evítIODevi˚RódByã
(
devi˚_åì°r
 *
a
,
UID
 
b
);

186 
evítIODevi˚WrôeBô
(
devi˚_åì°r
 *
a
,
UID
 
b
,
UINT
 
c
);

201 
UINT
 
evítIODevi˚RódBô
(
devi˚_åì°r
 *,
UID
);

216 
evítIODevi˚WrôeBlock
(
devi˚_åì°r
 *,
UID
,*);

231 *
evítIODevi˚RódBlock
(
devi˚_åì°r
 *
a
, 
UID
 
b
);

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_lldebug.h

72 #i‚de‡
LLDEBUG


73 
	#LLDEBUG
 1

	)

75 
	~"../cm920üp/evíts/swis.h
"

97 
brögUpTø˚
(
UINT
 
a
, 
UID
 
b
);

111 
brögUpF©ÆEº‹
(
UINT
 
a
);

130 
	#ENTRY
 123

	)

131 
	#EXIT
 321

	)

133 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

134 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

136 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

137 (
	gr
); \

138 
Œåa˚a·î
((
u
))

152 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_types.h

72 #i‚de‡
_HEADERS_API_TYPES


74 
	#_HEADERS_API_TYPES
 1

	)

76 
	tUINT
;

77 
	tUID
;

78 
	tBYTE
;

79 (*
	tCÆlBack
)();

80 
	tBOOL
;

82 
	#TRUE
 0

	)

83 
	#FALSE
 -1

	)

85 
	#DEVICE_SUCCESS
 0

	)

86 
	#DEVICE_IN_USE
 -1

	)

87 
	#DEVICE_UNKNOWN
 -2

	)

88 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/irq.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
úq
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eIRQH™dÀr


22 .
evítsIRQH™dÀr


24 
c‹eIRQH™dÀr
:

25 
B
 
evítsIRQH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/async.s

68 .
jumpToTask1


69 .
mmuCh™geC⁄åﬁ


70 .
mmuLﬂdTasks


71 .
mmuFlushCache


72 .
mmuAâachPT


73 .
mmuFlushTLB


74 .
MmuPCB_Regi⁄TabÀ1


76 .
globÆ
 
swôchOnSy°em


86 
swôchOnSy°em
:

92 
LDR
 
r0
,=0xc0000000

93 
LDR
 
r1
,=0xc0000000

94 
BL
 
mmuCh™geC⁄åﬁ


111 
LDR
 
r0
,=0x100d

112 
LDR
 
r1
,=0x100d

114 
BL
 
mmuCh™geC⁄åﬁ


120 
BL
 
mmuLﬂdTasks


126 
BL
 
mmuFlushCache


127 
BL
 
mmuFlushTLB


128 
LDR
 
r0
,=
MmuPCB_Regi⁄TabÀ1


129 
BL
 
mmuAâachPT


135 
MOV
 
r0
,#0
x400000


136 
B
 
jumpToTask1


137 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/mmu.s

51 .
globÆ
 
	gmmuCh™geC⁄åﬁ


52 .
globÆ
 
	gch™geDomAc˚ss


53 .
globÆ
 
	gmmuSëTTB


54 .
globÆ
 
	gmmuFlushTLB


55 .
globÆ
 
mmuFlushCache


57 
	gmmuFlushCache
:

58 
MOV
 
r0
, #0

59 
MCR
 
	gp15
,0,
	gr0
,
	gc7
,
	gc5
,0 @ ; 
Êush
 
i
 
Cache


60 
MCR
 
	gp15
,0,
	gr0
,
	gc7
,
	gc6
,0 @ ; 
Êush
 
d
 
ˇche


61 
MOV
 
	gpc
, 
Ã


69 
	gch™geDomAc˚ss
:

70 
MVN
 
r2
, 
	gr1
 @ ; 
övît
 
mask


71 
BIC
 
	gr3
, 
	gr0
, 
	gr2
 @ ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


72 
CMP
 
	gr3
, 
r0


73 
BNE
 
	gEº‹C⁄åﬁ
 @ ; 
vÆue
 
outside
 
of
 
mask
 
£t


74 
MRC
 
	gp15
, 0, 
	gr3
, 
	gc3
, 
	gc0
, 0 @ ; 
gë
 
domaö
 
ac˚ss
 
vÆues


75 
BIC
 
	gr3
,Ñ3, 
	gr1
 @ ; 
mask
 
off
 
bôs
 
th©
 
ch™ge


76 
ORR
 
	gr3
,Ñ3, 
	gr0
 @ ; 
£t
 
bôs
 
th©
 
ch™ge


77 
MCR
 
	gp15
, 0, 
	gr3
, 
	gc3
, 
	gc0
, 0 @ ; 
£t
 
domaö
 
ac˚ss
 
vÆues


78 
MOV
 
	gr0
, #0

79 
MOV
 
	gpc
, 
Ã


81 
	gmmuSëTTB
:

82 
MCR
 
p15
, 0, 
	gr0
, 
	gc2
, 
	gc0
, 0 @ ; 
Wrôe
 
TTB
 
wôh
 
ba£
 
addªss


83 
MOV
 
	gpc
, 
Ã


84 
	gmmuFlushTLB
:

85 
MOV
 
r0
, #0

86 
MCR
 
	gp15
, 0, 
	gr0
, 
	gc8
, 
	gc7
, 0 @ ; 
Êush
 
bŸh
 
the
 
TLBs


87 
MOV
 
	gpc
, 
Ã


94 
	gmmuCh™geC⁄åﬁ
:

95 
MVN
 
r2
, 
	gr1
 @ ; 
övît
 
mask


96 
BIC
 
	gr3
, 
	gr0
, 
	gr2
 @ ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


97 
CMP
 
	gr3
, 
r0


98 
BNE
 
	gEº‹C⁄åﬁ
 @ ; 
vÆue
 
outside
 
of
 
mask
 
£t


99 
MRC
 
	gp15
, 0, 
	gr3
, 
	gc1
, 
	gc0
, 0 @ ; 
gë
 
c⁄åﬁ
 
vÆues


100 
BIC
 
	gr3
,Ñ3, 
	gr1
 @ ; 
mask
 
off
 
bôs
 
th©
 
ch™ge


101 
ORR
 
	gr3
,Ñ3, 
	gr0
 @ ; 
£t
 
bôs
 
th©
 
ch™ge


102 
MCR
 
	gp15
, 0, 
	gr3
, 
	gc1
, 
	gc0
, 0 @ ; 
£t
 
c⁄åﬁ
 
vÆues


103 
MOV
 
	gr0
, #0

104 
MOV
 
	gpc
, 
Ã


107 
	gOutOfR™ge
:

108 
B
 
OutOfR™ge
 @ ; 
lo›
 
©
 
îr‹
 
debuggög


110 
	gEº‹C⁄åﬁ
:

111 
b
 
Eº‹C⁄åﬁ


112 
Eº‹Pîmissi⁄
: @ ; 
Eº‹
 
	gPîmissi⁄
 =4

113 
b
 
Eº‹Pîmissi⁄
 @ ; 
debug
 
ã°


114 
ADD
 
	gr0
,Ñ0, #1

115 
	gEº‹Size
: @ ; 
Eº‹
 
	gSize
 = 3

116 
ADD
 
r0
, 
	gr0
, #1

117 
	gEº‹Addªss
: @ ; 
Eº‹
 
Addªss
 
	gu«lig√d
 = 2

118 
ADD
 
r0
, 
	gr0
, #1

119 
	gEº‹Regi⁄
: @ ; 
Eº‹
 
Regi⁄
 
nŸ
 
	gvÆid
 = 1

120 
ADD
 
r0
, 
	gr0
, #1

121 
MOV
 
	gpc
, 
	gÃ


122 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/regions.h

74 
	#SZ_4G
 31

	)

75 
	#SZ_2G
 30

	)

76 
	#SZ_1G
 29

	)

77 
	#SZ_512M
 28

	)

78 
	#SZ_256M
 27

	)

79 
	#SZ_128M
 26

	)

80 
	#SZ_64M
 25

	)

81 
	#SZ_32M
 24

	)

82 
	#SZ_16M
 23

	)

83 
	#SZ_8M
 22

	)

84 
	#SZ_4M
 21

	)

85 
	#SZ_2M
 20

	)

86 
	#SZ_1M
 19

	)

87 
	#SZ_512K
 18

	)

88 
	#SZ_256K
 17

	)

89 
	#SZ_128K
 16

	)

90 
	#SZ_64K
 15

	)

91 
	#SZ_32K
 14

	)

92 
	#SZ_16K
 13

	)

93 
	#SZ_8K
 12

	)

94 
	#SZ_4K
 11

	)

98 
	#cb
 0x0

	)

99 
	#cB
 0x1

	)

100 
	#WT
 0x2

	)

101 
	#WB
 0x3

	)

105 
	#CCB
 7

	)

106 
	#CCb
 6

	)

107 
	#CcB
 5

	)

108 
	#Ccb
 4

	)

109 
	#cCB
 3

	)

110 
	#cCb
 2

	)

111 
	#ccB
 1

	)

112 
	#ccb
 0

	)

116 
	#CWB
 7

	)

117 
	#CWT
 6

	)

118 
	#cWB
 3

	)

119 
	#cWT
 2

	)

122 
	#rwrw
 0x0

	)

123 
	#RWrw
 0x1

	)

124 
	#RWRw
 0x2

	)

125 
	#RWRW
 0x3

	)

128 
	#Rwrw
 0x5

	)

129 
	#RwRw
 0x6

	)

133 
	#xx
 0x0

	)

134 
	#Xx
 0x1

	)

135 
	#XX
 0x3

	)

138 
	#RWX
 0x3

	)

142 
	#rwxrwx
 (
xx
 << 4Ë+ (
rwrw
)

	)

143 
	#rwXrwx
 (
Xx
 << 4Ë+ (
rwrw
)

	)

144 
	#rwXrwX
 (
XX
 << 4Ë+ (
rwrw
)

	)

146 
	#RWxrwx
 (
xx
 << 4Ë+ (
RWrw
)

	)

147 
	#RWXrwx
 (
Xx
 << 4Ë+ (
RWrw
)

	)

148 
	#RWXrwX
 (
XX
 << 4Ë+ (
RWrw
)

	)

150 
	#RWxRwx
 (
xx
 << 4Ë+ (
RWRw
)

	)

151 
	#RWXRwx
 (
Xx
 << 4Ë+ (
RWRw
)

	)

152 
	#RWXRwX
 (
XX
 << 4Ë+ (
RWRw
)

	)

154 
	#RWxRWx
 (
xx
 << 4Ë+ (
RWRW
)

	)

155 
	#RWXRWx
 (
Xx
 << 4Ë+ (
RWRW
)

	)

156 
	#RWXRWX
 (
XX
 << 4Ë+ (
RWRW
)

	)

162 
	#Rwxrwx
 (
xx
 << 4Ë+ (
Rwrw
)

	)

163 
	#RwXrwx
 (
Xx
 << 4Ë+ (
Rwrw
)

	)

164 
	#RwXrwX
 (
XX
 << 4Ë+ (
Rwrw
)

	)

166 
	#RwxRwx
 (
xx
 << 4Ë+ (
RwRw
)

	)

167 
	#RwXRwx
 (
Xx
 << 4Ë+ (
RwRw
)

	)

168 
	#RwXRwX
 (
XX
 << 4Ë+ (
RwRw
)

	)

171 
	#ACTIVE
 1

	)

172 
	#DORMANT
 0

	)

175 
	#D15
 0x0f

	)

176 
	#D14
 0x0e

	)

177 
	#D13
 0x0d

	)

178 
	#D12
 0x0c

	)

179 
	#D11
 0x0b

	)

180 
	#D10
 0x0a

	)

181 
	#D09
 0x09

	)

182 
	#D08
 0x08

	)

183 
	#D07
 0x07

	)

184 
	#D06
 0x06

	)

185 
	#D05
 0x05

	)

186 
	#D04
 0x04

	)

187 
	#D03
 0x03

	)

188 
	#D02
 0x02

	)

189 
	#D01
 0x01

	)

190 
	#D00
 0x00

	)

194 
	#SYSTEM
 0

	)

195 
	#TASK1
 1

	)

196 
	#TASK2
 2

	)

197 
	#TASK3
 3

	)

200 
	#BACKGROUND
 0

	)

201 
	#PRIVATE_SYSTEM
 2

	)

202 
	#ACTIVE_TASK
 4

	)

203 
	#SHARED_SYSTEM
 6

	)

204 
	#PERIPHERAL
 8

	)

205 
	#BLOCK_REGION
 10

	)

206 
	#PT_REGION
 20

	)

208 
	#VA
 0

	)

209 
	#SIZE
 1

	)

210 
	#AP
 2

	)

211 
	#CB
 3

	)

212 
	#ENABLE
 4

	)

213 
	#PTA
 5

	)

214 
	#TYPE
 6

	)

215 
	#DOM
 7

	)

216 
	#PA
 8

	)

217 
	#LA
 9

	)

219 
	#FAULT
 0

	)

220 
	#COARSE
 1

	)

221 
	#SECTION
 2

	)

222 
	#FINE
 3

	)

224 
	#TTB
 0x00038000

	)

225 
	#PTB
 
TTB
 + 0x4000

	)

226 
	#PT
(
x
Ë
PTB
 +(x*0x400)

	)

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/util.c

72 
	~"ªgi⁄s.h
"

73 
	~"utû.h
"

79 
¥ötSètus
();

80 
mmuInôSy°em
();

81 
mmuInôTasks
();

82 
mmuInôTask
(
RT
);

83 
mmuCª©eRegi⁄
(
RT
);

84 
mmuCª©ePT
(
RT
);

85 
mmuAâachPT
(
RT
);

86 
mmuLﬂdTask
(
RT
);

87 
mmuLﬂdRegi⁄
(
RT
);

89 
RT
 
MmuPCB_Regi⁄TabÀ1
;

90 
RT
 
MmuPCB_Regi⁄TabÀ2
;

91 
RT
 
MmuPCB_Regi⁄TabÀ3
;

119 
RT
 
	gπFau…
 =

123 
rwxrwx
,

124 
ccb
,

125 
DORMANT
,

126 
TTB
,

127 
SECTION
,

128 
D00
,

135 
RT
 
	gπPîùh
 =

139 
RWXrwx
,

140 
ccb
,

141 
ACTIVE
,

142 
TTB
,

143 
SECTION
,

144 
D15
,

149 
RT
 
	gπPT
 =

153 
RWXrwx
,

154 
ccb
,

155 
ACTIVE
,

156 
PT
(
SYSTEM
),

157 
COARSE
,

158 
D15
,

163 
RT
 
	gπLﬂd
 =

167 
RWXRWX
,

168 
ccb
,

169 
ACTIVE
,

170 
PT
(
SYSTEM
),

171 
COARSE
,

172 
D15
,

177 
RT
 
	gπSh¨ed
 =

181 
RWXRWX
,

182 
CWT
,

183 
ACTIVE
,

184 
PT
(
SYSTEM
),

185 
COARSE
,

186 
D15
,

191 
RT
 
	gπKî√l
 =

195 
RWXrwx
,

196 
CWT
,

197 
ACTIVE
,

198 
PT
(
SYSTEM
),

199 
COARSE
,

200 
D15
,

220 
	$mmuInôSy°em
()

224 
	`mmuCª©ePT
(
πFau…
);

227 
	`mmuCª©ePT
(
πKî√l
);

230 
	`mmuCª©eRegi⁄
(
πKî√l
);

233 
	`mmuCª©eRegi⁄
(
πSh¨ed
);

236 
	`mmuCª©eRegi⁄
(
πLﬂd
);

239 
	`mmuCª©eRegi⁄
(
πPT
);

242 
	`mmuAâachPT
(
πKî√l
);

245 
	`mmuCª©eRegi⁄
(
πPîùh
);

248 
	}
}

261 
	$mmuInôTask
(
RT
 
π
)

263 
	`mmuCª©ePT
(
π
);

264 
	`mmuCª©eRegi⁄
(
π
);

265 
	`mmuAâachPT
(
π
);

267 
	}
}

279 
	$mmuLﬂdTask
(
RT
 
π
)

281 
	`mmuAâachPT
(
π
);

282 
	`mmuFlushCache
();

283 
	`mmuFlushTLB
();

284 
	`mmuLﬂdRegi⁄
(
π
);

286 
	}
}

298 
	$mmuCª©ePT
(
RT
 
π
)

300 *
±
;

301 
cou¡
,
i
;

303 
±
 = (*)
π
[
PTA
];

305 
π
[
TYPE
])

307 
COARSE
: {
cou¡
 = 256; ;}

308 
SECTION
:{
cou¡
 = 4096; ;}

309 
FINE
: {
cou¡
 = 1024; ;}

313 
i
 = 
cou¡
 -1; i >= 0; i--)

315 
±
[
i
] = 
FAULT
;

319 
	}
}

331 
	$mmuAâachPT
(
RT
 
π
)

333 * 
âb
 = (*)
TTB
;

335 
π
[
TYPE
])

337 
COARSE
: {
âb
[
π
[
VA
] >> 20] = (π[
PTA
]&0xfffffc00Ë|Ñt[
DOM
]<<5 | 0x11; ;}

338 
SECTION
:{;}

339 
FINE
: {
âb
[
π
[
VA
] >> 20] = (π[
PTA
]&0xfffff000Ë|Ñt[
DOM
]<<5 | 0x13; ;}

344 
	}
}

356 
	$mmuCª©eRegi⁄
(
RT
 
π
 )

358 
fõld
, 
°¨t
;

359 
i
,
j
;

360 
lAP
 = 
π
[
AP
]&0x3;

362 *
±
;

363 
±
 = (*)
π
[
PTA
];

365 
π
[
TYPE
])

367 
COARSE
:

369 
lPA
 = 
π
[
PA
]&0xfffff000;

370 
°¨t
 = ((
π
[
VA
]& 0x000ff000) >> 12);

371 
fõld
 = 
lAP
<<10 |ÜAP<<8 |ÜAP<<6 |ÜAP<<4 | (
π
[
CB
]&0x3)<< 2 | 0x2;

373 
i
 = 
π
[
SIZE
]-1 ; i >= 0; i--)

374 
±
[
°¨t
+
i
] = (
lPA
 + (i<<12Ë| 
fõld
);

377 
SECTION
:

379 
lPA
 = 
π
[
PA
]&0xfff00000;

380 
°¨t
 = (
π
[
VA
]>> 20);

381 
fõld
 = 
lAP
<<10 | 
π
[
DOM
]<<5 | (π[
CB
]&0x3) << 2 | 0x12;

383 
i
 = 
π
[
SIZE
]-1 ; i >= 0; i--)

384 
±
[
°¨t
+
i
] = (
lPA
 + (i<<20Ë| 
fõld
);

387 
FINE
:

389 
lPA
 = 
π
[
PA
]&0xfffff000;

390 
°¨t
 = ((
π
[
VA
]& 0x000ff000) >> 12);

391 
fõld
 = 
lAP
<<10 |ÜAP<<8 |ÜAP<<6 |ÜAP<<4 | (
π
[
CB
]&0x3)<< 2 | 0x2;

393 
i
 = (
π
[
SIZE
]-1) ; i >= 0; i--)

394 
j
 = 3 ; j >= 0; j--)

395 
±
[
°¨t
+(
i
*4)+
j
] = (
lPA
 + (i<<12Ë| 
fõld
);

403 
	}
}

415 
	$mmuLﬂdRegi⁄
(
RT
 
π
)

417 *
‰om
, *
to
;

418 
i
;

419 
‰om
 = (*)
π
[
LA
];

420 
to
 = (*)
π
[
VA
];

422 
i
 = 0; i < 
π
[
SIZE
] * 1024; i++)

423 
to
[
i
]=
‰om
[i];

425 
	}
}

437 
	$mmuInôTasks
()

439 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ1
);

440 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ2
);

441 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ3
);

442 
	}
}

454 
	$mmuLﬂdTasks
()

456 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ1
);

457 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ2
);

458 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ3
);

459 
	}
}

471 
	$mmuScheduÀ
 (
tsk
)

473 
	`mmuFlushCache
();

474 
	`mmuFlushTLB
();

476 
tsk
)

478 0: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ1
); ;

479 1: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ2
); ;

480 2: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ3
); ;

482 
	}
}

496 
	$mem‹yMmuSy°em
 ()

498 
âb
 = 
TTB
;

508 
	`mmuInôSy°em
 ();

518 
	`mmuInôTasks
 ();

528 
	`mmuSëTTB
(
âb
);

538 
	`ch™geDomAc˚ss
(0x40000040,0xffffffff);

539 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/util.h

72 
	tRT
[10];

89 
mmuInôSy°em
();

102 
mmuInôTask
(
RT
 
π
);

114 
mmuLﬂdTask
(
RT
 
π
);

126 
mmuCª©ePT
(
RT
 
π
);

138 
mmuAâachPT
(
RT
 
π
);

150 
mmuCª©eRegi⁄
(
RT
 
π
);

162 
mmuLﬂdRegi⁄
(
RT
 
π
);

174 
mmuInôTasks
();

186 
mmuLﬂdTasks
();

198 
mmuScheduÀ
 (
tsk
);

212 
mem‹yMmuSy°em
();

218 
mmuSëTTB
();

219 
mmuFlushTLB
();

220 
mmuFlushCache
();

221 
ch™geDomAc˚ss
(, );

222 
ch™geC⁄åﬁ
(, );

	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/prefetch.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
¥e„tch
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹ePª„tchAb‹tH™dÀr


23 
c‹ePª„tchAb‹tH™dÀr
:

25 
B
 
c‹ePª„tchAb‹tH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/reserved.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
d©a
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eRe£rvedH™dÀr


23 
c‹eRe£rvedH™dÀr
:

24 
B
 
c‹eRe£rvedH™dÀr


25 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/sal.s

1 @ 
	g____________________________________________________________________


3 @ 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 @ 
AŒ
 
rights
 
	gª£rved
.

5 @ 
	g____________________________________________________________________


7 @ 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 @ 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 @ 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 @ 
¨e
 
	gmë
:

13 @ 1. 
F‹
 
NON
-
COMMERCIAL
 
USE
 
⁄ly
.

15 @ 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
c›yright


16 @ 
nŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 @ 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 @ 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 @ 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 @ 
wôh
 
the
 
	gdi°ributi⁄
.

23 @ 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 @ 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 @ 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
N
. 
Sloss
,

27 @ 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 @ 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 @ 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 @ 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 @ 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 @ 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 @ 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 @ 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
@ 
LOSS
 OF 
USE
, 
DATA
,

36 @ 
OR
 
PROFITS
@ OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 @ 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 @ 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 @ 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 @ 
OF
 
SUCH
 
DAMAGE
.

42 @ 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 @ 
li˚n£
 
∂ó£
 
emaû
 :

45 @ 
™dªw
@
¶oss
.
√t


49 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 @ * 
ModuÀ
 : 
ßl
.
s


55 @ * 
Proje˘
 : 
SLOS


56 @ * 
Vîsi⁄
 : 0.09

57 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


58 @ * 
Hi°‹y
 :

60 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


61 @ * - 
added
 
hódî
 
öf‹m©i⁄


65 .
globÆ
 
≠∂iˇti⁄Lﬂdî


66 .
öôSëUpSècks


68 @ -- 
≠∂iˇti⁄Lﬂdî
 ------------------------------------------------------

70 @ 
Des¸ùti⁄s
 : 
≠∂iˇti⁄
 
lﬂdî


72 @ 
P¨amëîs
 :

73 @ 
Rëu∫
 :

74 @ 
NŸes
 :

77 
≠∂iˇti⁄Lﬂdî
:

79 
LDR
 
r11
,=
ALT


81 
≠∂iˇti⁄LﬂdîLo›
:

82 
LDR
 
r12
,[
r11
],#4

83 
LDR
 
r14
,[
r11
],#4

84 
LDR
 
r13
,[
r11
],#4

86 
CMP
 
r13
,#0

87 
BEQ
 
öôSëUpSècks


89 
≠∂iˇti⁄BlockC›y
:

90 
LDMIA
 
r12
!,{
r0
-
r10
}

91 
STMIA
 
r13
!,{
r0
-
r10
}

92 
CMP
 
r12
,
r14


93 
BLE
 
≠∂iˇti⁄BlockC›y


94 
B
 
≠∂iˇti⁄LﬂdîLo›


98 @ * 
Aµliˇti⁄
 
Lﬂdî
 
TabÀ


102 
ALT
:

103 @ ; 
íåy
 
öto
 
the
 
	gèbÀ


105 @ ; 
	g§c_°¨èddr


106 @ ; 
	g§c_ídaddr


107 @ ; 
	gde°_addr


110 @ ; 
èsk
 (3)

112 .
w‹d
 
	gèsk3°¨t


113 .
w‹d
 
	gèsk3íd


114 .
	gw‹d
 0x30000

116 @ ; 
èsk
 (2)

118 .
w‹d
 
	gèsk2°¨t


119 .
w‹d
 
	gèsk2íd


120 .
	gw‹d
 0x28000

122 @ ; 
èsk
 (1)

124 .
w‹d
 
	gèsk1°¨t


125 .
w‹d
 
	gèsk1íd


126 .
	gw‹d
 0x20000

128 @ ; 
	gTîmö©e


130 .
	gw‹d
 0

131 .
	gw‹d
 0

132 .
	gw‹d
 0

134 .
	gd©a


135 .
	gÆign
 4

136 
	gèsk1°¨t
:

137 .
öcbö
 "../image/apps/task1.bin"

138 
èsk1íd
:

139 
èsk2°¨t
:

140 .
öcbö
 "../image/apps/task2.bin"

141 
èsk2íd
:

142 
èsk3°¨t
:

143 .
öcbö
 "../image/apps/task3.bin"

144 
èsk3íd
:

145 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/scheduler.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
scheduÀr
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
MmuPCB_CuºítTask


22 .
globÆ
 
MmuPCB_PåCuºítTask


23 .
globÆ
 
MmuPCB_PåNextTask


24 .
globÆ
 
MmuPCB_TabÀ


25 .
globÆ
 
MmuPCB_T›OfIRQSèck


26 .
globÆ
 
kî√lScheduÀr


27 .
globÆ
 
mmuScheduÀ


29 
kî√lScheduÀr
:

32 @; 
	gScheduÀr
: 
sim∂e
 
round
 
robö
 
Æg‹ôhm


35 
	gCuºítTask
:

36 
LDR
 
r3
,=
MmuPCB_CuºítTask


37 
LDR
 
r0
,[
r3
] @ ; 
	gr0
 = 
Cuºít
 
Task
 
ID


38 
LDR
 
r1
,=
MmuPCB_TabÀ


39 
LDR
 
r1
,[r1,
r0
,
LSL
#2] @ ; 
	gr1
 = 
addªss
 
of
 
cuºít
 
èsk


40 
LDR
 
r2
,=
MmuPCB_PåCuºítTask


41 
STR
 
r1
,[
r2
] @ ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


42 @ ; ** 
	gPCB_PåCuºítTask
 - 
upd©ed
 
wôh
 
the
 
√w
 
addªss


43 
	gNextTask
:

44 
ADD
 
r0
,
	gr0
,#1 @ ;Ñ0 = 
Cuºít_Task
+1

45 
CMP
 
r0
,#3

46 
MOVEQ
 
	gr0
,#0 @ ; r0==
MaxTask
 
thí
 
r0
=0

47 
STR
 
r0
,[
r3
] @ ; 
ßve
 
√w
 
Task
 
ID


48 
STMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gÃ
}

49 
BL
 
	gmmuScheduÀ
 @ ; 
£tup
 
mmu


50 
LDMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gÃ
}

51 
LDR
 
	gr1
,=
MmuPCB_TabÀ


52 
LDR
 
r1
,[r1,
r0
,
LSL
#2] @ ; 
	gr1
 = 
√w
 
√xt
 
èsk
 
PCB
 
addªss


53 
LDR
 
r0
,=
MmuPCB_PåNextTask


54 
STR
 
r1
,[
r0
] @ ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


55 @ ; ** 
	gMmuPCB_PåCuºítTask
 = 
cuºít
 
PCB


56 @ ; ** 
	gMmuPCB_PåNextTask
 = 
√xt
 
PCB


57 @ ; ** 
	gMmuPCB_CuºítTask
 = 
√w
 
TASK_ID


60 @ ; 
C⁄ãxt
 

63 
	gh™dÀr_c⁄ãxtswôch
:

64 
LDMFD
 
•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} @ ; 
ª°‹e
 
the
 
ªmaöög
 
ªgi°îs


65 
LDR
 
	gr13
,=
MmuPCB_PåCuºítTask


66 
LDR
 
r13
,[r13]

67 
SUB
 
	gr13
,r13,#60 @ ;Ñ13->
cuºít
 
PCB


68 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^ @ ; 
ßve
 
U£r
 
ªgi°îs


69 
MRS
 
	gr0
, 
SPSR


70 
STMDB
 
	gr13
,{
	gr0
,
	gr14
} @ ; 
ßve
 
the
 
ª°


71 
LDR
 
	gr13
,=
MmuPCB_PåNextTask


72 
LDR
 
r13
,[r13]

73 
SUB
 
	gr13
,r13,#60 @ ;Ñ13->
√w
 
PCB


74 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
}

75 
MSR
 
	g•§_cxsf
, 
r0


76 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^ @ ; 
lﬂd
 
U£r
 
ªgi°îs


77 
LDR
 
	gr13
,=
MmuPCB_IRQSèck


78 
LDR
 
r13
,[r13]

79 
MOVS
 
	gpc
,
	gr14
 @ ;  
√xt
 
	gèsk


80 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/start.s

8 @ * 
	gModuÀ
 : 
°¨t
.
s


9 @ * 
Proje˘
 : 
SLOS


10 @ * 
Vîsi⁄
 : 0.09

11 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


12 @ * 
Hi°‹y
 :

14 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


15 @ * - 
added
 
hódî
 
öf‹m©i⁄


20 @ * 
SLOS
 2002

24 @ * 
IMPORT


27 .
ãxt


28 .
code
 32

29 .
Æign
 0

30 .
globÆ
 
_°¨t
,
	g°¨t
,
_maöCRTSèπup


33 
	g_°¨t
:

34 
°¨t
:

35 
_maöCRTSèπup
:

49 
LDR
 
pc
,
ve˘‹Re£t


50 
LDR
 
	gpc
,
ve˘‹Undeföed


51 
LDR
 
	gpc
,
ve˘‹SWI


52 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


53 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


54 
LDR
 
	gpc
,
ve˘‹Re£rved


55 
LDR
 
	gpc
,
ve˘‹IRQ


56 
LDR
 
	gpc
,
	gve˘‹FIQ


58 @ -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

60 
	g±rPCBTabÀ
:

61 .
w‹d
 
MmuPCB_TabÀ


63 @ -- 
Kî√l
 
Jump
 
èbÀ
 ------------------------------

65 
ve˘‹Re£t
:

66 .
w‹d
 
c‹eInôülize


67 
ve˘‹Undeföed
:

68 .
w‹d
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
:

70 .
w‹d
 
c‹eSWIH™dÀr


71 
ve˘‹Pª„tchAb‹t
:

72 .
w‹d
 
c‹ePª„tchAb‹tH™dÀr


73 
ve˘‹D©aAb‹t
:

74 .
w‹d
 
c‹eD©aAb‹tH™dÀr


75 
ve˘‹Re£rved
:

76 .
w‹d
 
c‹eRe£rvedH™dÀr


77 
ve˘‹IRQ
:

78 .
w‹d
 
c‹eIRQH™dÀr


79 
ve˘‹FIQ
:

80 .
w‹d
 
c‹eFIQH™dÀr


82 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/swi.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
swi
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


16 @ * 13
th
 
J™u¨y
 2004 
Andªw
 
N
. 
Sloss


17 @ * - 
c›y
 
ovî
 
SWI
.
s
 
‰om
 
ba£
 
SLOS


21 .
ãxt


22 .
code
 32

23 .
Æign
 0

24 .
globÆ
 
c‹eSWIH™dÀr


25 .
globÆ
 
c‹eCÆlSWI


26 .
evítsSWIH™dÀr


29 @ * 
kî√l
 
swi
 
h™dÀr
 
evít


33 @ 
c‹eCÆlSWI
(
ªgi°î°r
 *
r0
)

36 
c‹eCÆlSWI
:

37 
STMFD
 
r13
!,{
r0
-
r4
,
r12
,
Ã
}

38 
MOV
 
r4
,
r0


39 
LDMIA
 
r4
,{
r0
-
r3
}

40 
SWI
 5075

41 
STMIA
 
r4
,{
r0
-
r3
}

42 
LDMFD
 
r13
!,{
r0
-
r4
,
r12
,
pc
}

45 @ 
c‹eSWIH™dÀr
()

48 
c‹eSWIH™dÀr
:

49 
STMFD
 
•
!,{
r0
-
r12
,
Ã
}

50 
LDR
 
r10
,[
Ã
,#-4]

51 
BIC
 
r10
,r10,#0
xff000000


52 
MOV
 
r0
,
r10


53 
MOV
 
r1
,
•


54 
MRS
 
r2
,
SPSR


55 
STMFD
 
•
!,{
r2
}

56 
BL
 
evítsSWIH™dÀr
 @ÉvítsSWIH™dÀr(
r0
-
swiNumbî
,
r1
-
poöt
);

57 
LDMFD
 
	g•
!,{
	gr2
}

58 
MSR
 
	gSPSR_cxsf
,
r2


59 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^

60 .
	gíd


	@/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/undef.s

2 @ * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 @ * 
	gModuÀ
 : 
undef
.
s


8 @ * 
Proje˘
 : 
SLOS


9 @ * 
Vîsi⁄
 : 0.09

10 @ * 
Origö©‹
 : 
Andªw
 
N
. 
Sloss


11 @ * 
Hi°‹y
 :

13 @ * 16
th
 
July
 2003 
Andªw
 
N
. 
Sloss


14 @ * - 
added
 
hódî
 
öf‹m©i⁄


18 .
ãxt


19 .
code
 32

20 .
Æign
 0

21 .
globÆ
 
c‹eUndeföedH™dÀr


24 
c‹eUndeföedH™dÀr
:

25 
B
 
c‹eUndeföedH™dÀr


26 .
íd


	@/home/jkr555/arm/guide/ch14_mmu/ch14_examples/main.c

48 
	~<°dio.h
>

49 
	~<°rög.h
>

51 
	~"ªgi⁄s.h
"

52 
	~"mmu.h
"

55 
mmuInô
();

57 
	$maö
()

59 
	`mmuInô
();

64 
	}
}

70 
	$mmuInô
()

72 
íabÀ
, 
ch™ge
;

75 
	`mmuInôPT
(&
ma°îPT
);

76 
	`mmuInôPT
(&
sy°emPT
);

77 
	`mmuInôPT
(&
èsk3PT
);

78 
	`mmuInôPT
(&
èsk2PT
);

79 
	`mmuInôPT
(&
èsk1PT
);

82 
	`mmuM≠Regi⁄
(&
kî√lRegi⁄
);

83 
	`mmuM≠Regi⁄
(&
sh¨edRegi⁄
);

84 
	`mmuM≠Regi⁄
(&
∑geTabÀRegi⁄
);

85 
	`mmuM≠Regi⁄
(&
≥rùhîÆRegi⁄
);

87 
	`mmuM≠Regi⁄
(&
t3Regi⁄
);

88 
	`mmuM≠Regi⁄
(&
t2Regi⁄
);

89 
	`mmuM≠Regi⁄
(&
t1Regi⁄
);

92 
	`mmuAâachPT
(&
ma°îPT
);

93 
	`mmuAâachPT
(&
sy°emPT
);

94 
	`mmuAâachPT
(&
èsk1PT
);

98 
	`domaöAc˚ssSë
(
DOM3CLT
 , 
CHANGEALLDOM
);

101 #i‡
	`deföed
(
__TARGET_CPU_ARM720T
)

102 
íabÀ
 = 
ENABLEMMU
 | 
ENABLECACHE
 | 
ENABLEWB
 ;

103 
ch™ge
 = 
CHANGEMMU
 | 
CHANGECACHE
 | 
CHANGEWB
 ;

105 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
)

106 
íabÀ
 = 
ENABLEMMU
 | 
ENABLEICACHE
 | 
ENABLEDCACHE
 ;

107 
ch™ge
 = 
CHANGEMMU
 | 
CHANGEICACHE
 | 
CHANGEDCACHE
 ;

109 
	`c⁄åﬁSë
(
íabÀ
, 
ch™ge
);

110 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/ch14_examples/mmu.h

49 
£tTTB
();

55 
	mvAddªss
;

56 
	m±Addªss
;

57 
	mma°îPtAddªss
;

58 
	mty≥
;

59 
	mdom
;

60 } 
	tPagëabÀ
;

63 
	mvAddªss
;

64 
	m∑geSize
;

65 
	mnumPages
;

66 
	mAP
;

67 
	mCB
;

68 
	mpAddªss
;

69 
PagëabÀ
 *
	mPT
;

70 } 
	tRegi⁄
;

73 
	mpAddªss
;

74 
	m∑geSize
;

75 
	mnumPages
;

76 } 
	tTaskfûe
;

79 
Regi⁄
 
p1Regi⁄
, 
p2Regi⁄
, 
p3Regi⁄
, 
kî√lRegi⁄
, 
sh¨edRegi⁄
,

80 
∑geTabÀRegi⁄
, 
≥rùhîÆRegi⁄
;

82 
PagëabÀ
 
ma°îPT
, 
sy°emPT
, 
èsk1PT
, 
èsk2PT
, 
èsk3PT
;

85 
mmuM≠Regi⁄
(
Regi⁄
 *);

86 
mmuM≠Se˘i⁄TabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
);

87 
mmuM≠Cﬂr£TabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
);

88 
mmuM≠FöeTabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
);

90 
mmuInôPT
(
PagëabÀ
 *);

91 
mmuAâachPT
(
PagëabÀ
 *);

93 
a˘ivePro˚ssSë
(
Regi⁄
 *
èskªgi⁄
);

94 
Regi⁄
 * 
mmuFëchTask
(
Taskfûe
 *
èskfûe
);

95 
mmuPœ˚Task
(
Regi⁄
 *
ªgi⁄From
, Regi⁄ *
ªgi⁄To
);

96 
mmuLﬂdTask
(
Taskfûe
 *
èskfûe
, 
Regi⁄
 *
ªgi⁄
);

97 
ÊushTLB
();

98 
ÊushCache
();

99 
domaöAc˚ssSë
(
vÆue
, 
mask
);

100 
c⁄åﬁSë
(
vÆue
, 
mask
);

104 
mmuScheduÀr
();

106 
Regi⁄
 
t1Regi⁄
, 
t2Regi⁄
, 
t3Regi⁄
;

107 
Taskfûe
 
èsk1Fûe
, 
èsk2Fûe
, 
èsk3Fûe
, 
èsk4Fûe
;

	@/home/jkr555/arm/guide/ch14_mmu/ch14_examples/mmuRoutines.c

48 
	~<°dio.h
>

50 
	~"ªgi⁄s.h
"

51 
	~"mmu.h
"

53 
	#uöt
 

	)

57 
PagëabÀ
 
	gma°îPT
 = {0x00000000, 0x18000, 0x18000, 
MASTER
, 3};

58 
PagëabÀ
 
	gsy°emPT
 = {0x00000000, 0x1c000, 0x18000, 
COARSE
, 3};

59 
PagëabÀ
 
	gèsk1PT
 = {0x00400000, 0x1c400, 0x18000, 
COARSE
, 3};

60 
PagëabÀ
 
	gèsk2PT
 = {0x00400000, 0x1c800, 0x18000, 
COARSE
, 3};

61 
PagëabÀ
 
	gèsk3PT
 = {0x00400000, 0x1cc00, 0x18000, 
COARSE
, 3};

66 
Regi⁄
 
	gkî√lRegi⁄
 = {0x00000000, 4, 16, 
RWNA
, 
WT
, 0x00000000, &
sy°emPT
};

67 
Regi⁄
 
	gsh¨edRegi⁄
 = {0x00010000, 4, 8, 
RWRW
, 
WT
, 0x00010000, &
sy°emPT
};

68 
Regi⁄
 
	g∑geTabÀRegi⁄
 = {0x00018000, 4, 8, 
RWNA
, 
WT
, 0x00018000, &
sy°emPT
};

69 
Regi⁄
 
	g≥rùhîÆRegi⁄
 = {0x10000000, 1024, 256, 
RWNA
, 
cb
, 0x10000000, &
ma°îPT
};

71 
Regi⁄
 
	gå™s„rRegi⁄
 = {0x00100000, 4, 8, 
RWNA
, 
WT
, 0x00018000, &
sy°emPT
};

74 
Regi⁄
 
	gt1Regi⁄
 = {0x00400000, 4, 8, 
RWRW
, 
WT
, 0x00020000, &
èsk1PT
};

75 
Regi⁄
 
	gt2Regi⁄
 = {0x00400000, 4, 8, 
RWRW
, 
WT
, 0x00028000, &
èsk2PT
};

76 
Regi⁄
 
	gt3Regi⁄
 = {0x00400000, 4, 8, 
RWRW
, 
WT
, 0x00030000, &
èsk3PT
};

79 
	$a˘ivePro˚ssSë
(
Regi⁄
 *
èskªgi⁄
)

81 
	`ÊushCache
();

82 
	`ÊushTLB
();

83 
	`mmuAâachPT
(
èskªgi⁄
->
PT
);

84 
	}
}

91 
	$âbSë
(
âb
)

93 
__asm
{
MRC
 
p15
, 0, 
âb
, 
c2
, 
c0
, 0 }

94 
	}
}

101 
	$ÊushTLB
()

103 
c8f‹m©
 = 0 ;

105 
__asm
{
MCR
 
p15
, 0, 
c8f‹m©
, 
c8
, 
c7
, 0 }

107 
	}
}

113 
	$c⁄åﬁSë
(
vÆue
, 
mask
)

115 
uöt
 
c1f‹m©
;

117 
__asm
{
MRC
 
p15
, 0, 
c1f‹m©
, 
c1
, 
c0
, 0 }

118 
c1f‹m©
 &~
mask
;

119 
c1f‹m©
 |
vÆue
;

120 
__asm
{
MCR
 
p15
, 0, 
c1f‹m©
, 
c1
, 
c0
, 0 }

121 
	}
}

127 
	$¥o˚ssIDSë
(
vÆue
)

129 
PID
;

130 
PID
 = 
vÆue
 << 25;

132 
__asm
{
MCR
 
p15
, 0, 
PID
, 
c13
, 
c0
, 0 }

133 
	}
}

140 
	$mmuInôPT
(
PagëabÀ
 *
±
)

142 
ödex
;

143 
uöt
 
PTE
, *
PTE±r
;

144 
PTE±r
 = (
uöt
 *Ë
±
->
±Addªss
;

145 
PTE
 = 
FAULT
;

148 
±
->
ty≥
)

150 
COARSE
: {
ödex
 = 256/32; ;}

151 
MASTER
: {
ödex
 = 4096/32; ;}

152 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
) | \

153 
	`deföed
(
__TARGET_CPU_ARM922T
) | \

154 
	`deföed
(
__TARGET_CPU_ARM926EJ_S
)

156 
FINE
: {
ödex
 = 1024/32; ;}

160 
	`¥ötf
("mmuInitPT: UNKNOWNÖagetableÅype\n");

164 
__asm


166 
mov
 
r0
, 
PTE


167 
mov
 
r1
, 
PTE


168 
mov
 
r2
, 
PTE


169 
mov
 
r3
, 
PTE


171 ; 
ödex
 != 0; index--)

173 
__asm


175 
STMIA
 
PTE±r
!, {
r0
-
r3
}

176 
STMIA
 
PTE±r
!, {
r0
-
r3
}

177 
STMIA
 
PTE±r
!, {
r0
-
r3
}

178 
STMIA
 
PTE±r
!, {
r0
-
r3
}

179 
STMIA
 
PTE±r
!, {
r0
-
r3
}

180 
STMIA
 
PTE±r
!, {
r0
-
r3
}

181 
STMIA
 
PTE±r
!, {
r0
-
r3
}

182 
STMIA
 
PTE±r
!, {
r0
-
r3
}

186 
	}
}

192 
	$mmuM≠Regi⁄
(
Regi⁄
 *
ªgi⁄
)

194 
ªgi⁄
->
PT
->
ty≥
)

196 
SECTION
:

198 
	`mmuM≠Se˘i⁄TabÀRegi⁄
(
ªgi⁄
);

201 
COARSE
:

203 
	`mmuM≠Cﬂr£TabÀRegi⁄
(
ªgi⁄
);

206 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
) | \

207 
	`deföed
(
__TARGET_CPU_ARM922T
)

208 
FINE
:

210 
	`mmuM≠FöeTabÀRegi⁄
(
ªgi⁄
);

216 
	`¥ötf
("mmuMapRegion: UNKNOWNÖagetableÅype\n");

221 
	}
}

227 
	$mmuM≠Se˘i⁄TabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
)

229 
i
;

230 
uöt
 *
PTE±r
, 
PTE
;

232 
PTE±r
 = (
uöt
 *)
ªgi⁄
->
PT
->
±Addªss
;

233 
PTE±r
 +
ªgi⁄
->
vAddªss
 >> 20;

234 
PTE±r
 +
ªgi⁄
->
numPages
 - 1;

236 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xfff00000;

237 
PTE
 |(
ªgi⁄
->
AP
 & 0x3) << 10;

238 
PTE
 |
ªgi⁄
->
PT
->
dom
 << 5;

239 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

240 
PTE
 |= 0x12;

242 
i
 =
ªgi⁄
->
numPages
 - 1; i >= 0; i--)

244 *
PTE±r
-- = 
PTE
 + (
i
 << 20);

246 
	}
}

252 
	$mmuM≠Cﬂr£TabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
)

254 
i
,
j
;

255 
uöt
 *
PTE±r
, 
PTE
;

256 
uöt
 
ãmpAP
 = 
ªgi⁄
->
AP
 & 0x3;

258 
PTE±r
 = (
uöt
 *)
ªgi⁄
->
PT
->
±Addªss
;

260 
ªgi⁄
->
∑geSize
)

262 
LARGEPAGE
:

264 
PTE±r
 +(
ªgi⁄
->
vAddªss
 & 0x000ff000) >> 12;

265 
PTE±r
 +(
ªgi⁄
->
numPages
*16) - 1;

267 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xffff0000;

268 
PTE
 |
ãmpAP
 << 10;

269 
PTE
 |
ãmpAP
 << 8;

270 
PTE
 |
ãmpAP
 << 6;

271 
PTE
 |
ãmpAP
 << 4;

272 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

273 
PTE
 |= 0x1;

276 
i
 = 
ªgi⁄
->
numPages
-1; i >= 0; i--)

278 
j
 = 15 ; j >= 0; j--)

279 *
PTE±r
-- = 
PTE
 + (
i
 << 16);

283 
SMALLPAGE
:

285 
PTE±r
 +(
ªgi⁄
->
vAddªss
 & 0x000ff000) >> 12;

286 
PTE±r
 +(
ªgi⁄
->
numPages
 - 1);

288 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xfffff000;

289 
PTE
 |
ãmpAP
<<10;

290 
PTE
 |
ãmpAP
<<8;

291 
PTE
 |
ãmpAP
<<6;

292 
PTE
 |
ãmpAP
<<4;

293 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

294 
PTE
 |= 0x2;

297 
i
 = 
ªgi⁄
->
numPages
 - 1; i >= 0; i--)

299 *
PTE±r
-- = 
PTE
 + (
i
 << 12);

305 
	`¥ötf
("mmuMapCoarseTableRegion: IncorrectÖage size\n");

310 
	}
}

316 #i‡
deföed
(
__TARGET_CPU_ARM920T
) | \

317 
	$deföed
(
__TARGET_CPU_ARM922T
)

319 
	$mmuM≠FöeTabÀRegi⁄
(
Regi⁄
 *
ªgi⁄
)

321 
i
,
j
;

322 
uöt
 *
PTE±r
, 
PTE
;

323 
uöt
 
ãmpAP
 = 
ªgi⁄
->
AP
 & 0x3;

325 
PTE±r
 = (
uöt
 *)
ªgi⁄
->
PT
->
±Addªss
;

327 
ªgi⁄
->
∑geSize
)

329 
LARGEPAGE
:

331 
PTE±r
 +(
ªgi⁄
->
vAddªss
 & 0x000ffc00) >> 10;

332 
PTE±r
 +(
ªgi⁄
->
numPages
*64) - 1;

334 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xffff0000;

335 
PTE
 |
ãmpAP
<<10;

336 
PTE
 |
ãmpAP
<<8;

337 
PTE
 |
ãmpAP
<<6;

338 
PTE
 |
ãmpAP
<<4;

339 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

340 
PTE
 |= 0x1;

343 
i
 = 
ªgi⁄
->
numPages
-1; i >= 0; i--)

345 
j
 = 63 ; j >= 0; j--)

346 *
PTE±r
-- = 
PTE
 + (
i
 << 16);

350 
SMALLPAGE
:

352 
PTE±r
 +(
ªgi⁄
->
vAddªss
 & 0x000ffc00) >> 10;

353 
PTE±r
 +(
ªgi⁄
->
numPages
*4) - 1;

355 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xfffff000;

356 
PTE
 |
ãmpAP
<<10;

357 
PTE
 |
ãmpAP
<<8;

358 
PTE
 |
ãmpAP
<<6;

359 
PTE
 |
ãmpAP
<<4;

360 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

361 
PTE
 |= 0x2;

364 
i
 = 
ªgi⁄
->
numPages
-1; i >= 0; i--)

366 
j
 = 3 ; j >= 0; j--)

367 *
PTE±r
-- = 
PTE
 + (
i
 << 12);

371 
TINYPAGE
:

373 
PTE±r
 +(
ªgi⁄
->
vAddªss
 & 0x000ffc00) >> 10;

374 
PTE±r
 +(
ªgi⁄
->
numPages
 - 1);

376 
PTE
 = 
ªgi⁄
->
pAddªss
 & 0xfffffc00;

377 
PTE
 |
ãmpAP
 << 4;

378 
PTE
 |(
ªgi⁄
->
CB
 & 0x3) << 2;

379 
PTE
 |= 0x3;

382 
i
 =(
ªgi⁄
->
numPages
) - 1; i >= 0; i--)

384 *
PTE±r
-- = 
PTE
 + (
i
 << 10);

390 
	`¥ötf
("mmuMapFineTableRegion: IncorrectÖage size\n");

395 
	}
}

402 
	$mmuAâachPT
(
PagëabÀ
 *
±
)

404 
uöt
 *
âb
, 
PTE
, 
off£t
;

406 
âb
 = (
uöt
 *)
±
->
ma°îPtAddªss
;

407 
off£t
 = (
±
->
vAddªss
) >> 20;

409 
±
->
ty≥
)

411 
MASTER
:

413 
__asm
{ 
MCR
 
p15
, 0, 
âb
, 
c2
, 
c0
, 0 } ;

416 
COARSE
:

419 
PTE
 = (
±
->
±Addªss
 & 0xfffffc00);

420 
PTE
 |
±
->
dom
 <<5;

421 
PTE
 |= 0x11;

422 
âb
[
off£t
] = 
PTE
;

425 #i‡
	`deföed
(
__TARGET_CPU_ARM920T
) | \

426 
	`deföed
(
__TARGET_CPU_ARM922T
)

427 
FINE
:

430 
PTE
 = (
±
->
±Addªss
 & 0xfffff000);

431 
PTE
 |
±
->
dom
 <<5;

432 
PTE
 |= 0x13;

433 
âb
[
off£t
] = 
PTE
;

439 
	`¥ötf
("mmuAttachPT: UNKNOWNÖagetableÅype\n");

444 
	}
}

451 
	$domaöAc˚ssSë
(
vÆue
, 
mask
)

453 
uöt
 
c3f‹m©
;

455 
__asm
{
MRC
 
p15
, 0, 
c3f‹m©
, 
c3
, 
c0
, 0 }

456 
c3f‹m©
 &~
mask
;

457 
c3f‹m©
 |
vÆue
;

458 
__asm
{
MCR
 
p15
, 0, 
c3f‹m©
, 
c3
, 
c0
, 0 }

459 
	}
}

462 
	$ÊushCache
()

464 
c7f‹m©
 = 0 ;

466 
__asm
{
MCR
 
p15
, 0, 
c7f‹m©
, 
c7
,c7, 0 }

468 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/ch14_examples/regions.h

48 
	#ENABLECLTDOM0
 0x00000001

	)

49 
	#ENABLECLTDOM1
 0x00000004

	)

50 
	#ENABLECLTDOM2
 0x00000010

	)

51 
	#ENABLECLTDOM3
 0x00000040

	)

52 
	#ENABLECLTDOM4
 0x00000100

	)

53 
	#ENABLECLTDOM5
 0x00000400

	)

54 
	#ENABLECLTDOM6
 0x00001000

	)

55 
	#ENABLECLTDOM7
 0x00004000

	)

56 
	#ENABLECLTDOM8
 0x00010000

	)

57 
	#ENABLECLTDOM9
 0x00040000

	)

58 
	#ENABLECLTDOM10
 0x00100000

	)

59 
	#ENABLECLTDOM11
 0x00400000

	)

60 
	#ENABLECLTDOM12
 0x01000000

	)

61 
	#ENABLECLTDOM13
 0x04000000

	)

62 
	#ENABLECLTDOM14
 0x10000000

	)

63 
	#ENABLECLTDOM15
 0x40000000

	)

65 
	#CHANGEDOM0
 0x00000003

	)

66 
	#CHANGEDOM1
 0x0000000c

	)

67 
	#CHANGEDOM2
 0x00000030

	)

68 
	#CHANGEDOM3
 0x000000c0

	)

69 
	#CHANGEDOM4
 0x00000300

	)

70 
	#CHANGEDOM5
 0x00000c00

	)

71 
	#CHANGEDOM6
 0x00003000

	)

72 
	#CHANGEDOM7
 0x0000c000

	)

73 
	#CHANGEDOM8
 0x00030000

	)

74 
	#CHANGEDOM9
 0x000c0000

	)

75 
	#CHANGEDOM10
 0x00300000

	)

76 
	#CHANGEDOM11
 0x00c00000

	)

77 
	#CHANGEDOM12
 0x03000000

	)

78 
	#CHANGEDOM13
 0x0c000000

	)

79 
	#CHANGEDOM14
 0x30000000

	)

80 
	#CHANGEDOM15
 0xc0000000

	)

82 
	#CHANGEALLDOM
 0xffffffff

	)

84 
	#DOMNA
 0x00000000

	)

85 
	#DOMAA
 0xffffffff

	)

87 
	#DOMMGR3
 0x000000c0

	)

88 
	#DOMMGR15
 0xc0000000

	)

89 
	#DOM3CLT
 0x00000040

	)

91 #i‡
deföed
(
__TARGET_CPU_ARM920T
Ë| deföed(
__TARGET_CPU_ARM922T
)

92 
	#ENABLEMMU
 0x00000001

	)

93 
	#ENABLEDCACHE
 0x00000004

	)

94 
	#ENABLEICACHE
 0x00001000

	)

95 
	#ENABLES
 0x00000100

	)

96 
	#ENABLER
 0x00000200

	)

97 
	#ENABLEHIVECT
 0xc0002000

	)

98 
	#ENABLEASYNC
 0xc0000000

	)

99 
	#ENABLESYNC
 0x40000000

	)

100 
	#ENABLEFASTBUS
 0x40000000

	)

102 
	#CHANGEMMU
 0x00000001

	)

103 
	#CHANGEDCACHE
 0x00000004

	)

104 
	#CHANGEICACHE
 0x00001000

	)

105 
	#CHANGES
 0x00000100

	)

106 
	#CHANGER
 0x00000200

	)

107 
	#CHANGEHIVECT
 0xc0002000

	)

108 
	#CHANGECLOCKING
 0xc0000000

	)

111 #i‡
deföed
(
__TARGET_CPU_ARM720T
)

112 
	#ENABLEMMU
 0x00000001

	)

113 
	#ENABLECACHE
 0x00000004

	)

114 
	#ENABLEWB
 0x00000008

	)

115 
	#ENABLES
 0x00000100

	)

116 
	#ENABLER
 0x00000200

	)

117 
	#ENABLEHIVECT
 0xc0002000

	)

119 
	#CHANGEMMU
 0x00000001

	)

120 
	#CHANGECACHE
 0x00000004

	)

121 
	#CHANGEWB
 0x00000008

	)

122 
	#CHANGES
 0x00000100

	)

123 
	#CHANGER
 0x00000200

	)

124 
	#CHANGEHIVECT
 0xc0002000

	)

128 #i‡
deföed
(
__TARGET_CPU_ARM920T
Ë| deföed(
__TARGET_CPU_ARM922T
)

129 
	#cb
 0x0

	)

130 
	#cB
 0x1

	)

131 
	#WT
 0x2

	)

132 
	#WB
 0x3

	)

135 #i‡
deföed
(
__TARGET_CPU_ARM720T
)

136 
	#cb
 0x0

	)

137 
	#cB
 0x1

	)

138 
	#Cb
 0x2

	)

139 
	#WT
 0x3

	)

149 
	#NANA
 0x00

	)

150 
	#RWNA
 0x01

	)

151 
	#RWRO
 0x02

	)

152 
	#RWRW
 0x03

	)

156 
	#FAULT
 0

	)

157 
	#COARSE
 1

	)

158 
	#SECTION
 2

	)

159 
	#FINE
 3

	)

160 
	#MASTER
 2

	)

162 
	#LARGEPAGE
 64

	)

163 
	#SMALLPAGE
 4

	)

164 
	#TINYPAGE
 1

	)

167 
	#nŸU£d
 0x0

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íRedLED
()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM920IAP
,
RED
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnRedLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffRedLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/led.h

93 
›íRedLED
();

105 
swôchOnRedLED
();

117 
swôchOffRedLED
();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/start.c

78 
	~"Àd.h
"

108 
	$íåy
 ()

110 vﬁ©ûê
dñay
;

112 i‡(
	`›íRedLED
 ()==0)

117 
	`swôchOnRedLED
 ();

120 
dñay
=0; delay<0x40ffff; delay++) {}

122 
	`swôchOffRedLED
 ();

125 
dñay
=0; delay<0x40ffff; delay++) {}

135 
dñay
=0xBEEFBEEF;

137 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/start.h

108 
íåy
();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/led.c

71 
	~"ty≥s.h
"

72 
	~"../../devi˚s/ddf_io.h
"

73 
	~"../../devi˚s/ddf_ty≥s.h
"

75 
	~"swis.h
"

76 
	~"../../hódîs/≠i_devi˚.h
"

78 
	#GREEN
 4

	)

79 
	#YELLOW
 3

	)

80 
	#RED
 2

	)

81 
	#GREEN2
 1

	)

87 
devi˚_åì°r
 *
	gho°
;

88 
UID
 
	gÀd
;

104 
BOOL
 
	$›íYñlowLED
 ()

115 
ho°
 = 
	`evítIODevi˚O≥n
(&
Àd
,
DEVICE_LED_CM920IAP
,
YELLOW
);

119 i‡(
ho°
==0Ë{ 
FALSE
;}

123 
Àd
)

125 
DEVICE_IN_USE
:

126 
DEVICE_UNKNOWN
:

128  
FALSE
;

131  
TRUE
;

132 
	}
}

144 
	$swôchOnYñlowLED
()

146 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)1);

147 
	}
}

159 
	$swôchOffYñlowLED
()

161 
	`evítIODevi˚WrôeBô
(
ho°
,
Àd
,(
UINT
)0);

162 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/led.h

93 
›íYñlowLED
();

105 
swôchOnYñlowLED
();

117 
swôchOffYñlowLED
();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/start.c

75 
	~"Àd.h
"

106 
	$íåy
 ()

108 vﬁ©ûê
dñay
;

110 i‡(
	`›íYñlowLED
 ()==0)

115 
	`swôchOffYñlowLED
 ();

118 
dñay
=0; delay<0x20ffff; delay++) {}

120 
	`swôchOnYñlowLED
 ();

123 
dñay
=0; delay<0x20ffff; delay++) {}

133 
dñay
=0xBEEFBEEF;

135 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/start.h

103 
C_E¡ryTask1
 ();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/swis.h

77 #i‚de‡
SLOS


84 
	#SLOS
 5075

	)

90 
	#Evít_IODevi˚Inô
 0x800

	)

91 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

92 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

93 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

94 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

95 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

96 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

97 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

98 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

104 
	#BrögUp_Ba£
 0x700

	)

105 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

106 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

112 
	sSwiRegs


114 
	mr
[13];

115 
	m˝§
;

116 
	mpc
;

117 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/types.h

68 #i‚de‡
_HEADERS_API_TYPES


70 
	#_HEADERS_API_TYPES
 1

	)

72 
	tUINT
;

73 
	tUID
;

74 
	tBYTE
;

75 (*
	tCÆlBack
)();

76 
	tBOOL
;

78 
	#TRUE
 0

	)

79 
	#FALSE
 -1

	)

81 
	#DEVICE_SUCCESS
 0

	)

82 
	#DEVICE_IN_USE
 -1

	)

83 
	#DEVICE_UNKNOWN
 -2

	)

84 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/com.c

73 
	~<°d¨g.h
>

75 
	~"../../c‹e/Æl.h
"

76 
	~"£rül.h
"

82 
	gcomm™d_löe
[256];

83 *
	gªp‹t_buff
;

84 
	ggpbuff
[256];

85 *
	gîr‹_buff
;

93 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
);

105 
	$wrôeC
(
c
)

107 
	`wrôeCh¨ToHo°
(()
c
);

108 
	}
}

120 
	$ªadC
()

122  ()
	`ªadCh¨FromHo°
();

123 
	}
}

135 
	$ªp‹tC
(
c
)

137 *
ªp‹t_buff
++ = 
c
;

138 
	}
}

150 
öã∫Æ_wrôe_dec
(
w
, (*
putc
)())

152 i‡(
w
 >10Ë
	`öã∫Æ_wrôe_dec
(w / 10, 
putc
);

153 
	`putc
(
w
 % 10 + '0');

154 
	}
}

162 c⁄° 
	gdigôs
[] = "0123456789abcdef";

175 
öã∫Æ_wrôe_hex
(
w
, (*
putc
)())

177 
i
;

179 
i
 = 0; i < 8; i++)

181 
	`putc
(
digôs
[
w
 >> 28]);

182 
w
 <<= 4;

184 
	}
}

196 
	$wrôe0
(*
s
)

198 
c
;

200 
c
 = *
s
++;

202 
c
)

204 
	`wrôeC
(
c
);

205 
c
 = *
s
++;

207 
	}
}

219 
	$√wLöe
()

221 
	`wrôeC
('\r');

222 
	`wrôeC
('\n');

223 
	}
}

235 
	$wrôeHex
(
w
)

237 
	`öã∫Æ_wrôe_hex
(
w
, 
wrôeC
);

238 
	}
}

250 
	$wrôeDec
(
w
)

252 
	`öã∫Æ_wrôe_dec
(
w
, 
wrôeC
);

253 
	}
}

265 
	$¥ëtyC
(
c
)

267 
n
;

269 i‡(
c
 == '\t')

273 
	`wrôeC
(' ');

274 } ++
n
 & 7);

278 i‡(
c
 == '\n')

280 
n
 = 0;

281 
	`wrôeC
('\r');

284 i‡(
c
 >0x20Ë
n
++; 
	`wrôeC
(c);

285 
	}
}

297 
	$¥ëtyPröt
(c⁄° *
fmt
, ...)

299 
va_li°
 
≠
;

301 
	`va_°¨t
(
≠
, 
fmt
);

302 
	`f‹m©Såög
(
fmt
, 
¥ëtyC
, 
≠
);

303 
	`¥ëtyC
('\n');

304 
	`va_íd
(
≠
);

305 
	}
}

319 
f‹m©Såög
(c⁄° *
fmt
, (*
putc
)(), 
va_li°
 
¨gs
)

321 
c
;

323 
c
 = *
fmt
++;

325 
c
)

327 i‡(
c
 != '%')

329 
	`putc
(
c
);

333 
c
 = *
fmt
++;

335 
c
)

337 'd': 
	`öã∫Æ_wrôe_dec
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

338 'x': 
	`öã∫Æ_wrôe_hex
(
	`va_¨g
(
¨gs
, ), 
putc
); ;

341 
max_°rög
 = –
comm™d_löe
 );

342 *
s
 = 
	`va_¨g
(
¨gs
, *);

344 
c
 = *
s
++;

346  
c
 && (
max_°rög
-- > 0))

348 
	`putc
(
c
);

349 
c
=*
s
++;

356 
fmt
--;

359 
	`putc
(
c
);

362 
c
 = *
fmt
++;

364 
	}
}

376 
CÆlBack
 
	$h™dÀRï‹ãdEº‹
()

379 
	}
}

391 
CÆlBack
 
	$ªp‹tOK
()

394 
	}
}

407 
CÆlBack
 
	$ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...)

409 
va_li°
 
≠
;

411 
	`va_°¨t
(
≠
, 
fmt
);

412 
ªp‹t_buff
 = 
gpbuff
;

413 *(*)
ªp‹t_buff
 = 
î∫o
;

414 
ªp‹t_buff
 += 4;

415 
	`f‹m©Såög
(
fmt
, 
ªp‹tC
, 
≠
);

416 
	`ªp‹tC
(0);

417 
	`va_íd
(
≠
);

418 
îr‹_buff
 = 
gpbuff
;

419  
	`h™dÀRï‹ãdEº‹
();

420 
	}
}

432 
CÆlBack
 
	$CLI
(*
cmd
)

439  
	`ªp‹tOK
();

440 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/com.h

72 
comm™d_löe
[256];

88 
wrôeC
(
c
);

100 
ªadC
();

112 
ªp‹tC
(
c
);

124 
wrôe0
(*
s
);

136 
√wLöe
();

148 
wrôeHex
(
w
);

160 
wrôeDec
(
w
);

172 
¥ëtyC
(
c
);

184 
¥ëtyPröt
(c⁄° *
fmt
, ...);

196 
CÆlBack
 
h™dÀRï‹ãdEº‹
();

208 
CÆlBack
 
ªp‹tOK
();

221 
CÆlBack
 
ªp‹tEº‹
(
î∫o
, c⁄° *
fmt
, ...);

233 
CÆlBack
 
CLI
(*
cmd
);

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/readline.c

72 
	~<°rög.h
>

74 
	~"ty≥s.h
"

75 
	~"com.h
"

76 
	~"ªadlöe.h
"

78 
	#START
 ('A'-'@')

	)

79 
	#BACK
 ('B'-'@')

	)

80 
	#ERASE_FWD
 ('D'-'@')

	)

81 
	#END
 ('E'-'@')

	)

82 
	#FORWARD
 ('F'-'@')

	)

83 
	#ERASE
 ('H'-'@')

	)

84 
	#ERASE_EOL
 ('K'-'@')

	)

85 
	#ENTER
 ('M'-'@')

	)

86 
	#REDRAW
 ('R'-'@')

	)

87 
	#ERASE_LINE
 ('U'-'@')

	)

88 
	#ERASE_SOL
 ('W'-'@')

	)

90 
	#BACKSPACE
 ('H'-'@')

	)

91 
	#DELETE
 (0x7f)

	)

92 
	#LF
 ('\n')

	)

93 
	#CR
 ('\r')

	)

94 
	#CTRL_D
 ('D'-'@')

	)

96 
ªadC
();

97 
wrôeC
(
c
);

113 
	$back•a˚
 (
n
)

115 
n
--Ë
	`wrôeC
(
BACKSPACE
);

116 
	}
}

129 
	$backup
(*
buf„r
, 
pos
)

131 
	`back•a˚
(
	`°æí
(&
buf„r
[
pos
]));

132 
	}
}

145 
	$ªdøw_eﬁ
 (*
buf„r
, 
pos
)

147 
c
;

149 
c
 = 
buf„r
[
pos
++];

151 
c
)

153 
	`wrôeC
(
c
);

154 
c
 = 
buf„r
[
pos
++];

156 
	}
}

170 
	$ªdøw_löe
(*
¥om±
, *
buf„r
, 
pos
)

172 
c
;

174 
	`wrôeC
(
CR
);

176 
c
 = *
¥om±
++;

178 
c
)

180 
	`wrôeC
(
c
);

181 
c
 = *
¥om±
++;

184 
	`ªdøw_eﬁ
(
buf„r
, 0);

185 
	`backup
(
buf„r
, 
pos
);

186 
	}
}

199 
	$dñëe
 (*
buf„r
, 
pos
)

201 i‡(
buf„r
[
pos
] == 0) ;

203 
	`°r˝y
(&
buf„r
[
pos
], &buffer[pos+1]);

204 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

205 
	`wrôeC
(' ');

206 
	`wrôeC
(
BACKSPACE
);

207 
	`backup
(
buf„r
, 
pos
);

210 
	}
}

224 
	$ö£π
 (*
buf„r
, 
pos
, 
c
)

226 *
s
 = &
buf„r
[
pos
];

228 
	`memmove
(
s
+1, s, 
	`°æí
(s)+1);

229 
buf„r
[
pos
] = 
c
;

230 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

231 
pos
++;

232 
	`backup
(
buf„r
, 
pos
);

234  
pos
;

235 
	}
}

248 
	$RódLöeZ
 (*
buf„r
,
maxÀn
)

250 
pos
 = 0;

251 
c
;

255 
c
=
	`ªadC
();

257 i‡(
c
 =
CR
 || c =
LF
)

259 
buf„r
[
pos
] = 0;

260  
pos
;

263 i‡(
c
 =
CTRL_D
)

265 
buf„r
[0] = 0;

269 i‡(
c
 >' ' && 
pos
 < 
maxÀn
)

270 
buf„r
[
pos
++] = 
c
;

272 
	}
}

287 
	$ªadLöe
 (*
¥om±
, *
buf„r
, 
maxÀn
)

289 
i
;

290 
pos
 = 0;

291 
c
;

293 *
buf„r
 = 0;

294 
	`wrôe0
(
¥om±
);

298 
c
 = 
	`ªadC
();

299 i‡(
c
 =
DELETE
Ë¯
ERASE
;

300 i‡(
c
 < ' ')

302 
c
)

304 
START
:

305 
	`back•a˚
(
pos
);

306 
pos
 = 0;

308 
BACK
:

309 i‡(
pos
 > 0)

311 
	`wrôeC
(
BACKSPACE
);

312 
pos
--;

315 
ERASE_FWD
:

316 i‡(
	`°æí
(
buf„r
) == 0)

318 
	`wrôe0
("*EOF*\r\n");

321 
	`dñëe
(
buf„r
, 
pos
);

323 
END
:

324 
	`ªdøw_eﬁ
(
buf„r
, 
pos
);

325 
pos
 = 
	`°æí
(
buf„r
);

327 
FORWARD
:

328 i‡(
buf„r
[
pos
])

330 
	`wrôeC
(
buf„r
[
pos
]);

331 
pos
++;

334 
ERASE
:

335 i‡(
pos
 > 0)

337 
	`wrôeC
(
BACKSPACE
);

338 
pos
--;

339 
	`dñëe
(
buf„r
, 
pos
);

342 
ENTER
:

343 
	`wrôeC
(
CR
);

344 
	`wrôeC
(
LF
);

345  
	`°æí
(
buf„r
);

346 
REDRAW
:

347 
	`wrôeC
(
LF
);

348 
	`ªdøw_löe
(
¥om±
, 
buf„r
, 
pos
);

350 
ERASE_LINE
:

351 
	`back•a˚
(
pos
);

352 
i
 = 
pos
 = 
	`°æí
(
buf„r
);

354 
i
--Ë
	`wrôeC
(' ');

356 
	`back•a˚
(
pos
);

357 
pos
 = 0;

358 
buf„r
[0] = 0;

361 } i‡(
	`°æí
(
buf„r
Ë< 
maxÀn
)

362 
pos
 = 
	`ö£π
(
buf„r
,Öos, 
c
);

364 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/readline.h

81 
ªadLöe
(*
¥om±
, *
buf„r
, 
maxÀn
);

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/serial.c

72 
	~"ty≥s.h
"

73 
	~"../../devi˚s/ddf_io.h
"

74 
	~"../../devi˚s/ddf_ty≥s.h
"

76 
	~"../../cm920üp/evíts/swis.h
"

77 
	~"../../hódîs/≠i_devi˚.h
"

83 
devi˚_åì°r
 *
	gho°
;

84 
UID
 
	g£rül
;

101 
BOOL
 
	$›íHo°
 (
UINT
 
com
)

112 i‡(
com
>1Ë{ 
FALSE
;}

114 
ho°
 = 
	`evítIODevi˚O≥n
(&
£rül
,
DEVICE_SERIAL_CM920IAP
,
com
);

118 i‡(
ho°
==0Ë{ 
FALSE
;}

122 
£rül
)

124 
DEVICE_IN_USE
:

125 
DEVICE_UNKNOWN
:

127  
FALSE
;

130  
TRUE
;

131 
	}
}

143 
	$wrôeCh¨ToHo°
 (
c
)

144 {
	`evítIODevi˚WrôeByã
(
ho°
,
£rül
,(
UINT
)
c
);
	}
}

156 
	$¥ötToHo°
 (*
s
)

158 *
s
!=0)

160 
	`wrôeCh¨ToHo°
 (*
s
++);

162 
	}
}

174 
	$ªadCh¨FromHo°
 ()

175 { ()
	`evítIODevi˚RódByã
(
ho°
,
£rül
);
	}
}

188 
	$˛o£Ho°
 ()

190 i‡(
ho°
==0Ë 
FALSE
;

192  
	`evítIODevi˚Clo£
(
ho°
,
£rül
);

193 
	}
}

206 
	$b™√r
 ()

208 
	`¥ötToHo°
 ("\n\r");

209 
	`¥ötToHo°
 ("\n\rSimple Little OS - mmuSLOS (0.03)\n\r");

210 
	`¥ötToHo°
 ("- initialized ...... ok\n\r");

211 
	`¥ötToHo°
 ("-Ñunning on ....... cm920iap \n\r");

212 
	`¥ötToHo°
 ("- simple shell .....áctive\n\r");

213 
	`¥ötToHo°
 ("\n\r");

214 
	`¥ötToHo°
 ("\n\r");

215 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/serial.h

79 
BOOL
 
›íHo°
 (
UINT
 
COM
);

91 
wrôeCh¨ToHo°
 (
c
);

103 
¥ötToHo°
 (*
s
);

115 
ªadCh¨FromHo°
 ();

128 
˛o£Ho°
 ();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/shell.c

73 
	~"ty≥s.h
"

74 
	~"ªadlöe.h
"

75 
	~"com.h
"

91 
	$shñl
 ()

93 
CÆlBack
 
cb
;

94 
Àn
;

98 
Àn
 = 
	`ªadLöe
("cm920üp: ", 
comm™d_löe
, 255);

99 
cb
 = 
	`CLI
(
comm™d_löe
);

100 } !
cb
);

102 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/shell.h

73 
	~"£rül.h
"

89 
shñl
();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/start.c

78 
	~"ty≥s.h
"

79 
	~"£rül.h
"

80 
	~"shñl.h
"

86 
	#COM1
 (1)

	)

87 
	#COM0
 (0)

	)

93 
b™√r
 ();

115 
	$íåy
 ()

126 if(
	`›íHo°
 (
COM0
)==
TRUE
)

128 
	`b™√r
 ();

129 
	`shñl
 ();

139 
	`˛o£Ho°
 ();

140 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/types.h

71 #i‚de‡
_HEADERS_API_TYPES


73 
	#_HEADERS_API_TYPES
 1

	)

75 
	tUINT
;

76 
	tUID
;

77 
	tBYTE
;

78 (*
	tCÆlBack
)();

79 
	tBOOL
;

81 
	#TRUE
 0

	)

82 
	#FALSE
 -1

	)

84 
	#DEVICE_SUCCESS
 0

	)

85 
	#DEVICE_IN_USE
 -1

	)

86 
	#DEVICE_UNKNOWN
 -2

	)

87 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/led_driver.c

75 
	~"../../devi˚s/ddf_‰ame.h
"

76 
	~"Àd_drivî.h
"

82 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

96 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

97 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

98 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

99 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

100 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

104 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

105 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

106 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

107 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

108 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

110 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

118 
	mÀd
[4];

119 
	muid
[4];

120 } 
	töã∫Æ_Àd°r
;

126 
öã∫Æ_Àd°r
 
	gdiodes
;

140 
	$Àd_öô
 ()

144 
PAUSE
;

146 
LED_ALL_OFF
;

150 
diodes
.
Àd
 [
RED
-1] = 
OFF
;

151 
diodes
.
Àd
 [
YELLOW
-1] = 
OFF
;

152 
diodes
.
Àd
 [
GREEN
-1] = 
OFF
;

153 
diodes
.
Àd
 [
GREEN2
-1] = 
OFF
;

155 
diodes
.
uid
 [
RED
-1] = 
NONE
;

156 
diodes
.
uid
 [
YELLOW
-1] = 
NONE
;

157 
diodes
.
uid
 [
GREEN
-1] = 
NONE
;

158 
diodes
.
uid
 [
GREEN2
-1] = 
NONE
;

160 
	}
}

173 
UID
 
	$Àd_›í
 (
maj‹
,
mö‹
)

175 
mö‹
 --;

177 i‡(
maj‹
==
DEVICE_LED_CM920IAP
)

179 i‡(
mö‹
<4)

181 i‡(
diodes
.
uid
[
mö‹
]==
NONE
)

183 
diodes
.
uid
[
mö‹
] = 
	`uid_gíî©e
();

184  
diodes
.
uid
[
mö‹
];

188  
DEVICE_IN_USE
;

193  
DEVICE_UNKNOWN
;

197  
DEVICE_NEXT
;

198 
	}
}

214 
	$Àd_˛o£
 (
UID
 
id
)

216 
x
;

218 
x
=0;x<=3;x++)

220 i‡(
diodes
.
uid
[
x
]==
id
)

222 
diodes
.
uid
 [
x
] = 
NONE
;

223  
DEVICE_SUCCESS
;

227  
DEVICE_UNKNOWN
;

228 
	}
}

242 
	$Àd_wrôe_bô
 (
UID
 
id
,
BYTE
 
Àd_£t
)

244 
x
;

246 
PAUSE
;

248 
x
=0;x<=3;x++)

250 i‡(
diodes
.
uid
[
x
]==
id
)

252 i‡(
diodes
.
uid
[
x
]!=
NONE
)

254 
Àd_£t
 &= 1;

256 
diodes
.
Àd
 [
x
] = 
Àd_£t
;

258 i‡(
Àd_£t
==
ON
)

260 
x
)

263 0 : 
LED_1_ON
; ;

264 1 : 
LED_2_ON
; ;

265 2 : 
LED_3_ON
; ;

266 3 : 
LED_4_ON
; ;

271 
x
)

273 0 : 
LED_1_OFF
; ;

274 1 : 
LED_2_OFF
; ;

275 2 : 
LED_3_OFF
; ;

276 3 : 
LED_4_OFF
; ;

282 
	}
}

294 
BYTE
 
	$Àd_ªad_bô
 (
UID
 
id
)

296 
x
;

298 
x
=0;x<=3;x++)

300 i‡(
diodes
.
uid
[
x
]==
id
)

302 i‡(
diodes
.
uid
[
x
]!=
NONE
)

304  
diodes
.
Àd
 [
x
];

314 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/led_driver.h

73 #i‚de‡
_DEVICE_CM920IAP_LED


75 
	#_DEVICE_CM920IAP_LED
 1

	)

77 
	#DEVICE_LED_CM920IAP
 55075

	)

88 
	#GREEN
 4

	)

89 
	#YELLOW
 3

	)

90 
	#RED
 2

	)

91 
	#GREEN2
 1

	)

94 
	#ON
 1

	)

95 
	#OFF
 0

	)

113 
Àd_öô
();

126 
UID
 
Àd_›í
(
devi˚
,
Àd
);

140 
Àd_˛o£
(
UID
 
id
);

154 
Àd_wrôe_bô
(
UID
 
id
,
BYTE
 
Àd_£t
);

166 
BYTE
 
Àd_ªad_bô
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_driver.c

73 
	~"../../devi˚s/ddf_‰ame.h
"

74 
	~"£rül_drivî.h
"

75 
	~"£rül_ma¸os.h
"

82 
	#DEVICE_SERIAL_CM920IAP
 55095

	)

90 
	mbaudøã
[2];

91 
	muid
[2];

92 } 
	töã∫Æ_£rül°r
;

98 
öã∫Æ_£rül°r
 
	gnode
;

115 
	$öã∫Æ_£rül_cm920üp_£tup
(
p‹t
, 
baudR©e
)

117 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_M
, ((
baudR©e
 & 0xf00) >> 8));

118 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_L
, (
baudR©e
 & 0xff));

119 
	`IO_WRITE
(
p‹t
 + 
AMBA_UARTLCR_H
, (
AMBA_UARTLCR_H_WLEN_8
 | 
AMBA_UARTLCR_H_FEN
));

120 
	}
}

132 
	$£rül_öô
()

137 
	`öã∫Æ_£rül_cm920üp_£tup
 (
INTEGRATOR_UART0_BASE
,
ARM_BAUD_9600
);

140 
	`öã∫Æ_£rül_cm920üp_£tup
 (
INTEGRATOR_UART1_BASE
,
ARM_BAUD_9600
);

144 
node
.
baudøã
[0] = 
ARM_BAUD_9600
;

145 
node
.
baudøã
[1] = 
ARM_BAUD_9600
;

146 
node
.
uid
[
COM0
] = 
NONE
;

147 
node
.
uid
[
COM1
] = 
NONE
;

148 
	}
}

163 
UID
 
	$£rül_›í
(
maj‹
,
com
)

165 i‡(
maj‹
==
DEVICE_SERIAL_CM920IAP
)

167 i‡(
com
==
COM0
 || com==
COM1
)

169 i‡(
node
.
uid
[
com
]!=
NONE
)

171  
DEVICE_IN_USE
;

175 
node
.
uid
[
com
] = 
	`uid_gíî©e
 ();

176  
node
.
uid
[
com
];

181  
DEVICE_NEXT
;

182 
	}
}

196 
	$£rül_˛o£
(
UID
 
id
)

198 i‡(
node
.
uid
[
COM0
]==
id
)

200 
node
.
uid
[
COM0
] = 
NONE
;

201  
DEVICE_SUCCESS
;

204 i‡(
node
.
uid
[
COM1
]==
id
)

206 
node
.
uid
[
COM1
] = 
NONE
;

207  
DEVICE_SUCCESS
;

210  
DEVICE_UNKNOWN
;

211 
	}
}

225 
	$öã∫Æ_£rül_wrôe
(
p‹t
,
BYTE
 
c
)

227  
	`TX_READY
(
	`GET_STATUS
(
p‹t
))==0){;}

228 
	`PUT_CHAR
(
p‹t
,
c
);

229 
	}
}

242 
	$£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
d©a
)

245 i‡(
node
.
uid
[
COM0
]==
id
)

247 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART0_BASE
,
d©a
);

251 i‡(
node
.
uid
[
COM1
]==
id
)

253 
	`öã∫Æ_£rül_wrôe
 (
INTEGRATOR_UART1_BASE
,
d©a
);

257 
	}
}

269 
BYTE
 
	$öã∫Æ_£rül_ªad
(
p‹t
)

272  (
	`RX_DATA
(
	`GET_STATUS
(
p‹t
)))==0 ) {;}

274  
	`GET_CHAR
(
p‹t
);

275 
	}
}

286 
BYTE
 
	$£rül_ªad_byã
(
UID
 
id
)

288 i‡(
node
.
uid
[
COM0
]==
id
)

290  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART0_BASE
);

293 i‡(
node
.
uid
[
COM1
]==
id
)

295  
	`öã∫Æ_£rül_ªad
 (
INTEGRATOR_UART1_BASE
);

299 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_driver.h

82 
£rül_öô
();

95 
UID
 
£rül_›í
(
devi˚
,
ign‹ed
);

109 
£rül_˛o£
(
UID
 
id
);

121 
£rül_wrôe_byã
(
UID
 
id
,
BYTE
 
£rül
);

132 
BYTE
 
£rül_ªad_byã
(
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_macros.h

1 
	#ON
 1

	)

2 
	#OFF
 0

	)

4 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

5 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

7 
	#AMBA_UARTDR
 0x00

	)

8 
	#AMBA_UARTRSR
 0x04

	)

9 
	#AMBA_UARTECR
 0x04

	)

10 
	#AMBA_UARTLCR_H
 0x08

	)

11 
	#AMBA_UARTLCR_M
 0x0C

	)

12 
	#AMBA_UARTLCR_L
 0x10

	)

13 
	#AMBA_UARTCR
 0x14

	)

14 
	#AMBA_UARTFR
 0x18

	)

15 
	#AMBA_UARTIIR
 0x1C

	)

16 
	#AMBA_UARTICR
 0x1C

	)

17 
	#AMBA_UARTILPR
 0x20

	)

19 
	#AMBA_UARTRSR_OE
 0x08

	)

20 
	#AMBA_UARTRSR_BE
 0x04

	)

21 
	#AMBA_UARTRSR_PE
 0x02

	)

22 
	#AMBA_UARTRSR_FE
 0x01

	)

24 
	#AMBA_UARTFR_TXFF
 0x20

	)

25 
	#AMBA_UARTFR_RXFE
 0x10

	)

26 
	#AMBA_UARTFR_BUSY
 0x08

	)

27 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

29 
	#AMBA_UARTCR_RTIE
 0x40

	)

30 
	#AMBA_UARTCR_TIE
 0x20

	)

31 
	#AMBA_UARTCR_RIE
 0x10

	)

32 
	#AMBA_UARTCR_MSIE
 0x08

	)

33 
	#AMBA_UARTCR_IIRLP
 0x04

	)

34 
	#AMBA_UARTCR_SIREN
 0x02

	)

35 
	#AMBA_UARTCR_UARTEN
 0x01

	)

37 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

38 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

39 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

40 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

41 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

42 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

43 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

44 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

45 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

47 
	#AMBA_UARTIIR_RTIS
 0x08

	)

48 
	#AMBA_UARTIIR_TIS
 0x04

	)

49 
	#AMBA_UARTIIR_RIS
 0x02

	)

50 
	#AMBA_UARTIIR_MIS
 0x01

	)

53 
	#ARM_BAUD_460800
 1

	)

54 
	#ARM_BAUD_230400
 3

	)

55 
	#ARM_BAUD_115200
 7

	)

56 
	#ARM_BAUD_57600
 15

	)

57 
	#ARM_BAUD_38400
 23

	)

58 
	#ARM_BAUD_19200
 47

	)

59 
	#ARM_BAUD_14400
 63

	)

60 
	#ARM_BAUD_9600
 95

	)

61 
	#ARM_BAUD_4800
 191

	)

62 
	#ARM_BAUD_2400
 383

	)

63 
	#ARM_BAUD_1200
 767

	)

67 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

68 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

69 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

70 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

72 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

73 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

76 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

77 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

79 #i‚de‡
LLEVELIO


80 
	#LLEVELIO
 1

	)

81 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

82 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

83 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

84 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

85 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

86 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

87 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

88 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

91 
	#COM1
 (1)

	)

92 
	#COM0
 (0)

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/tree.h

72 
	~"../../devi˚s/ddf_‰ame.h
"

73 
	~"Àd_drivî.h
"

74 
	~"£rül_drivî.h
"

80 
	~"../../devi˚s/ddf_ty≥s.h
"

92 
devi˚_åì°r
 
	gdevi˚s
[] =

102 
DEVICE_LED_CM920IAP
,

103 
Àd_öô
,

104 
Àd_›í
,

105 
Àd_˛o£
,

106 
Àd_wrôe_bô
,

107 
Àd_ªad_bô
,

110 
DEVICE_SERIAL_CM920IAP
,

111 
£rül_öô
,

112 
£rül_›í
,

113 
£rül_˛o£
,

114 
£rül_wrôe_byã
,

115 
£rül_ªad_byã
,

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/events_init.c

91 
	$evítSîvi˚sInô
 ()

96 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/events_init.h

82 
evítSîvi˚sInô
 ();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/irq_handler.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
SLOS


54 ; * 
ModuÀ
 : 
h™dÀr
.
s


55 ; * 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
úq
 
evíts


56 ; * 
OS
 : 
SLOS


57 ; * 
Pœtf‹m
 : 
I¡egøt‹
/
AP
 940

58 ; * 
Hi°‹y
 :

60 ; * 21 
De˚mbî
 2001 
Andªw
 
N
. 
Sloss


61 ; * - 
°¨ãd
 
w‹kög
 
⁄
 
the
 
h™dÀrs


63 ; * 19
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


64 ; * - 
added
 
suµ‹t
 
I¡egøt‹
 940

66 ; * 30
th
 
A¥û
 2002 
Andªw
 
N
. 
Sloss


67 ; * - 
ªmove
 
the
 
buâ⁄
 
£rvi˚
 
routöe


72 ; * 
EXPORT


75 
EXPORT
 
evíts_úq_cm920üp_h™dÀr


78 ; * 
IMPORT


81 
IMPORT
 
evíts_tick_cm920üp_£rvi˚


82 
IMPORT
 
Kî√l_ScheduÀr


85 ; * 
ROUTINES


88 
AREA
 
IRQI940
,
CODE
,
READONLY


90 
CMRegi°îBa£
 
DCD
 0x10000000

91 
IRQ0_BASE
 
DCD
 0x14000000

93 
TIMERINT2
 
EQU
 0x00000080

94 
STATUS
 
EQU
 0x00000000

96 ; -- 
evíts_úq_h™dÀr
 ----------------------------------------------------------

98 ; 
Des¸ùti⁄
 : 
h™dÀs
 
the
 
IRQ
 
öãºu±
 
™d
 
dëîmöes
Åhê
sour˚
ánd 
thí


99 ; 
ve˘‹s
 
to
 
the
 
c‹ª˘
 
öãºu±
 
rou¡öe
.

102 
evíts_úq_cm920üp_h™dÀr


104 
SUB
 
r14
,Ñ14, #4

105 
STMFD
 
r13
!, {
r0
-
r3
, 
r12
, 
r14
} ; savêcuºíàc⁄ãxt

106 
LDR
 
	gr0
, 
	gIRQ0_BASE
 ; 
Lﬂd
 
Ba£
 
addªss
 
of
 
I¡
 
Cér


107 
LDR
 
	gr0
, [
r0
,#STATUS] ; 
Ród
 
I¡îru±
 
°©us


108 
LDR
 
	gr1
, =0x000001f‡; 
lﬂd
 
vÆue
 
to
 
mask
 
off
 
uµî
 
bôs


109 
AND
 
	gr0
,Ñ0, 
	gr1
 ; 
mask
 
off
 
unu£d
 
öãºu±s


110 
TST
 
	gr0
, #TIMERINT2

111 
BNE
 
evíts_tick_cm920üp_víìr


112 
LDMFD
 
	gr13
!, {
	gr0
-
	gr3
, 
	gr12
, 
	gpc
}^ ; 
unknown
 
evít
 
ign‹e


114 
evíts_tick_cm920üp_víìr


116 
BL
 
evíts_tick_cm920üp_£rvi˚


117 
B
 
Kî√l_ScheduÀr


118 
	gEND


121 ; * 
END
 
of
 
	gh™dÀr
.
	gs


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/swi_handler.c

76 
	~"../../c‹e/Æl.h
"

84 
	#SYSTEM
 0x1f

	)

85 
	#SVC
 0x13

	)

86 
	#USER
 0x10

	)

90 
	#IRQoN
 0x40

	)

91 
	#IRQoFF
 0xc0

	)

95 
modifyC⁄åﬁCPSR
();

96 
brögupSëR8fiq
();

97 
brögupSëR9fiq
();

98 
brögupSëR10fiq
();

100 
STATE
;

116 
CÆlBack
 
	$Rï‹tOK
() {

118 
	}
}

133 
CÆlBack
 
	$evíts_swi_cm920üp_h™dÀr
 (
swi_numbî
, 
SwiRegs
 *
r
)

135 
swi_numbî
)

142 
SLOS
:

144 
r
->r[0])

158 
BrögUp_Tø˚
:

160 
r
->r[1])

163 
	`brögupSëR9fiq
 (
r
->r[2]);

167 
	`brögupSëR10fiq
 (
r
->r[2]);

173 
BrögUp_F©ÆEº‹
:

174 
	`brögupSëR8fiq
 (
r
->r[1]);

176 
ÁèÀº‹
: fatalerror;

186 
Evít_IODevi˚Inô
:

187 
	`io_öôülize_drivîs
 ();

197 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SYSTEM
|
IRQoN
);}

199 
r
->r[0])

202 
Evít_IODevi˚O≥n
:

203 
r
->r[0] = (Ë
	`io_›í_drivî
 ((
UID
 *)r->r[1],r->r[2],r->r[3]);

206 
Evít_IODevi˚Clo£
:

207 
r
->r[0] = (Ë
	`io_˛o£_drivî
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

210 
Evít_IODevi˚WrôeByã
:

211 
	`io_wrôe_byã
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
BYTE
)r->r[3]);

214 
Evít_IODevi˚RódByã
:

215 
r
->r[0] = (Ë
	`io_ªad_byã
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

218 
Evít_IODevi˚WrôeBô
:

219 
	`io_wrôe_bô
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
Ï->r[2],(
UINT
)r->r[3]);

222 
Evít_IODevi˚RódBô
:

223 
r
->r[0] = (Ë
	`io_ªad_bô
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

226 
Evít_IODevi˚WrôeBlock
:

227 
	`io_wrôe_block
 ((
devi˚_åì°r
 *)
r
->r[1],(
UID
)r->r[2],(*)r->r[3]);

230 
Evít_IODevi˚RódBlock
:

231 
r
->r[0] = (Ë
	`io_ªad_block
 ((
devi˚_åì°r
 *Ï->r[1],(
UID
)r->r[2]);

236 i‡(
STATE
!=1Ë{
	`modifyC⁄åﬁCPSR
 (
SVC
|
IRQoFF
);}

240  
	`Rï‹tOK
();

241 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/swis.h

76 #i‚de‡
SLOS


89 
	#SLOS
 5075

	)

105 
	#Evít_IODevi˚Inô
 0x800

	)

130 
	#Evít_IODevi˚O≥n
 
Evít_IODevi˚Inô
+1

	)

131 
	#Evít_IODevi˚Clo£
 
Evít_IODevi˚Inô
+2

	)

132 
	#Evít_IODevi˚WrôeByã
 
Evít_IODevi˚Inô
+3

	)

133 
	#Evít_IODevi˚RódByã
 
Evít_IODevi˚Inô
+4

	)

134 
	#Evít_IODevi˚WrôeBô
 
Evít_IODevi˚Inô
+5

	)

135 
	#Evít_IODevi˚RódBô
 
Evít_IODevi˚Inô
+6

	)

136 
	#Evít_IODevi˚WrôeBlock
 
Evít_IODevi˚Inô
+7

	)

137 
	#Evít_IODevi˚RódBlock
 
Evít_IODevi˚Inô
+8

	)

143 
	#BrögUp_Ba£
 0x700

	)

144 
	#BrögUp_Tø˚
 
BrögUp_Ba£


	)

145 
	#BrögUp_F©ÆEº‹
 
BrögUp_Ba£
+1

	)

148 
	#SWI_WrôeC
 0x00

	)

149 
	#SWI_WrôeHex
 0x01

	)

150 
	#SWI_Wrôe0
 0x02

	)

151 
	#SWI_NewLöe
 0x03

	)

152 
	#SWI_RódC
 0x04

	)

153 
	#SWI_CLI
 0x05

	)

154 
	#SWI_WrôeDec
 0x06

	)

155 
	#SWI_PªâyPröt
 0x07

	)

156 
	#SWI_Rï‹tEº‹
 0x08

	)

157 
	#SWI_FœshWrôe
 0x09

	)

158 
	#SWI_FœshEø£
 0x0a

	)

159 
	#SWI_Sîvi˚CÆl
 0x0b

	)

160 
	#SWI_SëEnv
 0x0c

	)

161 
	#SWI_RódLöe
 0x0e

	)

162 
	#SWI_GëEnv
 0x10

	)

163 
	#SWI_Exô
 0x11

	)

164 
	#SWI_E¡îOS
 0x16

	)

165 
	#SWI_GëEºno
 0x60

	)

166 
	#SWI_Clock
 0x61

	)

167 
	#SWI_Time
 0x63

	)

168 
	#SWI_Remove
 0x64

	)

169 
	#SWI_Ríame
 0x65

	)

170 
	#SWI_O≥n
 0x66

	)

171 
	#SWI_Clo£
 0x68

	)

172 
	#SWI_Wrôe
 0x69

	)

173 
	#SWI_Ród
 0x6a

	)

174 
	#SWI_Sìk
 0x6b

	)

175 
	#SWI_FÀn
 0x6c

	)

176 
	#SWI_IsTTY
 0x6e

	)

177 
	#SWI_TmpNam
 0x6f

	)

178 
	#SWI_In°ÆlH™dÀr
 0x70

	)

179 
	#SWI_Gíî©eEº‹
 0x71

	)

181 
	sSwiRegs
 {

182 
	mr
[13];

183 
	m˝§
;

184 
	mpc
;

185 } 
	tSwiRegs
;

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/tick_service.c

72 
	~"../hódîs/Àd.h
"

73 
	~"../hódîs/ma¸os.h
"

75 
	~"../../hódîs/≠i_ty≥s.h
"

81 
	#O√MûliSec⁄d
 93750000

	)

82 
	#Irq0
 0x14000000

	)

83 
	#I¡_E«bÀSë
 2

	)

99 
	gÀd_pul£
 = 0;

100 
UINT
 
	gøã
;

116 
	$evítTickInô
 (
UINT
 
m£c
)

118 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

126 
m£c
)

129 
øã
 = 2;

133 
øã
 = 24;

143 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

144 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

145 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

146 
	}
}

158 
	$evítTimîISR
 ()

160 vﬁ©ûê*
TIMER
 = (*Ë
Timî2
;

168 
PAUSE
;

169 i‡–
Àd_pul£
 )

170 { 
LED_1_ON
; 
Àd_pul£
 = 0; }

172 { 
LED_1_OFF
; 
Àd_pul£
 = 1; }

181 *(
TIMER
 + 
Timî_CÀ¨
) = 0;

182 *(
TIMER
 + 
Timî_Lﬂd
Ë
O√MûliSec⁄d
 * 
øã
;

183 *(
TIMER
 + 
Timî_C⁄åﬁ
Ë
TimîE«bÀ
 | 
TimîPªsˇÀ256
 | 
TimîPîiodic
;

184 
	}
}

186 
	$evíts_tick_cm920üp_£rvi˚
 ()

188 
	`evítTimîISR
 ();

189 
	}
}

201 
	$evítTickSèπ
 ()

203 vﬁ©ûê* 
IRQ
 = (*)
Irq0
;

204 *(
IRQ
 + 
I¡_E«bÀSë
) = 0x80;

205 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/tick_service.h

102 
evítTickInô
 (
UINT
 
m£c
);

114 
evíts_tick_cm940üp_£rvi˚
 ();

126 
evítTickSèπ
 ();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/all.h

67 #i‚de‡
_HEADERS_CM920IAP_ALL


69 
	#_HEADERS_CM920IAP_ALL
 1

	)

71 
	~"Àd.h
"

72 
	~"ma¸os.h
"

78 
	~"../evíts/tick_£rvi˚.h
"

80 
	~"../evíts/swis.h
"

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/led.h

80 
	#LEDBANK
 (vﬁ©ûê*)0x1a000004

	)

96 
	#LED_4_ON
 (*
LEDBANK
=*LEDBANK|0x00000001)

	)

97 
	#LED_3_ON
 (*
LEDBANK
=*LEDBANK|0x00000002)

	)

98 
	#LED_2_ON
 (*
LEDBANK
=*LEDBANK|0x00000004)

	)

99 
	#LED_1_ON
 (*
LEDBANK
=*LEDBANK|0x00000008)

	)

100 
	#LED_ALL_ON
 (*
LEDBANK
=*LEDBANK|0x0000000f)

	)

104 
	#LED_4_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000001)

	)

105 
	#LED_3_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000002)

	)

106 
	#LED_2_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000004)

	)

107 
	#LED_1_OFF
 (*
LEDBANK
=*LEDBANK&~0x00000008)

	)

108 
	#LED_ALL_OFF
 (*
LEDBANK
=*LEDBANK&~0x0000000f)

	)

110 
	#PAUSE
 *(vﬁ©ûê*)0x1A000000 & 1)

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/macros.h

78 
	#Timî0
 0x13000000

	)

79 
	#Timî1
 0x13000100

	)

80 
	#Timî2
 0x13000200

	)

82 
	#Timî_Lﬂd
 0

	)

83 
	#Timî_VÆue
 1

	)

84 
	#Timî_C⁄åﬁ
 2

	)

85 
	#Timî_CÀ¨
 3

	)

91 
	#πc_Ba£
 0x15000000

	)

92 
	#πc_D©a
 0x00

	)

93 
	#πc_M©ch
 0x01

	)

94 
	#πc_Sèt
 0x02

	)

95 
	#πc_CÀ¨
 0x02

	)

96 
	#πc_Lﬂd
 0x03

	)

97 
	#πc_C⁄åﬁ
 0x04

	)

103 
	#TimîE«bÀ
 0x80

	)

104 
	#TimîPîiodic
 0x40

	)

105 
	#TimîDißbÀ
 0x00

	)

106 
	#TimîFªîun
 0x00

	)

107 
	#TimîPªsˇÀ
 0x00

	)

108 
	#TimîPªsˇÀ16
 0x04

	)

109 
	#TimîPªsˇÀ256
 0x08

	)

113 
	#IRQVe˘‹
 0x18

	)

116 
	#INTEGRATOR_CT_BASE
 0x13000000

	)

117 
	#INTEGRATOR_IC_BASE
 0x14000000

	)

118 
	#INTEGRATOR_RTC_BASE
 0x15000000

	)

119 
	#INTEGRATOR_UART0_BASE
 0x16000000

	)

120 
	#INTEGRATOR_UART1_BASE
 0x17000000

	)

121 
	#INTEGRATOR_KBD_BASE
 0x18000000

	)

122 
	#INTEGRATOR_MOUSE_BASE
 0x19000000

	)

124 
	#AMBA_UARTDR
 0x00

	)

125 
	#AMBA_UARTRSR
 0x04

	)

126 
	#AMBA_UARTECR
 0x04

	)

127 
	#AMBA_UARTLCR_H
 0x08

	)

128 
	#AMBA_UARTLCR_M
 0x0C

	)

129 
	#AMBA_UARTLCR_L
 0x10

	)

130 
	#AMBA_UARTCR
 0x14

	)

131 
	#AMBA_UARTFR
 0x18

	)

132 
	#AMBA_UARTIIR
 0x1C

	)

133 
	#AMBA_UARTICR
 0x1C

	)

134 
	#AMBA_UARTILPR
 0x20

	)

136 
	#AMBA_UARTRSR_OE
 0x08

	)

137 
	#AMBA_UARTRSR_BE
 0x04

	)

138 
	#AMBA_UARTRSR_PE
 0x02

	)

139 
	#AMBA_UARTRSR_FE
 0x01

	)

141 
	#AMBA_UARTFR_TXFF
 0x20

	)

142 
	#AMBA_UARTFR_RXFE
 0x10

	)

143 
	#AMBA_UARTFR_BUSY
 0x08

	)

144 
	#AMBA_UARTFR_TMSK
 (
AMBA_UARTFR_TXFF
 + 
AMBA_UARTFR_BUSY
)

	)

146 
	#AMBA_UARTCR_RTIE
 0x40

	)

147 
	#AMBA_UARTCR_TIE
 0x20

	)

148 
	#AMBA_UARTCR_RIE
 0x10

	)

149 
	#AMBA_UARTCR_MSIE
 0x08

	)

150 
	#AMBA_UARTCR_IIRLP
 0x04

	)

151 
	#AMBA_UARTCR_SIREN
 0x02

	)

152 
	#AMBA_UARTCR_UARTEN
 0x01

	)

154 
	#AMBA_UARTLCR_H_WLEN_8
 0x60

	)

155 
	#AMBA_UARTLCR_H_WLEN_7
 0x40

	)

156 
	#AMBA_UARTLCR_H_WLEN_6
 0x20

	)

157 
	#AMBA_UARTLCR_H_WLEN_5
 0x00

	)

158 
	#AMBA_UARTLCR_H_FEN
 0x10

	)

159 
	#AMBA_UARTLCR_H_STP2
 0x08

	)

160 
	#AMBA_UARTLCR_H_EPS
 0x04

	)

161 
	#AMBA_UARTLCR_H_PEN
 0x02

	)

162 
	#AMBA_UARTLCR_H_BRK
 0x01

	)

164 
	#AMBA_UARTIIR_RTIS
 0x08

	)

165 
	#AMBA_UARTIIR_TIS
 0x04

	)

166 
	#AMBA_UARTIIR_RIS
 0x02

	)

167 
	#AMBA_UARTIIR_MIS
 0x01

	)

170 
	#ARM_BAUD_460800
 1

	)

171 
	#ARM_BAUD_230400
 3

	)

172 
	#ARM_BAUD_115200
 7

	)

173 
	#ARM_BAUD_57600
 15

	)

174 
	#ARM_BAUD_38400
 23

	)

175 
	#ARM_BAUD_19200
 47

	)

176 
	#ARM_BAUD_14400
 63

	)

177 
	#ARM_BAUD_9600
 95

	)

178 
	#ARM_BAUD_4800
 191

	)

179 
	#ARM_BAUD_2400
 383

	)

180 
	#ARM_BAUD_1200
 767

	)

184 
	#OS_COMPORT
 
INTEGRATOR_UART0_BASE


	)

185 
	#OS_IRQBIT_NUMBER
 
INT_UARTINT0


	)

186 
	#OS_IRQBIT_MASK
 
INTMASK_UARTINT0


	)

187 
	#OS_IRQBIT
 
OS_IRQBIT_MASK


	)

189 
	#DEBUG_COMPORT
 
OS_COMPORT


	)

190 
	#DEBUG_IRQBIT
 
OS_IRQBIT


	)

193 
	#DEFAULT_HOST_BAUD
 
ARM_BAUD_9600


	)

194 
	#DEFAULT_OS_BAUD
 
ARM_BAUD_38400


	)

196 #i‚de‡
LLEVELIO


197 
	#LLEVELIO
 1

	)

198 
	#GET_STATUS
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTFR
))

	)

199 
	#GET_CHAR
(
p
Ë(
	`IO_READ
(’Ë+ 
AMBA_UARTDR
))

	)

200 
	#PUT_CHAR
(
p
, 
c
Ë(
	`IO_WRITE
((’Ë+ 
AMBA_UARTDR
), (c)))

	)

201 
	#IO_READ
(
p
Ë((*(vﬁ©ûê*)’)Ë& 0xFF)

	)

202 
	#IO_WRITE
(
p
, 
c
Ë(*(*)’Ë(c))

	)

203 
	#RX_DATA
(
s
Ë(((sË& 
AMBA_UARTFR_RXFE
Ë=0)

	)

204 
	#TX_READY
(
s
Ë(((sË& 
AMBA_UARTFR_TXFF
Ë=0)

	)

205 
	#TX_EMPTY
(
p
Ë((
	`GET_STATUS
’Ë& 
AMBA_UARTFR_TMSK
Ë=0)

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/init.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
öô
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


19 ; 
	gIMPORT
/
EXPORT
 
key
 
	gfun˘i⁄s


22 
EXPORT
 
c‹eInôülize


23 
EXPORT
 
öôSëUpSècks


25 
IMPORT
 
MmuPCB_PåTask2


26 
IMPORT
 
MmuPCB_PåTask3


27 
IMPORT
 
mmuFlushCache


28 
IMPORT
 
brögupInôFIQRegi°îs


29 
IMPORT
 
C_E¡ry


30 
IMPORT
 
MmuPCB_CuºítTask


31 
IMPORT
 
≠∂iˇti⁄Lﬂdî


32 
IMPORT
 
	gpcbSëUp


35 ; 
Deföe
 
u£ful
 
	gc⁄°™ts


38 
IRQ32md
 
	gEQU
 0x12

39 
SVC32md
 
	gEQU
 0x13

40 
SYS32md
 
	gEQU
 0x1f

41 
NoI¡
 
	gEQU
 0xc0

43 
AREA
 
	gINITSLOS
,
	gCODE
,
	gREADONLY


46 ; 
Sèπ
 
öôülizög
 
the
 
c‹e
 
	g∑πs


49 
c‹eInôülize


51 
BL
 
mmuFlushCache


52 
BL
 
brögupInôFIQRegi°îs


53 
B
 
	g≠∂iˇti⁄Lﬂdî


56 ; 
Sëup
 
°acks
 
	gSVC
|
	gIRQ
|
	gSYS
&
	gUSER


57 ; 
	gMode
 = 
SVC


60 
öôSëUpSècks


62 
MOV
 
	g•
,#0
	gx10000
 ; 
Kî√l
 
Sèck


63 
MSR
 
	gCPSR_c
,#NoI¡|
SYS32md


64 
LDR
 
	g•
,=0x408000 ; 
Sy°em
 
	gSèck
=0x408000

65 
MSR
 
CPSR_c
,#NoI¡|
IRQ32md


66 
MOV
 
	g•
,#0
	gx9000
 ; 
IRQ
 
	gSèck
 = 0x9000

67 
MSR
 
CPSR_c
,#NoI¡|
	gSVC32md


70 ; 
Sëup
 
Task
 
Pro˚ss
 
C⁄åﬁ
 
Block
 (
MPUPCB
).

71 ; 
	gMode
 = 
SVC


74 
LDR
 
	gr0
,=0x400000 ; 
	gTask
 2

75 
LDR
 
	gr1
,=
MmuPCB_PåTask2


76 
LDR
 
r2
,=0x408000

77 
BL
 
pcbSëUp


79 
LDR
 
r0
,=0x400000 ; 
	gTask
 3

80 
LDR
 
	gr1
,=
MmuPCB_PåTask3


81 
LDR
 
r2
,=0x408000

82 
BL
 
pcbSëUp


84 ; -- 
£t
 
the
 
cuºít
 
ID
 
to
 
	gTASK1
 ...........

86 
LDR
 
	gr0
, =
MmuPCB_CuºítTask


87 
MOV
 
r1
, #0

88 
STR
 
	gr1
,[
r0
] ; 
fú°
 
èsk
 
	gID
=0

89 
LDR
 
Ã
,=
C_E¡ry


90 
MOV
 
pc
,
	gÃ
 ; 
íãr
 
the
 
CE¡ry
 
w‹ld


91 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/mmupcb.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


8 ; * 
	gNOTE
: 
This
 
fûe
 
is
 
autom©iˇŒy
 
gíî©ed


11 ; * 
	gProje˘
 : 
mmuSLOS


12 ; * 
	gVîsi⁄
 : 0.03

13 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


17 
EXPORT
 
MmuPCB_CuºítTask


18 
EXPORT
 
MmuPCB_TabÀ


19 
EXPORT
 
MmuPCB_IRQSèck


20 
EXPORT
 
MmuPCB_PåCuºítTask


21 
EXPORT
 
MmuPCB_PåNextTask


23 
EXPORT
 
MmuPCB_PåTask1


24 
EXPORT
 
MmuPCB_BŸtomTask1


25 
EXPORT
 
MmuPCB_Regi⁄TabÀ1


27 
EXPORT
 
MmuPCB_PåTask2


28 
EXPORT
 
MmuPCB_BŸtomTask2


29 
EXPORT
 
MmuPCB_Regi⁄TabÀ2


31 
EXPORT
 
MmuPCB_PåTask3


32 
EXPORT
 
MmuPCB_BŸtomTask3


33 
EXPORT
 
MmuPCB_Regi⁄TabÀ3


34 
EXPORT
 
	gpcbSëUp


36 ; -- 
	gpcbSëUp
 ----------------------------------------------------------------

38 ; 
	gDes¸ùti⁄
 : 
PCB
 
£tup


40 ; 
	gP¨amëîs
 : 
r0
=<
thªad
 
íåy
 
addªss
>

41 ; 
	gr1
=<
PCB
 
Addªss
>

42 ; 
	gr2
=<
°ack
 
addªss
>

43 ; 
	gRëu∫
 : 
£tup
 
PCB


44 ; 
	gNŸes
 :

47 
AREA
 
	gPCBSëUp
,
	gCODE
,
READWRITE


48 
pcbSëUp


49 
STR
 
	gr0
,[
r1
,#-4] ; 
	gPCB
[-4]=
C_TaskE¡ry
<2>

50 
STR
 
r0
,[
r1
,#-64] ; 
	gPCB
[-64]=
C_TaskE¡ry
<2>

51 
STR
 
r2
,[
r1
,#-8] ; 
	gPCB
[-8]=<
°ack
 
addªss
>

52 
MOV
 
r0
,#0
x50


53 
STR
 
	gr0
,[
r1
,#-68] ; 
	gPCB
[-68]=
iFt_U£r


54 
MOV
 
pc
,
Ã


56 
AREA
 
	gMmuPCBTabÀ
,
	gDATA
,
READWRITE


58 
MmuPCB_TabÀ


60 
DCD
 
MmuPCB_PåTask1


61 
DCD
 
MmuPCB_PåTask2


62 
DCD
 
MmuPCB_PåTask3


64 
AREA
 
	gMmuPCBIRQ
,
	gDATA
,
READWRITE


66 
MmuPCB_IRQSèck


67 
	gDCD
 0x9000 ; 
ªÆ
 
vÆue


69 
AREA
 
	gMmuPCBPåCURRENT
,
	gDATA
,
READWRITE


71 
MmuPCB_PåCuºítTask


72 
	gDCD
 0x1

74 
AREA
 
	gMmuPCBPåNEXT
,
	gDATA
,
READWRITE


76 
MmuPCB_PåNextTask


77 
	gDCD
 0x1

79 
AREA
 
	gMmuPCBA˘ive
,
	gDATA
,
READWRITE


81 
MmuPCB_CuºítTask


82 
	gDCD
 0x1

85 ; 
	$Task
(1): 
FuŒ
 
MMU
 
PCB


86 ; 
mmupcb


88 ; 
PCB


89 ; 
Regi⁄TabÀ


90 ; 
	}
}

93 
AREA
 
	gPCB1
,
	gDATA
,
READWRITE


94 
	gMmuPCB_BŸtomTask1


96 
MmuPCB_PåTask1


98 
MmuPCB_Regi⁄TabÀ1


99 
	gDCD
 0x400000 ; 
vútuÆ
 
ba£
 
addªss


100 
	gDCD
 8 ; 
VútuÆ
 
	$addªss
 (
∑ge
 
size
 8x4
k
=32k)

101 
	`DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

102 
DCD
 6 ; 
CWT


103 
DCD
 1 ; 
ACTIVE


104 
DCD
 0x3c400 ; 
L2
 
Ba£
 
Page
 
TabÀ
 
Addªss


105 
DCD
 1 ; 
Cﬂr£
 
	$G™uÆôy
 (=4
k
)

106 
DCD
 0x03 ; 
DOM


107 
DCD
 0x50000 ; 
Physiˇl
 
Addªss


108 
DCD
 0x20000 ; 
Lﬂd
 
Addªss


111 ; 
	$Task
(2): 
FuŒ
 
MMU
 
PCB


112 ; 
mmupcb


114 ; 
PCB


115 ; 
Regi⁄TabÀ


116 ; 
	}
}

119 
AREA
 
	gPCB2
,
	gDATA
,
READWRITE


120 
	gMmuPCB_BŸtomTask2


122 
MmuPCB_PåTask2


124 
MmuPCB_Regi⁄TabÀ2


125 
	gDCD
 0x400000 ; 
vútuÆ
 
ba£
 
addªss


126 
	gDCD
 8 ; 
VútuÆ
 
	$addªss
 (
∑ge
 
size
 8x4
k
=32k)

127 
	`DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

128 
DCD
 6 ; 
CWT


129 
DCD
 1 ; 
ACTIVE


130 
DCD
 0x3c800 ; 
L2
 
Ba£
 
Page
 
TabÀ
 
Addªss


131 
DCD
 1 ; 
Cﬂr£
 
	$G™uÆôy
 (=4
k
)

132 
DCD
 0x03 ; 
DOM


133 
DCD
 0x58000 ; 
Physiˇl
 
Addªss


134 
DCD
 0x28000 ; 
Lﬂd
 
Addªss


137 ; 
	$Task
(3): 
FuŒ
 
MMU
 
PCB


138 ; 
mmupcb


140 ; 
PCB


141 ; 
Regi⁄TabÀ


142 ; 
	}
}

145 
AREA
 
	gPCB3
,
	gDATA
,
READWRITE


146 
	gMmuPCB_BŸtomTask3


148 
MmuPCB_PåTask3


150 
MmuPCB_Regi⁄TabÀ3


151 
	gDCD
 0x400000 ; 
vútuÆ
 
ba£
 
addªss


152 
	gDCD
 8 ; 
VútuÆ
 
	$addªss
 (
∑ge
 
size
 8x4
k
=32k)

153 
	`DCD
 (3<<4)+(3Ë; 
	$≥rmissi⁄s
 (
RWXRWX
)

154 
DCD
 6 ; 
CWT


155 
DCD
 1 ; 
ACTIVE


156 
DCD
 0x3cc00 ; 
L2
 
Ba£
 
Page
 
TabÀ
 
Addªss


157 
DCD
 1 ; 
Cﬂr£
 
	$G™uÆôy
 (=4
k
)

158 
DCD
 0x03 ; 
DOM


159 
DCD
 0x60000 ; 
Physiˇl
 
Addªss


160 
DCD
 0x30000 ; 
Lﬂd
 
Addªss


161 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/all.h

70 #i‚de‡
_CORE_ALL


72 
	#_CORE_ALL
 1

	)

74 
	~"../hódîs/≠i_ty≥s.h
"

75 
	~"../devi˚s/ddf_io.h
"

76 
	~<as£π.h
>

77 
	~<time.h
>

78 
	~"../cm920üp/hódîs/Æl.h
"

79 
	~"../hódîs/≠i_devi˚.h
"

80 
	~"../hódîs/≠i_Œdebug.h
"

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/cinit.c

81 
	~"Æl.h
"

82 
	~"../cm920üp/evíts/evíts_öô.h
"

83 
	~"../mem‹y/utû.h
"

91 
	#DEVICESINIT
 1

	)

92 
	#SERVICESINIT
 2

	)

93 
	#TICKINIT
 3

	)

94 
	#CINITINIT
 4

	)

95 
	#TICKSTART
 5

	)

96 
	#MMUSETUP
 6

	)

97 
	#ENTERTASK
 7

	)

99 
	#LOW_LEVEL_INITIALIZATION
 1

	)

100 
	#BOOT_SLOS
 2

	)

112 
	gSTATE
;

118 
swôchOnSy°em
 ();

134 
	$cöô_öô
 ()

136 
STATE
 = 
LOW_LEVEL_INITIALIZATION
;

148 
	`Œåa˚
(
	`evítIODevi˚Inô
(),
DEVICESINIT
);

158 
	`Œåa˚
(
	`evítSîvi˚sInô
(),
SERVICESINIT
);

167 
	`Œåa˚
(
	`evítTickInô
(2),
TICKINIT
);

168 
	}
}

180 
	$C_E¡ry
 ( )

195 
	`Œåa˚
(
	`cöô_öô
(),
CINITINIT
);

205 
	`Œåa˚
(
	`evítTickSèπ
(),
TICKSTART
);

214 
	`Œåa˚
(
	`mem‹yMmuSy°em
(),
MMUSETUP
);

223 
STATE
=
BOOT_SLOS
;

225 
	`Œåa˚
(
	`swôchOnSy°em
(),
ENTERTASK
);

235 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/jump.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mmuSLOS


54 ; * 
ModuÀ
 : 
jump
.
s


55 ; * 
Des¸ùti⁄
 : 
jumps
 
öto
 
the
 
fú°
 
èsk


56 ; * 
OS
 : 
mpuSLOS
 0.03

57 ; * 
Hi°‹y
 :

59 ; * 14
th
 
July
 2002 
Andªw
 
N
. 
Sloss


60 ; * - 
added
 
a
 
√w
 
jump
 
mech™ism


64 
EXPORT
 
jumpToTask1


66 
AREA
 
jump
,
CODE
,
READONLY


68 ; -- 
JumpToTask1
 --------------------------------------------------------------

69 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
SPSR
 
to
 
U£r
 
Mode
 
™d
 
íabÀs
 
IRQ
's

71 ; 
P¨amëîs
 : 
r0
 - 
addªss
 
⁄
 
èsk1


72 ; 
Rëu∫
 : 
√vî


73 ; 
NŸes
 : 
this
 
routöe
 
is
 
ªquúed
 
MPU
 
vîsi⁄
 
of
 
the


74 ; 
code
.

77 
jumpToTask1


79 
MRS
 
r1
,
SPSR


80 
MOV
 
r1
,#0
x50


81 
MSR
 
SPSR_c
,
r1


82 
MOVS
 
pc
,
r0


83 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/uid.c

72 
	g√w_uid
 = 1;

74 #i‚de‡
UID


75 
	#UID
 

	)

94 
UID
 
	$uid_gíî©e
 ()

96  ++
√w_uid
;

97 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/uid.h

71 
	~"../hódîs/≠i_ty≥s.h
"

73 
	#NONE
 0

	)

97 
UID
 
uid_gíî©e
 ();

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/data.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
d©a
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eD©aAb‹tH™dÀr


20 
AREA
 
	gDATAABTSLOS
,
	gCODE
,
READONLY


22 
c‹eD©aAb‹tH™dÀr


24 
B
 
	gc‹eD©aAb‹tH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_frame.h

76 
	~"../c‹e/uid.h
"

96 
	sd©a


98 
	msize
;

99 *
	md©a
;

100 } 
	tblock_d©a°r
;

110 
	sdevi˚_åì


120 
	m«me
[12];

129 
UID
 
	mdrivî_id
;

139 (*
	möô
)();

153 
UID
 (*
›í
)(, );

166 (*
	m˛o£
Ë(
	mUID
);

183 (*
	mbyã
)(
	mUID
, 
	mBYTE
);

193 (*
	mbô
)(
	mUID
, 
	mBYTE
);

203 (*
	mblock
)(
	mUID
, 
	mblock_d©a°r
 *);

205 } 
	mwrôe
;

223 
BYTE
 (*
byã
)(
	mUID
);

234 
BYTE
 (*
bô
)(
	mUID
);

244 
	mblock_d©a°r
 *(*
	mblock
Ë(
	mUID
);

246 } 
	mªad
;

248 } 
	tdevi˚_åì°r
 ;

250 
devi˚_åì°r
 
devi˚s
[];

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_io.c

73 
	~"../cm920üp/devi˚s/åì.h
"

89 
	$io_öôülize_drivîs
()

91 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

93 *
drivî
->
öô
 != 0)

95 
drivî
->
	`öô
();

96 
drivî
 ++;

98 
	}
}

112 
devi˚_åì°r
 *
	$io_›í_drivî
(*
id
,
maj‹
,
mö‹
)

114 
devi˚_åì°r
 *
drivî
 = 
devi˚s
;

116 *
drivî
->
öô
 != 0)

118 *
id
 = 
drivî
->
	`›í
(
maj‹
,
mö‹
);

120 i‡(*
id
>0)

122  
drivî
;

125 
drivî
 ++;

128  (
devi˚_åì°r
 *)0;

129 
	}
}

142 
	$io_˛o£_drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
)

144 i‡(
d
==(
devi˚_åì°r
 *)0) { -2;}

146  
d
->
	`˛o£
 (
id
);

147 
	}
}

161 
	$io_wrôe_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

163 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

165 
d
->
wrôe
.
	`bô
 (
id
,
bô
);

166 
	}
}

180 
BYTE
 
	$io_ªad_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
)

182 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

184  
d
->
ªad
.
	`bô
 (
id
);

185 
	}
}

199 
	$io_wrôe_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
)

201 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

203 
d
->
wrôe
.
	`byã
 (
id
,
bô
);

204 
	}
}

218 
BYTE
 
	$io_ªad_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
)

220 i‡(
d
==(
devi˚_åì°r
 *)0) { 255;}

222  
d
->
ªad
.
	`byã
 (
id
);

223 
	}
}

237 
	$io_wrôe_block
(
devi˚_åì°r
 *
d
,
UID
 
id
, 
block_d©a°r
 *
block
)

239 i‡(
d
==(
devi˚_åì°r
 *)0) {;}

241 
d
->
wrôe
.
	`block
 (
id
,
block
);

242 
	}
}

256 
block_d©a°r
 *
	$io_ªad_block
(
devi˚_åì°r
 *
d
,
UID
 
id
)

258 i‡(
d
==(
devi˚_åì°r
 *)0) { 0;}

260  
d
->
ªad
.
	`block
 (
id
);

261 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_io.h

73 
	~"ddf_‰ame.h
"

89 
io_öôülize_drivîs
();

103 
devi˚_åì°r
 *
io_›í_drivî
(*
id
,
maj‹
,
mö‹
);

116 
io_˛o£_drivî
(
devi˚_åì°r
 *
d
, 
UID
 
id
);

130 
io_wrôe_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

144 
BYTE
 
io_ªad_bô
(
devi˚_åì°r
 *
d
,
UID
 
id
);

159 
io_wrôe_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
,
BYTE
 
bô
);

173 
BYTE
 
io_ªad_byã
(
devi˚_åì°r
 *
d
,
UID
 
id
);

187 
io_wrôe_block
(
devi˚_åì°r
 *
d
,
UID
 
id
,
block_d©a°r
 *
block
);

201 
block_d©a°r
 *
io_ªad_block
(
devi˚_åì°r
 *
d
,
UID
 
id
);

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_types.h

72 #i‚de‡
_DEVICE_DDF_CM920IAP_TYPES


74 
	#_DEVICE_DDF_CM920IAP_TYPES
 1

	)

77 
	#DEVICE_LED_CM920IAP
 55075

	)

78 
	#DEVICE_SERIAL_CM920IAP
 55095

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/events/bringup.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
SmÆl
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mmuSLOS


54 ; * 
ModuÀ
 : 
brögup


55 ; * 
Des¸ùti⁄
 : 
¥ovides
 
the
 
low
 
Àvñ
 
debug
 
ˇ∑bûôõs
 
u£d


56 ; * 
ö
 
the
 
brögup
 
°age
. 
This
 
debug
 
öf‹m©i⁄
 
is


57 ; * 
°‹ed
 
ö
 
the
 
FIQ
 
ªgi°îs
.

58 ; * 
OS
 : 
SLOS
 
MPU
 0.03

59 ; * 
Pœtf‹m
 : 
gíîic


64 ; * 
EXPORT


67 
EXPORT
 
brögupSëR8fiq


68 
EXPORT
 
brögupSëR9fiq


69 
EXPORT
 
brögupSëR10fiq


70 
EXPORT
 
brögupInôFIQRegi°îs


72 
AREA
 
brögup
,
CODE
,
READONLY


74 ; -- 
swôchToFIQMode
 ----------------------------------------------------------

76 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

78 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


79 ; 
Rëu∫
 : 
n⁄e
...

82 
swôchToFIQMode


84 
MOV
 
r3
,
Ã


85 
MRS
 
r1
,
CPSR


86 
BIC
 
r1
,r1,#0
x1f


87 
ORR
 
r1
,r1,#0
x11


88 
MSR
 
CPSR_c
,
r1


89 
MOV
 
pc
,
r3


91 ; -- 
swôchToSVCMode
 ----------------------------------------------------------

93 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

95 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


96 ; 
Rëu∫
 : 
n⁄e
...

99 
swôchToSVCMode


101 
MOV
 
r3
,
Ã


102 
MRS
 
r1
,
CPSR


103 
BIC
 
r1
,r1,#0
x1f


104 
ORR
 
r1
,r1,#0
x13


105 
MSR
 
CPSR_c
,
r1


106 
MOV
 
pc
,
r3


108 ; -- 
brögup_£tR8fiq
 ---------------------------------------------------------

110 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

112 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


113 ; 
Rëu∫
 : 
n⁄e
...

116 
brögupInôFIQRegi°îs


118 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


120 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

121 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


122 
MOV
 
r8
,#0 ; 
r8FIQ
=0

123 
MOV
 
r9
,#0 ; 
r9FIQ
=0

124 
MOV
 
r10
,#0 ; 
r10FIQ
=0

125 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


126 
MOV
 
pc
,
r2
 ;  
back


128 ; -- 
brögup_£tR8fiq
 ---------------------------------------------------------

130 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r8
 
ö
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

132 ; 
P¨amëîs
 : 
r1
 - 
Áèl
 
numbî


133 ; 
Rëu∫
 : 
n⁄e
...

136 
brögupSëR8fiq


138 ; 
r1
 - 
Áèl
 
îr‹
 
numbî


140 
MOV
 
r2
,
Ã
 ; 
c›y
 
lök
 
öto
Ñ2

141 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


142 
MOV
 
r8
,
r0
 ; 
r10_fiq
 =Ñ0

143 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


144 
MOV
 
pc
,
r2
 ;  
back


146 ; -- 
brögup_£tR9fiq
 ---------------------------------------------------------

148 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

150 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


151 ; 
Rëu∫
 : 
n⁄e
...

154 
brögupSëR9fiq


156 ; 
r2
 - 
íåy
 
åa˚
 
numbî


158 
MOV
 
r2
,
Ã


159 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


160 
MOV
 
r9
,
r0
 ; 
r9_fiq
 = 
r2


161 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


162 
MOV
 
pc
,
r2
 ;  
back


164 ; -- 
brögup_£tR10fiq
 --------------------------------------------------------

166 ; 
Des¸ùti⁄
 : 
£ts
 
the
 
r10
 
FIQ
 
mode
 
™d
  
back
 
to
 
SVC
 mode

168 ; 
P¨amëîs
 : 
r2
 - 
exô
 
åa˚
 
numbî


169 ; 
Rëu∫
 : 
n⁄e
...

172 
brögupSëR10fiq


174 ; 
r2
 - 
exô
 
åa˚
 
numbî


176 
MOV
 
r2
,
Ã


177 
BL
 
swôchToFIQMode
 ; 
ch™ge
 
FIQ


178 
MOV
 
r10
,
r0
 ; 
r10_fiq
 = 
r2


179 
BL
 
swôchToSVCMode
 ; 
ch™ge
 
SVC


180 
MOV
 
pc
,
r2
 ;  
back


181 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/events/cpsr.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mmuSLOS


54 ; * 
ModuÀ
 : 
˝§


55 ; * 
Des¸ùti⁄
 : 
CPSR
 
c⁄åﬁ
 
routöesb


56 ; * 
OS
 : 
SLOS
 0.03

57 ; * 
Pœtf‹m
 : 
gíîic


62 ; * 
EXPORT


65 
EXPORT
 
modifyC⁄åﬁCPSR


67 
AREA
 
˝§
,
CODE
,
READONLY


69 ; -- 
modifyC⁄åﬁCPSR
 --------------------------------------------------------

71 ; 
Des¸ùti⁄
 : 
modify
 
the
 
c⁄åﬁ
 
bôs
 
of
Åhê
CPSR


73 ; 
P¨amëîs
 : 
r0
 - 
√w
 
modifiˇti⁄


74 ; 
Rëu∫
 : 
n⁄e
...

77 
modifyC⁄åﬁCPSR


80 ; 
Save
 
ªgi°îs
: 
r3
 
™d
 
lök
 
⁄
 
the
 
¥evious
 
mode


81 ; 
°ack
.

82 ; 
C›y
 
the
 
°ack
 
to
 
r2
Åÿ
¥e£rve
 
durög
 
a
 
mode
 
ch™ge
.

83 ; 
N‹mÆize
 
the
 
°ack
 
r13
 
ö
Åhê
ˇŒög
 
mode
.

84 ; 
Save
 
the
 
ªmaöög
 
⁄to
Åhê
°ack
.

85 ; 
Assum±i⁄
 
th©
 
the
 
lök
 
has
Åhê 
addªss
.

88 
STMFD
 
r13
!,{
r3
}

89 
MOV
 
	gr3
,
r13


90 
ADD
 
	gr13
,r13,#4

91 
STMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

94 ; 
Cuºíéy
 
⁄
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


95 ; 
Modify
 
the
 
c⁄åﬁ
 
∑π
 
of
Åhê
	gCPSR


99 
MRS
 
	gr1
,
CPSR


100 
BIC
 
	gr1
,r1,#0
xff


101 
ORR
 
	gr1
,r1,
r0


102 
MSR
 
	gCPSR_c
,
	gr1


105 ; 
Re°‹e
 
‰om
 
the
 
	g°ack
: 
r3
,
	gr1
,
	gÃ


106 ; 
Rëu∫
 
to
 
the
 
	gˇŒì


109 
LDMFD
 
	gr3
!,{
	gr1
,
	gÃ
}

110 
LDMFD
 
	gr3
,{r3}

111 
MOV
 
	gpc
,
Ã


112 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/fiq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
fiq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eFIQH™dÀr


20 
AREA
 
	gFIQSLOS
,
	gCODE
,
READONLY


22 
c‹eFIQH™dÀr


24 
B
 
	gc‹eFIQH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_device.h

74 
	~"../cm920üp/evíts/swis.h
"

96 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Inô
 (
UINT
);

97 
	#evítIODevi˚Inô
(Ë
	`_evítIODevi˚Inô
 (
Evít_IODevi˚Inô
)

	)

120 
	$__swi
 (
SLOS
Ë
devi˚_åì°r
 *
	`_evítIODevi˚O≥n
 (
UINT
,
UID
 *,UINT,UINT);

121 
	#evítIODevi˚O≥n
(
a
,
b
,
c
Ë
_evítIODevi˚O≥n
 \

	)

122 (
Evít_IODevi˚O≥n
,(
a
),(
b
),(
c
))

142 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚Clo£
 (
UINT
,
devi˚_åì°r
 *,
UID
);

143 
	#evítIODevi˚Clo£
(
a
,
b
Ë
_evítIODevi˚Clo£
 \

	)

144 (
Evít_IODevi˚Clo£
,(
a
),(
b
))

160 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeByã
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

161 
	#evítIODevi˚WrôeByã
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeByã
 \

	)

162 (
Evít_IODevi˚WrôeByã
,(
a
),(
b
),(
c
))

177 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódByã
 (UINT,
devi˚_åì°r
 *,
UID
);

178 
	#evítIODevi˚RódByã
(
a
,
b
Ë
_evítIODevi˚RódByã
 \

	)

179 (
Evít_IODevi˚RódByã
,(
a
),(
b
))

195 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBô
 (
UINT
,
devi˚_åì°r
 *,
UID
,UINT);

196 
	#evítIODevi˚WrôeBô
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBô
 \

	)

197 (
Evít_IODevi˚WrôeBô
,(
a
),(
b
),(
c
))

212 
	$__swi
 (
SLOS
Ë
UINT
 
	`_evítIODevi˚RódBô
 (UINT,
devi˚_åì°r
 *,
UID
);

213 
	#evítIODevi˚RódBô
(
a
,
b
Ë
_evítIODevi˚RódBô
 \

	)

214 (
Evít_IODevi˚RódBô
,(
a
),(
b
))

229 
	$__swi
 (
SLOS
Ë
	`_evítIODevi˚WrôeBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
,*);

230 
	#evítIODevi˚WrôeBlock
(
a
,
b
,
c
Ë
_evítIODevi˚WrôeBlock
 \

	)

231 (
Evít_IODevi˚WrôeBlock
,(
a
),(
b
),(
c
))

246 
	$__swi
 (
SLOS
Ë* 
	`_evítIODevi˚RódBlock
 (
UINT
,
devi˚_åì°r
 *,
UID
);

247 
	#evítIODevi˚RódBlock
(
a
,
b
Ë
_evítIODevi˚RódBlock
 \

	)

248 (
Evít_IODevi˚RódBlock
,(
a
),(
b
))

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_lldebug.h

73 #i‚de‡
LLDEBUG


74 
	#LLDEBUG
 1

	)

76 
	~"../cm920üp/evíts/swis.h
"

92 
	$__swi
 (
SLOS
Ë
	`_brögUpTø˚
 (
UINT
,,
UID
);

93 
	#brögUpTø˚
(
a
,
b
Ë
	`_brögUpTø˚
 (
BrögUp_Tø˚
,◊),(b))

	)

106 
	$__swi
 (
SLOS
Ë
	`_brögUpF©ÆEº‹
 (
UINT
,
UID
);

107 
	#brögUpF©ÆEº‹
(
a
Ë
	`_brögUpF©ÆEº‹
 (
BrögUp_F©ÆEº‹
,◊))

	)

127 
	#ENTRY
 123

	)

128 
	#EXIT
 321

	)

130 
	#Œåa˚bef‹e
(
u
Ë
	`brögUpTø˚
(
ENTRY
,(u))

	)

131 
	#Œåa˚a·î
(
u
Ë
	`brögUpTø˚
(
EXIT
,(u))

	)

133 
	#Œåa˚
(
r
,
u
Ë
	`Œåa˚bef‹e
((u)); \

	)

134 (
r
); \

135 
	`Œåa˚a·î
((
u
))

149 
	#ŒÁèÀº‹
(
e
Ë
	`brögUpF©ÆEº‹
(”))

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_types.h

67 #i‚de‡
_HEADERS_API_TYPES


69 
	#_HEADERS_API_TYPES
 1

	)

71 
	tUINT
;

72 
	tUID
;

73 
	tBYTE
;

74 (*
	tCÆlBack
)();

75 
	tBOOL
;

77 
	#TRUE
 0

	)

78 
	#FALSE
 -1

	)

80 
	#DEVICE_SUCCESS
 0

	)

81 
	#DEVICE_IN_USE
 -1

	)

82 
	#DEVICE_UNKNOWN
 -2

	)

83 
	#DEVICE_NEXT
 -3

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/irq.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
úq
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eIRQH™dÀr


20 
IMPORT
 
evíts_úq_cm920üp_h™dÀr


22 
AREA
 
	gIRQSLOS
,
	gCODE
,
READONLY


24 
c‹eIRQH™dÀr


26 
B
 
	gevíts_úq_cm920üp_h™dÀr
 ; 
bønch
 
IRQ
 
h™dÀr


28 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/async.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


49 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
Sy°em
 - 
mmuSLOS


54 ; * 
ModuÀ
 : 
async


55 ; * 
Des¸ùti⁄
 : 
⁄
 
	`sy°em
 (
íabÀ
 
ˇche
 
™d
 
asynchr⁄ous
 
mode
).

56 ; * 
Hi°‹y
 :

58 ; * 8
th
 
July
 2002 
Andªw
 
N
. 
Sloss


59 ; * - 
p‹ãd
 
‰om
 
Chris
 
Wright
'sÉxample code. 

61 ; * 2 
Augu°
 2002 
Andªw
 
N
. 
Sloss


62 ; * - 
added
 
MMU
 
code


66 
IMPORT
 
jumpToTask1


67 
IMPORT
 
mmuCh™geC⁄åﬁ


68 
IMPORT
 
mmuLﬂdTasks


69 
IMPORT
 
mmuFlushCache


70 
IMPORT
 
mmuAâachPT


71 
IMPORT
 
mmuFlushTLB


72 
IMPORT
 
MmuPCB_Regi⁄TabÀ1


74 
EXPORT
 
swôchOnSy°em


76 
AREA
 
async920
,
CODE
,
READONLY


79 ; 
swôchOnSy°em
 :

80 ; 
íabÀs
 
I
 & 
D
 
ˇche
, 
™d
 
Wrôe
 
back


81 ; 
•ecül
 
to
 
the
 920 
£t
Åhê
bus
Åÿ
asynchr⁄ous
 
˛ockög


84 
swôchOnSy°em


87 ; 
asynchr⁄ous
 
˛ockög
, 920
t
 
⁄ly


90 
LDR
 
r0
,=0xc0000000

91 
LDR
 
r1
,=0xc0000000

92 
BL
 
mmuCh™geC⁄åﬁ


95 ; 
íabÀ
: 
D
&
I
 
ˇche
,
WB
, 
™d
/
‹
 
MMU


98 ; 
E«bÀ
 
ju°
 
MMU
 
i
.
e
. 
	`mmuCh™geC⁄åﬁ
(0x1, 0x1);

100 ; 
LDR
 
r0
,=0x1

101 ; 
LDR
 
r1
,=0x1

104 ; 
E«bÀ
 
ˇche
 
™d
 
MMU
 
i
.
e
. 
	`ch™geC⁄åﬁ
(0x100d, 0x100d);

106 
LDR
 
r0
,=0x100d

107 
LDR
 
r1
,=0x100d

109 
BL
 
mmuCh™geC⁄åﬁ


112 ; 
lﬂd
 
èsks
 
öto
 
mem‹y


115 
BL
 
mmuLﬂdTasks


118 ; 
Pª∑ª
 
MMU
 
Task1


121 
BL
 
mmuFlushCache


122 
BL
 
mmuFlushTLB


123 
LDR
 
r0
,=
MmuPCB_Regi⁄TabÀ1


124 
BL
 
mmuAâachPT


127 ; 
Jump
 
to
 0x400000 
™d
 tÿ
U£r
 
mode
ánd 
íabÀ
 
IRQ
 
öãºu±s


130 
MOV
 
r0
,#0
x400000


131 
B
 
jumpToTask1


132 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/mmu.s

1 ; 
	g____________________________________________________________________


3 ; 
C›yright
 (
c
Ë2002, 
Andªw
 
	gN
. 
	gSloss
, 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes


4 ; 
AŒ
 
rights
 
	gª£rved
.

5 ; 
	g____________________________________________________________________


7 ; 
	gNON
-
COMMERCIAL
 
USE
 
	gLi˚n£


9 ; 
Redi°ributi⁄
 
™d
 
u£
 
ö
 
sour˚
ánd 
bö¨y
 
	gf‹ms
, 
wôh
 
‹
 
	gwôhout


10 ; 
	gmodifiˇti⁄
, 
¨e
 
≥rmôãd
 
¥ovided
 
th©
 
the
 
fﬁlowög
 
	gc⁄dôi⁄s


11 ; 
¨e
 
	gmë
:

13 ; 1. 
F‹
 
	gNON
-
COMMERCIAL
 
USE
 
	g⁄ly
.

15 ; 2. 
Redi°ributi⁄s
 
of
 
sour˚
 
code
 
mu°
 
ªèö
 
the
 
above
 
	gc›yright


16 ; 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
fﬁlowög
 
	gdis˛aimî
.

18 ; 3. 
Redi°ributi⁄s
 
ö
 
bö¨y
 
f‹m
 
mu°
 
ª¥odu˚
 
the
 
	gabove


19 ; 
c›yright
 
	gnŸi˚
, 
this
 
li°
 
of
 
c⁄dôi⁄s
 
™d
 
the
 
	gfﬁlowög


20 ; 
dis˛aimî
 
ö
 
the
 
documíèti⁄
 
	g™d
/
‹
 
Ÿhî
 
m©îüls
 
	g¥ovided


21 ; 
wôh
 
the
 
	gdi°ributi⁄
.

23 ; 4. 
AŒ
 
advîtisög
 
m©îüls
 
míti⁄ög
 
„©uªs
 
‹
 
u£
 
of
 
	gthis


24 ; 
so·w¨e
 
mu°
 
di•œy
 
the
 
fﬁlowög
 
	gacknowÀdgemít
:

26 ; 
This
 
¥odu˘
 
ö˛udes
 
so·w¨e
 
devñ›ed
 
by
 
Andªw
 
	gN
. 
	gSloss
,

27 ; 
Chris
 
Wright
 
™d
 
Domöic
 
	gSymes
.

29 ; 
THIS
 
SOFTWARE
 
IS
 
PROVIDED
 
BY
 
THE
 
	gCONTRIBUTORS
 ``
AS
 
	gIS
'' 
AND
 
	gANY


30 ; 
EXPRESS
 
OR
 
IMPLIED
 
	gWARRANTIES
, 
	gINCLUDING
, 
BUT
 
NOT
 
LIMITED
 
	gTO
, 
	gTHE


31 ; 
IMPLIED
 
WARRANTIES
 
OF
 
MERCHANTABILITY
 
AND
 
FITNESS
 
FOR
 
A
 
	gPARTICULAR


32 ; 
PURPOSE
 
ARE
 
	gDISCLAIMED
. 
IN
 
NO
 
EVENT
 
SHALL
 
THE
 
CONTRIBUTORS
 
	gBE


33 ; 
LIABLE
 
FOR
 
ANY
 
	gDIRECT
, 
	gINDIRECT
, 
	gINCIDENTAL
, 
	gSPECIAL
, 
	gEXEMPLARY
,

34 ; 
OR
 
CONSEQUENTIAL
 
DAMAGES
 (
INCLUDING
, 
BUT
 
NOT
 
LIMITED
 
TO
,

35 ; 
PROCUREMENT
 
OF
 
SUBSTITUTE
 
GOODS
 
OR
 
SERVICES
; 
LOSS
 OF 
USE
, 
DATA
,

36 ; 
OR
 
PROFITS
; OR 
BUSINESS
 
INTERRUPTION
Ë
HOWEVER
 
CAUSED
 
AND
 
ON
 
	gANY


37 ; 
THEORY
 
OF
 
	gLIABILITY
, 
WHETHER
 
IN
 
	gCONTRACT
, 
STRICT
 LIABILITY, 
	gOR


38 ; 
	$TORT
 (
INCLUDING
 
NEGLIGENCE
 
OR
 
OTHERWISE
Ë
ARISING
 
IN
 
ANY
 
WAY
 
OUT


39 ; 
OF
 
THE
 
USE
 OF 
THIS
 
SOFTWARE
, 
EVEN
 
IF
 
ADVISED
 OF THE 
POSSIBILITY


40 ; 
OF
 
SUCH
 
DAMAGE
.

42 ; 
If
 
you
 
have
 
que°i⁄s
 
about
 
this
 
li˚n£
 
‹
 
would
 
like
 
a
 
dif„ª¡


43 ; 
li˚n£
 
∂ó£
 
emaû
 :

45 ; 
™dªw
@
¶oss
.
√t


48 
AREA
 
MMU
, 
CODE


50 
EXPORT
 
mmuCh™geC⁄åﬁ


51 
EXPORT
 
ch™geDomAc˚ss


52 
EXPORT
 
mmuSëTTB


53 
EXPORT
 
mmuFlushTLB


54 
EXPORT
 
mmuFlushCache


56 
mmuFlushCache


57 
MOV
 
r0
, #0

58 
MCR
 
p15
,0,
r0
,
c7
,
c5
,0 ; 
Êush
 
i
 
Cache


59 
MCR
 
p15
,0,
r0
,
c7
,
c6
,0 ; 
Êush
 
d
 
ˇche


60 
MOV
 
pc
, 
Ã


63 ; 
Ch™ge
 
Domaö
 
Ac˚ss
 
Regi°î
 
VÆues


64 ; 
	`ch™geDomAc˚ss
(
vÆue
, 
mask
)

66 
ch™geDomAc˚ss


67 
MVN
 
r2
, 
r1
 ; 
övît
 
mask


68 
BIC
 
r3
, 
r0
, 
r2
 ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


69 
CMP
 
r3
, 
r0


70 
BNE
 
Eº‹C⁄åﬁ
 ; 
vÆue
 
outside
 
of
 
mask
 
£t


71 
MRC
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 ; 
gë
 
domaö
 
ac˚ss
 
vÆues


72 
BIC
 
r3
,Ñ3, 
r1
 ; 
mask
 
off
 
bôs
 
th©
 
ch™ge


73 
ORR
 
r3
,Ñ3, 
r0
 ; 
£t
 
bôs
 
th©
 
ch™ge


74 
MCR
 
p15
, 0, 
r3
, 
c3
, 
c0
, 0 ; 
£t
 
domaö
 
ac˚ss
 
vÆues


75 
MOV
 
r0
, #0

76 
MOV
 
pc
, 
Ã


78 
mmuSëTTB


79 
MCR
 
p15
, 0, 
r0
, 
c2
, 
c0
, 0 ; 
Wrôe
 
TTB
 
wôh
 
ba£
 
addªss


80 
MOV
 
pc
, 
Ã


81 
mmuFlushTLB


82 
MOV
 
r0
, #0

83 
MCR
 
p15
, 0, 
r0
, 
c8
, 
c7
, 0 ; 
Êush
 
bŸh
 
the
 
TLBs


84 
MOV
 
pc
, 
Ã


86 ; 
Ch™ge
 
C⁄åﬁ
 
Regi°î
 
VÆues


87 ; 
	`ch™geC⁄åﬁ
(
vÆue
, 
mask
)

89 
mmuCh™geC⁄åﬁ


90 
MVN
 
r2
, 
r1
 ; 
övît
 
mask


91 
BIC
 
r3
, 
r0
, 
r2
 ; 
˛ór
 
vÆues
 
th©
 
¨e
 
nŸ
 
masked


92 
CMP
 
r3
, 
r0


93 
BNE
 
Eº‹C⁄åﬁ
 ; 
vÆue
 
outside
 
of
 
mask
 
£t


94 
MRC
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 ; 
gë
 
c⁄åﬁ
 
vÆues


95 
BIC
 
r3
,Ñ3, 
r1
 ; 
mask
 
off
 
bôs
 
th©
 
ch™ge


96 
ORR
 
r3
,Ñ3, 
r0
 ; 
£t
 
bôs
 
th©
 
ch™ge


97 
MCR
 
p15
, 0, 
r3
, 
c1
, 
c0
, 0 ; 
£t
 
c⁄åﬁ
 
vÆues


98 
MOV
 
r0
, #0

99 
MOV
 
pc
, 
Ã


102 
OutOfR™ge


103 
B
 
OutOfR™ge
 ; 
lo›
 
©
 
îr‹
 
debuggög


105 
Eº‹C⁄åﬁ


106 
b
 
Eº‹C⁄åﬁ


107 
Eº‹Pîmissi⁄
 ; 
Eº‹
 
Pîmissi⁄
 =4

108 
b
 
Eº‹Pîmissi⁄
 ; 
debug
 
ã°


109 
ADD
 
r0
,Ñ0, #1

110 
Eº‹Size
 ; 
Eº‹
 
Size
 = 3

111 
ADD
 
r0
,Ñ0, #1

112 
Eº‹Addªss
 ; 
Eº‹
 
Addªss
 
u«lig√d
 = 2

113 
ADD
 
r0
,Ñ0, #1

114 
Eº‹Regi⁄
 ; 
Eº‹
 
Regi⁄
 
nŸ
 
vÆid
 = 1

115 
ADD
 
r0
,Ñ0, #1

116 
MOV
 
pc
, 
Ã


118 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/regions.h

74 
	#SZ_4G
 31

	)

75 
	#SZ_2G
 30

	)

76 
	#SZ_1G
 29

	)

77 
	#SZ_512M
 28

	)

78 
	#SZ_256M
 27

	)

79 
	#SZ_128M
 26

	)

80 
	#SZ_64M
 25

	)

81 
	#SZ_32M
 24

	)

82 
	#SZ_16M
 23

	)

83 
	#SZ_8M
 22

	)

84 
	#SZ_4M
 21

	)

85 
	#SZ_2M
 20

	)

86 
	#SZ_1M
 19

	)

87 
	#SZ_512K
 18

	)

88 
	#SZ_256K
 17

	)

89 
	#SZ_128K
 16

	)

90 
	#SZ_64K
 15

	)

91 
	#SZ_32K
 14

	)

92 
	#SZ_16K
 13

	)

93 
	#SZ_8K
 12

	)

94 
	#SZ_4K
 11

	)

98 
	#cb
 0x0

	)

99 
	#cB
 0x1

	)

100 
	#WT
 0x2

	)

101 
	#WB
 0x3

	)

105 
	#CCB
 7

	)

106 
	#CCb
 6

	)

107 
	#CcB
 5

	)

108 
	#Ccb
 4

	)

109 
	#cCB
 3

	)

110 
	#cCb
 2

	)

111 
	#ccB
 1

	)

112 
	#ccb
 0

	)

116 
	#CWB
 7

	)

117 
	#CWT
 6

	)

118 
	#cWB
 3

	)

119 
	#cWT
 2

	)

122 
	#rwrw
 0x0

	)

123 
	#RWrw
 0x1

	)

124 
	#RWRw
 0x2

	)

125 
	#RWRW
 0x3

	)

128 
	#Rwrw
 0x5

	)

129 
	#RwRw
 0x6

	)

133 
	#xx
 0x0

	)

134 
	#Xx
 0x1

	)

135 
	#XX
 0x3

	)

138 
	#RWX
 0x3

	)

142 
	#rwxrwx
 (
xx
 << 4Ë+ (
rwrw
)

	)

143 
	#rwXrwx
 (
Xx
 << 4Ë+ (
rwrw
)

	)

144 
	#rwXrwX
 (
XX
 << 4Ë+ (
rwrw
)

	)

146 
	#RWxrwx
 (
xx
 << 4Ë+ (
RWrw
)

	)

147 
	#RWXrwx
 (
Xx
 << 4Ë+ (
RWrw
)

	)

148 
	#RWXrwX
 (
XX
 << 4Ë+ (
RWrw
)

	)

150 
	#RWxRwx
 (
xx
 << 4Ë+ (
RWRw
)

	)

151 
	#RWXRwx
 (
Xx
 << 4Ë+ (
RWRw
)

	)

152 
	#RWXRwX
 (
XX
 << 4Ë+ (
RWRw
)

	)

154 
	#RWxRWx
 (
xx
 << 4Ë+ (
RWRW
)

	)

155 
	#RWXRWx
 (
Xx
 << 4Ë+ (
RWRW
)

	)

156 
	#RWXRWX
 (
XX
 << 4Ë+ (
RWRW
)

	)

162 
	#Rwxrwx
 (
xx
 << 4Ë+ (
Rwrw
)

	)

163 
	#RwXrwx
 (
Xx
 << 4Ë+ (
Rwrw
)

	)

164 
	#RwXrwX
 (
XX
 << 4Ë+ (
Rwrw
)

	)

166 
	#RwxRwx
 (
xx
 << 4Ë+ (
RwRw
)

	)

167 
	#RwXRwx
 (
Xx
 << 4Ë+ (
RwRw
)

	)

168 
	#RwXRwX
 (
XX
 << 4Ë+ (
RwRw
)

	)

171 
	#ACTIVE
 1

	)

172 
	#DORMANT
 0

	)

175 
	#D15
 0x0f

	)

176 
	#D14
 0x0e

	)

177 
	#D13
 0x0d

	)

178 
	#D12
 0x0c

	)

179 
	#D11
 0x0b

	)

180 
	#D10
 0x0a

	)

181 
	#D09
 0x09

	)

182 
	#D08
 0x08

	)

183 
	#D07
 0x07

	)

184 
	#D06
 0x06

	)

185 
	#D05
 0x05

	)

186 
	#D04
 0x04

	)

187 
	#D03
 0x03

	)

188 
	#D02
 0x02

	)

189 
	#D01
 0x01

	)

190 
	#D00
 0x00

	)

194 
	#SYSTEM
 0

	)

195 
	#TASK1
 1

	)

196 
	#TASK2
 2

	)

197 
	#TASK3
 3

	)

202 
	#BACKGROUND
 0

	)

203 
	#PRIVATE_SYSTEM
 2

	)

204 
	#ACTIVE_TASK
 4

	)

205 
	#SHARED_SYSTEM
 6

	)

206 
	#PERIPHERAL
 8

	)

207 
	#BLOCK_REGION
 10

	)

208 
	#PT_REGION
 20

	)

212 
	#VA
 0

	)

213 
	#SIZE
 1

	)

214 
	#AP
 2

	)

215 
	#CB
 3

	)

216 
	#ENABLE
 4

	)

217 
	#PTA
 5

	)

218 
	#TYPE
 6

	)

219 
	#DOM
 7

	)

220 
	#PA
 8

	)

221 
	#LA
 9

	)

224 
	#FAULT
 0

	)

225 
	#COARSE
 1

	)

226 
	#SECTION
 2

	)

227 
	#FINE
 3

	)

229 
	#TTB
 0x00038000

	)

230 
	#PTB
 
TTB
 + 0x4000

	)

231 
	#PT
(
x
Ë
PTB
 +(x*0x400)

	)

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/util.c

72 
	~"ªgi⁄s.h
"

73 
	~"utû.h
"

79 
¥ötSètus
();

80 
mmuInôSy°em
();

81 
mmuInôTasks
();

82 
mmuInôTask
(
RT
);

83 
mmuCª©eRegi⁄
(
RT
);

84 
mmuCª©ePT
(
RT
);

85 
mmuAâachPT
(
RT
);

86 
mmuLﬂdTask
(
RT
);

87 
mmuLﬂdRegi⁄
(
RT
);

89 
RT
 
MmuPCB_Regi⁄TabÀ1
;

90 
RT
 
MmuPCB_Regi⁄TabÀ2
;

91 
RT
 
MmuPCB_Regi⁄TabÀ3
;

119 
RT
 
	gπFau…
 =

123 
rwxrwx
,

124 
ccb
,

125 
DORMANT
,

126 
TTB
,

127 
SECTION
,

128 
D00
,

135 
RT
 
	gπPîùh
 =

139 
RWXrwx
,

140 
ccb
,

141 
ACTIVE
,

142 
TTB
,

143 
SECTION
,

144 
D15
,

149 
RT
 
	gπPT
 =

153 
RWXrwx
,

154 
ccb
,

155 
ACTIVE
,

156 
PT
(
SYSTEM
),

157 
COARSE
,

158 
D15
,

163 
RT
 
	gπLﬂd
 =

167 
RWXRWX
,

168 
ccb
,

169 
ACTIVE
,

170 
PT
(
SYSTEM
),

171 
COARSE
,

172 
D15
,

177 
RT
 
	gπSh¨ed
 =

181 
RWXRWX
,

182 
CWT
,

183 
ACTIVE
,

184 
PT
(
SYSTEM
),

185 
COARSE
,

186 
D15
,

191 
RT
 
	gπKî√l
 =

195 
RWXrwx
,

196 
CWT
,

197 
ACTIVE
,

198 
PT
(
SYSTEM
),

199 
COARSE
,

200 
D15
,

220 
	$mmuInôSy°em
()

224 
	`mmuCª©ePT
(
πFau…
);

227 
	`mmuCª©ePT
(
πKî√l
);

230 
	`mmuCª©eRegi⁄
(
πKî√l
);

233 
	`mmuCª©eRegi⁄
(
πSh¨ed
);

236 
	`mmuCª©eRegi⁄
(
πLﬂd
);

239 
	`mmuCª©eRegi⁄
(
πPT
);

242 
	`mmuAâachPT
(
πKî√l
);

245 
	`mmuCª©eRegi⁄
(
πPîùh
);

248 
	}
}

261 
	$mmuInôTask
(
RT
 
π
)

263 
	`mmuCª©ePT
(
π
);

264 
	`mmuCª©eRegi⁄
(
π
);

265 
	`mmuAâachPT
(
π
);

267 
	}
}

279 
	$mmuLﬂdTask
(
RT
 
π
)

281 
	`mmuAâachPT
(
π
);

282 
	`mmuFlushCache
();

283 
	`mmuFlushTLB
();

284 
	`mmuLﬂdRegi⁄
(
π
);

286 
	}
}

298 
	$mmuCª©ePT
(
RT
 
π
)

300 *
±
;

301 
cou¡
,
i
;

303 
±
 = (*)
π
[
PTA
];

305 
π
[
TYPE
])

307 
COARSE
: {
cou¡
 = 256; ;}

308 
SECTION
:{
cou¡
 = 4096; ;}

309 
FINE
: {
cou¡
 = 1024; ;}

313 
i
 = 
cou¡
 -1; i >= 0; i--)

315 
±
[
i
] = 
FAULT
;

319 
	}
}

331 
	$mmuAâachPT
(
RT
 
π
)

333 * 
âb
 = (*)
TTB
;

335 
π
[
TYPE
])

337 
COARSE
: {
âb
[
π
[
VA
] >> 20] = (π[
PTA
]&0xfffffc00Ë|Ñt[
DOM
]<<5 | 0x11; ;}

338 
SECTION
:{;}

339 
FINE
: {
âb
[
π
[
VA
] >> 20] = (π[
PTA
]&0xfffff000Ë|Ñt[
DOM
]<<5 | 0x13; ;}

344 
	}
}

356 
	$mmuCª©eRegi⁄
(
RT
 
π
 )

358 
fõld
, 
°¨t
;

359 
i
,
j
;

360 
lAP
 = 
π
[
AP
]&0x3;

362 *
±
;

363 
±
 = (*)
π
[
PTA
];

365 
π
[
TYPE
])

367 
COARSE
:

369 
lPA
 = 
π
[
PA
]&0xfffff000;

370 
°¨t
 = ((
π
[
VA
]& 0x000ff000) >> 12);

371 
fõld
 = 
lAP
<<10 |ÜAP<<8 |ÜAP<<6 |ÜAP<<4 | (
π
[
CB
]&0x3)<< 2 | 0x2;

373 
i
 = 
π
[
SIZE
]-1 ; i >= 0; i--)

374 
±
[
°¨t
+
i
] = (
lPA
 + (i<<12Ë| 
fõld
);

377 
SECTION
:

379 
lPA
 = 
π
[
PA
]&0xfff00000;

380 
°¨t
 = (
π
[
VA
]>> 20);

381 
fõld
 = 
lAP
<<10 | 
π
[
DOM
]<<5 | (π[
CB
]&0x3) << 2 | 0x12;

383 
i
 = 
π
[
SIZE
]-1 ; i >= 0; i--)

384 
±
[
°¨t
+
i
] = (
lPA
 + (i<<20Ë| 
fõld
);

387 
FINE
:

389 
lPA
 = 
π
[
PA
]&0xfffff000;

390 
°¨t
 = ((
π
[
VA
]& 0x000ff000) >> 12);

391 
fõld
 = 
lAP
<<10 |ÜAP<<8 |ÜAP<<6 |ÜAP<<4 | (
π
[
CB
]&0x3)<< 2 | 0x2;

393 
i
 = (
π
[
SIZE
]-1) ; i >= 0; i--)

394 
j
 = 3 ; j >= 0; j--)

395 
±
[
°¨t
+(
i
*4)+
j
] = (
lPA
 + (i<<12Ë| 
fõld
);

403 
	}
}

415 
	$mmuLﬂdRegi⁄
(
RT
 
π
)

417 *
‰om
, *
to
;

418 
i
;

419 
‰om
 = (*)
π
[
LA
];

420 
to
 = (*)
π
[
VA
];

422 
i
 = 0; i < 
π
[
SIZE
] * 1024; i++)

423 
to
[
i
]=
‰om
[i];

425 
	}
}

437 
	$mmuInôTasks
()

439 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ1
);

440 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ2
);

441 
	`mmuInôTask
(
MmuPCB_Regi⁄TabÀ3
);

442 
	}
}

454 
	$mmuLﬂdTasks
()

456 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ1
);

457 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ2
);

458 
	`mmuLﬂdTask
(
MmuPCB_Regi⁄TabÀ3
);

459 
	}
}

471 
	$mmuScheduÀ
 (
tsk
)

473 
	`mmuFlushCache
();

474 
	`mmuFlushTLB
();

476 
tsk
)

478 0: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ1
); ;

479 1: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ2
); ;

480 2: 
	`mmuAâachPT
(
MmuPCB_Regi⁄TabÀ3
); ;

482 
	}
}

496 
	$mem‹yMmuSy°em
 ()

498 
âb
 = 
TTB
;

508 
	`mmuInôSy°em
 ();

518 
	`mmuInôTasks
 ();

528 
	`mmuSëTTB
(
âb
);

538 
	`ch™geDomAc˚ss
(0x40000040,0xffffffff);

539 
	}
}

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/util.h

72 
	tRT
[10];

89 
mmuInôSy°em
();

102 
mmuInôTask
(
RT
 
π
);

114 
mmuLﬂdTask
(
RT
 
π
);

126 
mmuCª©ePT
(
RT
 
π
);

138 
mmuAâachPT
(
RT
 
π
);

150 
mmuCª©eRegi⁄
(
RT
 
π
);

162 
mmuLﬂdRegi⁄
(
RT
 
π
);

174 
mmuInôTasks
();

186 
mmuLﬂdTasks
();

198 
mmuScheduÀ
 (
tsk
);

212 
mem‹yMmuSy°em
();

218 
mmuSëTTB
();

219 
mmuFlushTLB
();

220 
mmuFlushCache
();

221 
ch™geDomAc˚ss
(, );

222 
ch™geC⁄åﬁ
(, );

	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/prefetch.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
¥e„tch
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹ePª„tchAb‹tH™dÀr


20 
AREA
 
	gPREFECTABTSLOS
,
	gCODE
,
READONLY


22 
c‹ePª„tchAb‹tH™dÀr


24 
B
 
	gc‹ePª„tchAb‹tH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/reserved.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
ª£rved
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eRe£rvedH™dÀr


20 
AREA
 
	gRESERVEDSLOS
,
	gCODE
,
READONLY


22 
c‹eRe£rvedH™dÀr


24 
B
 
	gc‹eRe£rvedH™dÀr
 ; 
öföôe
 
lo›


26 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/sal.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
ßl
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
≠∂iˇti⁄Lﬂdî


19 
IMPORT
 
öôSëUpSècks


21 
AREA
 
	gAPPLOADER
,
	gCODE
,
	gREADONLY


23 ; -- 
	g≠∂iˇti⁄Lﬂdî
 -------------------------------------------------------

25 ; 
	gDes¸ùti⁄s
 : 
≠∂iˇti⁄
 
lﬂdî


27 ; 
	gP¨amëîs
 :

28 ; 
	gRëu∫
 :

29 ; 
	gNŸes
 :

32 
≠∂iˇti⁄Lﬂdî


34 
LDR
 
	gr11
,=
ALT


36 
≠∂iˇti⁄LﬂdîLo›


37 
LDR
 
r12
,[
r11
],#4

38 
LDR
 
	gr14
,[
r11
],#4

39 
LDR
 
	gr13
,[
r11
],#4

41 
CMP
 
	gr13
,#0

42 
BEQ
 
öôSëUpSècks


44 
≠∂iˇti⁄BlockC›y


46 
LDMIA
 
	gr12
!,{
	gr0
-
	gr10
}

47 
STMIA
 
	gr13
!,{
	gr0
-
	gr10
}

48 
CMP
 
	gr12
,
r14


49 
BLE
 
≠∂iˇti⁄BlockC›y


50 
B
 
	g≠∂iˇti⁄LﬂdîLo›


54 ; * 
Aµliˇti⁄
 
Lﬂdî
 
	gTabÀ


58 
	gALT


59 ; 
íåy
 
öto
 
the
 
	gèbÀ


61 ; 
	g§c_°¨èddr


62 ; 
	g§c_ídaddr


63 ; 
	gde°_addr


66 ; 
	$èsk
 (3)

68 
DCD
 
èsk3°¨t


69 
DCD
 
èsk3íd


70 
DCD
 0x30000

72 ; 
	$èsk
 (2)

74 
DCD
 
èsk2°¨t


75 
DCD
 
èsk2íd


76 
DCD
 0x28000

78 ; 
	$èsk
 (1)

80 
DCD
 
èsk1°¨t


81 
DCD
 
èsk1íd


82 
DCD
 0x20000

84 ; 
Tîmö©e


86 
DCD
 0

87 
DCD
 0

88 
DCD
 0

91 
AREA
 
zzzAIB
,
DATA
,
READONLY


93 
ALIGN
 4

94 
èsk1°¨t


95 
INCBIN
 ../
image
/
≠ps
/
èsk1
.
bö


96 
èsk1íd


97 
èsk2°¨t


98 
INCBIN
 ../
image
/
≠ps
/
èsk2
.
bö


99 
èsk2íd


100 
èsk3°¨t


101 
INCBIN
 ../
image
/
≠ps
/
èsk3
.
bö


102 
èsk3íd


103 
END


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/scheduler.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
scheduÀr
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
IMPORT
 
MmuPCB_CuºítTask


19 
IMPORT
 
MmuPCB_PåCuºítTask


20 
IMPORT
 
MmuPCB_PåNextTask


21 
IMPORT
 
MmuPCB_TabÀ


22 
IMPORT
 
MmuPCB_IRQSèck


23 
IMPORT
 
mmuScheduÀ


25 
EXPORT
 
Kî√l_ScheduÀr


27 
AREA
 
	gSCHEDULER
,
	gCODE
,
READONLY


29 
	gKî√l_ScheduÀr


32 ; 
	gScheduÀr
: 
sim∂e
 
round
 
robö
 
Æg‹ôhm


35 
CuºítTask


36 
LDR
 
	gr3
,=
MmuPCB_CuºítTask


37 
LDR
 
r0
,[
r3
] ; 
	gr0
 = 
Cuºít
 
Task
 
ID


38 
LDR
 
r1
,=
MmuPCB_TabÀ


39 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
addªss
 
of
 
cuºít
 
èsk


40 
LDR
 
r2
,=
MmuPCB_PåCuºítTask


41 
STR
 
r1
,[
r2
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


42 ; ** 
	gPCB_PåCuºítTask
 - 
upd©ed
 
wôh
 
the
 
√w
 
addªss


43 
NextTask


44 
ADD
 
	gr0
,r0,#1 ;Ñ0 = 
Cuºít_Task
+1

45 
CMP
 
r0
,#3

46 
MOVEQ
 
	gr0
,#0 ; r0==
MaxTask
 
thí
 
r0
=0

47 
STR
 
r0
,[
r3
] ; 
ßve
 
√w
 
Task
 
ID


48 
STMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gÃ
}

49 
BL
 
	gmmuScheduÀ
 ; 
£tup
 
mmu


50 
LDMFD
 
	g•
!,{
	gr0
-
	gr4
,
	gr12
,
	gÃ
}

51 
LDR
 
	gr1
,=
MmuPCB_TabÀ


52 
LDR
 
r1
,[r1,
r0
,
LSL
#2] ; 
	gr1
 = 
√w
 
√xt
 
èsk
 
PCB
 
addªss


53 
LDR
 
r0
,=
MmuPCB_PåNextTask


54 
STR
 
r1
,[
r0
] ; 
ßve
 
cuºít
 
°ru˘uª
 
	gèsk


55 ; ** 
	gMpuPCB_PåCuºítTask
 = 
cuºít
 
PCB


56 ; ** 
	gMpuPCB_PåNextTask
 = 
√xt
 
PCB


57 ; ** 
	gMpuPCB_CuºítTask
 = 
√w
 
TASK_ID


60 ; 
C⁄ãxt
 

63 
h™dÀr_c⁄ãxtswôch


64 
LDMFD
 
	g•
!,{
	gr0
-
	gr3
,
	gr12
,
	gr14
} ; 
ª°‹e
 
the
 
ªmaöög
 
ªgi°îs


65 
LDR
 
	gr13
,=
MmuPCB_PåCuºítTask


66 
LDR
 
r13
,[r13]

67 
SUB
 
	gr13
,r13,#60 ;Ñ13->
cuºít
 
PCB


68 
STMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
ßve
 
U£r
 
ªgi°îs


69 
MRS
 
	gr0
, 
SPSR


70 
STMDB
 
	gr13
,{
	gr0
,
	gr14
} ; 
ßve
 
the
 
ª°


71 
LDR
 
	gr13
,=
MmuPCB_PåNextTask


72 
LDR
 
r13
,[r13]

73 
SUB
 
	gr13
,r13,#60 ;Ñ13->
√w
 
PCB


74 
LDMDB
 
	gr13
,{
	gr0
,
	gr14
}

75 
MSR
 
	g•§_cxsf
, 
r0


76 
LDMIA
 
	gr13
,{
	gr0
-
	gr14
}^ ; 
lﬂd
 
U£r
 
ªgi°îs


77 
LDR
 
	gr13
,=
MmuPCB_IRQSèck


78 
LDR
 
r13
,[r13]

79 
MOVS
 
	gpc
,
	gr14
 ;  
√xt
 
èsk


80 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/start.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
°¨t
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


19 ; * 
	gIMPORT


22 
IMPORT
 
c‹eInôülize


23 
IMPORT
 
c‹eUndeföedH™dÀr


24 
IMPORT
 
c‹eSWIH™dÀr


25 
IMPORT
 
c‹ePª„tchAb‹tH™dÀr


26 
IMPORT
 
c‹eD©aAb‹tH™dÀr


27 
IMPORT
 
c‹eRe£rvedH™dÀr


28 
IMPORT
 
c‹eIRQH™dÀr


29 
IMPORT
 
c‹eFIQH™dÀr


30 
IMPORT
 
MmuPCB_TabÀ


32 
AREA
 
	gENTRYSLOS
,
	gCODE
,
	gREADONLY


35 ; * 
	gCODE


38 
	gENTRY


40 ; -- 
Ve˘‹
 
	gTabÀ
 ------------------------------------------------------------

42 ; 
èbÀ
 
	goff£t
 ..........

43 ; 00 - 
	gRe£t


44 ; 04 - 
Undeföed
 
	gö°ru˘i⁄s


45 ; 08 - 
SWI
 
	gö°ru˘i⁄s


46 ; 0C - 
¥e„tch
 
	gab‹t


47 ; 10 - 
D©a
 
	gab‹t


48 ; 14 - 
	gRe£rved


49 ; 18 - 
IRQ
 
	göãºu±s


50 ; 1C - 
FIQ
 
öãºu±s


52 
LDR
 
	gpc
,
ve˘‹Re£t


53 
LDR
 
	gpc
,
ve˘‹Undeföed


54 
LDR
 
	gpc
,
ve˘‹SWI


55 
LDR
 
	gpc
,
ve˘‹Pª„tchAb‹t


56 
LDR
 
	gpc
,
ve˘‹D©aAb‹t


57 
LDR
 
	gpc
,
ve˘‹Re£rved


58 
LDR
 
	gpc
,
ve˘‹IRQ


59 
LDR
 
	gpc
,
	gve˘‹FIQ


61 ; -- 
U£ful
 
addªss
 
to
 
the
 
PCB
 
	gèbÀs
 ------------------

63 
±rPCBTabÀ
 
DCD
 
	gMmuPCB_TabÀ


65 ; -- 
Kî√l
 
Jump
 
	gèbÀ
 -------------------------------------------------------

67 
ve˘‹Re£t
 
DCD
 
c‹eInôülize


68 
ve˘‹Undeföed
 
DCD
 
c‹eUndeföedH™dÀr


69 
ve˘‹SWI
 
DCD
 
c‹eSWIH™dÀr


70 
ve˘‹Pª„tchAb‹t
 
DCD
 
c‹ePª„tchAb‹tH™dÀr


71 
ve˘‹D©aAb‹t
 
DCD
 
c‹eD©aAb‹tH™dÀr


72 
ve˘‹Re£rved
 
DCD
 
c‹eRe£rvedH™dÀr


73 
ve˘‹IRQ
 
DCD
 
c‹eIRQH™dÀr


74 
ve˘‹FIQ
 
DCD
 
c‹eFIQH™dÀr


76 
	gEND


79 ; * 
END
 
OF
 
	g°¨t
.
	gs


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/swi.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
swi
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
	gc‹eSWIH™dÀr


21 ; * 
	gIMPORT


24 
IMPORT
 
evíts_swi_cm920üp_h™dÀr


27 
AREA
 
	gSWISLOS
, 
	gCODE
, 
	gREADONLY


30 ; * 
kî√l
 
swi
 
h™dÀr
 
	gevít


33 
c‹eSWIH™dÀr


35 
STMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gÃ
} ; 
St‹e
 
ªgi°îs


36 
LDR
 
	gr10
,[
Ã
,#-4] ; 
CÆcuœã
 
addªss
 
of
 
SWI
 
ö°ru˘i⁄


37 
BIC
 
	gr10
,r10,#0
	gxff000000
 ; 
Mask
 
off
 
	gt›
 8 
bôs


38 
MOV
 
	gr1
,
	g•
 ; 
£c⁄d
 
∑ømëî
 
to
 
C
 
	groutöe
...

39 ; 
is
 
poöãr
 
to
 
	gvÆues
.

40 
MRS
 
	gr2
,
	gSPSR
 ; 
move
 
the
 
•§
 
öto
 
gp
 

41 
STMFD
 
	g•
!,{
	gr2
} ; 
°‹e
 
•§
 
⁄to
 
the
 
	g°ack
.

42 ; 
This
 
is
 
⁄ly
 
	gªÆly


43 ; 
√eded
 
ö
 
of
 
√°ed
 
	gSWI
's

44 
BL
 
	gswi_jum±abÀ
 ; 
ˇŒ
 
C
 
routöe
 
to
 
h™dÀ
 
SWI


45 
LDMFD
 
	g•
!,{
	gr2
} ; 
ª°‹e
 
•§
 
‰om
 
°ack
 
öto
 
r2


46 
MSR
 
	gSPSR_cf
,
	gr2
 ; 
™d
 
ª°‹e
 
ô
 
öto
 
	g•§
.

47 
LDMFD
 
	g•
!,{
	gr0
-
	gr12
,
	gpc
}^ ; 
ª°‹e
 
ªgi°îs
 
™d
 .

50 ; 
SWI
 
Jump
 
	gTabÀ


51 ; 
	gr0
 - 
swi
 
	gNumbî


52 ; 
	gr1
 - 
poöt
 
to
 
the
 
	gr0
-
	gr12


55 
swi_jum±abÀ


57 
MOV
 
	gr0
,
	gr10
 ; 
move
 
SWI
 
numbî
 
öto
 
r0


58 
B
 
	gevíts_swi_cm920üp_h™dÀr
 ; 
ˇŒög
 
c
 
routöe
 
to
 
h™dÀ
 
swi
 
ˇŒ


59 
	gEND


	@/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/undef.s

2 ; * 
Sim∂e
 
Lôée
 
O≥øtög
 
	gSy°em
 - 
	gSLOS


7 ; * 
	gModuÀ
 : 
d©a
.
s


8 ; * 
	gProje˘
 : 
SLOS


9 ; * 
	gVîsi⁄
 : 0.09

10 ; * 
	gOrigö©‹
 : 
Andªw
 
N
. 
Sloss


11 ; * 
	gHi°‹y
 :

13 ; * 16
th
 
	gJuly
 2003 
Andªw
 
	gN
. 
	gSloss


14 ; * - 
added
 
hódî
 
	göf‹m©i⁄


18 
EXPORT
 
c‹eUndeföedH™dÀr


20 
AREA
 
	gUNDEFSLOS
,
	gCODE
,
READONLY


22 
c‹eUndeföedH™dÀr


23 
B
 
	gc‹eUndeföedH™dÀr
 ; 
öföôe
 
lo›


25 
	gEND


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


120 #unde‡
°©ic_as£π


121 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__SSE2_MATH__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-x32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_¸óã_moduÀ


	)

13 
	#__°ub_Áâach


	)

14 
	#__°ub_fchÊags


	)

15 
	#__°ub_fdëach


	)

16 
	#__°ub_gë_kî√l_syms


	)

17 
	#__°ub_gëmsg


	)

18 
	#__°ub_gây


	)

19 
	#__°ub_lchmod


	)

20 
	#__°ub_nfs£rv˘l


	)

21 
	#__°ub_putmsg


	)

22 
	#__°ub_quîy_moduÀ


	)

23 
	#__°ub_ªvoke


	)

24 
	#__°ub_£éogö


	)

25 
	#__°ub_sigªtu∫


	)

26 
	#__°ub_s°k


	)

27 
	#__°ub_°ty


	)

28 
	#__°ub_u£lib


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
568
34340
/home/jkr555/arm/guide/ch05_C/ch05test.c
/home/jkr555/arm/guide/ch05_C/ch05test.h
/home/jkr555/arm/guide/ch05_C/test.c
/home/jkr555/arm/guide/ch05_C/test_s.s
/home/jkr555/arm/guide/ch06_asm/bitstream.s
/home/jkr555/arm/guide/ch06_asm/ch06test.c
/home/jkr555/arm/guide/ch06_asm/ch06test.h
/home/jkr555/arm/guide/ch06_asm/main.c
/home/jkr555/arm/guide/ch06_asm/main1.c
/home/jkr555/arm/guide/ch06_asm/main3.s
/home/jkr555/arm/guide/ch06_asm/main4.c
/home/jkr555/arm/guide/ch06_asm/matrix.s
/home/jkr555/arm/guide/ch06_asm/memset.s
/home/jkr555/arm/guide/ch06_asm/merge.s
/home/jkr555/arm/guide/ch06_asm/ref.c
/home/jkr555/arm/guide/ch06_asm/shift.s
/home/jkr555/arm/guide/ch06_asm/square.s
/home/jkr555/arm/guide/ch06_asm/square2.s
/home/jkr555/arm/guide/ch06_asm/sumof.s
/home/jkr555/arm/guide/ch06_asm/switch.s
/home/jkr555/arm/guide/ch06_asm/tolower.s
/home/jkr555/arm/guide/ch06_asm/unalign.s
/home/jkr555/arm/guide/ch07_primitives/bits.s
/home/jkr555/arm/guide/ch07_primitives/ch07test.c
/home/jkr555/arm/guide/ch07_primitives/ch07test.h
/home/jkr555/arm/guide/ch07_primitives/div_a7m.s
/home/jkr555/arm/guide/ch07_primitives/div_a9e.s
/home/jkr555/arm/guide/ch07_primitives/gen.c
/home/jkr555/arm/guide/ch07_primitives/mul.s
/home/jkr555/arm/guide/ch07_primitives/norm.s
/home/jkr555/arm/guide/ch07_primitives/rand.s
/home/jkr555/arm/guide/ch07_primitives/ref_bits.c
/home/jkr555/arm/guide/ch07_primitives/ref_div.c
/home/jkr555/arm/guide/ch07_primitives/ref_mul.c
/home/jkr555/arm/guide/ch07_primitives/ref_norm.c
/home/jkr555/arm/guide/ch07_primitives/ref_root.c
/home/jkr555/arm/guide/ch07_primitives/ref_sat.c
/home/jkr555/arm/guide/ch07_primitives/ref_tran.c
/home/jkr555/arm/guide/ch07_primitives/root.s
/home/jkr555/arm/guide/ch07_primitives/sat.s
/home/jkr555/arm/guide/ch07_primitives/tran.s
/home/jkr555/arm/guide/ch08_dsp/ch08test.c
/home/jkr555/arm/guide/ch08_dsp/ch08test.h
/home/jkr555/arm/guide/ch08_dsp/dot.s
/home/jkr555/arm/guide/ch08_dsp/fft.s
/home/jkr555/arm/guide/ch08_dsp/fir.s
/home/jkr555/arm/guide/ch08_dsp/gen.c
/home/jkr555/arm/guide/ch08_dsp/iir.s
/home/jkr555/arm/guide/ch08_dsp/ref_dsp.c
/home/jkr555/arm/guide/ch09_excpts/src/nih9_9.s
/home/jkr555/arm/guide/ch09_excpts/src/pdih9_13.s
/home/jkr555/arm/guide/ch09_excpts/src/pgrp9_14.s
/home/jkr555/arm/guide/ch09_excpts/src/psih9_11.s
/home/jkr555/arm/guide/ch09_excpts/src/pstd9_12.s
/home/jkr555/arm/guide/ch09_excpts/src/rih9_10.s
/home/jkr555/arm/guide/ch09_excpts/src/tbench.s
/home/jkr555/arm/guide/ch09_excpts/src/vic.s
/home/jkr555/arm/guide/ch10_firm/Sand/build/src/sand.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task1_start.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task1_start.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task2_start.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task2_start.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task3_start.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/apps/task3_start.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_com.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_com.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_readline.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_readline.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_serial.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_serial.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_shell.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/cli_shell.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/mutex.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/mutex.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/swiapi.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/data.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/ddf_tree.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/ddf_types.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/led_driver.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/led_driver.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/segment_driver.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/segment_driver.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/serial_driver.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/devices/serial_driver.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/button_service.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/button_service.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/event_init.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/event_init.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/irq_handler.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swi_handler_test.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/swis.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/tick_service.c
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/events/tick_service.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/headers/all.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/headers/macros.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/init.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/e7t/pcb.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/irq.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/start.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/swi.s
/home/jkr555/arm/guide/ch11_os/GNU/SLOS/build/src/undef.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task1_start.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task1_start.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task2_start.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task2_start.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task3_start.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/apps/task3_start.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_com.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_com.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_readline.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_readline.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_serial.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_serial.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_shell.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/cli_shell.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/mutex.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/mutex.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/data.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/ddf_tree.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/ddf_types.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/led_driver.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/led_driver.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/segment_driver.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/segment_driver.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/serial_driver.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/devices/serial_driver.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/button_service.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/button_service.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/event_init.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/event_init.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/irq_handler.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/swi_handler.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/swis.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/tick_service.c
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/events/tick_service.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/headers/all.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/headers/macros.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/init.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/e7t/pcb.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/irq.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/start.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/swi.s
/home/jkr555/arm/guide/ch11_os/SLOS/build/src/undef.s
/home/jkr555/arm/guide/ch12_cache/cache.h
/home/jkr555/arm/guide/ch12_cache/cacheTest.c
/home/jkr555/arm/guide/ch12_cache/cleancachebytest.s
/home/jkr555/arm/guide/ch12_cache/cleancachebyway.s
/home/jkr555/arm/guide/ch12_cache/cleancachexscale.s
/home/jkr555/arm/guide/ch12_cache/cleanflushcacheregion.s
/home/jkr555/arm/guide/ch12_cache/enableCache.s
/home/jkr555/arm/guide/ch12_cache/flushcache.s
/home/jkr555/arm/guide/ch12_cache/lockcachebyLbit.s
/home/jkr555/arm/guide/ch12_cache/lockcachebyregion.s
/home/jkr555/arm/guide/ch12_cache/lockcachebyway.s
/home/jkr555/arm/guide/ch12_cache/main.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/led.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/led.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/start.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/start.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/startx.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/swiapi.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/swis.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task1/types.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/led.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/led.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/start.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/start.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/startx.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/swiapi.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/swis.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task2/types.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/com.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/com.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/readline.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/readline.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/serial.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/serial.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/shell.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/shell.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/start.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/startx.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/swiapi.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/swis.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/apps/task3/types.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/ddf_tree.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/led_driver.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/led_driver.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_driver.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_driver.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/devices/serial_macros.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/events_init.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/events_init.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/irq_handler.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/swi_handler.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/swis.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/tick_service.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/events/tick_service.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/all.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/led.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/headers/macros.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/init.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/cm940iap/mpupcb.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/jump.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/swiapi.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/data.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/devices/ddf_types.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/irq.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/async.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mem_init.c
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mem_init.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/mpu.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/memory/regions.h
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/sal.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/start.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/swi.s
/home/jkr555/arm/guide/ch13_mpu/GNU/mpuSLOS/build/src/undef.s
/home/jkr555/arm/guide/ch13_mpu/ch13_examples/main.c
/home/jkr555/arm/guide/ch13_mpu/ch13_examples/mpu.c
/home/jkr555/arm/guide/ch13_mpu/ch13_examples/protection.h
/home/jkr555/arm/guide/ch13_mpu/ch13_examples/regions.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/led.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/led.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/start.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/start.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/swis.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task1/types.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/led.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/led.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/start.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/start.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/swis.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task2/types.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/com.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/com.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/readline.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/readline.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/serial.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/serial.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/shell.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/shell.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/start.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/swis.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/apps/task3/types.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/ddf_tree.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/led_driver.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/led_driver.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_driver.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_driver.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/devices/serial_macros.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/events_init.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/events_init.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/irq_handler.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/swi_handler.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/swis.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/tick_service.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/events/tick_service.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/all.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/led.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/headers/macros.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/init.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/cm940iap/mpupcb.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/jump.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/data.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/devices/ddf_types.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/irq.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/async.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mem_init.c
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mem_init.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/mpu.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/memory/regions.h
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/sal.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/start.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/swi.s
/home/jkr555/arm/guide/ch13_mpu/mpuSLOS/build/src/undef.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/led.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/led.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/start.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/start.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/startx.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/swiapi.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/swis.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task1/types.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/led.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/led.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/start.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/start.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/startx.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/swiapi.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/swis.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task2/types.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/com.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/com.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/readline.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/readline.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/serial.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/serial.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/shell.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/shell.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/start.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/startx.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/swiapi.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/swis.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/apps/task3/types.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/led_driver.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/led_driver.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_driver.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_driver.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/serial_macros.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/devices/tree.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/events_init.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/events_init.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/irq_handler.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/swi_handler.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/swis.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/tick_service.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/events/tick_service.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/all.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/led.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/headers/macros.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/init.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/cm920iap/mmupcb.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/jump.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/swiapi.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/data.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/devices/ddf_types.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/irq.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/async.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/mmu.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/regions.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/util.c
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/memory/util.h
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/sal.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/start.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/swi.s
/home/jkr555/arm/guide/ch14_mmu/GNU/mmuSLOS/build/src/undef.s
/home/jkr555/arm/guide/ch14_mmu/ch14_examples/main.c
/home/jkr555/arm/guide/ch14_mmu/ch14_examples/mmu.h
/home/jkr555/arm/guide/ch14_mmu/ch14_examples/mmuRoutines.c
/home/jkr555/arm/guide/ch14_mmu/ch14_examples/regions.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/led.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/led.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/start.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/start.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/swis.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task1/types.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/led.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/led.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/start.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/start.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/swis.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task2/types.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/com.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/com.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/readline.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/readline.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/serial.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/serial.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/shell.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/shell.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/start.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/apps/task3/types.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/led_driver.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/led_driver.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_driver.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_driver.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/serial_macros.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/devices/tree.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/events_init.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/events_init.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/irq_handler.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/swi_handler.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/swis.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/tick_service.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/events/tick_service.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/all.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/led.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/headers/macros.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/init.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/cm920iap/mmupcb.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/all.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/cinit.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/jump.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/uid.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/core/uid.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/data.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_frame.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_io.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_io.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/devices/ddf_types.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/events/bringup.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/events/cpsr.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/fiq.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_device.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_lldebug.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/headers/api_types.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/irq.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/async.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/mmu.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/regions.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/util.c
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/memory/util.h
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/prefetch.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/reserved.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/sal.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/scheduler.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/start.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/swi.s
/home/jkr555/arm/guide/ch14_mmu/mmuSLOS/build/src/undef.s
/usr/include/assert.h
/usr/include/math.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/alloca.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/sys/types.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/gnu/stubs-x32.h
/usr/include/wchar.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/errno.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
